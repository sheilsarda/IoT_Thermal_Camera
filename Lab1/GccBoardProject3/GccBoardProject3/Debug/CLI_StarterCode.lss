
CLI_StarterCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039c4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  000039c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000394  2000006c  00003a30  0002006c  2**2
                  ALLOC
  3 .stack        00002000  20000400  00003dc4  0002006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .debug_info   000218c8  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d84  00000000  00000000  000419b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000207b  00000000  00000000  00044739  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000650  00000000  00000000  000467b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000550  00000000  00000000  00046e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019665  00000000  00000000  00047354  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a414  00000000  00000000  000609b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000899e7  00000000  00000000  0006adcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015b4  00000000  00000000  000f47b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 24 00 20 7d 2d 00 00 75 2e 00 00 75 2e 00 00     .$. }-..u...u...
	...
      2c:	75 2e 00 00 00 00 00 00 00 00 00 00 75 2e 00 00     u...........u...
      3c:	75 2e 00 00 75 2e 00 00 75 2e 00 00 75 2e 00 00     u...u...u...u...
      4c:	75 2e 00 00 75 2e 00 00 75 2e 00 00 75 2e 00 00     u...u...u...u...
      5c:	75 2e 00 00 75 2e 00 00 d1 1a 00 00 e9 1a 00 00     u...u...........
      6c:	01 1b 00 00 19 1b 00 00 31 1b 00 00 49 1b 00 00     ........1...I...
      7c:	75 2e 00 00 75 2e 00 00 75 2e 00 00 75 2e 00 00     u...u...u...u...
      8c:	75 2e 00 00 75 2e 00 00 00 00 00 00 00 00 00 00     u...u...........
      9c:	75 2e 00 00 75 2e 00 00 75 2e 00 00 75 2e 00 00     u...u...u...u...
      ac:	75 2e 00 00 00 00 00 00                             u.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000006c 	.word	0x2000006c
      d4:	00000000 	.word	0x00000000
      d8:	000039c4 	.word	0x000039c4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000070 	.word	0x20000070
     108:	000039c4 	.word	0x000039c4
     10c:	000039c4 	.word	0x000039c4
     110:	00000000 	.word	0x00000000

00000114 <system_gclk_chan_get_config_defaults>:
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2200      	movs	r2, #0
     120:	701a      	strb	r2, [r3, #0]
     122:	46c0      	nop			; (mov r8, r8)
     124:	46bd      	mov	sp, r7
     126:	b002      	add	sp, #8
     128:	bd80      	pop	{r7, pc}

0000012a <long_division>:
     12a:	b5f0      	push	{r4, r5, r6, r7, lr}
     12c:	b08d      	sub	sp, #52	; 0x34
     12e:	af00      	add	r7, sp, #0
     130:	60b8      	str	r0, [r7, #8]
     132:	60f9      	str	r1, [r7, #12]
     134:	603a      	str	r2, [r7, #0]
     136:	607b      	str	r3, [r7, #4]
     138:	2300      	movs	r3, #0
     13a:	2400      	movs	r4, #0
     13c:	623b      	str	r3, [r7, #32]
     13e:	627c      	str	r4, [r7, #36]	; 0x24
     140:	2300      	movs	r3, #0
     142:	2400      	movs	r4, #0
     144:	61bb      	str	r3, [r7, #24]
     146:	61fc      	str	r4, [r7, #28]
     148:	233f      	movs	r3, #63	; 0x3f
     14a:	62fb      	str	r3, [r7, #44]	; 0x2c
     14c:	e053      	b.n	1f6 <long_division+0xcc>
     14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     150:	3b20      	subs	r3, #32
     152:	2b00      	cmp	r3, #0
     154:	db04      	blt.n	160 <long_division+0x36>
     156:	2201      	movs	r2, #1
     158:	409a      	lsls	r2, r3
     15a:	0013      	movs	r3, r2
     15c:	617b      	str	r3, [r7, #20]
     15e:	e00b      	b.n	178 <long_division+0x4e>
     160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     162:	2220      	movs	r2, #32
     164:	1ad3      	subs	r3, r2, r3
     166:	2201      	movs	r2, #1
     168:	40da      	lsrs	r2, r3
     16a:	0013      	movs	r3, r2
     16c:	2100      	movs	r1, #0
     16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     170:	4091      	lsls	r1, r2
     172:	000a      	movs	r2, r1
     174:	4313      	orrs	r3, r2
     176:	617b      	str	r3, [r7, #20]
     178:	2201      	movs	r2, #1
     17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     17c:	409a      	lsls	r2, r3
     17e:	0013      	movs	r3, r2
     180:	613b      	str	r3, [r7, #16]
     182:	69bb      	ldr	r3, [r7, #24]
     184:	69fc      	ldr	r4, [r7, #28]
     186:	18db      	adds	r3, r3, r3
     188:	4164      	adcs	r4, r4
     18a:	61bb      	str	r3, [r7, #24]
     18c:	61fc      	str	r4, [r7, #28]
     18e:	68bb      	ldr	r3, [r7, #8]
     190:	693a      	ldr	r2, [r7, #16]
     192:	401a      	ands	r2, r3
     194:	0015      	movs	r5, r2
     196:	68fb      	ldr	r3, [r7, #12]
     198:	697a      	ldr	r2, [r7, #20]
     19a:	401a      	ands	r2, r3
     19c:	0016      	movs	r6, r2
     19e:	002b      	movs	r3, r5
     1a0:	4333      	orrs	r3, r6
     1a2:	d007      	beq.n	1b4 <long_division+0x8a>
     1a4:	69bb      	ldr	r3, [r7, #24]
     1a6:	2201      	movs	r2, #1
     1a8:	4313      	orrs	r3, r2
     1aa:	61bb      	str	r3, [r7, #24]
     1ac:	69fb      	ldr	r3, [r7, #28]
     1ae:	2200      	movs	r2, #0
     1b0:	4313      	orrs	r3, r2
     1b2:	61fb      	str	r3, [r7, #28]
     1b4:	687a      	ldr	r2, [r7, #4]
     1b6:	69fb      	ldr	r3, [r7, #28]
     1b8:	429a      	cmp	r2, r3
     1ba:	d819      	bhi.n	1f0 <long_division+0xc6>
     1bc:	687a      	ldr	r2, [r7, #4]
     1be:	69fb      	ldr	r3, [r7, #28]
     1c0:	429a      	cmp	r2, r3
     1c2:	d103      	bne.n	1cc <long_division+0xa2>
     1c4:	683a      	ldr	r2, [r7, #0]
     1c6:	69bb      	ldr	r3, [r7, #24]
     1c8:	429a      	cmp	r2, r3
     1ca:	d811      	bhi.n	1f0 <long_division+0xc6>
     1cc:	69b9      	ldr	r1, [r7, #24]
     1ce:	69fa      	ldr	r2, [r7, #28]
     1d0:	683b      	ldr	r3, [r7, #0]
     1d2:	687c      	ldr	r4, [r7, #4]
     1d4:	1ac9      	subs	r1, r1, r3
     1d6:	41a2      	sbcs	r2, r4
     1d8:	000b      	movs	r3, r1
     1da:	0014      	movs	r4, r2
     1dc:	61bb      	str	r3, [r7, #24]
     1de:	61fc      	str	r4, [r7, #28]
     1e0:	6a3a      	ldr	r2, [r7, #32]
     1e2:	693b      	ldr	r3, [r7, #16]
     1e4:	4313      	orrs	r3, r2
     1e6:	623b      	str	r3, [r7, #32]
     1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     1ea:	697b      	ldr	r3, [r7, #20]
     1ec:	4313      	orrs	r3, r2
     1ee:	627b      	str	r3, [r7, #36]	; 0x24
     1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     1f2:	3b01      	subs	r3, #1
     1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
     1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     1f8:	2b00      	cmp	r3, #0
     1fa:	daa8      	bge.n	14e <long_division+0x24>
     1fc:	6a3b      	ldr	r3, [r7, #32]
     1fe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
     200:	0018      	movs	r0, r3
     202:	0021      	movs	r1, r4
     204:	46bd      	mov	sp, r7
     206:	b00d      	add	sp, #52	; 0x34
     208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000020a <_sercom_get_sync_baud_val>:
     20a:	b580      	push	{r7, lr}
     20c:	b086      	sub	sp, #24
     20e:	af00      	add	r7, sp, #0
     210:	60f8      	str	r0, [r7, #12]
     212:	60b9      	str	r1, [r7, #8]
     214:	607a      	str	r2, [r7, #4]
     216:	2316      	movs	r3, #22
     218:	18fb      	adds	r3, r7, r3
     21a:	2200      	movs	r2, #0
     21c:	801a      	strh	r2, [r3, #0]
     21e:	68bb      	ldr	r3, [r7, #8]
     220:	613b      	str	r3, [r7, #16]
     222:	68bb      	ldr	r3, [r7, #8]
     224:	085a      	lsrs	r2, r3, #1
     226:	68fb      	ldr	r3, [r7, #12]
     228:	429a      	cmp	r2, r3
     22a:	d201      	bcs.n	230 <_sercom_get_sync_baud_val+0x26>
     22c:	2340      	movs	r3, #64	; 0x40
     22e:	e026      	b.n	27e <_sercom_get_sync_baud_val+0x74>
     230:	68bb      	ldr	r3, [r7, #8]
     232:	085b      	lsrs	r3, r3, #1
     234:	613b      	str	r3, [r7, #16]
     236:	e00a      	b.n	24e <_sercom_get_sync_baud_val+0x44>
     238:	693a      	ldr	r2, [r7, #16]
     23a:	68fb      	ldr	r3, [r7, #12]
     23c:	1ad3      	subs	r3, r2, r3
     23e:	613b      	str	r3, [r7, #16]
     240:	2316      	movs	r3, #22
     242:	18fb      	adds	r3, r7, r3
     244:	881a      	ldrh	r2, [r3, #0]
     246:	2316      	movs	r3, #22
     248:	18fb      	adds	r3, r7, r3
     24a:	3201      	adds	r2, #1
     24c:	801a      	strh	r2, [r3, #0]
     24e:	693a      	ldr	r2, [r7, #16]
     250:	68fb      	ldr	r3, [r7, #12]
     252:	429a      	cmp	r2, r3
     254:	d2f0      	bcs.n	238 <_sercom_get_sync_baud_val+0x2e>
     256:	2316      	movs	r3, #22
     258:	18fb      	adds	r3, r7, r3
     25a:	2216      	movs	r2, #22
     25c:	18ba      	adds	r2, r7, r2
     25e:	8812      	ldrh	r2, [r2, #0]
     260:	3a01      	subs	r2, #1
     262:	801a      	strh	r2, [r3, #0]
     264:	2316      	movs	r3, #22
     266:	18fb      	adds	r3, r7, r3
     268:	881b      	ldrh	r3, [r3, #0]
     26a:	2bff      	cmp	r3, #255	; 0xff
     26c:	d901      	bls.n	272 <_sercom_get_sync_baud_val+0x68>
     26e:	2340      	movs	r3, #64	; 0x40
     270:	e005      	b.n	27e <_sercom_get_sync_baud_val+0x74>
     272:	687b      	ldr	r3, [r7, #4]
     274:	2216      	movs	r2, #22
     276:	18ba      	adds	r2, r7, r2
     278:	8812      	ldrh	r2, [r2, #0]
     27a:	801a      	strh	r2, [r3, #0]
     27c:	2300      	movs	r3, #0
     27e:	0018      	movs	r0, r3
     280:	46bd      	mov	sp, r7
     282:	b006      	add	sp, #24
     284:	bd80      	pop	{r7, pc}
	...

00000288 <_sercom_get_async_baud_val>:
     288:	b5f0      	push	{r4, r5, r6, r7, lr}
     28a:	b0a1      	sub	sp, #132	; 0x84
     28c:	af00      	add	r7, sp, #0
     28e:	64f8      	str	r0, [r7, #76]	; 0x4c
     290:	64b9      	str	r1, [r7, #72]	; 0x48
     292:	647a      	str	r2, [r7, #68]	; 0x44
     294:	2243      	movs	r2, #67	; 0x43
     296:	18ba      	adds	r2, r7, r2
     298:	7013      	strb	r3, [r2, #0]
     29a:	2300      	movs	r3, #0
     29c:	2400      	movs	r4, #0
     29e:	673b      	str	r3, [r7, #112]	; 0x70
     2a0:	677c      	str	r4, [r7, #116]	; 0x74
     2a2:	2300      	movs	r3, #0
     2a4:	2400      	movs	r4, #0
     2a6:	66bb      	str	r3, [r7, #104]	; 0x68
     2a8:	66fc      	str	r4, [r7, #108]	; 0x6c
     2aa:	2300      	movs	r3, #0
     2ac:	2400      	movs	r4, #0
     2ae:	67bb      	str	r3, [r7, #120]	; 0x78
     2b0:	67fc      	str	r4, [r7, #124]	; 0x7c
     2b2:	2300      	movs	r3, #0
     2b4:	667b      	str	r3, [r7, #100]	; 0x64
     2b6:	2358      	movs	r3, #88	; 0x58
     2b8:	2240      	movs	r2, #64	; 0x40
     2ba:	4694      	mov	ip, r2
     2bc:	44bc      	add	ip, r7
     2be:	4463      	add	r3, ip
     2c0:	781a      	ldrb	r2, [r3, #0]
     2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     2c4:	435a      	muls	r2, r3
     2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     2c8:	429a      	cmp	r2, r3
     2ca:	d901      	bls.n	2d0 <_sercom_get_async_baud_val+0x48>
     2cc:	2340      	movs	r3, #64	; 0x40
     2ce:	e0b3      	b.n	438 <_sercom_get_async_baud_val+0x1b0>
     2d0:	2343      	movs	r3, #67	; 0x43
     2d2:	18fb      	adds	r3, r7, r3
     2d4:	781b      	ldrb	r3, [r3, #0]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d13d      	bne.n	356 <_sercom_get_async_baud_val+0xce>
     2da:	2358      	movs	r3, #88	; 0x58
     2dc:	2240      	movs	r2, #64	; 0x40
     2de:	4694      	mov	ip, r2
     2e0:	44bc      	add	ip, r7
     2e2:	4463      	add	r3, ip
     2e4:	781b      	ldrb	r3, [r3, #0]
     2e6:	b2db      	uxtb	r3, r3
     2e8:	613b      	str	r3, [r7, #16]
     2ea:	2300      	movs	r3, #0
     2ec:	617b      	str	r3, [r7, #20]
     2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     2f0:	60bb      	str	r3, [r7, #8]
     2f2:	2300      	movs	r3, #0
     2f4:	60fb      	str	r3, [r7, #12]
     2f6:	4c52      	ldr	r4, [pc, #328]	; (440 <_sercom_get_async_baud_val+0x1b8>)
     2f8:	68ba      	ldr	r2, [r7, #8]
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	6938      	ldr	r0, [r7, #16]
     2fe:	6979      	ldr	r1, [r7, #20]
     300:	47a0      	blx	r4
     302:	0003      	movs	r3, r0
     304:	000c      	movs	r4, r1
     306:	001b      	movs	r3, r3
     308:	65fb      	str	r3, [r7, #92]	; 0x5c
     30a:	2300      	movs	r3, #0
     30c:	65bb      	str	r3, [r7, #88]	; 0x58
     30e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     310:	603b      	str	r3, [r7, #0]
     312:	2300      	movs	r3, #0
     314:	607b      	str	r3, [r7, #4]
     316:	6db8      	ldr	r0, [r7, #88]	; 0x58
     318:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     31a:	683a      	ldr	r2, [r7, #0]
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	4c49      	ldr	r4, [pc, #292]	; (444 <_sercom_get_async_baud_val+0x1bc>)
     320:	47a0      	blx	r4
     322:	0003      	movs	r3, r0
     324:	000c      	movs	r4, r1
     326:	673b      	str	r3, [r7, #112]	; 0x70
     328:	677c      	str	r4, [r7, #116]	; 0x74
     32a:	2100      	movs	r1, #0
     32c:	2201      	movs	r2, #1
     32e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     330:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     332:	1ac9      	subs	r1, r1, r3
     334:	41a2      	sbcs	r2, r4
     336:	000b      	movs	r3, r1
     338:	0014      	movs	r4, r2
     33a:	66bb      	str	r3, [r7, #104]	; 0x68
     33c:	66fc      	str	r4, [r7, #108]	; 0x6c
     33e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     340:	0c1b      	lsrs	r3, r3, #16
     342:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     344:	0416      	lsls	r6, r2, #16
     346:	431e      	orrs	r6, r3
     348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     34a:	041d      	lsls	r5, r3, #16
     34c:	0033      	movs	r3, r6
     34e:	67bb      	str	r3, [r7, #120]	; 0x78
     350:	2300      	movs	r3, #0
     352:	67fb      	str	r3, [r7, #124]	; 0x7c
     354:	e06a      	b.n	42c <_sercom_get_async_baud_val+0x1a4>
     356:	2343      	movs	r3, #67	; 0x43
     358:	18fb      	adds	r3, r7, r3
     35a:	781b      	ldrb	r3, [r3, #0]
     35c:	2b01      	cmp	r3, #1
     35e:	d165      	bne.n	42c <_sercom_get_async_baud_val+0x1a4>
     360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     362:	633b      	str	r3, [r7, #48]	; 0x30
     364:	2300      	movs	r3, #0
     366:	637b      	str	r3, [r7, #52]	; 0x34
     368:	2358      	movs	r3, #88	; 0x58
     36a:	2240      	movs	r2, #64	; 0x40
     36c:	4694      	mov	ip, r2
     36e:	44bc      	add	ip, r7
     370:	4463      	add	r3, ip
     372:	781b      	ldrb	r3, [r3, #0]
     374:	b2db      	uxtb	r3, r3
     376:	62bb      	str	r3, [r7, #40]	; 0x28
     378:	2300      	movs	r3, #0
     37a:	62fb      	str	r3, [r7, #44]	; 0x2c
     37c:	4c30      	ldr	r4, [pc, #192]	; (440 <_sercom_get_async_baud_val+0x1b8>)
     37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     382:	6b38      	ldr	r0, [r7, #48]	; 0x30
     384:	6b79      	ldr	r1, [r7, #52]	; 0x34
     386:	47a0      	blx	r4
     388:	0003      	movs	r3, r0
     38a:	000c      	movs	r4, r1
     38c:	65bb      	str	r3, [r7, #88]	; 0x58
     38e:	65fc      	str	r4, [r7, #92]	; 0x5c
     390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     392:	623b      	str	r3, [r7, #32]
     394:	2300      	movs	r3, #0
     396:	627b      	str	r3, [r7, #36]	; 0x24
     398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     39a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     39c:	001a      	movs	r2, r3
     39e:	0023      	movs	r3, r4
     3a0:	6a38      	ldr	r0, [r7, #32]
     3a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
     3a4:	4c27      	ldr	r4, [pc, #156]	; (444 <_sercom_get_async_baud_val+0x1bc>)
     3a6:	47a0      	blx	r4
     3a8:	0003      	movs	r3, r0
     3aa:	000c      	movs	r4, r1
     3ac:	667b      	str	r3, [r7, #100]	; 0x64
     3ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     3b0:	2380      	movs	r3, #128	; 0x80
     3b2:	019b      	lsls	r3, r3, #6
     3b4:	429a      	cmp	r2, r3
     3b6:	d901      	bls.n	3bc <_sercom_get_async_baud_val+0x134>
     3b8:	2340      	movs	r3, #64	; 0x40
     3ba:	e03d      	b.n	438 <_sercom_get_async_baud_val+0x1b0>
     3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     3be:	61bb      	str	r3, [r7, #24]
     3c0:	2300      	movs	r3, #0
     3c2:	61fb      	str	r3, [r7, #28]
     3c4:	69b9      	ldr	r1, [r7, #24]
     3c6:	69fa      	ldr	r2, [r7, #28]
     3c8:	000b      	movs	r3, r1
     3ca:	0f5b      	lsrs	r3, r3, #29
     3cc:	0010      	movs	r0, r2
     3ce:	00c0      	lsls	r0, r0, #3
     3d0:	63f8      	str	r0, [r7, #60]	; 0x3c
     3d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     3d4:	4318      	orrs	r0, r3
     3d6:	63f8      	str	r0, [r7, #60]	; 0x3c
     3d8:	000b      	movs	r3, r1
     3da:	00db      	lsls	r3, r3, #3
     3dc:	63bb      	str	r3, [r7, #56]	; 0x38
     3de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     3e0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     3e2:	001a      	movs	r2, r3
     3e4:	0023      	movs	r3, r4
     3e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     3e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     3ea:	4c16      	ldr	r4, [pc, #88]	; (444 <_sercom_get_async_baud_val+0x1bc>)
     3ec:	47a0      	blx	r4
     3ee:	0003      	movs	r3, r0
     3f0:	000c      	movs	r4, r1
     3f2:	65bb      	str	r3, [r7, #88]	; 0x58
     3f4:	65fc      	str	r4, [r7, #92]	; 0x5c
     3f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     3f8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     3fa:	b2d9      	uxtb	r1, r3
     3fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     3fe:	b2db      	uxtb	r3, r3
     400:	00db      	lsls	r3, r3, #3
     402:	b2da      	uxtb	r2, r3
     404:	2317      	movs	r3, #23
     406:	2040      	movs	r0, #64	; 0x40
     408:	4684      	mov	ip, r0
     40a:	44bc      	add	ip, r7
     40c:	4463      	add	r3, ip
     40e:	1a8a      	subs	r2, r1, r2
     410:	701a      	strb	r2, [r3, #0]
     412:	2317      	movs	r3, #23
     414:	2240      	movs	r2, #64	; 0x40
     416:	4694      	mov	ip, r2
     418:	44bc      	add	ip, r7
     41a:	4463      	add	r3, ip
     41c:	781b      	ldrb	r3, [r3, #0]
     41e:	035b      	lsls	r3, r3, #13
     420:	001a      	movs	r2, r3
     422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     424:	4313      	orrs	r3, r2
     426:	67bb      	str	r3, [r7, #120]	; 0x78
     428:	2300      	movs	r3, #0
     42a:	67fb      	str	r3, [r7, #124]	; 0x7c
     42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     42e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     430:	b29a      	uxth	r2, r3
     432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     434:	801a      	strh	r2, [r3, #0]
     436:	2300      	movs	r3, #0
     438:	0018      	movs	r0, r3
     43a:	46bd      	mov	sp, r7
     43c:	b021      	add	sp, #132	; 0x84
     43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     440:	00003609 	.word	0x00003609
     444:	0000012b 	.word	0x0000012b

00000448 <sercom_set_gclk_generator>:
     448:	b580      	push	{r7, lr}
     44a:	b084      	sub	sp, #16
     44c:	af00      	add	r7, sp, #0
     44e:	0002      	movs	r2, r0
     450:	1dfb      	adds	r3, r7, #7
     452:	701a      	strb	r2, [r3, #0]
     454:	1dbb      	adds	r3, r7, #6
     456:	1c0a      	adds	r2, r1, #0
     458:	701a      	strb	r2, [r3, #0]
     45a:	4b1a      	ldr	r3, [pc, #104]	; (4c4 <sercom_set_gclk_generator+0x7c>)
     45c:	781b      	ldrb	r3, [r3, #0]
     45e:	2201      	movs	r2, #1
     460:	4053      	eors	r3, r2
     462:	b2db      	uxtb	r3, r3
     464:	2b00      	cmp	r3, #0
     466:	d103      	bne.n	470 <sercom_set_gclk_generator+0x28>
     468:	1dbb      	adds	r3, r7, #6
     46a:	781b      	ldrb	r3, [r3, #0]
     46c:	2b00      	cmp	r3, #0
     46e:	d01b      	beq.n	4a8 <sercom_set_gclk_generator+0x60>
     470:	230c      	movs	r3, #12
     472:	18fb      	adds	r3, r7, r3
     474:	0018      	movs	r0, r3
     476:	4b14      	ldr	r3, [pc, #80]	; (4c8 <sercom_set_gclk_generator+0x80>)
     478:	4798      	blx	r3
     47a:	230c      	movs	r3, #12
     47c:	18fb      	adds	r3, r7, r3
     47e:	1dfa      	adds	r2, r7, #7
     480:	7812      	ldrb	r2, [r2, #0]
     482:	701a      	strb	r2, [r3, #0]
     484:	230c      	movs	r3, #12
     486:	18fb      	adds	r3, r7, r3
     488:	0019      	movs	r1, r3
     48a:	2013      	movs	r0, #19
     48c:	4b0f      	ldr	r3, [pc, #60]	; (4cc <sercom_set_gclk_generator+0x84>)
     48e:	4798      	blx	r3
     490:	2013      	movs	r0, #19
     492:	4b0f      	ldr	r3, [pc, #60]	; (4d0 <sercom_set_gclk_generator+0x88>)
     494:	4798      	blx	r3
     496:	4b0b      	ldr	r3, [pc, #44]	; (4c4 <sercom_set_gclk_generator+0x7c>)
     498:	1dfa      	adds	r2, r7, #7
     49a:	7812      	ldrb	r2, [r2, #0]
     49c:	705a      	strb	r2, [r3, #1]
     49e:	4b09      	ldr	r3, [pc, #36]	; (4c4 <sercom_set_gclk_generator+0x7c>)
     4a0:	2201      	movs	r2, #1
     4a2:	701a      	strb	r2, [r3, #0]
     4a4:	2300      	movs	r3, #0
     4a6:	e008      	b.n	4ba <sercom_set_gclk_generator+0x72>
     4a8:	4b06      	ldr	r3, [pc, #24]	; (4c4 <sercom_set_gclk_generator+0x7c>)
     4aa:	785b      	ldrb	r3, [r3, #1]
     4ac:	1dfa      	adds	r2, r7, #7
     4ae:	7812      	ldrb	r2, [r2, #0]
     4b0:	429a      	cmp	r2, r3
     4b2:	d101      	bne.n	4b8 <sercom_set_gclk_generator+0x70>
     4b4:	2300      	movs	r3, #0
     4b6:	e000      	b.n	4ba <sercom_set_gclk_generator+0x72>
     4b8:	231d      	movs	r3, #29
     4ba:	0018      	movs	r0, r3
     4bc:	46bd      	mov	sp, r7
     4be:	b004      	add	sp, #16
     4c0:	bd80      	pop	{r7, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	20000088 	.word	0x20000088
     4c8:	00000115 	.word	0x00000115
     4cc:	00002a09 	.word	0x00002a09
     4d0:	00002a4d 	.word	0x00002a4d

000004d4 <_sercom_get_default_pad>:
     4d4:	b580      	push	{r7, lr}
     4d6:	b082      	sub	sp, #8
     4d8:	af00      	add	r7, sp, #0
     4da:	6078      	str	r0, [r7, #4]
     4dc:	000a      	movs	r2, r1
     4de:	1cfb      	adds	r3, r7, #3
     4e0:	701a      	strb	r2, [r3, #0]
     4e2:	687b      	ldr	r3, [r7, #4]
     4e4:	4a4d      	ldr	r2, [pc, #308]	; (61c <_sercom_get_default_pad+0x148>)
     4e6:	4293      	cmp	r3, r2
     4e8:	d03f      	beq.n	56a <_sercom_get_default_pad+0x96>
     4ea:	4a4c      	ldr	r2, [pc, #304]	; (61c <_sercom_get_default_pad+0x148>)
     4ec:	4293      	cmp	r3, r2
     4ee:	d806      	bhi.n	4fe <_sercom_get_default_pad+0x2a>
     4f0:	4a4b      	ldr	r2, [pc, #300]	; (620 <_sercom_get_default_pad+0x14c>)
     4f2:	4293      	cmp	r3, r2
     4f4:	d00f      	beq.n	516 <_sercom_get_default_pad+0x42>
     4f6:	4a4b      	ldr	r2, [pc, #300]	; (624 <_sercom_get_default_pad+0x150>)
     4f8:	4293      	cmp	r3, r2
     4fa:	d021      	beq.n	540 <_sercom_get_default_pad+0x6c>
     4fc:	e089      	b.n	612 <_sercom_get_default_pad+0x13e>
     4fe:	4a4a      	ldr	r2, [pc, #296]	; (628 <_sercom_get_default_pad+0x154>)
     500:	4293      	cmp	r3, r2
     502:	d100      	bne.n	506 <_sercom_get_default_pad+0x32>
     504:	e05b      	b.n	5be <_sercom_get_default_pad+0xea>
     506:	4a49      	ldr	r2, [pc, #292]	; (62c <_sercom_get_default_pad+0x158>)
     508:	4293      	cmp	r3, r2
     50a:	d100      	bne.n	50e <_sercom_get_default_pad+0x3a>
     50c:	e06c      	b.n	5e8 <_sercom_get_default_pad+0x114>
     50e:	4a48      	ldr	r2, [pc, #288]	; (630 <_sercom_get_default_pad+0x15c>)
     510:	4293      	cmp	r3, r2
     512:	d03f      	beq.n	594 <_sercom_get_default_pad+0xc0>
     514:	e07d      	b.n	612 <_sercom_get_default_pad+0x13e>
     516:	1cfb      	adds	r3, r7, #3
     518:	781b      	ldrb	r3, [r3, #0]
     51a:	2b01      	cmp	r3, #1
     51c:	d00a      	beq.n	534 <_sercom_get_default_pad+0x60>
     51e:	dc02      	bgt.n	526 <_sercom_get_default_pad+0x52>
     520:	2b00      	cmp	r3, #0
     522:	d005      	beq.n	530 <_sercom_get_default_pad+0x5c>
     524:	e075      	b.n	612 <_sercom_get_default_pad+0x13e>
     526:	2b02      	cmp	r3, #2
     528:	d006      	beq.n	538 <_sercom_get_default_pad+0x64>
     52a:	2b03      	cmp	r3, #3
     52c:	d006      	beq.n	53c <_sercom_get_default_pad+0x68>
     52e:	e070      	b.n	612 <_sercom_get_default_pad+0x13e>
     530:	4b40      	ldr	r3, [pc, #256]	; (634 <_sercom_get_default_pad+0x160>)
     532:	e06f      	b.n	614 <_sercom_get_default_pad+0x140>
     534:	4b40      	ldr	r3, [pc, #256]	; (638 <_sercom_get_default_pad+0x164>)
     536:	e06d      	b.n	614 <_sercom_get_default_pad+0x140>
     538:	4b40      	ldr	r3, [pc, #256]	; (63c <_sercom_get_default_pad+0x168>)
     53a:	e06b      	b.n	614 <_sercom_get_default_pad+0x140>
     53c:	4b40      	ldr	r3, [pc, #256]	; (640 <_sercom_get_default_pad+0x16c>)
     53e:	e069      	b.n	614 <_sercom_get_default_pad+0x140>
     540:	1cfb      	adds	r3, r7, #3
     542:	781b      	ldrb	r3, [r3, #0]
     544:	2b01      	cmp	r3, #1
     546:	d00a      	beq.n	55e <_sercom_get_default_pad+0x8a>
     548:	dc02      	bgt.n	550 <_sercom_get_default_pad+0x7c>
     54a:	2b00      	cmp	r3, #0
     54c:	d005      	beq.n	55a <_sercom_get_default_pad+0x86>
     54e:	e060      	b.n	612 <_sercom_get_default_pad+0x13e>
     550:	2b02      	cmp	r3, #2
     552:	d006      	beq.n	562 <_sercom_get_default_pad+0x8e>
     554:	2b03      	cmp	r3, #3
     556:	d006      	beq.n	566 <_sercom_get_default_pad+0x92>
     558:	e05b      	b.n	612 <_sercom_get_default_pad+0x13e>
     55a:	2303      	movs	r3, #3
     55c:	e05a      	b.n	614 <_sercom_get_default_pad+0x140>
     55e:	4b39      	ldr	r3, [pc, #228]	; (644 <_sercom_get_default_pad+0x170>)
     560:	e058      	b.n	614 <_sercom_get_default_pad+0x140>
     562:	4b39      	ldr	r3, [pc, #228]	; (648 <_sercom_get_default_pad+0x174>)
     564:	e056      	b.n	614 <_sercom_get_default_pad+0x140>
     566:	4b39      	ldr	r3, [pc, #228]	; (64c <_sercom_get_default_pad+0x178>)
     568:	e054      	b.n	614 <_sercom_get_default_pad+0x140>
     56a:	1cfb      	adds	r3, r7, #3
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	2b01      	cmp	r3, #1
     570:	d00a      	beq.n	588 <_sercom_get_default_pad+0xb4>
     572:	dc02      	bgt.n	57a <_sercom_get_default_pad+0xa6>
     574:	2b00      	cmp	r3, #0
     576:	d005      	beq.n	584 <_sercom_get_default_pad+0xb0>
     578:	e04b      	b.n	612 <_sercom_get_default_pad+0x13e>
     57a:	2b02      	cmp	r3, #2
     57c:	d006      	beq.n	58c <_sercom_get_default_pad+0xb8>
     57e:	2b03      	cmp	r3, #3
     580:	d006      	beq.n	590 <_sercom_get_default_pad+0xbc>
     582:	e046      	b.n	612 <_sercom_get_default_pad+0x13e>
     584:	4b32      	ldr	r3, [pc, #200]	; (650 <_sercom_get_default_pad+0x17c>)
     586:	e045      	b.n	614 <_sercom_get_default_pad+0x140>
     588:	4b32      	ldr	r3, [pc, #200]	; (654 <_sercom_get_default_pad+0x180>)
     58a:	e043      	b.n	614 <_sercom_get_default_pad+0x140>
     58c:	4b32      	ldr	r3, [pc, #200]	; (658 <_sercom_get_default_pad+0x184>)
     58e:	e041      	b.n	614 <_sercom_get_default_pad+0x140>
     590:	4b32      	ldr	r3, [pc, #200]	; (65c <_sercom_get_default_pad+0x188>)
     592:	e03f      	b.n	614 <_sercom_get_default_pad+0x140>
     594:	1cfb      	adds	r3, r7, #3
     596:	781b      	ldrb	r3, [r3, #0]
     598:	2b01      	cmp	r3, #1
     59a:	d00a      	beq.n	5b2 <_sercom_get_default_pad+0xde>
     59c:	dc02      	bgt.n	5a4 <_sercom_get_default_pad+0xd0>
     59e:	2b00      	cmp	r3, #0
     5a0:	d005      	beq.n	5ae <_sercom_get_default_pad+0xda>
     5a2:	e036      	b.n	612 <_sercom_get_default_pad+0x13e>
     5a4:	2b02      	cmp	r3, #2
     5a6:	d006      	beq.n	5b6 <_sercom_get_default_pad+0xe2>
     5a8:	2b03      	cmp	r3, #3
     5aa:	d006      	beq.n	5ba <_sercom_get_default_pad+0xe6>
     5ac:	e031      	b.n	612 <_sercom_get_default_pad+0x13e>
     5ae:	4b2c      	ldr	r3, [pc, #176]	; (660 <_sercom_get_default_pad+0x18c>)
     5b0:	e030      	b.n	614 <_sercom_get_default_pad+0x140>
     5b2:	4b2c      	ldr	r3, [pc, #176]	; (664 <_sercom_get_default_pad+0x190>)
     5b4:	e02e      	b.n	614 <_sercom_get_default_pad+0x140>
     5b6:	4b2c      	ldr	r3, [pc, #176]	; (668 <_sercom_get_default_pad+0x194>)
     5b8:	e02c      	b.n	614 <_sercom_get_default_pad+0x140>
     5ba:	4b2c      	ldr	r3, [pc, #176]	; (66c <_sercom_get_default_pad+0x198>)
     5bc:	e02a      	b.n	614 <_sercom_get_default_pad+0x140>
     5be:	1cfb      	adds	r3, r7, #3
     5c0:	781b      	ldrb	r3, [r3, #0]
     5c2:	2b01      	cmp	r3, #1
     5c4:	d00a      	beq.n	5dc <_sercom_get_default_pad+0x108>
     5c6:	dc02      	bgt.n	5ce <_sercom_get_default_pad+0xfa>
     5c8:	2b00      	cmp	r3, #0
     5ca:	d005      	beq.n	5d8 <_sercom_get_default_pad+0x104>
     5cc:	e021      	b.n	612 <_sercom_get_default_pad+0x13e>
     5ce:	2b02      	cmp	r3, #2
     5d0:	d006      	beq.n	5e0 <_sercom_get_default_pad+0x10c>
     5d2:	2b03      	cmp	r3, #3
     5d4:	d006      	beq.n	5e4 <_sercom_get_default_pad+0x110>
     5d6:	e01c      	b.n	612 <_sercom_get_default_pad+0x13e>
     5d8:	4b25      	ldr	r3, [pc, #148]	; (670 <_sercom_get_default_pad+0x19c>)
     5da:	e01b      	b.n	614 <_sercom_get_default_pad+0x140>
     5dc:	4b25      	ldr	r3, [pc, #148]	; (674 <_sercom_get_default_pad+0x1a0>)
     5de:	e019      	b.n	614 <_sercom_get_default_pad+0x140>
     5e0:	4b25      	ldr	r3, [pc, #148]	; (678 <_sercom_get_default_pad+0x1a4>)
     5e2:	e017      	b.n	614 <_sercom_get_default_pad+0x140>
     5e4:	4b25      	ldr	r3, [pc, #148]	; (67c <_sercom_get_default_pad+0x1a8>)
     5e6:	e015      	b.n	614 <_sercom_get_default_pad+0x140>
     5e8:	1cfb      	adds	r3, r7, #3
     5ea:	781b      	ldrb	r3, [r3, #0]
     5ec:	2b01      	cmp	r3, #1
     5ee:	d00a      	beq.n	606 <_sercom_get_default_pad+0x132>
     5f0:	dc02      	bgt.n	5f8 <_sercom_get_default_pad+0x124>
     5f2:	2b00      	cmp	r3, #0
     5f4:	d005      	beq.n	602 <_sercom_get_default_pad+0x12e>
     5f6:	e00c      	b.n	612 <_sercom_get_default_pad+0x13e>
     5f8:	2b02      	cmp	r3, #2
     5fa:	d006      	beq.n	60a <_sercom_get_default_pad+0x136>
     5fc:	2b03      	cmp	r3, #3
     5fe:	d006      	beq.n	60e <_sercom_get_default_pad+0x13a>
     600:	e007      	b.n	612 <_sercom_get_default_pad+0x13e>
     602:	4b1f      	ldr	r3, [pc, #124]	; (680 <_sercom_get_default_pad+0x1ac>)
     604:	e006      	b.n	614 <_sercom_get_default_pad+0x140>
     606:	4b1f      	ldr	r3, [pc, #124]	; (684 <_sercom_get_default_pad+0x1b0>)
     608:	e004      	b.n	614 <_sercom_get_default_pad+0x140>
     60a:	4b1f      	ldr	r3, [pc, #124]	; (688 <_sercom_get_default_pad+0x1b4>)
     60c:	e002      	b.n	614 <_sercom_get_default_pad+0x140>
     60e:	4b1f      	ldr	r3, [pc, #124]	; (68c <_sercom_get_default_pad+0x1b8>)
     610:	e000      	b.n	614 <_sercom_get_default_pad+0x140>
     612:	2300      	movs	r3, #0
     614:	0018      	movs	r0, r3
     616:	46bd      	mov	sp, r7
     618:	b002      	add	sp, #8
     61a:	bd80      	pop	{r7, pc}
     61c:	42001000 	.word	0x42001000
     620:	42000800 	.word	0x42000800
     624:	42000c00 	.word	0x42000c00
     628:	42001800 	.word	0x42001800
     62c:	42001c00 	.word	0x42001c00
     630:	42001400 	.word	0x42001400
     634:	00040003 	.word	0x00040003
     638:	00050003 	.word	0x00050003
     63c:	00060003 	.word	0x00060003
     640:	00070003 	.word	0x00070003
     644:	00010003 	.word	0x00010003
     648:	001e0003 	.word	0x001e0003
     64c:	001f0003 	.word	0x001f0003
     650:	00080003 	.word	0x00080003
     654:	00090003 	.word	0x00090003
     658:	000a0003 	.word	0x000a0003
     65c:	000b0003 	.word	0x000b0003
     660:	00100003 	.word	0x00100003
     664:	00110003 	.word	0x00110003
     668:	00120003 	.word	0x00120003
     66c:	00130003 	.word	0x00130003
     670:	000c0003 	.word	0x000c0003
     674:	000d0003 	.word	0x000d0003
     678:	000e0003 	.word	0x000e0003
     67c:	000f0003 	.word	0x000f0003
     680:	00160003 	.word	0x00160003
     684:	00170003 	.word	0x00170003
     688:	00180003 	.word	0x00180003
     68c:	00190003 	.word	0x00190003

00000690 <_sercom_get_sercom_inst_index>:
     690:	b590      	push	{r4, r7, lr}
     692:	b08b      	sub	sp, #44	; 0x2c
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
     698:	230c      	movs	r3, #12
     69a:	18fb      	adds	r3, r7, r3
     69c:	4a0f      	ldr	r2, [pc, #60]	; (6dc <_sercom_get_sercom_inst_index+0x4c>)
     69e:	ca13      	ldmia	r2!, {r0, r1, r4}
     6a0:	c313      	stmia	r3!, {r0, r1, r4}
     6a2:	ca13      	ldmia	r2!, {r0, r1, r4}
     6a4:	c313      	stmia	r3!, {r0, r1, r4}
     6a6:	2300      	movs	r3, #0
     6a8:	627b      	str	r3, [r7, #36]	; 0x24
     6aa:	e00e      	b.n	6ca <_sercom_get_sercom_inst_index+0x3a>
     6ac:	230c      	movs	r3, #12
     6ae:	18fb      	adds	r3, r7, r3
     6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     6b2:	0092      	lsls	r2, r2, #2
     6b4:	58d3      	ldr	r3, [r2, r3]
     6b6:	001a      	movs	r2, r3
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	429a      	cmp	r2, r3
     6bc:	d102      	bne.n	6c4 <_sercom_get_sercom_inst_index+0x34>
     6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6c0:	b2db      	uxtb	r3, r3
     6c2:	e006      	b.n	6d2 <_sercom_get_sercom_inst_index+0x42>
     6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6c6:	3301      	adds	r3, #1
     6c8:	627b      	str	r3, [r7, #36]	; 0x24
     6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6cc:	2b05      	cmp	r3, #5
     6ce:	d9ed      	bls.n	6ac <_sercom_get_sercom_inst_index+0x1c>
     6d0:	2300      	movs	r3, #0
     6d2:	0018      	movs	r0, r3
     6d4:	46bd      	mov	sp, r7
     6d6:	b00b      	add	sp, #44	; 0x2c
     6d8:	bd90      	pop	{r4, r7, pc}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	000037d0 	.word	0x000037d0

000006e0 <advance_pointer>:

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)

 {
     6e0:	b580      	push	{r7, lr}
     6e2:	b082      	sub	sp, #8
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	7c1b      	ldrb	r3, [r3, #16]
     6ec:	2b00      	cmp	r3, #0
     6ee:	d00b      	beq.n	708 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	689b      	ldr	r3, [r3, #8]
     6f4:	1c5a      	adds	r2, r3, #1
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	68d9      	ldr	r1, [r3, #12]
     6fa:	4b10      	ldr	r3, [pc, #64]	; (73c <advance_pointer+0x5c>)
     6fc:	0010      	movs	r0, r2
     6fe:	4798      	blx	r3
     700:	000b      	movs	r3, r1
     702:	001a      	movs	r2, r3
     704:	687b      	ldr	r3, [r7, #4]
     706:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     708:	687b      	ldr	r3, [r7, #4]
     70a:	685b      	ldr	r3, [r3, #4]
     70c:	1c5a      	adds	r2, r3, #1
     70e:	687b      	ldr	r3, [r7, #4]
     710:	68d9      	ldr	r1, [r3, #12]
     712:	4b0a      	ldr	r3, [pc, #40]	; (73c <advance_pointer+0x5c>)
     714:	0010      	movs	r0, r2
     716:	4798      	blx	r3
     718:	000b      	movs	r3, r1
     71a:	001a      	movs	r2, r3
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     720:	687b      	ldr	r3, [r7, #4]
     722:	685a      	ldr	r2, [r3, #4]
     724:	687b      	ldr	r3, [r7, #4]
     726:	689b      	ldr	r3, [r3, #8]
     728:	1ad3      	subs	r3, r2, r3
     72a:	425a      	negs	r2, r3
     72c:	4153      	adcs	r3, r2
     72e:	b2da      	uxtb	r2, r3
     730:	687b      	ldr	r3, [r7, #4]
     732:	741a      	strb	r2, [r3, #16]
 }
     734:	46c0      	nop			; (mov r8, r8)
     736:	46bd      	mov	sp, r7
     738:	b002      	add	sp, #8
     73a:	bd80      	pop	{r7, pc}
     73c:	000035fd 	.word	0x000035fd

00000740 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     740:	b580      	push	{r7, lr}
     742:	b082      	sub	sp, #8
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     748:	687b      	ldr	r3, [r7, #4]
     74a:	2200      	movs	r2, #0
     74c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     74e:	687b      	ldr	r3, [r7, #4]
     750:	689b      	ldr	r3, [r3, #8]
     752:	1c5a      	adds	r2, r3, #1
     754:	687b      	ldr	r3, [r7, #4]
     756:	68d9      	ldr	r1, [r3, #12]
     758:	4b05      	ldr	r3, [pc, #20]	; (770 <retreat_pointer+0x30>)
     75a:	0010      	movs	r0, r2
     75c:	4798      	blx	r3
     75e:	000b      	movs	r3, r1
     760:	001a      	movs	r2, r3
     762:	687b      	ldr	r3, [r7, #4]
     764:	609a      	str	r2, [r3, #8]
 }
     766:	46c0      	nop			; (mov r8, r8)
     768:	46bd      	mov	sp, r7
     76a:	b002      	add	sp, #8
     76c:	bd80      	pop	{r7, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000035fd 	.word	0x000035fd

00000774 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     774:	b580      	push	{r7, lr}
     776:	b084      	sub	sp, #16
     778:	af00      	add	r7, sp, #0
     77a:	6078      	str	r0, [r7, #4]
     77c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     77e:	2014      	movs	r0, #20
     780:	4b09      	ldr	r3, [pc, #36]	; (7a8 <circular_buf_init+0x34>)
     782:	4798      	blx	r3
     784:	0003      	movs	r3, r0
     786:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     788:	68fb      	ldr	r3, [r7, #12]
     78a:	687a      	ldr	r2, [r7, #4]
     78c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     78e:	68fb      	ldr	r3, [r7, #12]
     790:	683a      	ldr	r2, [r7, #0]
     792:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     794:	68fb      	ldr	r3, [r7, #12]
     796:	0018      	movs	r0, r3
     798:	4b04      	ldr	r3, [pc, #16]	; (7ac <circular_buf_init+0x38>)
     79a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     79c:	68fb      	ldr	r3, [r7, #12]
 }
     79e:	0018      	movs	r0, r3
     7a0:	46bd      	mov	sp, r7
     7a2:	b004      	add	sp, #16
     7a4:	bd80      	pop	{r7, pc}
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	000036a5 	.word	0x000036a5
     7ac:	000007b1 	.word	0x000007b1

000007b0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     7b0:	b580      	push	{r7, lr}
     7b2:	b082      	sub	sp, #8
     7b4:	af00      	add	r7, sp, #0
     7b6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	2200      	movs	r2, #0
     7bc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	2200      	movs	r2, #0
     7c2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	2200      	movs	r2, #0
     7c8:	741a      	strb	r2, [r3, #16]
 }
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	46bd      	mov	sp, r7
     7ce:	b002      	add	sp, #8
     7d0:	bd80      	pop	{r7, pc}
	...

000007d4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     7d4:	b580      	push	{r7, lr}
     7d6:	b082      	sub	sp, #8
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
     7dc:	000a      	movs	r2, r1
     7de:	1cfb      	adds	r3, r7, #3
     7e0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	681a      	ldr	r2, [r3, #0]
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	685b      	ldr	r3, [r3, #4]
     7ea:	18d3      	adds	r3, r2, r3
     7ec:	1cfa      	adds	r2, r7, #3
     7ee:	7812      	ldrb	r2, [r2, #0]
     7f0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	0018      	movs	r0, r3
     7f6:	4b03      	ldr	r3, [pc, #12]	; (804 <circular_buf_put+0x30>)
     7f8:	4798      	blx	r3
 }
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	46bd      	mov	sp, r7
     7fe:	b002      	add	sp, #8
     800:	bd80      	pop	{r7, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	000006e1 	.word	0x000006e1

00000808 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     808:	b580      	push	{r7, lr}
     80a:	b084      	sub	sp, #16
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
     810:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     812:	2301      	movs	r3, #1
     814:	425b      	negs	r3, r3
     816:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     818:	687b      	ldr	r3, [r7, #4]
     81a:	0018      	movs	r0, r3
     81c:	4b0d      	ldr	r3, [pc, #52]	; (854 <circular_buf_get+0x4c>)
     81e:	4798      	blx	r3
     820:	0003      	movs	r3, r0
     822:	001a      	movs	r2, r3
     824:	2301      	movs	r3, #1
     826:	4053      	eors	r3, r2
     828:	b2db      	uxtb	r3, r3
     82a:	2b00      	cmp	r3, #0
     82c:	d00d      	beq.n	84a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     82e:	687b      	ldr	r3, [r7, #4]
     830:	681a      	ldr	r2, [r3, #0]
     832:	687b      	ldr	r3, [r7, #4]
     834:	689b      	ldr	r3, [r3, #8]
     836:	18d3      	adds	r3, r2, r3
     838:	781a      	ldrb	r2, [r3, #0]
     83a:	683b      	ldr	r3, [r7, #0]
     83c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     83e:	687b      	ldr	r3, [r7, #4]
     840:	0018      	movs	r0, r3
     842:	4b05      	ldr	r3, [pc, #20]	; (858 <circular_buf_get+0x50>)
     844:	4798      	blx	r3

		 r = 0;
     846:	2300      	movs	r3, #0
     848:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     84a:	68fb      	ldr	r3, [r7, #12]
 }
     84c:	0018      	movs	r0, r3
     84e:	46bd      	mov	sp, r7
     850:	b004      	add	sp, #16
     852:	bd80      	pop	{r7, pc}
     854:	0000085d 	.word	0x0000085d
     858:	00000741 	.word	0x00000741

0000085c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     85c:	b580      	push	{r7, lr}
     85e:	b082      	sub	sp, #8
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     864:	687b      	ldr	r3, [r7, #4]
     866:	7c1b      	ldrb	r3, [r3, #16]
     868:	2201      	movs	r2, #1
     86a:	4053      	eors	r3, r2
     86c:	b2db      	uxtb	r3, r3
     86e:	2b00      	cmp	r3, #0
     870:	d007      	beq.n	882 <circular_buf_empty+0x26>
     872:	687b      	ldr	r3, [r7, #4]
     874:	685a      	ldr	r2, [r3, #4]
     876:	687b      	ldr	r3, [r7, #4]
     878:	689b      	ldr	r3, [r3, #8]
     87a:	429a      	cmp	r2, r3
     87c:	d101      	bne.n	882 <circular_buf_empty+0x26>
     87e:	2301      	movs	r3, #1
     880:	e000      	b.n	884 <circular_buf_empty+0x28>
     882:	2300      	movs	r3, #0
     884:	1c1a      	adds	r2, r3, #0
     886:	2301      	movs	r3, #1
     888:	4013      	ands	r3, r2
     88a:	b2db      	uxtb	r3, r3
 }
     88c:	0018      	movs	r0, r3
     88e:	46bd      	mov	sp, r7
     890:	b002      	add	sp, #8
     892:	bd80      	pop	{r7, pc}

00000894 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     894:	b580      	push	{r7, lr}
     896:	b082      	sub	sp, #8
     898:	af00      	add	r7, sp, #0
     89a:	0002      	movs	r2, r0
     89c:	1dfb      	adds	r3, r7, #7
     89e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8a0:	4b06      	ldr	r3, [pc, #24]	; (8bc <system_interrupt_enable+0x28>)
     8a2:	1dfa      	adds	r2, r7, #7
     8a4:	7812      	ldrb	r2, [r2, #0]
     8a6:	0011      	movs	r1, r2
     8a8:	221f      	movs	r2, #31
     8aa:	400a      	ands	r2, r1
     8ac:	2101      	movs	r1, #1
     8ae:	4091      	lsls	r1, r2
     8b0:	000a      	movs	r2, r1
     8b2:	601a      	str	r2, [r3, #0]
}
     8b4:	46c0      	nop			; (mov r8, r8)
     8b6:	46bd      	mov	sp, r7
     8b8:	b002      	add	sp, #8
     8ba:	bd80      	pop	{r7, pc}
     8bc:	e000e100 	.word	0xe000e100

000008c0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     8c0:	b580      	push	{r7, lr}
     8c2:	b084      	sub	sp, #16
     8c4:	af00      	add	r7, sp, #0
     8c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	681b      	ldr	r3, [r3, #0]
     8cc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8ce:	68fb      	ldr	r3, [r7, #12]
     8d0:	69db      	ldr	r3, [r3, #28]
     8d2:	1e5a      	subs	r2, r3, #1
     8d4:	4193      	sbcs	r3, r2
     8d6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     8d8:	0018      	movs	r0, r3
     8da:	46bd      	mov	sp, r7
     8dc:	b004      	add	sp, #16
     8de:	bd80      	pop	{r7, pc}

000008e0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b082      	sub	sp, #8
     8e4:	af00      	add	r7, sp, #0
     8e6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     8e8:	46c0      	nop			; (mov r8, r8)
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	0018      	movs	r0, r3
     8ee:	4b04      	ldr	r3, [pc, #16]	; (900 <_usart_wait_for_sync+0x20>)
     8f0:	4798      	blx	r3
     8f2:	1e03      	subs	r3, r0, #0
     8f4:	d1f9      	bne.n	8ea <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	46bd      	mov	sp, r7
     8fa:	b002      	add	sp, #8
     8fc:	bd80      	pop	{r7, pc}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	000008c1 	.word	0x000008c1

00000904 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     904:	b580      	push	{r7, lr}
     906:	b082      	sub	sp, #8
     908:	af00      	add	r7, sp, #0
     90a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     90c:	687b      	ldr	r3, [r7, #4]
     90e:	2280      	movs	r2, #128	; 0x80
     910:	05d2      	lsls	r2, r2, #23
     912:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     914:	687b      	ldr	r3, [r7, #4]
     916:	2200      	movs	r2, #0
     918:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	22ff      	movs	r2, #255	; 0xff
     91e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     920:	687b      	ldr	r3, [r7, #4]
     922:	2200      	movs	r2, #0
     924:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     926:	687b      	ldr	r3, [r7, #4]
     928:	2200      	movs	r2, #0
     92a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	2296      	movs	r2, #150	; 0x96
     930:	0192      	lsls	r2, r2, #6
     932:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     934:	687b      	ldr	r3, [r7, #4]
     936:	2224      	movs	r2, #36	; 0x24
     938:	2101      	movs	r1, #1
     93a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	2225      	movs	r2, #37	; 0x25
     940:	2101      	movs	r1, #1
     942:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     944:	687b      	ldr	r3, [r7, #4]
     946:	2226      	movs	r2, #38	; 0x26
     948:	2100      	movs	r1, #0
     94a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	2227      	movs	r2, #39	; 0x27
     950:	2100      	movs	r1, #0
     952:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     954:	687b      	ldr	r3, [r7, #4]
     956:	2200      	movs	r2, #0
     958:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	2288      	movs	r2, #136	; 0x88
     95e:	0352      	lsls	r2, r2, #13
     960:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     962:	687b      	ldr	r3, [r7, #4]
     964:	222c      	movs	r2, #44	; 0x2c
     966:	2100      	movs	r1, #0
     968:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	222d      	movs	r2, #45	; 0x2d
     96e:	2100      	movs	r1, #0
     970:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     972:	687b      	ldr	r3, [r7, #4]
     974:	2200      	movs	r2, #0
     976:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     978:	687b      	ldr	r3, [r7, #4]
     97a:	2200      	movs	r2, #0
     97c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     97e:	687b      	ldr	r3, [r7, #4]
     980:	2200      	movs	r2, #0
     982:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     984:	687b      	ldr	r3, [r7, #4]
     986:	2200      	movs	r2, #0
     988:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     98a:	687b      	ldr	r3, [r7, #4]
     98c:	2200      	movs	r2, #0
     98e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     990:	687b      	ldr	r3, [r7, #4]
     992:	2200      	movs	r2, #0
     994:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     996:	687b      	ldr	r3, [r7, #4]
     998:	2200      	movs	r2, #0
     99a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	2200      	movs	r2, #0
     9a0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	2200      	movs	r2, #0
     9a6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	2200      	movs	r2, #0
     9ac:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	2213      	movs	r2, #19
     9b2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     9b4:	687b      	ldr	r3, [r7, #4]
     9b6:	2200      	movs	r2, #0
     9b8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	46bd      	mov	sp, r7
     9be:	b002      	add	sp, #8
     9c0:	bd80      	pop	{r7, pc}
	...

000009c4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     9c4:	b580      	push	{r7, lr}
     9c6:	b084      	sub	sp, #16
     9c8:	af00      	add	r7, sp, #0
     9ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     9d2:	687b      	ldr	r3, [r7, #4]
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	0018      	movs	r0, r3
     9d8:	4b09      	ldr	r3, [pc, #36]	; (a00 <usart_enable+0x3c>)
     9da:	4798      	blx	r3
     9dc:	0003      	movs	r3, r0
     9de:	0018      	movs	r0, r3
     9e0:	4b08      	ldr	r3, [pc, #32]	; (a04 <usart_enable+0x40>)
     9e2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	0018      	movs	r0, r3
     9e8:	4b07      	ldr	r3, [pc, #28]	; (a08 <usart_enable+0x44>)
     9ea:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     9ec:	68fb      	ldr	r3, [r7, #12]
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	2202      	movs	r2, #2
     9f2:	431a      	orrs	r2, r3
     9f4:	68fb      	ldr	r3, [r7, #12]
     9f6:	601a      	str	r2, [r3, #0]
}
     9f8:	46c0      	nop			; (mov r8, r8)
     9fa:	46bd      	mov	sp, r7
     9fc:	b004      	add	sp, #16
     9fe:	bd80      	pop	{r7, pc}
     a00:	00001a8d 	.word	0x00001a8d
     a04:	00000895 	.word	0x00000895
     a08:	000008e1 	.word	0x000008e1

00000a0c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b082      	sub	sp, #8
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
     a14:	000a      	movs	r2, r1
     a16:	1cfb      	adds	r3, r7, #3
     a18:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	2231      	movs	r2, #49	; 0x31
     a1e:	5c9b      	ldrb	r3, [r3, r2]
     a20:	b25a      	sxtb	r2, r3
     a22:	1cfb      	adds	r3, r7, #3
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	2101      	movs	r1, #1
     a28:	4099      	lsls	r1, r3
     a2a:	000b      	movs	r3, r1
     a2c:	b25b      	sxtb	r3, r3
     a2e:	4313      	orrs	r3, r2
     a30:	b25b      	sxtb	r3, r3
     a32:	b2d9      	uxtb	r1, r3
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	2231      	movs	r2, #49	; 0x31
     a38:	5499      	strb	r1, [r3, r2]

}
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	46bd      	mov	sp, r7
     a3e:	b002      	add	sp, #8
     a40:	bd80      	pop	{r7, pc}
	...

00000a44 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole()
{
     a44:	b580      	push	{r7, lr}
     a46:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     a48:	2380      	movs	r3, #128	; 0x80
     a4a:	005a      	lsls	r2, r3, #1
     a4c:	4b0f      	ldr	r3, [pc, #60]	; (a8c <InitializeSerialConsole+0x48>)
     a4e:	0011      	movs	r1, r2
     a50:	0018      	movs	r0, r3
     a52:	4b0f      	ldr	r3, [pc, #60]	; (a90 <InitializeSerialConsole+0x4c>)
     a54:	4798      	blx	r3
     a56:	0002      	movs	r2, r0
     a58:	4b0e      	ldr	r3, [pc, #56]	; (a94 <InitializeSerialConsole+0x50>)
     a5a:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     a5c:	2380      	movs	r3, #128	; 0x80
     a5e:	005a      	lsls	r2, r3, #1
     a60:	4b0d      	ldr	r3, [pc, #52]	; (a98 <InitializeSerialConsole+0x54>)
     a62:	0011      	movs	r1, r2
     a64:	0018      	movs	r0, r3
     a66:	4b0a      	ldr	r3, [pc, #40]	; (a90 <InitializeSerialConsole+0x4c>)
     a68:	4798      	blx	r3
     a6a:	0002      	movs	r2, r0
     a6c:	4b0b      	ldr	r3, [pc, #44]	; (a9c <InitializeSerialConsole+0x58>)
     a6e:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
     a70:	4b0b      	ldr	r3, [pc, #44]	; (aa0 <InitializeSerialConsole+0x5c>)
     a72:	4798      	blx	r3
	configure_usart_callbacks();
     a74:	4b0b      	ldr	r3, [pc, #44]	; (aa4 <InitializeSerialConsole+0x60>)
     a76:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     a78:	490b      	ldr	r1, [pc, #44]	; (aa8 <InitializeSerialConsole+0x64>)
     a7a:	4b0c      	ldr	r3, [pc, #48]	; (aac <InitializeSerialConsole+0x68>)
     a7c:	2201      	movs	r2, #1
     a7e:	0018      	movs	r0, r3
     a80:	4b0b      	ldr	r3, [pc, #44]	; (ab0 <InitializeSerialConsole+0x6c>)
     a82:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
     a84:	46c0      	nop			; (mov r8, r8)
     a86:	46bd      	mov	sp, r7
     a88:	bd80      	pop	{r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	20000214 	.word	0x20000214
     a90:	00000775 	.word	0x00000775
     a94:	2000010c 	.word	0x2000010c
     a98:	20000114 	.word	0x20000114
     a9c:	200003e0 	.word	0x200003e0
     aa0:	00000c8d 	.word	0x00000c8d
     aa4:	00000d05 	.word	0x00000d05
     aa8:	20000110 	.word	0x20000110
     aac:	200000d8 	.word	0x200000d8
     ab0:	00001635 	.word	0x00001635

00000ab4 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
     ab4:	b580      	push	{r7, lr}
     ab6:	b084      	sub	sp, #16
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
	if(string != NULL)
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	2b00      	cmp	r3, #0
     ac0:	d02a      	beq.n	b18 <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
     ac2:	2300      	movs	r3, #0
     ac4:	60fb      	str	r3, [r7, #12]
     ac6:	e00b      	b.n	ae0 <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
     ac8:	4b15      	ldr	r3, [pc, #84]	; (b20 <SerialConsoleWriteString+0x6c>)
     aca:	6818      	ldr	r0, [r3, #0]
     acc:	687a      	ldr	r2, [r7, #4]
     ace:	68fb      	ldr	r3, [r7, #12]
     ad0:	18d3      	adds	r3, r2, r3
     ad2:	781b      	ldrb	r3, [r3, #0]
     ad4:	0019      	movs	r1, r3
     ad6:	4b13      	ldr	r3, [pc, #76]	; (b24 <SerialConsoleWriteString+0x70>)
     ad8:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
     ada:	68fb      	ldr	r3, [r7, #12]
     adc:	3301      	adds	r3, #1
     ade:	60fb      	str	r3, [r7, #12]
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	0018      	movs	r0, r3
     ae4:	4b10      	ldr	r3, [pc, #64]	; (b28 <SerialConsoleWriteString+0x74>)
     ae6:	4798      	blx	r3
     ae8:	0002      	movs	r2, r0
     aea:	68fb      	ldr	r3, [r7, #12]
     aec:	429a      	cmp	r2, r3
     aee:	d8eb      	bhi.n	ac8 <SerialConsoleWriteString+0x14>
		}

		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     af0:	4b0e      	ldr	r3, [pc, #56]	; (b2c <SerialConsoleWriteString+0x78>)
     af2:	2101      	movs	r1, #1
     af4:	0018      	movs	r0, r3
     af6:	4b0e      	ldr	r3, [pc, #56]	; (b30 <SerialConsoleWriteString+0x7c>)
     af8:	4798      	blx	r3
     afa:	1e03      	subs	r3, r0, #0
     afc:	d10c      	bne.n	b18 <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     afe:	4b08      	ldr	r3, [pc, #32]	; (b20 <SerialConsoleWriteString+0x6c>)
     b00:	681b      	ldr	r3, [r3, #0]
     b02:	4a0c      	ldr	r2, [pc, #48]	; (b34 <SerialConsoleWriteString+0x80>)
     b04:	0011      	movs	r1, r2
     b06:	0018      	movs	r0, r3
     b08:	4b0b      	ldr	r3, [pc, #44]	; (b38 <SerialConsoleWriteString+0x84>)
     b0a:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     b0c:	4909      	ldr	r1, [pc, #36]	; (b34 <SerialConsoleWriteString+0x80>)
     b0e:	4b07      	ldr	r3, [pc, #28]	; (b2c <SerialConsoleWriteString+0x78>)
     b10:	2201      	movs	r2, #1
     b12:	0018      	movs	r0, r3
     b14:	4b09      	ldr	r3, [pc, #36]	; (b3c <SerialConsoleWriteString+0x88>)
     b16:	4798      	blx	r3
		}
	}
}
     b18:	46c0      	nop			; (mov r8, r8)
     b1a:	46bd      	mov	sp, r7
     b1c:	b004      	add	sp, #16
     b1e:	bd80      	pop	{r7, pc}
     b20:	200003e0 	.word	0x200003e0
     b24:	000007d5 	.word	0x000007d5
     b28:	000037bd 	.word	0x000037bd
     b2c:	200000d8 	.word	0x200000d8
     b30:	0000167d 	.word	0x0000167d
     b34:	200003dc 	.word	0x200003dc
     b38:	00000809 	.word	0x00000809
     b3c:	000015ed 	.word	0x000015ed

00000b40 <setLogLevel>:
*				Debug logs below the given level will not be allowed to be printed on the system
* @param[in]   debugLevel The debug level to be set for the debug logger
* @note
*****************************************************************************/
void setLogLevel(enum eDebugLogLevels debugLevel)
{
     b40:	b580      	push	{r7, lr}
     b42:	b082      	sub	sp, #8
     b44:	af00      	add	r7, sp, #0
     b46:	0002      	movs	r2, r0
     b48:	1dfb      	adds	r3, r7, #7
     b4a:	701a      	strb	r2, [r3, #0]
currentDebugLevel = debugLevel;
     b4c:	4b03      	ldr	r3, [pc, #12]	; (b5c <setLogLevel+0x1c>)
     b4e:	1dfa      	adds	r2, r7, #7
     b50:	7812      	ldrb	r2, [r2, #0]
     b52:	701a      	strb	r2, [r3, #0]
}
     b54:	46c0      	nop			; (mov r8, r8)
     b56:	46bd      	mov	sp, r7
     b58:	b002      	add	sp, #8
     b5a:	bd80      	pop	{r7, pc}
     b5c:	20000090 	.word	0x20000090

00000b60 <helpFunction>:

/*
COMMAND LINE INTERFACE COMMANDS
*/

void helpFunction(){
     b60:	b580      	push	{r7, lr}
     b62:	af00      	add	r7, sp, #0
	SerialConsoleWriteString(functions);
     b64:	4b03      	ldr	r3, [pc, #12]	; (b74 <helpFunction+0x14>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	0018      	movs	r0, r3
     b6a:	4b03      	ldr	r3, [pc, #12]	; (b78 <helpFunction+0x18>)
     b6c:	4798      	blx	r3
	return;
     b6e:	46c0      	nop			; (mov r8, r8)
}
     b70:	46bd      	mov	sp, r7
     b72:	bd80      	pop	{r7, pc}
     b74:	20000000 	.word	0x20000000
     b78:	00000ab5 	.word	0x00000ab5

00000b7c <setDeviceName>:

void setDeviceName(char * newDeviceName){
     b7c:	b580      	push	{r7, lr}
     b7e:	b082      	sub	sp, #8
     b80:	af00      	add	r7, sp, #0
     b82:	6078      	str	r0, [r7, #4]
	strcpy(deviceName, newDeviceName);
     b84:	687a      	ldr	r2, [r7, #4]
     b86:	4b06      	ldr	r3, [pc, #24]	; (ba0 <setDeviceName+0x24>)
     b88:	0011      	movs	r1, r2
     b8a:	0018      	movs	r0, r3
     b8c:	4b05      	ldr	r3, [pc, #20]	; (ba4 <setDeviceName+0x28>)
     b8e:	4798      	blx	r3
	SerialConsoleWriteString("\r\n");
     b90:	4b05      	ldr	r3, [pc, #20]	; (ba8 <setDeviceName+0x2c>)
     b92:	0018      	movs	r0, r3
     b94:	4b05      	ldr	r3, [pc, #20]	; (bac <setDeviceName+0x30>)
     b96:	4798      	blx	r3
	
}
     b98:	46c0      	nop			; (mov r8, r8)
     b9a:	46bd      	mov	sp, r7
     b9c:	b002      	add	sp, #8
     b9e:	bd80      	pop	{r7, pc}
     ba0:	20000314 	.word	0x20000314
     ba4:	000037ad 	.word	0x000037ad
     ba8:	00003840 	.word	0x00003840
     bac:	00000ab5 	.word	0x00000ab5

00000bb0 <getNextRxChar>:

char getNextRxChar(){
     bb0:	b580      	push	{r7, lr}
     bb2:	b082      	sub	sp, #8
     bb4:	af00      	add	r7, sp, #0
	char c = 0;
     bb6:	1dfb      	adds	r3, r7, #7
     bb8:	2200      	movs	r2, #0
     bba:	701a      	strb	r2, [r3, #0]
	if(circular_buf_get(cbufRx, (uint8_t*) &c) != -1) 
     bbc:	4b08      	ldr	r3, [pc, #32]	; (be0 <getNextRxChar+0x30>)
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	1dfa      	adds	r2, r7, #7
     bc2:	0011      	movs	r1, r2
     bc4:	0018      	movs	r0, r3
     bc6:	4b07      	ldr	r3, [pc, #28]	; (be4 <getNextRxChar+0x34>)
     bc8:	4798      	blx	r3
     bca:	0003      	movs	r3, r0
     bcc:	3301      	adds	r3, #1
     bce:	d002      	beq.n	bd6 <getNextRxChar+0x26>
	{
		return c;
     bd0:	1dfb      	adds	r3, r7, #7
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	e000      	b.n	bd8 <getNextRxChar+0x28>
	}
	return NULL;
     bd6:	2300      	movs	r3, #0
}
     bd8:	0018      	movs	r0, r3
     bda:	46bd      	mov	sp, r7
     bdc:	b002      	add	sp, #8
     bde:	bd80      	pop	{r7, pc}
     be0:	2000010c 	.word	0x2000010c
     be4:	00000809 	.word	0x00000809

00000be8 <rxbufferIsEmpty>:

bool rxbufferIsEmpty(){
     be8:	b580      	push	{r7, lr}
     bea:	af00      	add	r7, sp, #0
	return circular_buf_empty(cbufRx);
     bec:	4b04      	ldr	r3, [pc, #16]	; (c00 <rxbufferIsEmpty+0x18>)
     bee:	681b      	ldr	r3, [r3, #0]
     bf0:	0018      	movs	r0, r3
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <rxbufferIsEmpty+0x1c>)
     bf4:	4798      	blx	r3
     bf6:	0003      	movs	r3, r0
}
     bf8:	0018      	movs	r0, r3
     bfa:	46bd      	mov	sp, r7
     bfc:	bd80      	pop	{r7, pc}
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	2000010c 	.word	0x2000010c
     c04:	0000085d 	.word	0x0000085d

00000c08 <getTrimmedString>:

void getTrimmedString(char * buffer, char * trimmedString, int len){
     c08:	b580      	push	{r7, lr}
     c0a:	b086      	sub	sp, #24
     c0c:	af00      	add	r7, sp, #0
     c0e:	60f8      	str	r0, [r7, #12]
     c10:	60b9      	str	r1, [r7, #8]
     c12:	607a      	str	r2, [r7, #4]
	int i = 0;
     c14:	2300      	movs	r3, #0
     c16:	617b      	str	r3, [r7, #20]
	for (i; i < len; i++)
     c18:	e00a      	b.n	c30 <getTrimmedString+0x28>
	{
		trimmedString[i] = buffer[i];
     c1a:	697b      	ldr	r3, [r7, #20]
     c1c:	68ba      	ldr	r2, [r7, #8]
     c1e:	18d3      	adds	r3, r2, r3
     c20:	697a      	ldr	r2, [r7, #20]
     c22:	68f9      	ldr	r1, [r7, #12]
     c24:	188a      	adds	r2, r1, r2
     c26:	7812      	ldrb	r2, [r2, #0]
     c28:	701a      	strb	r2, [r3, #0]
	for (i; i < len; i++)
     c2a:	697b      	ldr	r3, [r7, #20]
     c2c:	3301      	adds	r3, #1
     c2e:	617b      	str	r3, [r7, #20]
     c30:	697a      	ldr	r2, [r7, #20]
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	429a      	cmp	r2, r3
     c36:	dbf0      	blt.n	c1a <getTrimmedString+0x12>
	}
	trimmedString[len] = NULL;
     c38:	687b      	ldr	r3, [r7, #4]
     c3a:	68ba      	ldr	r2, [r7, #8]
     c3c:	18d3      	adds	r3, r2, r3
     c3e:	2200      	movs	r2, #0
     c40:	701a      	strb	r2, [r3, #0]
	return;
     c42:	46c0      	nop			; (mov r8, r8)
}
     c44:	46bd      	mov	sp, r7
     c46:	b006      	add	sp, #24
     c48:	bd80      	pop	{r7, pc}
	...

00000c4c <getDeviceName>:

void getDeviceName(){
     c4c:	b580      	push	{r7, lr}
     c4e:	af00      	add	r7, sp, #0
	
	SerialConsoleWriteString("Device name is '");
     c50:	4b09      	ldr	r3, [pc, #36]	; (c78 <getDeviceName+0x2c>)
     c52:	0018      	movs	r0, r3
     c54:	4b09      	ldr	r3, [pc, #36]	; (c7c <getDeviceName+0x30>)
     c56:	4798      	blx	r3
	SerialConsoleWriteString(deviceName);
     c58:	4b09      	ldr	r3, [pc, #36]	; (c80 <getDeviceName+0x34>)
     c5a:	0018      	movs	r0, r3
     c5c:	4b07      	ldr	r3, [pc, #28]	; (c7c <getDeviceName+0x30>)
     c5e:	4798      	blx	r3
	SerialConsoleWriteString("'");
     c60:	4b08      	ldr	r3, [pc, #32]	; (c84 <getDeviceName+0x38>)
     c62:	0018      	movs	r0, r3
     c64:	4b05      	ldr	r3, [pc, #20]	; (c7c <getDeviceName+0x30>)
     c66:	4798      	blx	r3
	SerialConsoleWriteString("\r\n");
     c68:	4b07      	ldr	r3, [pc, #28]	; (c88 <getDeviceName+0x3c>)
     c6a:	0018      	movs	r0, r3
     c6c:	4b03      	ldr	r3, [pc, #12]	; (c7c <getDeviceName+0x30>)
     c6e:	4798      	blx	r3
}
     c70:	46c0      	nop			; (mov r8, r8)
     c72:	46bd      	mov	sp, r7
     c74:	bd80      	pop	{r7, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	00003844 	.word	0x00003844
     c7c:	00000ab5 	.word	0x00000ab5
     c80:	20000314 	.word	0x20000314
     c84:	00003858 	.word	0x00003858
     c88:	00003840 	.word	0x00003840

00000c8c <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
     c8c:	b580      	push	{r7, lr}
     c8e:	b090      	sub	sp, #64	; 0x40
     c90:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
     c92:	003b      	movs	r3, r7
     c94:	0018      	movs	r0, r3
     c96:	4b14      	ldr	r3, [pc, #80]	; (ce8 <configure_usart+0x5c>)
     c98:	4798      	blx	r3

	config_usart.baudrate    = 115200;
     c9a:	003b      	movs	r3, r7
     c9c:	22e1      	movs	r2, #225	; 0xe1
     c9e:	0252      	lsls	r2, r2, #9
     ca0:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     ca2:	003b      	movs	r3, r7
     ca4:	22c4      	movs	r2, #196	; 0xc4
     ca6:	0392      	lsls	r2, r2, #14
     ca8:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     caa:	003b      	movs	r3, r7
     cac:	2201      	movs	r2, #1
     cae:	4252      	negs	r2, r2
     cb0:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     cb2:	003b      	movs	r3, r7
     cb4:	2201      	movs	r2, #1
     cb6:	4252      	negs	r2, r2
     cb8:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     cba:	003b      	movs	r3, r7
     cbc:	4a0b      	ldr	r2, [pc, #44]	; (cec <configure_usart+0x60>)
     cbe:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     cc0:	003b      	movs	r3, r7
     cc2:	4a0b      	ldr	r2, [pc, #44]	; (cf0 <configure_usart+0x64>)
     cc4:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	003a      	movs	r2, r7
     cca:	490a      	ldr	r1, [pc, #40]	; (cf4 <configure_usart+0x68>)
     ccc:	4b0a      	ldr	r3, [pc, #40]	; (cf8 <configure_usart+0x6c>)
     cce:	0018      	movs	r0, r3
     cd0:	4b0a      	ldr	r3, [pc, #40]	; (cfc <configure_usart+0x70>)
     cd2:	4798      	blx	r3
     cd4:	1e03      	subs	r3, r0, #0
     cd6:	d1f7      	bne.n	cc8 <configure_usart+0x3c>
					  &config_usart) != STATUS_OK) 
	{

	}
	
	usart_enable(&usart_instance);
     cd8:	4b07      	ldr	r3, [pc, #28]	; (cf8 <configure_usart+0x6c>)
     cda:	0018      	movs	r0, r3
     cdc:	4b08      	ldr	r3, [pc, #32]	; (d00 <configure_usart+0x74>)
     cde:	4798      	blx	r3
}
     ce0:	46c0      	nop			; (mov r8, r8)
     ce2:	46bd      	mov	sp, r7
     ce4:	b010      	add	sp, #64	; 0x40
     ce6:	bd80      	pop	{r7, pc}
     ce8:	00000905 	.word	0x00000905
     cec:	002a0003 	.word	0x002a0003
     cf0:	002b0003 	.word	0x002b0003
     cf4:	42001800 	.word	0x42001800
     cf8:	200000d8 	.word	0x200000d8
     cfc:	000011f1 	.word	0x000011f1
     d00:	000009c5 	.word	0x000009c5

00000d04 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
     d04:	b580      	push	{r7, lr}
     d06:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
     d08:	490c      	ldr	r1, [pc, #48]	; (d3c <configure_usart_callbacks+0x38>)
     d0a:	4b0d      	ldr	r3, [pc, #52]	; (d40 <configure_usart_callbacks+0x3c>)
     d0c:	2200      	movs	r2, #0
     d0e:	0018      	movs	r0, r3
     d10:	4b0c      	ldr	r3, [pc, #48]	; (d44 <configure_usart_callbacks+0x40>)
     d12:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
     d14:	490c      	ldr	r1, [pc, #48]	; (d48 <configure_usart_callbacks+0x44>)
     d16:	4b0a      	ldr	r3, [pc, #40]	; (d40 <configure_usart_callbacks+0x3c>)
     d18:	2201      	movs	r2, #1
     d1a:	0018      	movs	r0, r3
     d1c:	4b09      	ldr	r3, [pc, #36]	; (d44 <configure_usart_callbacks+0x40>)
     d1e:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
     d20:	4b07      	ldr	r3, [pc, #28]	; (d40 <configure_usart_callbacks+0x3c>)
     d22:	2100      	movs	r1, #0
     d24:	0018      	movs	r0, r3
     d26:	4b09      	ldr	r3, [pc, #36]	; (d4c <configure_usart_callbacks+0x48>)
     d28:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
     d2a:	4b05      	ldr	r3, [pc, #20]	; (d40 <configure_usart_callbacks+0x3c>)
     d2c:	2101      	movs	r1, #1
     d2e:	0018      	movs	r0, r3
     d30:	4b06      	ldr	r3, [pc, #24]	; (d4c <configure_usart_callbacks+0x48>)
     d32:	4798      	blx	r3
}
     d34:	46c0      	nop			; (mov r8, r8)
     d36:	46bd      	mov	sp, r7
     d38:	bd80      	pop	{r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	00000dd1 	.word	0x00000dd1
     d40:	200000d8 	.word	0x200000d8
     d44:	000015a5 	.word	0x000015a5
     d48:	00000d51 	.word	0x00000d51
     d4c:	00000a0d 	.word	0x00000a0d

00000d50 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
     d50:	b580      	push	{r7, lr}
     d52:	b084      	sub	sp, #16
     d54:	af00      	add	r7, sp, #0
     d56:	6078      	str	r0, [r7, #4]
	//Order Echo
	if (latestRx == 0x0D){
     d58:	4b16      	ldr	r3, [pc, #88]	; (db4 <usart_read_callback+0x64>)
     d5a:	781b      	ldrb	r3, [r3, #0]
     d5c:	2b0d      	cmp	r3, #13
     d5e:	d102      	bne.n	d66 <usart_read_callback+0x16>
		enterSeen = 1;
     d60:	4b15      	ldr	r3, [pc, #84]	; (db8 <usart_read_callback+0x68>)
     d62:	2201      	movs	r2, #1
     d64:	601a      	str	r2, [r3, #0]
	} 
	
	if (latestRx == 0x08){ // prints a space and a backspace, the second backspace is printed outside the if statement
     d66:	4b13      	ldr	r3, [pc, #76]	; (db4 <usart_read_callback+0x64>)
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	2b08      	cmp	r3, #8
     d6c:	d10c      	bne.n	d88 <usart_read_callback+0x38>
		char backspace[2];
		backspace[0] = 0x08; // backspace
     d6e:	230c      	movs	r3, #12
     d70:	18fb      	adds	r3, r7, r3
     d72:	2208      	movs	r2, #8
     d74:	701a      	strb	r2, [r3, #0]
		backspace[1] = 0x20; // space
     d76:	230c      	movs	r3, #12
     d78:	18fb      	adds	r3, r7, r3
     d7a:	2220      	movs	r2, #32
     d7c:	705a      	strb	r2, [r3, #1]
		//backspace[2] = NULL;
		SerialConsoleWriteString(backspace);
     d7e:	230c      	movs	r3, #12
     d80:	18fb      	adds	r3, r7, r3
     d82:	0018      	movs	r0, r3
     d84:	4b0d      	ldr	r3, [pc, #52]	; (dbc <usart_read_callback+0x6c>)
     d86:	4798      	blx	r3
	}  
	
	SerialConsoleWriteString(&latestRx);
     d88:	4b0a      	ldr	r3, [pc, #40]	; (db4 <usart_read_callback+0x64>)
     d8a:	0018      	movs	r0, r3
     d8c:	4b0b      	ldr	r3, [pc, #44]	; (dbc <usart_read_callback+0x6c>)
     d8e:	4798      	blx	r3
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     d90:	4b0b      	ldr	r3, [pc, #44]	; (dc0 <usart_read_callback+0x70>)
     d92:	681a      	ldr	r2, [r3, #0]
     d94:	4b07      	ldr	r3, [pc, #28]	; (db4 <usart_read_callback+0x64>)
     d96:	781b      	ldrb	r3, [r3, #0]
     d98:	0019      	movs	r1, r3
     d9a:	0010      	movs	r0, r2
     d9c:	4b09      	ldr	r3, [pc, #36]	; (dc4 <usart_read_callback+0x74>)
     d9e:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading	
     da0:	4904      	ldr	r1, [pc, #16]	; (db4 <usart_read_callback+0x64>)
     da2:	4b09      	ldr	r3, [pc, #36]	; (dc8 <usart_read_callback+0x78>)
     da4:	2201      	movs	r2, #1
     da6:	0018      	movs	r0, r3
     da8:	4b08      	ldr	r3, [pc, #32]	; (dcc <usart_read_callback+0x7c>)
     daa:	4798      	blx	r3
}
     dac:	46c0      	nop			; (mov r8, r8)
     dae:	46bd      	mov	sp, r7
     db0:	b004      	add	sp, #16
     db2:	bd80      	pop	{r7, pc}
     db4:	20000110 	.word	0x20000110
     db8:	2000008c 	.word	0x2000008c
     dbc:	00000ab5 	.word	0x00000ab5
     dc0:	2000010c 	.word	0x2000010c
     dc4:	000007d5 	.word	0x000007d5
     dc8:	200000d8 	.word	0x200000d8
     dcc:	00001635 	.word	0x00001635

00000dd0 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART write job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     dd0:	b580      	push	{r7, lr}
     dd2:	b082      	sub	sp, #8
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     dd8:	4b09      	ldr	r3, [pc, #36]	; (e00 <usart_write_callback+0x30>)
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	4a09      	ldr	r2, [pc, #36]	; (e04 <usart_write_callback+0x34>)
     dde:	0011      	movs	r1, r2
     de0:	0018      	movs	r0, r3
     de2:	4b09      	ldr	r3, [pc, #36]	; (e08 <usart_write_callback+0x38>)
     de4:	4798      	blx	r3
     de6:	0003      	movs	r3, r0
     de8:	3301      	adds	r3, #1
     dea:	d005      	beq.n	df8 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     dec:	4905      	ldr	r1, [pc, #20]	; (e04 <usart_write_callback+0x34>)
     dee:	4b07      	ldr	r3, [pc, #28]	; (e0c <usart_write_callback+0x3c>)
     df0:	2201      	movs	r2, #1
     df2:	0018      	movs	r0, r3
     df4:	4b06      	ldr	r3, [pc, #24]	; (e10 <usart_write_callback+0x40>)
     df6:	4798      	blx	r3
	}
	
}
     df8:	46c0      	nop			; (mov r8, r8)
     dfa:	46bd      	mov	sp, r7
     dfc:	b002      	add	sp, #8
     dfe:	bd80      	pop	{r7, pc}
     e00:	200003e0 	.word	0x200003e0
     e04:	200003dc 	.word	0x200003dc
     e08:	00000809 	.word	0x00000809
     e0c:	200000d8 	.word	0x200000d8
     e10:	000015ed 	.word	0x000015ed

00000e14 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     e14:	b580      	push	{r7, lr}
     e16:	b082      	sub	sp, #8
     e18:	af00      	add	r7, sp, #0
     e1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	2200      	movs	r2, #0
     e20:	701a      	strb	r2, [r3, #0]
}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	46bd      	mov	sp, r7
     e26:	b002      	add	sp, #8
     e28:	bd80      	pop	{r7, pc}
	...

00000e2c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     e2c:	b580      	push	{r7, lr}
     e2e:	b082      	sub	sp, #8
     e30:	af00      	add	r7, sp, #0
     e32:	0002      	movs	r2, r0
     e34:	6039      	str	r1, [r7, #0]
     e36:	1dfb      	adds	r3, r7, #7
     e38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     e3a:	1dfb      	adds	r3, r7, #7
     e3c:	781b      	ldrb	r3, [r3, #0]
     e3e:	2b01      	cmp	r3, #1
     e40:	d00a      	beq.n	e58 <system_apb_clock_set_mask+0x2c>
     e42:	2b02      	cmp	r3, #2
     e44:	d00f      	beq.n	e66 <system_apb_clock_set_mask+0x3a>
     e46:	2b00      	cmp	r3, #0
     e48:	d114      	bne.n	e74 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     e4a:	4b0e      	ldr	r3, [pc, #56]	; (e84 <system_apb_clock_set_mask+0x58>)
     e4c:	4a0d      	ldr	r2, [pc, #52]	; (e84 <system_apb_clock_set_mask+0x58>)
     e4e:	6991      	ldr	r1, [r2, #24]
     e50:	683a      	ldr	r2, [r7, #0]
     e52:	430a      	orrs	r2, r1
     e54:	619a      	str	r2, [r3, #24]
			break;
     e56:	e00f      	b.n	e78 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     e58:	4b0a      	ldr	r3, [pc, #40]	; (e84 <system_apb_clock_set_mask+0x58>)
     e5a:	4a0a      	ldr	r2, [pc, #40]	; (e84 <system_apb_clock_set_mask+0x58>)
     e5c:	69d1      	ldr	r1, [r2, #28]
     e5e:	683a      	ldr	r2, [r7, #0]
     e60:	430a      	orrs	r2, r1
     e62:	61da      	str	r2, [r3, #28]
			break;
     e64:	e008      	b.n	e78 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     e66:	4b07      	ldr	r3, [pc, #28]	; (e84 <system_apb_clock_set_mask+0x58>)
     e68:	4a06      	ldr	r2, [pc, #24]	; (e84 <system_apb_clock_set_mask+0x58>)
     e6a:	6a11      	ldr	r1, [r2, #32]
     e6c:	683a      	ldr	r2, [r7, #0]
     e6e:	430a      	orrs	r2, r1
     e70:	621a      	str	r2, [r3, #32]
			break;
     e72:	e001      	b.n	e78 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     e74:	2317      	movs	r3, #23
     e76:	e000      	b.n	e7a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     e78:	2300      	movs	r3, #0
}
     e7a:	0018      	movs	r0, r3
     e7c:	46bd      	mov	sp, r7
     e7e:	b002      	add	sp, #8
     e80:	bd80      	pop	{r7, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	40000400 	.word	0x40000400

00000e88 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	2280      	movs	r2, #128	; 0x80
     e94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	2200      	movs	r2, #0
     e9a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e9c:	687b      	ldr	r3, [r7, #4]
     e9e:	2201      	movs	r2, #1
     ea0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	2200      	movs	r2, #0
     ea6:	70da      	strb	r2, [r3, #3]
}
     ea8:	46c0      	nop			; (mov r8, r8)
     eaa:	46bd      	mov	sp, r7
     eac:	b002      	add	sp, #8
     eae:	bd80      	pop	{r7, pc}

00000eb0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     eb0:	b580      	push	{r7, lr}
     eb2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     eb4:	4b05      	ldr	r3, [pc, #20]	; (ecc <system_is_debugger_present+0x1c>)
     eb6:	789b      	ldrb	r3, [r3, #2]
     eb8:	b2db      	uxtb	r3, r3
     eba:	001a      	movs	r2, r3
     ebc:	2302      	movs	r3, #2
     ebe:	4013      	ands	r3, r2
     ec0:	1e5a      	subs	r2, r3, #1
     ec2:	4193      	sbcs	r3, r2
     ec4:	b2db      	uxtb	r3, r3
}
     ec6:	0018      	movs	r0, r3
     ec8:	46bd      	mov	sp, r7
     eca:	bd80      	pop	{r7, pc}
     ecc:	41002000 	.word	0x41002000

00000ed0 <usart_is_syncing>:
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b084      	sub	sp, #16
     ed4:	af00      	add	r7, sp, #0
     ed6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
     ede:	68fb      	ldr	r3, [r7, #12]
     ee0:	69db      	ldr	r3, [r3, #28]
     ee2:	1e5a      	subs	r2, r3, #1
     ee4:	4193      	sbcs	r3, r2
     ee6:	b2db      	uxtb	r3, r3
}
     ee8:	0018      	movs	r0, r3
     eea:	46bd      	mov	sp, r7
     eec:	b004      	add	sp, #16
     eee:	bd80      	pop	{r7, pc}

00000ef0 <_usart_wait_for_sync>:
{
     ef0:	b580      	push	{r7, lr}
     ef2:	b082      	sub	sp, #8
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
     ef8:	46c0      	nop			; (mov r8, r8)
     efa:	687b      	ldr	r3, [r7, #4]
     efc:	0018      	movs	r0, r3
     efe:	4b04      	ldr	r3, [pc, #16]	; (f10 <_usart_wait_for_sync+0x20>)
     f00:	4798      	blx	r3
     f02:	1e03      	subs	r3, r0, #0
     f04:	d1f9      	bne.n	efa <_usart_wait_for_sync+0xa>
}
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	46bd      	mov	sp, r7
     f0a:	b002      	add	sp, #8
     f0c:	bd80      	pop	{r7, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	00000ed1 	.word	0x00000ed1

00000f14 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     f14:	b5b0      	push	{r4, r5, r7, lr}
     f16:	b08c      	sub	sp, #48	; 0x30
     f18:	af02      	add	r7, sp, #8
     f1a:	6078      	str	r0, [r7, #4]
     f1c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	0018      	movs	r0, r3
     f2a:	4bab      	ldr	r3, [pc, #684]	; (11d8 <_usart_set_config+0x2c4>)
     f2c:	4798      	blx	r3
     f2e:	0003      	movs	r3, r0
     f30:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f32:	697b      	ldr	r3, [r7, #20]
     f34:	3314      	adds	r3, #20
     f36:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     f38:	2300      	movs	r3, #0
     f3a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     f3c:	2300      	movs	r3, #0
     f3e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     f40:	230a      	movs	r3, #10
     f42:	18fb      	adds	r3, r7, r3
     f44:	2200      	movs	r2, #0
     f46:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f48:	231f      	movs	r3, #31
     f4a:	18fb      	adds	r3, r7, r3
     f4c:	2200      	movs	r2, #0
     f4e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f50:	231e      	movs	r3, #30
     f52:	18fb      	adds	r3, r7, r3
     f54:	2210      	movs	r2, #16
     f56:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     f58:	683b      	ldr	r3, [r7, #0]
     f5a:	8a1b      	ldrh	r3, [r3, #16]
     f5c:	2280      	movs	r2, #128	; 0x80
     f5e:	01d2      	lsls	r2, r2, #7
     f60:	4293      	cmp	r3, r2
     f62:	d01c      	beq.n	f9e <_usart_set_config+0x8a>
     f64:	2280      	movs	r2, #128	; 0x80
     f66:	01d2      	lsls	r2, r2, #7
     f68:	4293      	cmp	r3, r2
     f6a:	dc06      	bgt.n	f7a <_usart_set_config+0x66>
     f6c:	2b00      	cmp	r3, #0
     f6e:	d00d      	beq.n	f8c <_usart_set_config+0x78>
     f70:	2280      	movs	r2, #128	; 0x80
     f72:	0192      	lsls	r2, r2, #6
     f74:	4293      	cmp	r3, r2
     f76:	d024      	beq.n	fc2 <_usart_set_config+0xae>
     f78:	e035      	b.n	fe6 <_usart_set_config+0xd2>
     f7a:	22c0      	movs	r2, #192	; 0xc0
     f7c:	01d2      	lsls	r2, r2, #7
     f7e:	4293      	cmp	r3, r2
     f80:	d028      	beq.n	fd4 <_usart_set_config+0xc0>
     f82:	2280      	movs	r2, #128	; 0x80
     f84:	0212      	lsls	r2, r2, #8
     f86:	4293      	cmp	r3, r2
     f88:	d012      	beq.n	fb0 <_usart_set_config+0x9c>
     f8a:	e02c      	b.n	fe6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f8c:	231f      	movs	r3, #31
     f8e:	18fb      	adds	r3, r7, r3
     f90:	2200      	movs	r2, #0
     f92:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f94:	231e      	movs	r3, #30
     f96:	18fb      	adds	r3, r7, r3
     f98:	2210      	movs	r2, #16
     f9a:	701a      	strb	r2, [r3, #0]
			break;
     f9c:	e023      	b.n	fe6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f9e:	231f      	movs	r3, #31
     fa0:	18fb      	adds	r3, r7, r3
     fa2:	2200      	movs	r2, #0
     fa4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fa6:	231e      	movs	r3, #30
     fa8:	18fb      	adds	r3, r7, r3
     faa:	2208      	movs	r2, #8
     fac:	701a      	strb	r2, [r3, #0]
			break;
     fae:	e01a      	b.n	fe6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fb0:	231f      	movs	r3, #31
     fb2:	18fb      	adds	r3, r7, r3
     fb4:	2200      	movs	r2, #0
     fb6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     fb8:	231e      	movs	r3, #30
     fba:	18fb      	adds	r3, r7, r3
     fbc:	2203      	movs	r2, #3
     fbe:	701a      	strb	r2, [r3, #0]
			break;
     fc0:	e011      	b.n	fe6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fc2:	231f      	movs	r3, #31
     fc4:	18fb      	adds	r3, r7, r3
     fc6:	2201      	movs	r2, #1
     fc8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fca:	231e      	movs	r3, #30
     fcc:	18fb      	adds	r3, r7, r3
     fce:	2210      	movs	r2, #16
     fd0:	701a      	strb	r2, [r3, #0]
			break;
     fd2:	e008      	b.n	fe6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fd4:	231f      	movs	r3, #31
     fd6:	18fb      	adds	r3, r7, r3
     fd8:	2201      	movs	r2, #1
     fda:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fdc:	231e      	movs	r3, #30
     fde:	18fb      	adds	r3, r7, r3
     fe0:	2208      	movs	r2, #8
     fe2:	701a      	strb	r2, [r3, #0]
			break;
     fe4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     fe6:	683b      	ldr	r3, [r7, #0]
     fe8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     fea:	683b      	ldr	r3, [r7, #0]
     fec:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
     fee:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ff0:	683b      	ldr	r3, [r7, #0]
     ff2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
     ff4:	4313      	orrs	r3, r2
		config->sample_rate |
     ff6:	683a      	ldr	r2, [r7, #0]
     ff8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
     ffa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ffc:	683a      	ldr	r2, [r7, #0]
     ffe:	7e12      	ldrb	r2, [r2, #24]
    1000:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    1002:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1004:	683a      	ldr	r2, [r7, #0]
    1006:	2126      	movs	r1, #38	; 0x26
    1008:	5c52      	ldrb	r2, [r2, r1]
    100a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    100c:	4313      	orrs	r3, r2
    100e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    1010:	231d      	movs	r3, #29
    1012:	18fb      	adds	r3, r7, r3
    1014:	2200      	movs	r2, #0
    1016:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    1018:	683b      	ldr	r3, [r7, #0]
    101a:	685b      	ldr	r3, [r3, #4]
    101c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    101e:	68fb      	ldr	r3, [r7, #12]
    1020:	2b00      	cmp	r3, #0
    1022:	d01e      	beq.n	1062 <_usart_set_config+0x14e>
    1024:	2280      	movs	r2, #128	; 0x80
    1026:	0552      	lsls	r2, r2, #21
    1028:	4293      	cmp	r3, r2
    102a:	d14f      	bne.n	10cc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    102c:	683b      	ldr	r3, [r7, #0]
    102e:	2227      	movs	r2, #39	; 0x27
    1030:	5c9b      	ldrb	r3, [r3, r2]
    1032:	2201      	movs	r2, #1
    1034:	4053      	eors	r3, r2
    1036:	b2db      	uxtb	r3, r3
    1038:	2b00      	cmp	r3, #0
    103a:	d046      	beq.n	10ca <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    103c:	683b      	ldr	r3, [r7, #0]
    103e:	6a1d      	ldr	r5, [r3, #32]
    1040:	693b      	ldr	r3, [r7, #16]
    1042:	b2db      	uxtb	r3, r3
    1044:	0018      	movs	r0, r3
    1046:	4b65      	ldr	r3, [pc, #404]	; (11dc <_usart_set_config+0x2c8>)
    1048:	4798      	blx	r3
    104a:	0001      	movs	r1, r0
    104c:	231d      	movs	r3, #29
    104e:	18fc      	adds	r4, r7, r3
    1050:	230a      	movs	r3, #10
    1052:	18fb      	adds	r3, r7, r3
    1054:	001a      	movs	r2, r3
    1056:	0028      	movs	r0, r5
    1058:	4b61      	ldr	r3, [pc, #388]	; (11e0 <_usart_set_config+0x2cc>)
    105a:	4798      	blx	r3
    105c:	0003      	movs	r3, r0
    105e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    1060:	e033      	b.n	10ca <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1062:	683b      	ldr	r3, [r7, #0]
    1064:	2227      	movs	r2, #39	; 0x27
    1066:	5c9b      	ldrb	r3, [r3, r2]
    1068:	2b00      	cmp	r3, #0
    106a:	d014      	beq.n	1096 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    106c:	683b      	ldr	r3, [r7, #0]
    106e:	6a18      	ldr	r0, [r3, #32]
    1070:	683b      	ldr	r3, [r7, #0]
    1072:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    1074:	231d      	movs	r3, #29
    1076:	18fc      	adds	r4, r7, r3
    1078:	231f      	movs	r3, #31
    107a:	18fb      	adds	r3, r7, r3
    107c:	781d      	ldrb	r5, [r3, #0]
    107e:	230a      	movs	r3, #10
    1080:	18fa      	adds	r2, r7, r3
    1082:	231e      	movs	r3, #30
    1084:	18fb      	adds	r3, r7, r3
    1086:	781b      	ldrb	r3, [r3, #0]
    1088:	9300      	str	r3, [sp, #0]
    108a:	002b      	movs	r3, r5
    108c:	4d55      	ldr	r5, [pc, #340]	; (11e4 <_usart_set_config+0x2d0>)
    108e:	47a8      	blx	r5
    1090:	0003      	movs	r3, r0
    1092:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1094:	e01a      	b.n	10cc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    1096:	683b      	ldr	r3, [r7, #0]
    1098:	6a1d      	ldr	r5, [r3, #32]
    109a:	693b      	ldr	r3, [r7, #16]
    109c:	b2db      	uxtb	r3, r3
    109e:	0018      	movs	r0, r3
    10a0:	4b4e      	ldr	r3, [pc, #312]	; (11dc <_usart_set_config+0x2c8>)
    10a2:	4798      	blx	r3
				status_code =
    10a4:	231d      	movs	r3, #29
    10a6:	18fc      	adds	r4, r7, r3
    10a8:	231f      	movs	r3, #31
    10aa:	18fb      	adds	r3, r7, r3
    10ac:	7819      	ldrb	r1, [r3, #0]
    10ae:	230a      	movs	r3, #10
    10b0:	18fa      	adds	r2, r7, r3
    10b2:	231e      	movs	r3, #30
    10b4:	18fb      	adds	r3, r7, r3
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	9300      	str	r3, [sp, #0]
    10ba:	000b      	movs	r3, r1
    10bc:	0001      	movs	r1, r0
    10be:	0028      	movs	r0, r5
    10c0:	4d48      	ldr	r5, [pc, #288]	; (11e4 <_usart_set_config+0x2d0>)
    10c2:	47a8      	blx	r5
    10c4:	0003      	movs	r3, r0
    10c6:	7023      	strb	r3, [r4, #0]
			break;
    10c8:	e000      	b.n	10cc <_usart_set_config+0x1b8>
			break;
    10ca:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    10cc:	231d      	movs	r3, #29
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d003      	beq.n	10de <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    10d6:	231d      	movs	r3, #29
    10d8:	18fb      	adds	r3, r7, r3
    10da:	781b      	ldrb	r3, [r3, #0]
    10dc:	e077      	b.n	11ce <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    10de:	683b      	ldr	r3, [r7, #0]
    10e0:	7e5b      	ldrb	r3, [r3, #25]
    10e2:	2b00      	cmp	r3, #0
    10e4:	d003      	beq.n	10ee <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    10e6:	683b      	ldr	r3, [r7, #0]
    10e8:	7e9a      	ldrb	r2, [r3, #26]
    10ea:	69bb      	ldr	r3, [r7, #24]
    10ec:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	0018      	movs	r0, r3
    10f2:	4b3d      	ldr	r3, [pc, #244]	; (11e8 <_usart_set_config+0x2d4>)
    10f4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    10f6:	230a      	movs	r3, #10
    10f8:	18fb      	adds	r3, r7, r3
    10fa:	881a      	ldrh	r2, [r3, #0]
    10fc:	69bb      	ldr	r3, [r7, #24]
    10fe:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1102:	68fb      	ldr	r3, [r7, #12]
    1104:	4313      	orrs	r3, r2
    1106:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1108:	683b      	ldr	r3, [r7, #0]
    110a:	2227      	movs	r2, #39	; 0x27
    110c:	5c9b      	ldrb	r3, [r3, r2]
    110e:	2201      	movs	r2, #1
    1110:	4053      	eors	r3, r2
    1112:	b2db      	uxtb	r3, r3
    1114:	2b00      	cmp	r3, #0
    1116:	d003      	beq.n	1120 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    111a:	2204      	movs	r2, #4
    111c:	4313      	orrs	r3, r2
    111e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1120:	683b      	ldr	r3, [r7, #0]
    1122:	7e5b      	ldrb	r3, [r3, #25]
    1124:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	7f1b      	ldrb	r3, [r3, #28]
    112a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    112c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    112e:	683b      	ldr	r3, [r7, #0]
    1130:	7f5b      	ldrb	r3, [r3, #29]
    1132:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1134:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1136:	683b      	ldr	r3, [r7, #0]
    1138:	2124      	movs	r1, #36	; 0x24
    113a:	5c5b      	ldrb	r3, [r3, r1]
    113c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    113e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1140:	683b      	ldr	r3, [r7, #0]
    1142:	2125      	movs	r1, #37	; 0x25
    1144:	5c5b      	ldrb	r3, [r3, r1]
    1146:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1148:	4313      	orrs	r3, r2
	ctrlb =  
    114a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    114c:	683b      	ldr	r3, [r7, #0]
    114e:	7a9b      	ldrb	r3, [r3, #10]
    1150:	001a      	movs	r2, r3
    1152:	6a3b      	ldr	r3, [r7, #32]
    1154:	4313      	orrs	r3, r2
    1156:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    1158:	683b      	ldr	r3, [r7, #0]
    115a:	7adb      	ldrb	r3, [r3, #11]
    115c:	001a      	movs	r2, r3
    115e:	6a3b      	ldr	r3, [r7, #32]
    1160:	4313      	orrs	r3, r2
    1162:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1164:	683b      	ldr	r3, [r7, #0]
    1166:	891b      	ldrh	r3, [r3, #8]
    1168:	2bff      	cmp	r3, #255	; 0xff
    116a:	d00b      	beq.n	1184 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    116e:	2280      	movs	r2, #128	; 0x80
    1170:	0452      	lsls	r2, r2, #17
    1172:	4313      	orrs	r3, r2
    1174:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    1176:	683b      	ldr	r3, [r7, #0]
    1178:	891b      	ldrh	r3, [r3, #8]
    117a:	001a      	movs	r2, r3
    117c:	6a3b      	ldr	r3, [r7, #32]
    117e:	4313      	orrs	r3, r2
    1180:	623b      	str	r3, [r7, #32]
    1182:	e008      	b.n	1196 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1184:	683b      	ldr	r3, [r7, #0]
    1186:	7edb      	ldrb	r3, [r3, #27]
    1188:	2b00      	cmp	r3, #0
    118a:	d004      	beq.n	1196 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    118e:	2280      	movs	r2, #128	; 0x80
    1190:	04d2      	lsls	r2, r2, #19
    1192:	4313      	orrs	r3, r2
    1194:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1196:	683b      	ldr	r3, [r7, #0]
    1198:	222c      	movs	r2, #44	; 0x2c
    119a:	5c9b      	ldrb	r3, [r3, r2]
    119c:	2b00      	cmp	r3, #0
    119e:	d103      	bne.n	11a8 <_usart_set_config+0x294>
    11a0:	4b12      	ldr	r3, [pc, #72]	; (11ec <_usart_set_config+0x2d8>)
    11a2:	4798      	blx	r3
    11a4:	1e03      	subs	r3, r0, #0
    11a6:	d003      	beq.n	11b0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    11a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11aa:	2280      	movs	r2, #128	; 0x80
    11ac:	4313      	orrs	r3, r2
    11ae:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    11b0:	687b      	ldr	r3, [r7, #4]
    11b2:	0018      	movs	r0, r3
    11b4:	4b0c      	ldr	r3, [pc, #48]	; (11e8 <_usart_set_config+0x2d4>)
    11b6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    11b8:	69bb      	ldr	r3, [r7, #24]
    11ba:	6a3a      	ldr	r2, [r7, #32]
    11bc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	0018      	movs	r0, r3
    11c2:	4b09      	ldr	r3, [pc, #36]	; (11e8 <_usart_set_config+0x2d4>)
    11c4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    11c6:	69bb      	ldr	r3, [r7, #24]
    11c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11ca:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    11cc:	2300      	movs	r3, #0
}
    11ce:	0018      	movs	r0, r3
    11d0:	46bd      	mov	sp, r7
    11d2:	b00a      	add	sp, #40	; 0x28
    11d4:	bdb0      	pop	{r4, r5, r7, pc}
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	00000691 	.word	0x00000691
    11dc:	00002b2d 	.word	0x00002b2d
    11e0:	0000020b 	.word	0x0000020b
    11e4:	00000289 	.word	0x00000289
    11e8:	00000ef1 	.word	0x00000ef1
    11ec:	00000eb1 	.word	0x00000eb1

000011f0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    11f0:	b590      	push	{r4, r7, lr}
    11f2:	b093      	sub	sp, #76	; 0x4c
    11f4:	af00      	add	r7, sp, #0
    11f6:	60f8      	str	r0, [r7, #12]
    11f8:	60b9      	str	r1, [r7, #8]
    11fa:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    11fc:	233b      	movs	r3, #59	; 0x3b
    11fe:	18fb      	adds	r3, r7, r3
    1200:	2200      	movs	r2, #0
    1202:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1204:	68fb      	ldr	r3, [r7, #12]
    1206:	68ba      	ldr	r2, [r7, #8]
    1208:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    120a:	68fb      	ldr	r3, [r7, #12]
    120c:	681b      	ldr	r3, [r3, #0]
    120e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1210:	68fb      	ldr	r3, [r7, #12]
    1212:	681b      	ldr	r3, [r3, #0]
    1214:	0018      	movs	r0, r3
    1216:	4b86      	ldr	r3, [pc, #536]	; (1430 <usart_init+0x240>)
    1218:	4798      	blx	r3
    121a:	0003      	movs	r3, r0
    121c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1220:	3302      	adds	r3, #2
    1222:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1226:	3314      	adds	r3, #20
    1228:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    122a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    122c:	681b      	ldr	r3, [r3, #0]
    122e:	2201      	movs	r2, #1
    1230:	4013      	ands	r3, r2
    1232:	d001      	beq.n	1238 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1234:	2305      	movs	r3, #5
    1236:	e0f6      	b.n	1426 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	2202      	movs	r2, #2
    123e:	4013      	ands	r3, r2
    1240:	d001      	beq.n	1246 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1242:	231c      	movs	r3, #28
    1244:	e0ef      	b.n	1426 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1246:	2201      	movs	r2, #1
    1248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    124a:	409a      	lsls	r2, r3
    124c:	0013      	movs	r3, r2
    124e:	0019      	movs	r1, r3
    1250:	2002      	movs	r0, #2
    1252:	4b78      	ldr	r3, [pc, #480]	; (1434 <usart_init+0x244>)
    1254:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1256:	2324      	movs	r3, #36	; 0x24
    1258:	18fb      	adds	r3, r7, r3
    125a:	0018      	movs	r0, r3
    125c:	4b76      	ldr	r3, [pc, #472]	; (1438 <usart_init+0x248>)
    125e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	222d      	movs	r2, #45	; 0x2d
    1264:	5c9a      	ldrb	r2, [r3, r2]
    1266:	2324      	movs	r3, #36	; 0x24
    1268:	18fb      	adds	r3, r7, r3
    126a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    126e:	b2db      	uxtb	r3, r3
    1270:	2224      	movs	r2, #36	; 0x24
    1272:	18ba      	adds	r2, r7, r2
    1274:	0011      	movs	r1, r2
    1276:	0018      	movs	r0, r3
    1278:	4b70      	ldr	r3, [pc, #448]	; (143c <usart_init+0x24c>)
    127a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    127e:	b2db      	uxtb	r3, r3
    1280:	0018      	movs	r0, r3
    1282:	4b6f      	ldr	r3, [pc, #444]	; (1440 <usart_init+0x250>)
    1284:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1286:	687b      	ldr	r3, [r7, #4]
    1288:	222d      	movs	r2, #45	; 0x2d
    128a:	5c9b      	ldrb	r3, [r3, r2]
    128c:	2100      	movs	r1, #0
    128e:	0018      	movs	r0, r3
    1290:	4b6c      	ldr	r3, [pc, #432]	; (1444 <usart_init+0x254>)
    1292:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	7ada      	ldrb	r2, [r3, #11]
    1298:	68fb      	ldr	r3, [r7, #12]
    129a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    129c:	687b      	ldr	r3, [r7, #4]
    129e:	2224      	movs	r2, #36	; 0x24
    12a0:	5c9a      	ldrb	r2, [r3, r2]
    12a2:	68fb      	ldr	r3, [r7, #12]
    12a4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    12a6:	687b      	ldr	r3, [r7, #4]
    12a8:	2225      	movs	r2, #37	; 0x25
    12aa:	5c9a      	ldrb	r2, [r3, r2]
    12ac:	68fb      	ldr	r3, [r7, #12]
    12ae:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    12b0:	687b      	ldr	r3, [r7, #4]
    12b2:	7eda      	ldrb	r2, [r3, #27]
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	7f1a      	ldrb	r2, [r3, #28]
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    12c0:	233b      	movs	r3, #59	; 0x3b
    12c2:	18fc      	adds	r4, r7, r3
    12c4:	687a      	ldr	r2, [r7, #4]
    12c6:	68fb      	ldr	r3, [r7, #12]
    12c8:	0011      	movs	r1, r2
    12ca:	0018      	movs	r0, r3
    12cc:	4b5e      	ldr	r3, [pc, #376]	; (1448 <usart_init+0x258>)
    12ce:	4798      	blx	r3
    12d0:	0003      	movs	r3, r0
    12d2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    12d4:	233b      	movs	r3, #59	; 0x3b
    12d6:	18fb      	adds	r3, r7, r3
    12d8:	781b      	ldrb	r3, [r3, #0]
    12da:	2b00      	cmp	r3, #0
    12dc:	d003      	beq.n	12e6 <usart_init+0xf6>
		return status_code;
    12de:	233b      	movs	r3, #59	; 0x3b
    12e0:	18fb      	adds	r3, r7, r3
    12e2:	781b      	ldrb	r3, [r3, #0]
    12e4:	e09f      	b.n	1426 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    12e6:	2320      	movs	r3, #32
    12e8:	18fb      	adds	r3, r7, r3
    12ea:	0018      	movs	r0, r3
    12ec:	4b57      	ldr	r3, [pc, #348]	; (144c <usart_init+0x25c>)
    12ee:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12f0:	2320      	movs	r3, #32
    12f2:	18fb      	adds	r3, r7, r3
    12f4:	2200      	movs	r2, #0
    12f6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    12f8:	2320      	movs	r3, #32
    12fa:	18fb      	adds	r3, r7, r3
    12fc:	2200      	movs	r2, #0
    12fe:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    1304:	2310      	movs	r3, #16
    1306:	18fb      	adds	r3, r7, r3
    1308:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    130e:	2310      	movs	r3, #16
    1310:	18fb      	adds	r3, r7, r3
    1312:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    1314:	687b      	ldr	r3, [r7, #4]
    1316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    1318:	2310      	movs	r3, #16
    131a:	18fb      	adds	r3, r7, r3
    131c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    1322:	2310      	movs	r3, #16
    1324:	18fb      	adds	r3, r7, r3
    1326:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1328:	2347      	movs	r3, #71	; 0x47
    132a:	18fb      	adds	r3, r7, r3
    132c:	2200      	movs	r2, #0
    132e:	701a      	strb	r2, [r3, #0]
    1330:	e02c      	b.n	138c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1332:	2347      	movs	r3, #71	; 0x47
    1334:	18fb      	adds	r3, r7, r3
    1336:	781a      	ldrb	r2, [r3, #0]
    1338:	2310      	movs	r3, #16
    133a:	18fb      	adds	r3, r7, r3
    133c:	0092      	lsls	r2, r2, #2
    133e:	58d3      	ldr	r3, [r2, r3]
    1340:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    1342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1344:	2b00      	cmp	r3, #0
    1346:	d109      	bne.n	135c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1348:	2347      	movs	r3, #71	; 0x47
    134a:	18fb      	adds	r3, r7, r3
    134c:	781a      	ldrb	r2, [r3, #0]
    134e:	68bb      	ldr	r3, [r7, #8]
    1350:	0011      	movs	r1, r2
    1352:	0018      	movs	r0, r3
    1354:	4b3e      	ldr	r3, [pc, #248]	; (1450 <usart_init+0x260>)
    1356:	4798      	blx	r3
    1358:	0003      	movs	r3, r0
    135a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    135c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    135e:	3301      	adds	r3, #1
    1360:	d00d      	beq.n	137e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1364:	b2da      	uxtb	r2, r3
    1366:	2320      	movs	r3, #32
    1368:	18fb      	adds	r3, r7, r3
    136a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    136c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    136e:	0c1b      	lsrs	r3, r3, #16
    1370:	b2db      	uxtb	r3, r3
    1372:	2220      	movs	r2, #32
    1374:	18ba      	adds	r2, r7, r2
    1376:	0011      	movs	r1, r2
    1378:	0018      	movs	r0, r3
    137a:	4b36      	ldr	r3, [pc, #216]	; (1454 <usart_init+0x264>)
    137c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    137e:	2347      	movs	r3, #71	; 0x47
    1380:	18fb      	adds	r3, r7, r3
    1382:	781a      	ldrb	r2, [r3, #0]
    1384:	2347      	movs	r3, #71	; 0x47
    1386:	18fb      	adds	r3, r7, r3
    1388:	3201      	adds	r2, #1
    138a:	701a      	strb	r2, [r3, #0]
    138c:	2347      	movs	r3, #71	; 0x47
    138e:	18fb      	adds	r3, r7, r3
    1390:	781b      	ldrb	r3, [r3, #0]
    1392:	2b03      	cmp	r3, #3
    1394:	d9cd      	bls.n	1332 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1396:	2300      	movs	r3, #0
    1398:	63fb      	str	r3, [r7, #60]	; 0x3c
    139a:	e00a      	b.n	13b2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    139c:	68fa      	ldr	r2, [r7, #12]
    139e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13a0:	3302      	adds	r3, #2
    13a2:	009b      	lsls	r3, r3, #2
    13a4:	18d3      	adds	r3, r2, r3
    13a6:	3304      	adds	r3, #4
    13a8:	2200      	movs	r2, #0
    13aa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    13ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13ae:	3301      	adds	r3, #1
    13b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    13b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13b4:	2b05      	cmp	r3, #5
    13b6:	d9f1      	bls.n	139c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	2200      	movs	r2, #0
    13bc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    13be:	68fb      	ldr	r3, [r7, #12]
    13c0:	2200      	movs	r2, #0
    13c2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    13c4:	68fb      	ldr	r3, [r7, #12]
    13c6:	2200      	movs	r2, #0
    13c8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	2200      	movs	r2, #0
    13ce:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	2230      	movs	r2, #48	; 0x30
    13d4:	2100      	movs	r1, #0
    13d6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    13d8:	68fb      	ldr	r3, [r7, #12]
    13da:	2231      	movs	r2, #49	; 0x31
    13dc:	2100      	movs	r1, #0
    13de:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    13e0:	68fb      	ldr	r3, [r7, #12]
    13e2:	2232      	movs	r2, #50	; 0x32
    13e4:	2100      	movs	r1, #0
    13e6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    13e8:	68fb      	ldr	r3, [r7, #12]
    13ea:	2233      	movs	r2, #51	; 0x33
    13ec:	2100      	movs	r1, #0
    13ee:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13f0:	68fb      	ldr	r3, [r7, #12]
    13f2:	681b      	ldr	r3, [r3, #0]
    13f4:	2227      	movs	r2, #39	; 0x27
    13f6:	18bc      	adds	r4, r7, r2
    13f8:	0018      	movs	r0, r3
    13fa:	4b0d      	ldr	r3, [pc, #52]	; (1430 <usart_init+0x240>)
    13fc:	4798      	blx	r3
    13fe:	0003      	movs	r3, r0
    1400:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1402:	4a15      	ldr	r2, [pc, #84]	; (1458 <usart_init+0x268>)
    1404:	2327      	movs	r3, #39	; 0x27
    1406:	18fb      	adds	r3, r7, r3
    1408:	781b      	ldrb	r3, [r3, #0]
    140a:	0011      	movs	r1, r2
    140c:	0018      	movs	r0, r3
    140e:	4b13      	ldr	r3, [pc, #76]	; (145c <usart_init+0x26c>)
    1410:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1412:	2327      	movs	r3, #39	; 0x27
    1414:	18fb      	adds	r3, r7, r3
    1416:	781a      	ldrb	r2, [r3, #0]
    1418:	4b11      	ldr	r3, [pc, #68]	; (1460 <usart_init+0x270>)
    141a:	0092      	lsls	r2, r2, #2
    141c:	68f9      	ldr	r1, [r7, #12]
    141e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    1420:	233b      	movs	r3, #59	; 0x3b
    1422:	18fb      	adds	r3, r7, r3
    1424:	781b      	ldrb	r3, [r3, #0]
}
    1426:	0018      	movs	r0, r3
    1428:	46bd      	mov	sp, r7
    142a:	b013      	add	sp, #76	; 0x4c
    142c:	bd90      	pop	{r4, r7, pc}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	00000691 	.word	0x00000691
    1434:	00000e2d 	.word	0x00000e2d
    1438:	00000e15 	.word	0x00000e15
    143c:	00002a09 	.word	0x00002a09
    1440:	00002a4d 	.word	0x00002a4d
    1444:	00000449 	.word	0x00000449
    1448:	00000f15 	.word	0x00000f15
    144c:	00000e89 	.word	0x00000e89
    1450:	000004d5 	.word	0x000004d5
    1454:	00002cf5 	.word	0x00002cf5
    1458:	000016cd 	.word	0x000016cd
    145c:	00001a21 	.word	0x00001a21
    1460:	200003e4 	.word	0x200003e4

00001464 <system_interrupt_enter_critical_section>:
{
    1464:	b580      	push	{r7, lr}
    1466:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1468:	4b02      	ldr	r3, [pc, #8]	; (1474 <system_interrupt_enter_critical_section+0x10>)
    146a:	4798      	blx	r3
}
    146c:	46c0      	nop			; (mov r8, r8)
    146e:	46bd      	mov	sp, r7
    1470:	bd80      	pop	{r7, pc}
    1472:	46c0      	nop			; (mov r8, r8)
    1474:	00001b61 	.word	0x00001b61

00001478 <system_interrupt_leave_critical_section>:
{
    1478:	b580      	push	{r7, lr}
    147a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    147c:	4b02      	ldr	r3, [pc, #8]	; (1488 <system_interrupt_leave_critical_section+0x10>)
    147e:	4798      	blx	r3
}
    1480:	46c0      	nop			; (mov r8, r8)
    1482:	46bd      	mov	sp, r7
    1484:	bd80      	pop	{r7, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	00001bb5 	.word	0x00001bb5

0000148c <usart_is_syncing>:
{
    148c:	b580      	push	{r7, lr}
    148e:	b084      	sub	sp, #16
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1494:	687b      	ldr	r3, [r7, #4]
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    149a:	68fb      	ldr	r3, [r7, #12]
    149c:	69db      	ldr	r3, [r3, #28]
    149e:	1e5a      	subs	r2, r3, #1
    14a0:	4193      	sbcs	r3, r2
    14a2:	b2db      	uxtb	r3, r3
}
    14a4:	0018      	movs	r0, r3
    14a6:	46bd      	mov	sp, r7
    14a8:	b004      	add	sp, #16
    14aa:	bd80      	pop	{r7, pc}

000014ac <_usart_wait_for_sync>:
{
    14ac:	b580      	push	{r7, lr}
    14ae:	b082      	sub	sp, #8
    14b0:	af00      	add	r7, sp, #0
    14b2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    14b4:	46c0      	nop			; (mov r8, r8)
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	0018      	movs	r0, r3
    14ba:	4b04      	ldr	r3, [pc, #16]	; (14cc <_usart_wait_for_sync+0x20>)
    14bc:	4798      	blx	r3
    14be:	1e03      	subs	r3, r0, #0
    14c0:	d1f9      	bne.n	14b6 <_usart_wait_for_sync+0xa>
}
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	46bd      	mov	sp, r7
    14c6:	b002      	add	sp, #8
    14c8:	bd80      	pop	{r7, pc}
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	0000148d 	.word	0x0000148d

000014d0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    14d0:	b580      	push	{r7, lr}
    14d2:	b086      	sub	sp, #24
    14d4:	af00      	add	r7, sp, #0
    14d6:	60f8      	str	r0, [r7, #12]
    14d8:	60b9      	str	r1, [r7, #8]
    14da:	1dbb      	adds	r3, r7, #6
    14dc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14de:	68fb      	ldr	r3, [r7, #12]
    14e0:	681b      	ldr	r3, [r3, #0]
    14e2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    14e4:	4b0f      	ldr	r3, [pc, #60]	; (1524 <_usart_write_buffer+0x54>)
    14e6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    14e8:	68fb      	ldr	r3, [r7, #12]
    14ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    14ec:	b29b      	uxth	r3, r3
    14ee:	2b00      	cmp	r3, #0
    14f0:	d003      	beq.n	14fa <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    14f2:	4b0d      	ldr	r3, [pc, #52]	; (1528 <_usart_write_buffer+0x58>)
    14f4:	4798      	blx	r3
		return STATUS_BUSY;
    14f6:	2305      	movs	r3, #5
    14f8:	e010      	b.n	151c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    14fa:	68fb      	ldr	r3, [r7, #12]
    14fc:	1dba      	adds	r2, r7, #6
    14fe:	8812      	ldrh	r2, [r2, #0]
    1500:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    1502:	4b09      	ldr	r3, [pc, #36]	; (1528 <_usart_write_buffer+0x58>)
    1504:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    1506:	68fb      	ldr	r3, [r7, #12]
    1508:	68ba      	ldr	r2, [r7, #8]
    150a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	2233      	movs	r2, #51	; 0x33
    1510:	2105      	movs	r1, #5
    1512:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1514:	697b      	ldr	r3, [r7, #20]
    1516:	2201      	movs	r2, #1
    1518:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    151a:	2300      	movs	r3, #0
}
    151c:	0018      	movs	r0, r3
    151e:	46bd      	mov	sp, r7
    1520:	b006      	add	sp, #24
    1522:	bd80      	pop	{r7, pc}
    1524:	00001465 	.word	0x00001465
    1528:	00001479 	.word	0x00001479

0000152c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    152c:	b580      	push	{r7, lr}
    152e:	b086      	sub	sp, #24
    1530:	af00      	add	r7, sp, #0
    1532:	60f8      	str	r0, [r7, #12]
    1534:	60b9      	str	r1, [r7, #8]
    1536:	1dbb      	adds	r3, r7, #6
    1538:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    153a:	68fb      	ldr	r3, [r7, #12]
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    1540:	4b16      	ldr	r3, [pc, #88]	; (159c <_usart_read_buffer+0x70>)
    1542:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1544:	68fb      	ldr	r3, [r7, #12]
    1546:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1548:	b29b      	uxth	r3, r3
    154a:	2b00      	cmp	r3, #0
    154c:	d003      	beq.n	1556 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    154e:	4b14      	ldr	r3, [pc, #80]	; (15a0 <_usart_read_buffer+0x74>)
    1550:	4798      	blx	r3
		return STATUS_BUSY;
    1552:	2305      	movs	r3, #5
    1554:	e01e      	b.n	1594 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	1dba      	adds	r2, r7, #6
    155a:	8812      	ldrh	r2, [r2, #0]
    155c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    155e:	4b10      	ldr	r3, [pc, #64]	; (15a0 <_usart_read_buffer+0x74>)
    1560:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	68ba      	ldr	r2, [r7, #8]
    1566:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	2232      	movs	r2, #50	; 0x32
    156c:	2105      	movs	r1, #5
    156e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1570:	697b      	ldr	r3, [r7, #20]
    1572:	2204      	movs	r2, #4
    1574:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    1576:	68fb      	ldr	r3, [r7, #12]
    1578:	7a1b      	ldrb	r3, [r3, #8]
    157a:	2b00      	cmp	r3, #0
    157c:	d002      	beq.n	1584 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    157e:	697b      	ldr	r3, [r7, #20]
    1580:	2220      	movs	r2, #32
    1582:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1584:	68fb      	ldr	r3, [r7, #12]
    1586:	7a5b      	ldrb	r3, [r3, #9]
    1588:	2b00      	cmp	r3, #0
    158a:	d002      	beq.n	1592 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    158c:	697b      	ldr	r3, [r7, #20]
    158e:	2208      	movs	r2, #8
    1590:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    1592:	2300      	movs	r3, #0
}
    1594:	0018      	movs	r0, r3
    1596:	46bd      	mov	sp, r7
    1598:	b006      	add	sp, #24
    159a:	bd80      	pop	{r7, pc}
    159c:	00001465 	.word	0x00001465
    15a0:	00001479 	.word	0x00001479

000015a4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    15a4:	b580      	push	{r7, lr}
    15a6:	b084      	sub	sp, #16
    15a8:	af00      	add	r7, sp, #0
    15aa:	60f8      	str	r0, [r7, #12]
    15ac:	60b9      	str	r1, [r7, #8]
    15ae:	1dfb      	adds	r3, r7, #7
    15b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    15b2:	1dfb      	adds	r3, r7, #7
    15b4:	781b      	ldrb	r3, [r3, #0]
    15b6:	68fa      	ldr	r2, [r7, #12]
    15b8:	3302      	adds	r3, #2
    15ba:	009b      	lsls	r3, r3, #2
    15bc:	18d3      	adds	r3, r2, r3
    15be:	3304      	adds	r3, #4
    15c0:	68ba      	ldr	r2, [r7, #8]
    15c2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    15c4:	68fb      	ldr	r3, [r7, #12]
    15c6:	2230      	movs	r2, #48	; 0x30
    15c8:	5c9b      	ldrb	r3, [r3, r2]
    15ca:	b25a      	sxtb	r2, r3
    15cc:	1dfb      	adds	r3, r7, #7
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	2101      	movs	r1, #1
    15d2:	4099      	lsls	r1, r3
    15d4:	000b      	movs	r3, r1
    15d6:	b25b      	sxtb	r3, r3
    15d8:	4313      	orrs	r3, r2
    15da:	b25b      	sxtb	r3, r3
    15dc:	b2d9      	uxtb	r1, r3
    15de:	68fb      	ldr	r3, [r7, #12]
    15e0:	2230      	movs	r2, #48	; 0x30
    15e2:	5499      	strb	r1, [r3, r2]
}
    15e4:	46c0      	nop			; (mov r8, r8)
    15e6:	46bd      	mov	sp, r7
    15e8:	b004      	add	sp, #16
    15ea:	bd80      	pop	{r7, pc}

000015ec <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    15ec:	b580      	push	{r7, lr}
    15ee:	b084      	sub	sp, #16
    15f0:	af00      	add	r7, sp, #0
    15f2:	60f8      	str	r0, [r7, #12]
    15f4:	60b9      	str	r1, [r7, #8]
    15f6:	1dbb      	adds	r3, r7, #6
    15f8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    15fa:	1dbb      	adds	r3, r7, #6
    15fc:	881b      	ldrh	r3, [r3, #0]
    15fe:	2b00      	cmp	r3, #0
    1600:	d101      	bne.n	1606 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1602:	2317      	movs	r3, #23
    1604:	e010      	b.n	1628 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1606:	68fb      	ldr	r3, [r7, #12]
    1608:	79db      	ldrb	r3, [r3, #7]
    160a:	2201      	movs	r2, #1
    160c:	4053      	eors	r3, r2
    160e:	b2db      	uxtb	r3, r3
    1610:	2b00      	cmp	r3, #0
    1612:	d001      	beq.n	1618 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    1614:	231c      	movs	r3, #28
    1616:	e007      	b.n	1628 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    1618:	1dbb      	adds	r3, r7, #6
    161a:	881a      	ldrh	r2, [r3, #0]
    161c:	68b9      	ldr	r1, [r7, #8]
    161e:	68fb      	ldr	r3, [r7, #12]
    1620:	0018      	movs	r0, r3
    1622:	4b03      	ldr	r3, [pc, #12]	; (1630 <usart_write_buffer_job+0x44>)
    1624:	4798      	blx	r3
    1626:	0003      	movs	r3, r0
}
    1628:	0018      	movs	r0, r3
    162a:	46bd      	mov	sp, r7
    162c:	b004      	add	sp, #16
    162e:	bd80      	pop	{r7, pc}
    1630:	000014d1 	.word	0x000014d1

00001634 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1634:	b580      	push	{r7, lr}
    1636:	b084      	sub	sp, #16
    1638:	af00      	add	r7, sp, #0
    163a:	60f8      	str	r0, [r7, #12]
    163c:	60b9      	str	r1, [r7, #8]
    163e:	1dbb      	adds	r3, r7, #6
    1640:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1642:	1dbb      	adds	r3, r7, #6
    1644:	881b      	ldrh	r3, [r3, #0]
    1646:	2b00      	cmp	r3, #0
    1648:	d101      	bne.n	164e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    164a:	2317      	movs	r3, #23
    164c:	e010      	b.n	1670 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    164e:	68fb      	ldr	r3, [r7, #12]
    1650:	799b      	ldrb	r3, [r3, #6]
    1652:	2201      	movs	r2, #1
    1654:	4053      	eors	r3, r2
    1656:	b2db      	uxtb	r3, r3
    1658:	2b00      	cmp	r3, #0
    165a:	d001      	beq.n	1660 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    165c:	231c      	movs	r3, #28
    165e:	e007      	b.n	1670 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1660:	1dbb      	adds	r3, r7, #6
    1662:	881a      	ldrh	r2, [r3, #0]
    1664:	68b9      	ldr	r1, [r7, #8]
    1666:	68fb      	ldr	r3, [r7, #12]
    1668:	0018      	movs	r0, r3
    166a:	4b03      	ldr	r3, [pc, #12]	; (1678 <usart_read_buffer_job+0x44>)
    166c:	4798      	blx	r3
    166e:	0003      	movs	r3, r0
}
    1670:	0018      	movs	r0, r3
    1672:	46bd      	mov	sp, r7
    1674:	b004      	add	sp, #16
    1676:	bd80      	pop	{r7, pc}
    1678:	0000152d 	.word	0x0000152d

0000167c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    167c:	b580      	push	{r7, lr}
    167e:	b084      	sub	sp, #16
    1680:	af00      	add	r7, sp, #0
    1682:	6078      	str	r0, [r7, #4]
    1684:	000a      	movs	r2, r1
    1686:	1cfb      	adds	r3, r7, #3
    1688:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    168a:	1cfb      	adds	r3, r7, #3
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	2b00      	cmp	r3, #0
    1690:	d002      	beq.n	1698 <usart_get_job_status+0x1c>
    1692:	2b01      	cmp	r3, #1
    1694:	d007      	beq.n	16a6 <usart_get_job_status+0x2a>
    1696:	e00d      	b.n	16b4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    1698:	230f      	movs	r3, #15
    169a:	18fb      	adds	r3, r7, r3
    169c:	687a      	ldr	r2, [r7, #4]
    169e:	2132      	movs	r1, #50	; 0x32
    16a0:	5c52      	ldrb	r2, [r2, r1]
    16a2:	701a      	strb	r2, [r3, #0]
			break;
    16a4:	e00b      	b.n	16be <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    16a6:	230f      	movs	r3, #15
    16a8:	18fb      	adds	r3, r7, r3
    16aa:	687a      	ldr	r2, [r7, #4]
    16ac:	2133      	movs	r1, #51	; 0x33
    16ae:	5c52      	ldrb	r2, [r2, r1]
    16b0:	701a      	strb	r2, [r3, #0]
			break;
    16b2:	e004      	b.n	16be <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    16b4:	230f      	movs	r3, #15
    16b6:	18fb      	adds	r3, r7, r3
    16b8:	2217      	movs	r2, #23
    16ba:	701a      	strb	r2, [r3, #0]
			break;
    16bc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    16be:	230f      	movs	r3, #15
    16c0:	18fb      	adds	r3, r7, r3
    16c2:	781b      	ldrb	r3, [r3, #0]
}
    16c4:	0018      	movs	r0, r3
    16c6:	46bd      	mov	sp, r7
    16c8:	b004      	add	sp, #16
    16ca:	bd80      	pop	{r7, pc}

000016cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	b088      	sub	sp, #32
    16d0:	af00      	add	r7, sp, #0
    16d2:	0002      	movs	r2, r0
    16d4:	1dfb      	adds	r3, r7, #7
    16d6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    16d8:	1dfb      	adds	r3, r7, #7
    16da:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    16dc:	4ba3      	ldr	r3, [pc, #652]	; (196c <_usart_interrupt_handler+0x2a0>)
    16de:	0092      	lsls	r2, r2, #2
    16e0:	58d3      	ldr	r3, [r2, r3]
    16e2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    16e4:	69bb      	ldr	r3, [r7, #24]
    16e6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    16e8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    16ea:	69bb      	ldr	r3, [r7, #24]
    16ec:	0018      	movs	r0, r3
    16ee:	4ba0      	ldr	r3, [pc, #640]	; (1970 <_usart_interrupt_handler+0x2a4>)
    16f0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    16f2:	697b      	ldr	r3, [r7, #20]
    16f4:	7e1b      	ldrb	r3, [r3, #24]
    16f6:	b2da      	uxtb	r2, r3
    16f8:	2312      	movs	r3, #18
    16fa:	18fb      	adds	r3, r7, r3
    16fc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    16fe:	697b      	ldr	r3, [r7, #20]
    1700:	7d9b      	ldrb	r3, [r3, #22]
    1702:	b2db      	uxtb	r3, r3
    1704:	b29a      	uxth	r2, r3
    1706:	2312      	movs	r3, #18
    1708:	18fb      	adds	r3, r7, r3
    170a:	2112      	movs	r1, #18
    170c:	1879      	adds	r1, r7, r1
    170e:	8809      	ldrh	r1, [r1, #0]
    1710:	400a      	ands	r2, r1
    1712:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1714:	69bb      	ldr	r3, [r7, #24]
    1716:	2230      	movs	r2, #48	; 0x30
    1718:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    171a:	69ba      	ldr	r2, [r7, #24]
    171c:	2131      	movs	r1, #49	; 0x31
    171e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    1720:	4013      	ands	r3, r2
    1722:	b2da      	uxtb	r2, r3
    1724:	2310      	movs	r3, #16
    1726:	18fb      	adds	r3, r7, r3
    1728:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    172a:	2312      	movs	r3, #18
    172c:	18fb      	adds	r3, r7, r3
    172e:	881b      	ldrh	r3, [r3, #0]
    1730:	2201      	movs	r2, #1
    1732:	4013      	ands	r3, r2
    1734:	d044      	beq.n	17c0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    1736:	69bb      	ldr	r3, [r7, #24]
    1738:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    173a:	b29b      	uxth	r3, r3
    173c:	2b00      	cmp	r3, #0
    173e:	d03c      	beq.n	17ba <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1740:	69bb      	ldr	r3, [r7, #24]
    1742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1744:	781b      	ldrb	r3, [r3, #0]
    1746:	b2da      	uxtb	r2, r3
    1748:	231c      	movs	r3, #28
    174a:	18fb      	adds	r3, r7, r3
    174c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    174e:	69bb      	ldr	r3, [r7, #24]
    1750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1752:	1c5a      	adds	r2, r3, #1
    1754:	69bb      	ldr	r3, [r7, #24]
    1756:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1758:	69bb      	ldr	r3, [r7, #24]
    175a:	795b      	ldrb	r3, [r3, #5]
    175c:	2b01      	cmp	r3, #1
    175e:	d113      	bne.n	1788 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1760:	69bb      	ldr	r3, [r7, #24]
    1762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	b2db      	uxtb	r3, r3
    1768:	021b      	lsls	r3, r3, #8
    176a:	b21a      	sxth	r2, r3
    176c:	231c      	movs	r3, #28
    176e:	18fb      	adds	r3, r7, r3
    1770:	2100      	movs	r1, #0
    1772:	5e5b      	ldrsh	r3, [r3, r1]
    1774:	4313      	orrs	r3, r2
    1776:	b21a      	sxth	r2, r3
    1778:	231c      	movs	r3, #28
    177a:	18fb      	adds	r3, r7, r3
    177c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    177e:	69bb      	ldr	r3, [r7, #24]
    1780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1782:	1c5a      	adds	r2, r3, #1
    1784:	69bb      	ldr	r3, [r7, #24]
    1786:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1788:	231c      	movs	r3, #28
    178a:	18fb      	adds	r3, r7, r3
    178c:	881b      	ldrh	r3, [r3, #0]
    178e:	05db      	lsls	r3, r3, #23
    1790:	0ddb      	lsrs	r3, r3, #23
    1792:	b29a      	uxth	r2, r3
    1794:	697b      	ldr	r3, [r7, #20]
    1796:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1798:	69bb      	ldr	r3, [r7, #24]
    179a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    179c:	b29b      	uxth	r3, r3
    179e:	3b01      	subs	r3, #1
    17a0:	b29b      	uxth	r3, r3
    17a2:	69ba      	ldr	r2, [r7, #24]
    17a4:	1c19      	adds	r1, r3, #0
    17a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    17a8:	2b00      	cmp	r3, #0
    17aa:	d109      	bne.n	17c0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    17ac:	697b      	ldr	r3, [r7, #20]
    17ae:	2201      	movs	r2, #1
    17b0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    17b2:	697b      	ldr	r3, [r7, #20]
    17b4:	2202      	movs	r2, #2
    17b6:	759a      	strb	r2, [r3, #22]
    17b8:	e002      	b.n	17c0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    17ba:	697b      	ldr	r3, [r7, #20]
    17bc:	2201      	movs	r2, #1
    17be:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    17c0:	2312      	movs	r3, #18
    17c2:	18fb      	adds	r3, r7, r3
    17c4:	881b      	ldrh	r3, [r3, #0]
    17c6:	2202      	movs	r2, #2
    17c8:	4013      	ands	r3, r2
    17ca:	d011      	beq.n	17f0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    17cc:	697b      	ldr	r3, [r7, #20]
    17ce:	2202      	movs	r2, #2
    17d0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    17d2:	69bb      	ldr	r3, [r7, #24]
    17d4:	2233      	movs	r2, #51	; 0x33
    17d6:	2100      	movs	r1, #0
    17d8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    17da:	2310      	movs	r3, #16
    17dc:	18fb      	adds	r3, r7, r3
    17de:	881b      	ldrh	r3, [r3, #0]
    17e0:	2201      	movs	r2, #1
    17e2:	4013      	ands	r3, r2
    17e4:	d004      	beq.n	17f0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    17e6:	69bb      	ldr	r3, [r7, #24]
    17e8:	68db      	ldr	r3, [r3, #12]
    17ea:	69ba      	ldr	r2, [r7, #24]
    17ec:	0010      	movs	r0, r2
    17ee:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    17f0:	2312      	movs	r3, #18
    17f2:	18fb      	adds	r3, r7, r3
    17f4:	881b      	ldrh	r3, [r3, #0]
    17f6:	2204      	movs	r2, #4
    17f8:	4013      	ands	r3, r2
    17fa:	d100      	bne.n	17fe <_usart_interrupt_handler+0x132>
    17fc:	e0bd      	b.n	197a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    17fe:	69bb      	ldr	r3, [r7, #24]
    1800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1802:	b29b      	uxth	r3, r3
    1804:	2b00      	cmp	r3, #0
    1806:	d100      	bne.n	180a <_usart_interrupt_handler+0x13e>
    1808:	e0b4      	b.n	1974 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    180a:	697b      	ldr	r3, [r7, #20]
    180c:	8b5b      	ldrh	r3, [r3, #26]
    180e:	b29b      	uxth	r3, r3
    1810:	b2da      	uxtb	r2, r3
    1812:	231f      	movs	r3, #31
    1814:	18fb      	adds	r3, r7, r3
    1816:	213f      	movs	r1, #63	; 0x3f
    1818:	400a      	ands	r2, r1
    181a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    181c:	231f      	movs	r3, #31
    181e:	18fb      	adds	r3, r7, r3
    1820:	781b      	ldrb	r3, [r3, #0]
    1822:	2208      	movs	r2, #8
    1824:	4013      	ands	r3, r2
    1826:	d007      	beq.n	1838 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1828:	231f      	movs	r3, #31
    182a:	18fb      	adds	r3, r7, r3
    182c:	221f      	movs	r2, #31
    182e:	18ba      	adds	r2, r7, r2
    1830:	7812      	ldrb	r2, [r2, #0]
    1832:	2108      	movs	r1, #8
    1834:	438a      	bics	r2, r1
    1836:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1838:	231f      	movs	r3, #31
    183a:	18fb      	adds	r3, r7, r3
    183c:	781b      	ldrb	r3, [r3, #0]
    183e:	2b00      	cmp	r3, #0
    1840:	d050      	beq.n	18e4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1842:	231f      	movs	r3, #31
    1844:	18fb      	adds	r3, r7, r3
    1846:	781b      	ldrb	r3, [r3, #0]
    1848:	2202      	movs	r2, #2
    184a:	4013      	ands	r3, r2
    184c:	d007      	beq.n	185e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    184e:	69bb      	ldr	r3, [r7, #24]
    1850:	2232      	movs	r2, #50	; 0x32
    1852:	211a      	movs	r1, #26
    1854:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1856:	697b      	ldr	r3, [r7, #20]
    1858:	2202      	movs	r2, #2
    185a:	835a      	strh	r2, [r3, #26]
    185c:	e036      	b.n	18cc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    185e:	231f      	movs	r3, #31
    1860:	18fb      	adds	r3, r7, r3
    1862:	781b      	ldrb	r3, [r3, #0]
    1864:	2204      	movs	r2, #4
    1866:	4013      	ands	r3, r2
    1868:	d007      	beq.n	187a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    186a:	69bb      	ldr	r3, [r7, #24]
    186c:	2232      	movs	r2, #50	; 0x32
    186e:	211e      	movs	r1, #30
    1870:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1872:	697b      	ldr	r3, [r7, #20]
    1874:	2204      	movs	r2, #4
    1876:	835a      	strh	r2, [r3, #26]
    1878:	e028      	b.n	18cc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    187a:	231f      	movs	r3, #31
    187c:	18fb      	adds	r3, r7, r3
    187e:	781b      	ldrb	r3, [r3, #0]
    1880:	2201      	movs	r2, #1
    1882:	4013      	ands	r3, r2
    1884:	d007      	beq.n	1896 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1886:	69bb      	ldr	r3, [r7, #24]
    1888:	2232      	movs	r2, #50	; 0x32
    188a:	2113      	movs	r1, #19
    188c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    188e:	697b      	ldr	r3, [r7, #20]
    1890:	2201      	movs	r2, #1
    1892:	835a      	strh	r2, [r3, #26]
    1894:	e01a      	b.n	18cc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1896:	231f      	movs	r3, #31
    1898:	18fb      	adds	r3, r7, r3
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	2210      	movs	r2, #16
    189e:	4013      	ands	r3, r2
    18a0:	d007      	beq.n	18b2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    18a2:	69bb      	ldr	r3, [r7, #24]
    18a4:	2232      	movs	r2, #50	; 0x32
    18a6:	2142      	movs	r1, #66	; 0x42
    18a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    18aa:	697b      	ldr	r3, [r7, #20]
    18ac:	2210      	movs	r2, #16
    18ae:	835a      	strh	r2, [r3, #26]
    18b0:	e00c      	b.n	18cc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    18b2:	231f      	movs	r3, #31
    18b4:	18fb      	adds	r3, r7, r3
    18b6:	781b      	ldrb	r3, [r3, #0]
    18b8:	2220      	movs	r2, #32
    18ba:	4013      	ands	r3, r2
    18bc:	d006      	beq.n	18cc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    18be:	69bb      	ldr	r3, [r7, #24]
    18c0:	2232      	movs	r2, #50	; 0x32
    18c2:	2141      	movs	r1, #65	; 0x41
    18c4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    18c6:	697b      	ldr	r3, [r7, #20]
    18c8:	2220      	movs	r2, #32
    18ca:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    18cc:	2310      	movs	r3, #16
    18ce:	18fb      	adds	r3, r7, r3
    18d0:	881b      	ldrh	r3, [r3, #0]
    18d2:	2204      	movs	r2, #4
    18d4:	4013      	ands	r3, r2
				if (callback_status
    18d6:	d050      	beq.n	197a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    18d8:	69bb      	ldr	r3, [r7, #24]
    18da:	695b      	ldr	r3, [r3, #20]
    18dc:	69ba      	ldr	r2, [r7, #24]
    18de:	0010      	movs	r0, r2
    18e0:	4798      	blx	r3
    18e2:	e04a      	b.n	197a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    18e4:	697b      	ldr	r3, [r7, #20]
    18e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    18e8:	b29a      	uxth	r2, r3
    18ea:	230e      	movs	r3, #14
    18ec:	18fb      	adds	r3, r7, r3
    18ee:	05d2      	lsls	r2, r2, #23
    18f0:	0dd2      	lsrs	r2, r2, #23
    18f2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    18f4:	69bb      	ldr	r3, [r7, #24]
    18f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    18f8:	220e      	movs	r2, #14
    18fa:	18ba      	adds	r2, r7, r2
    18fc:	8812      	ldrh	r2, [r2, #0]
    18fe:	b2d2      	uxtb	r2, r2
    1900:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1902:	69bb      	ldr	r3, [r7, #24]
    1904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1906:	1c5a      	adds	r2, r3, #1
    1908:	69bb      	ldr	r3, [r7, #24]
    190a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    190c:	69bb      	ldr	r3, [r7, #24]
    190e:	795b      	ldrb	r3, [r3, #5]
    1910:	2b01      	cmp	r3, #1
    1912:	d10d      	bne.n	1930 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1914:	69bb      	ldr	r3, [r7, #24]
    1916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1918:	220e      	movs	r2, #14
    191a:	18ba      	adds	r2, r7, r2
    191c:	8812      	ldrh	r2, [r2, #0]
    191e:	0a12      	lsrs	r2, r2, #8
    1920:	b292      	uxth	r2, r2
    1922:	b2d2      	uxtb	r2, r2
    1924:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1926:	69bb      	ldr	r3, [r7, #24]
    1928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    192a:	1c5a      	adds	r2, r3, #1
    192c:	69bb      	ldr	r3, [r7, #24]
    192e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1930:	69bb      	ldr	r3, [r7, #24]
    1932:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1934:	b29b      	uxth	r3, r3
    1936:	3b01      	subs	r3, #1
    1938:	b29b      	uxth	r3, r3
    193a:	69ba      	ldr	r2, [r7, #24]
    193c:	1c19      	adds	r1, r3, #0
    193e:	8591      	strh	r1, [r2, #44]	; 0x2c
    1940:	2b00      	cmp	r3, #0
    1942:	d11a      	bne.n	197a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1944:	697b      	ldr	r3, [r7, #20]
    1946:	2204      	movs	r2, #4
    1948:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    194a:	69bb      	ldr	r3, [r7, #24]
    194c:	2232      	movs	r2, #50	; 0x32
    194e:	2100      	movs	r1, #0
    1950:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1952:	2310      	movs	r3, #16
    1954:	18fb      	adds	r3, r7, r3
    1956:	881b      	ldrh	r3, [r3, #0]
    1958:	2202      	movs	r2, #2
    195a:	4013      	ands	r3, r2
					if (callback_status
    195c:	d00d      	beq.n	197a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    195e:	69bb      	ldr	r3, [r7, #24]
    1960:	691b      	ldr	r3, [r3, #16]
    1962:	69ba      	ldr	r2, [r7, #24]
    1964:	0010      	movs	r0, r2
    1966:	4798      	blx	r3
    1968:	e007      	b.n	197a <_usart_interrupt_handler+0x2ae>
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	200003e4 	.word	0x200003e4
    1970:	000014ad 	.word	0x000014ad
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1974:	697b      	ldr	r3, [r7, #20]
    1976:	2204      	movs	r2, #4
    1978:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    197a:	2312      	movs	r3, #18
    197c:	18fb      	adds	r3, r7, r3
    197e:	881b      	ldrh	r3, [r3, #0]
    1980:	2210      	movs	r2, #16
    1982:	4013      	ands	r3, r2
    1984:	d010      	beq.n	19a8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1986:	697b      	ldr	r3, [r7, #20]
    1988:	2210      	movs	r2, #16
    198a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    198c:	697b      	ldr	r3, [r7, #20]
    198e:	2210      	movs	r2, #16
    1990:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1992:	2310      	movs	r3, #16
    1994:	18fb      	adds	r3, r7, r3
    1996:	881b      	ldrh	r3, [r3, #0]
    1998:	2210      	movs	r2, #16
    199a:	4013      	ands	r3, r2
    199c:	d004      	beq.n	19a8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    199e:	69bb      	ldr	r3, [r7, #24]
    19a0:	69db      	ldr	r3, [r3, #28]
    19a2:	69ba      	ldr	r2, [r7, #24]
    19a4:	0010      	movs	r0, r2
    19a6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    19a8:	2312      	movs	r3, #18
    19aa:	18fb      	adds	r3, r7, r3
    19ac:	881b      	ldrh	r3, [r3, #0]
    19ae:	2220      	movs	r2, #32
    19b0:	4013      	ands	r3, r2
    19b2:	d010      	beq.n	19d6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    19b4:	697b      	ldr	r3, [r7, #20]
    19b6:	2220      	movs	r2, #32
    19b8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    19ba:	697b      	ldr	r3, [r7, #20]
    19bc:	2220      	movs	r2, #32
    19be:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    19c0:	2310      	movs	r3, #16
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	881b      	ldrh	r3, [r3, #0]
    19c6:	2208      	movs	r2, #8
    19c8:	4013      	ands	r3, r2
    19ca:	d004      	beq.n	19d6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    19cc:	69bb      	ldr	r3, [r7, #24]
    19ce:	699b      	ldr	r3, [r3, #24]
    19d0:	69ba      	ldr	r2, [r7, #24]
    19d2:	0010      	movs	r0, r2
    19d4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    19d6:	2312      	movs	r3, #18
    19d8:	18fb      	adds	r3, r7, r3
    19da:	881b      	ldrh	r3, [r3, #0]
    19dc:	2208      	movs	r2, #8
    19de:	4013      	ands	r3, r2
    19e0:	d010      	beq.n	1a04 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    19e2:	697b      	ldr	r3, [r7, #20]
    19e4:	2208      	movs	r2, #8
    19e6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    19e8:	697b      	ldr	r3, [r7, #20]
    19ea:	2208      	movs	r2, #8
    19ec:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    19ee:	2310      	movs	r3, #16
    19f0:	18fb      	adds	r3, r7, r3
    19f2:	881b      	ldrh	r3, [r3, #0]
    19f4:	2220      	movs	r2, #32
    19f6:	4013      	ands	r3, r2
    19f8:	d004      	beq.n	1a04 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    19fa:	69bb      	ldr	r3, [r7, #24]
    19fc:	6a1b      	ldr	r3, [r3, #32]
    19fe:	69ba      	ldr	r2, [r7, #24]
    1a00:	0010      	movs	r0, r2
    1a02:	4798      	blx	r3
		}
	}
#endif
}
    1a04:	46c0      	nop			; (mov r8, r8)
    1a06:	46bd      	mov	sp, r7
    1a08:	b008      	add	sp, #32
    1a0a:	bd80      	pop	{r7, pc}

00001a0c <_sercom_default_handler>:
    1a0c:	b580      	push	{r7, lr}
    1a0e:	b082      	sub	sp, #8
    1a10:	af00      	add	r7, sp, #0
    1a12:	0002      	movs	r2, r0
    1a14:	1dfb      	adds	r3, r7, #7
    1a16:	701a      	strb	r2, [r3, #0]
    1a18:	46c0      	nop			; (mov r8, r8)
    1a1a:	46bd      	mov	sp, r7
    1a1c:	b002      	add	sp, #8
    1a1e:	bd80      	pop	{r7, pc}

00001a20 <_sercom_set_handler>:
    1a20:	b580      	push	{r7, lr}
    1a22:	b084      	sub	sp, #16
    1a24:	af00      	add	r7, sp, #0
    1a26:	0002      	movs	r2, r0
    1a28:	6039      	str	r1, [r7, #0]
    1a2a:	1dfb      	adds	r3, r7, #7
    1a2c:	701a      	strb	r2, [r3, #0]
    1a2e:	4b13      	ldr	r3, [pc, #76]	; (1a7c <_sercom_set_handler+0x5c>)
    1a30:	781b      	ldrb	r3, [r3, #0]
    1a32:	2201      	movs	r2, #1
    1a34:	4053      	eors	r3, r2
    1a36:	b2db      	uxtb	r3, r3
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d015      	beq.n	1a68 <_sercom_set_handler+0x48>
    1a3c:	2300      	movs	r3, #0
    1a3e:	60fb      	str	r3, [r7, #12]
    1a40:	e00c      	b.n	1a5c <_sercom_set_handler+0x3c>
    1a42:	4b0f      	ldr	r3, [pc, #60]	; (1a80 <_sercom_set_handler+0x60>)
    1a44:	68fa      	ldr	r2, [r7, #12]
    1a46:	0092      	lsls	r2, r2, #2
    1a48:	490e      	ldr	r1, [pc, #56]	; (1a84 <_sercom_set_handler+0x64>)
    1a4a:	50d1      	str	r1, [r2, r3]
    1a4c:	4b0e      	ldr	r3, [pc, #56]	; (1a88 <_sercom_set_handler+0x68>)
    1a4e:	68fa      	ldr	r2, [r7, #12]
    1a50:	0092      	lsls	r2, r2, #2
    1a52:	2100      	movs	r1, #0
    1a54:	50d1      	str	r1, [r2, r3]
    1a56:	68fb      	ldr	r3, [r7, #12]
    1a58:	3301      	adds	r3, #1
    1a5a:	60fb      	str	r3, [r7, #12]
    1a5c:	68fb      	ldr	r3, [r7, #12]
    1a5e:	2b05      	cmp	r3, #5
    1a60:	d9ef      	bls.n	1a42 <_sercom_set_handler+0x22>
    1a62:	4b06      	ldr	r3, [pc, #24]	; (1a7c <_sercom_set_handler+0x5c>)
    1a64:	2201      	movs	r2, #1
    1a66:	701a      	strb	r2, [r3, #0]
    1a68:	1dfb      	adds	r3, r7, #7
    1a6a:	781a      	ldrb	r2, [r3, #0]
    1a6c:	4b04      	ldr	r3, [pc, #16]	; (1a80 <_sercom_set_handler+0x60>)
    1a6e:	0092      	lsls	r2, r2, #2
    1a70:	6839      	ldr	r1, [r7, #0]
    1a72:	50d1      	str	r1, [r2, r3]
    1a74:	46c0      	nop			; (mov r8, r8)
    1a76:	46bd      	mov	sp, r7
    1a78:	b004      	add	sp, #16
    1a7a:	bd80      	pop	{r7, pc}
    1a7c:	20000091 	.word	0x20000091
    1a80:	20000094 	.word	0x20000094
    1a84:	00001a0d 	.word	0x00001a0d
    1a88:	200003e4 	.word	0x200003e4

00001a8c <_sercom_get_interrupt_vector>:
    1a8c:	b590      	push	{r4, r7, lr}
    1a8e:	b085      	sub	sp, #20
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	2308      	movs	r3, #8
    1a96:	18fb      	adds	r3, r7, r3
    1a98:	4a0b      	ldr	r2, [pc, #44]	; (1ac8 <_sercom_get_interrupt_vector+0x3c>)
    1a9a:	6811      	ldr	r1, [r2, #0]
    1a9c:	6019      	str	r1, [r3, #0]
    1a9e:	8892      	ldrh	r2, [r2, #4]
    1aa0:	809a      	strh	r2, [r3, #4]
    1aa2:	230f      	movs	r3, #15
    1aa4:	18fc      	adds	r4, r7, r3
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	0018      	movs	r0, r3
    1aaa:	4b08      	ldr	r3, [pc, #32]	; (1acc <_sercom_get_interrupt_vector+0x40>)
    1aac:	4798      	blx	r3
    1aae:	0003      	movs	r3, r0
    1ab0:	7023      	strb	r3, [r4, #0]
    1ab2:	230f      	movs	r3, #15
    1ab4:	18fb      	adds	r3, r7, r3
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	2208      	movs	r2, #8
    1aba:	18ba      	adds	r2, r7, r2
    1abc:	5cd3      	ldrb	r3, [r2, r3]
    1abe:	b25b      	sxtb	r3, r3
    1ac0:	0018      	movs	r0, r3
    1ac2:	46bd      	mov	sp, r7
    1ac4:	b005      	add	sp, #20
    1ac6:	bd90      	pop	{r4, r7, pc}
    1ac8:	0000385c 	.word	0x0000385c
    1acc:	00000691 	.word	0x00000691

00001ad0 <SERCOM0_Handler>:
    1ad0:	b580      	push	{r7, lr}
    1ad2:	af00      	add	r7, sp, #0
    1ad4:	4b03      	ldr	r3, [pc, #12]	; (1ae4 <SERCOM0_Handler+0x14>)
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	2000      	movs	r0, #0
    1ada:	4798      	blx	r3
    1adc:	46c0      	nop			; (mov r8, r8)
    1ade:	46bd      	mov	sp, r7
    1ae0:	bd80      	pop	{r7, pc}
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	20000094 	.word	0x20000094

00001ae8 <SERCOM1_Handler>:
    1ae8:	b580      	push	{r7, lr}
    1aea:	af00      	add	r7, sp, #0
    1aec:	4b03      	ldr	r3, [pc, #12]	; (1afc <SERCOM1_Handler+0x14>)
    1aee:	685b      	ldr	r3, [r3, #4]
    1af0:	2001      	movs	r0, #1
    1af2:	4798      	blx	r3
    1af4:	46c0      	nop			; (mov r8, r8)
    1af6:	46bd      	mov	sp, r7
    1af8:	bd80      	pop	{r7, pc}
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	20000094 	.word	0x20000094

00001b00 <SERCOM2_Handler>:
    1b00:	b580      	push	{r7, lr}
    1b02:	af00      	add	r7, sp, #0
    1b04:	4b03      	ldr	r3, [pc, #12]	; (1b14 <SERCOM2_Handler+0x14>)
    1b06:	689b      	ldr	r3, [r3, #8]
    1b08:	2002      	movs	r0, #2
    1b0a:	4798      	blx	r3
    1b0c:	46c0      	nop			; (mov r8, r8)
    1b0e:	46bd      	mov	sp, r7
    1b10:	bd80      	pop	{r7, pc}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	20000094 	.word	0x20000094

00001b18 <SERCOM3_Handler>:
    1b18:	b580      	push	{r7, lr}
    1b1a:	af00      	add	r7, sp, #0
    1b1c:	4b03      	ldr	r3, [pc, #12]	; (1b2c <SERCOM3_Handler+0x14>)
    1b1e:	68db      	ldr	r3, [r3, #12]
    1b20:	2003      	movs	r0, #3
    1b22:	4798      	blx	r3
    1b24:	46c0      	nop			; (mov r8, r8)
    1b26:	46bd      	mov	sp, r7
    1b28:	bd80      	pop	{r7, pc}
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	20000094 	.word	0x20000094

00001b30 <SERCOM4_Handler>:
    1b30:	b580      	push	{r7, lr}
    1b32:	af00      	add	r7, sp, #0
    1b34:	4b03      	ldr	r3, [pc, #12]	; (1b44 <SERCOM4_Handler+0x14>)
    1b36:	691b      	ldr	r3, [r3, #16]
    1b38:	2004      	movs	r0, #4
    1b3a:	4798      	blx	r3
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46bd      	mov	sp, r7
    1b40:	bd80      	pop	{r7, pc}
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	20000094 	.word	0x20000094

00001b48 <SERCOM5_Handler>:
    1b48:	b580      	push	{r7, lr}
    1b4a:	af00      	add	r7, sp, #0
    1b4c:	4b03      	ldr	r3, [pc, #12]	; (1b5c <SERCOM5_Handler+0x14>)
    1b4e:	695b      	ldr	r3, [r3, #20]
    1b50:	2005      	movs	r0, #5
    1b52:	4798      	blx	r3
    1b54:	46c0      	nop			; (mov r8, r8)
    1b56:	46bd      	mov	sp, r7
    1b58:	bd80      	pop	{r7, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	20000094 	.word	0x20000094

00001b60 <cpu_irq_enter_critical>:
    1b60:	b580      	push	{r7, lr}
    1b62:	b082      	sub	sp, #8
    1b64:	af00      	add	r7, sp, #0
    1b66:	4b10      	ldr	r3, [pc, #64]	; (1ba8 <cpu_irq_enter_critical+0x48>)
    1b68:	681b      	ldr	r3, [r3, #0]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d112      	bne.n	1b94 <cpu_irq_enter_critical+0x34>
    1b6e:	f3ef 8310 	mrs	r3, PRIMASK
    1b72:	607b      	str	r3, [r7, #4]
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	2b00      	cmp	r3, #0
    1b78:	d109      	bne.n	1b8e <cpu_irq_enter_critical+0x2e>
    1b7a:	b672      	cpsid	i
    1b7c:	f3bf 8f5f 	dmb	sy
    1b80:	4b0a      	ldr	r3, [pc, #40]	; (1bac <cpu_irq_enter_critical+0x4c>)
    1b82:	2200      	movs	r2, #0
    1b84:	701a      	strb	r2, [r3, #0]
    1b86:	4b0a      	ldr	r3, [pc, #40]	; (1bb0 <cpu_irq_enter_critical+0x50>)
    1b88:	2201      	movs	r2, #1
    1b8a:	701a      	strb	r2, [r3, #0]
    1b8c:	e002      	b.n	1b94 <cpu_irq_enter_critical+0x34>
    1b8e:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <cpu_irq_enter_critical+0x50>)
    1b90:	2200      	movs	r2, #0
    1b92:	701a      	strb	r2, [r3, #0]
    1b94:	4b04      	ldr	r3, [pc, #16]	; (1ba8 <cpu_irq_enter_critical+0x48>)
    1b96:	681b      	ldr	r3, [r3, #0]
    1b98:	1c5a      	adds	r2, r3, #1
    1b9a:	4b03      	ldr	r3, [pc, #12]	; (1ba8 <cpu_irq_enter_critical+0x48>)
    1b9c:	601a      	str	r2, [r3, #0]
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	46bd      	mov	sp, r7
    1ba2:	b002      	add	sp, #8
    1ba4:	bd80      	pop	{r7, pc}
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	200000ac 	.word	0x200000ac
    1bac:	20000004 	.word	0x20000004
    1bb0:	200000b0 	.word	0x200000b0

00001bb4 <cpu_irq_leave_critical>:
    1bb4:	b580      	push	{r7, lr}
    1bb6:	af00      	add	r7, sp, #0
    1bb8:	4b0b      	ldr	r3, [pc, #44]	; (1be8 <cpu_irq_leave_critical+0x34>)
    1bba:	681b      	ldr	r3, [r3, #0]
    1bbc:	1e5a      	subs	r2, r3, #1
    1bbe:	4b0a      	ldr	r3, [pc, #40]	; (1be8 <cpu_irq_leave_critical+0x34>)
    1bc0:	601a      	str	r2, [r3, #0]
    1bc2:	4b09      	ldr	r3, [pc, #36]	; (1be8 <cpu_irq_leave_critical+0x34>)
    1bc4:	681b      	ldr	r3, [r3, #0]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d10a      	bne.n	1be0 <cpu_irq_leave_critical+0x2c>
    1bca:	4b08      	ldr	r3, [pc, #32]	; (1bec <cpu_irq_leave_critical+0x38>)
    1bcc:	781b      	ldrb	r3, [r3, #0]
    1bce:	b2db      	uxtb	r3, r3
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d005      	beq.n	1be0 <cpu_irq_leave_critical+0x2c>
    1bd4:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <cpu_irq_leave_critical+0x3c>)
    1bd6:	2201      	movs	r2, #1
    1bd8:	701a      	strb	r2, [r3, #0]
    1bda:	f3bf 8f5f 	dmb	sy
    1bde:	b662      	cpsie	i
    1be0:	46c0      	nop			; (mov r8, r8)
    1be2:	46bd      	mov	sp, r7
    1be4:	bd80      	pop	{r7, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	200000ac 	.word	0x200000ac
    1bec:	200000b0 	.word	0x200000b0
    1bf0:	20000004 	.word	0x20000004

00001bf4 <system_pinmux_get_group_from_gpio_pin>:
    1bf4:	b580      	push	{r7, lr}
    1bf6:	b084      	sub	sp, #16
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	0002      	movs	r2, r0
    1bfc:	1dfb      	adds	r3, r7, #7
    1bfe:	701a      	strb	r2, [r3, #0]
    1c00:	230f      	movs	r3, #15
    1c02:	18fb      	adds	r3, r7, r3
    1c04:	1dfa      	adds	r2, r7, #7
    1c06:	7812      	ldrb	r2, [r2, #0]
    1c08:	09d2      	lsrs	r2, r2, #7
    1c0a:	701a      	strb	r2, [r3, #0]
    1c0c:	230e      	movs	r3, #14
    1c0e:	18fb      	adds	r3, r7, r3
    1c10:	1dfa      	adds	r2, r7, #7
    1c12:	7812      	ldrb	r2, [r2, #0]
    1c14:	0952      	lsrs	r2, r2, #5
    1c16:	701a      	strb	r2, [r3, #0]
    1c18:	4b0d      	ldr	r3, [pc, #52]	; (1c50 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1c1a:	60bb      	str	r3, [r7, #8]
    1c1c:	230f      	movs	r3, #15
    1c1e:	18fb      	adds	r3, r7, r3
    1c20:	781b      	ldrb	r3, [r3, #0]
    1c22:	2b00      	cmp	r3, #0
    1c24:	d10f      	bne.n	1c46 <system_pinmux_get_group_from_gpio_pin+0x52>
    1c26:	230f      	movs	r3, #15
    1c28:	18fb      	adds	r3, r7, r3
    1c2a:	781b      	ldrb	r3, [r3, #0]
    1c2c:	009b      	lsls	r3, r3, #2
    1c2e:	2210      	movs	r2, #16
    1c30:	4694      	mov	ip, r2
    1c32:	44bc      	add	ip, r7
    1c34:	4463      	add	r3, ip
    1c36:	3b08      	subs	r3, #8
    1c38:	681a      	ldr	r2, [r3, #0]
    1c3a:	230e      	movs	r3, #14
    1c3c:	18fb      	adds	r3, r7, r3
    1c3e:	781b      	ldrb	r3, [r3, #0]
    1c40:	01db      	lsls	r3, r3, #7
    1c42:	18d3      	adds	r3, r2, r3
    1c44:	e000      	b.n	1c48 <system_pinmux_get_group_from_gpio_pin+0x54>
    1c46:	2300      	movs	r3, #0
    1c48:	0018      	movs	r0, r3
    1c4a:	46bd      	mov	sp, r7
    1c4c:	b004      	add	sp, #16
    1c4e:	bd80      	pop	{r7, pc}
    1c50:	41004400 	.word	0x41004400

00001c54 <port_get_group_from_gpio_pin>:
    1c54:	b580      	push	{r7, lr}
    1c56:	b082      	sub	sp, #8
    1c58:	af00      	add	r7, sp, #0
    1c5a:	0002      	movs	r2, r0
    1c5c:	1dfb      	adds	r3, r7, #7
    1c5e:	701a      	strb	r2, [r3, #0]
    1c60:	1dfb      	adds	r3, r7, #7
    1c62:	781b      	ldrb	r3, [r3, #0]
    1c64:	0018      	movs	r0, r3
    1c66:	4b03      	ldr	r3, [pc, #12]	; (1c74 <port_get_group_from_gpio_pin+0x20>)
    1c68:	4798      	blx	r3
    1c6a:	0003      	movs	r3, r0
    1c6c:	0018      	movs	r0, r3
    1c6e:	46bd      	mov	sp, r7
    1c70:	b002      	add	sp, #8
    1c72:	bd80      	pop	{r7, pc}
    1c74:	00001bf5 	.word	0x00001bf5

00001c78 <port_get_config_defaults>:
    1c78:	b580      	push	{r7, lr}
    1c7a:	b082      	sub	sp, #8
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	6078      	str	r0, [r7, #4]
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	2200      	movs	r2, #0
    1c84:	701a      	strb	r2, [r3, #0]
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	2201      	movs	r2, #1
    1c8a:	705a      	strb	r2, [r3, #1]
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	2200      	movs	r2, #0
    1c90:	709a      	strb	r2, [r3, #2]
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	46bd      	mov	sp, r7
    1c96:	b002      	add	sp, #8
    1c98:	bd80      	pop	{r7, pc}
	...

00001c9c <port_pin_set_output_level>:
    1c9c:	b580      	push	{r7, lr}
    1c9e:	b084      	sub	sp, #16
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	0002      	movs	r2, r0
    1ca4:	1dfb      	adds	r3, r7, #7
    1ca6:	701a      	strb	r2, [r3, #0]
    1ca8:	1dbb      	adds	r3, r7, #6
    1caa:	1c0a      	adds	r2, r1, #0
    1cac:	701a      	strb	r2, [r3, #0]
    1cae:	1dfb      	adds	r3, r7, #7
    1cb0:	781b      	ldrb	r3, [r3, #0]
    1cb2:	0018      	movs	r0, r3
    1cb4:	4b0d      	ldr	r3, [pc, #52]	; (1cec <port_pin_set_output_level+0x50>)
    1cb6:	4798      	blx	r3
    1cb8:	0003      	movs	r3, r0
    1cba:	60fb      	str	r3, [r7, #12]
    1cbc:	1dfb      	adds	r3, r7, #7
    1cbe:	781b      	ldrb	r3, [r3, #0]
    1cc0:	221f      	movs	r2, #31
    1cc2:	4013      	ands	r3, r2
    1cc4:	2201      	movs	r2, #1
    1cc6:	409a      	lsls	r2, r3
    1cc8:	0013      	movs	r3, r2
    1cca:	60bb      	str	r3, [r7, #8]
    1ccc:	1dbb      	adds	r3, r7, #6
    1cce:	781b      	ldrb	r3, [r3, #0]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d003      	beq.n	1cdc <port_pin_set_output_level+0x40>
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	68ba      	ldr	r2, [r7, #8]
    1cd8:	619a      	str	r2, [r3, #24]
    1cda:	e002      	b.n	1ce2 <port_pin_set_output_level+0x46>
    1cdc:	68fb      	ldr	r3, [r7, #12]
    1cde:	68ba      	ldr	r2, [r7, #8]
    1ce0:	615a      	str	r2, [r3, #20]
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	46bd      	mov	sp, r7
    1ce6:	b004      	add	sp, #16
    1ce8:	bd80      	pop	{r7, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	00001c55 	.word	0x00001c55

00001cf0 <system_board_init>:
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	1d3b      	adds	r3, r7, #4
    1cf8:	0018      	movs	r0, r3
    1cfa:	4b0e      	ldr	r3, [pc, #56]	; (1d34 <system_board_init+0x44>)
    1cfc:	4798      	blx	r3
    1cfe:	1d3b      	adds	r3, r7, #4
    1d00:	2201      	movs	r2, #1
    1d02:	701a      	strb	r2, [r3, #0]
    1d04:	1d3b      	adds	r3, r7, #4
    1d06:	0019      	movs	r1, r3
    1d08:	2017      	movs	r0, #23
    1d0a:	4b0b      	ldr	r3, [pc, #44]	; (1d38 <system_board_init+0x48>)
    1d0c:	4798      	blx	r3
    1d0e:	2101      	movs	r1, #1
    1d10:	2017      	movs	r0, #23
    1d12:	4b0a      	ldr	r3, [pc, #40]	; (1d3c <system_board_init+0x4c>)
    1d14:	4798      	blx	r3
    1d16:	1d3b      	adds	r3, r7, #4
    1d18:	2200      	movs	r2, #0
    1d1a:	701a      	strb	r2, [r3, #0]
    1d1c:	1d3b      	adds	r3, r7, #4
    1d1e:	2201      	movs	r2, #1
    1d20:	705a      	strb	r2, [r3, #1]
    1d22:	1d3b      	adds	r3, r7, #4
    1d24:	0019      	movs	r1, r3
    1d26:	2037      	movs	r0, #55	; 0x37
    1d28:	4b03      	ldr	r3, [pc, #12]	; (1d38 <system_board_init+0x48>)
    1d2a:	4798      	blx	r3
    1d2c:	46c0      	nop			; (mov r8, r8)
    1d2e:	46bd      	mov	sp, r7
    1d30:	b002      	add	sp, #8
    1d32:	bd80      	pop	{r7, pc}
    1d34:	00001c79 	.word	0x00001c79
    1d38:	00001d69 	.word	0x00001d69
    1d3c:	00001c9d 	.word	0x00001c9d

00001d40 <system_pinmux_get_config_defaults>:
    1d40:	b580      	push	{r7, lr}
    1d42:	b082      	sub	sp, #8
    1d44:	af00      	add	r7, sp, #0
    1d46:	6078      	str	r0, [r7, #4]
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	2280      	movs	r2, #128	; 0x80
    1d4c:	701a      	strb	r2, [r3, #0]
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	2200      	movs	r2, #0
    1d52:	705a      	strb	r2, [r3, #1]
    1d54:	687b      	ldr	r3, [r7, #4]
    1d56:	2201      	movs	r2, #1
    1d58:	709a      	strb	r2, [r3, #2]
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	2200      	movs	r2, #0
    1d5e:	70da      	strb	r2, [r3, #3]
    1d60:	46c0      	nop			; (mov r8, r8)
    1d62:	46bd      	mov	sp, r7
    1d64:	b002      	add	sp, #8
    1d66:	bd80      	pop	{r7, pc}

00001d68 <port_pin_set_config>:
    1d68:	b580      	push	{r7, lr}
    1d6a:	b084      	sub	sp, #16
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	0002      	movs	r2, r0
    1d70:	6039      	str	r1, [r7, #0]
    1d72:	1dfb      	adds	r3, r7, #7
    1d74:	701a      	strb	r2, [r3, #0]
    1d76:	230c      	movs	r3, #12
    1d78:	18fb      	adds	r3, r7, r3
    1d7a:	0018      	movs	r0, r3
    1d7c:	4b10      	ldr	r3, [pc, #64]	; (1dc0 <port_pin_set_config+0x58>)
    1d7e:	4798      	blx	r3
    1d80:	230c      	movs	r3, #12
    1d82:	18fb      	adds	r3, r7, r3
    1d84:	2280      	movs	r2, #128	; 0x80
    1d86:	701a      	strb	r2, [r3, #0]
    1d88:	683b      	ldr	r3, [r7, #0]
    1d8a:	781a      	ldrb	r2, [r3, #0]
    1d8c:	230c      	movs	r3, #12
    1d8e:	18fb      	adds	r3, r7, r3
    1d90:	705a      	strb	r2, [r3, #1]
    1d92:	683b      	ldr	r3, [r7, #0]
    1d94:	785a      	ldrb	r2, [r3, #1]
    1d96:	230c      	movs	r3, #12
    1d98:	18fb      	adds	r3, r7, r3
    1d9a:	709a      	strb	r2, [r3, #2]
    1d9c:	683b      	ldr	r3, [r7, #0]
    1d9e:	789a      	ldrb	r2, [r3, #2]
    1da0:	230c      	movs	r3, #12
    1da2:	18fb      	adds	r3, r7, r3
    1da4:	70da      	strb	r2, [r3, #3]
    1da6:	230c      	movs	r3, #12
    1da8:	18fa      	adds	r2, r7, r3
    1daa:	1dfb      	adds	r3, r7, #7
    1dac:	781b      	ldrb	r3, [r3, #0]
    1dae:	0011      	movs	r1, r2
    1db0:	0018      	movs	r0, r3
    1db2:	4b04      	ldr	r3, [pc, #16]	; (1dc4 <port_pin_set_config+0x5c>)
    1db4:	4798      	blx	r3
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	46bd      	mov	sp, r7
    1dba:	b004      	add	sp, #16
    1dbc:	bd80      	pop	{r7, pc}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	00001d41 	.word	0x00001d41
    1dc4:	00002cf5 	.word	0x00002cf5

00001dc8 <system_gclk_gen_get_config_defaults>:
    1dc8:	b580      	push	{r7, lr}
    1dca:	b082      	sub	sp, #8
    1dcc:	af00      	add	r7, sp, #0
    1dce:	6078      	str	r0, [r7, #4]
    1dd0:	687b      	ldr	r3, [r7, #4]
    1dd2:	2201      	movs	r2, #1
    1dd4:	605a      	str	r2, [r3, #4]
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	2200      	movs	r2, #0
    1dda:	705a      	strb	r2, [r3, #1]
    1ddc:	687b      	ldr	r3, [r7, #4]
    1dde:	2206      	movs	r2, #6
    1de0:	701a      	strb	r2, [r3, #0]
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	2200      	movs	r2, #0
    1de6:	721a      	strb	r2, [r3, #8]
    1de8:	687b      	ldr	r3, [r7, #4]
    1dea:	2200      	movs	r2, #0
    1dec:	725a      	strb	r2, [r3, #9]
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	46bd      	mov	sp, r7
    1df2:	b002      	add	sp, #8
    1df4:	bd80      	pop	{r7, pc}

00001df6 <system_gclk_chan_get_config_defaults>:
    1df6:	b580      	push	{r7, lr}
    1df8:	b082      	sub	sp, #8
    1dfa:	af00      	add	r7, sp, #0
    1dfc:	6078      	str	r0, [r7, #4]
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	2200      	movs	r2, #0
    1e02:	701a      	strb	r2, [r3, #0]
    1e04:	46c0      	nop			; (mov r8, r8)
    1e06:	46bd      	mov	sp, r7
    1e08:	b002      	add	sp, #8
    1e0a:	bd80      	pop	{r7, pc}

00001e0c <system_clock_source_xosc32k_get_config_defaults>:
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b082      	sub	sp, #8
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	2200      	movs	r2, #0
    1e18:	701a      	strb	r2, [r3, #0]
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	2204      	movs	r2, #4
    1e1e:	705a      	strb	r2, [r3, #1]
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	2200      	movs	r2, #0
    1e24:	709a      	strb	r2, [r3, #2]
    1e26:	687b      	ldr	r3, [r7, #4]
    1e28:	2280      	movs	r2, #128	; 0x80
    1e2a:	0212      	lsls	r2, r2, #8
    1e2c:	609a      	str	r2, [r3, #8]
    1e2e:	687b      	ldr	r3, [r7, #4]
    1e30:	2200      	movs	r2, #0
    1e32:	70da      	strb	r2, [r3, #3]
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	2201      	movs	r2, #1
    1e38:	711a      	strb	r2, [r3, #4]
    1e3a:	687b      	ldr	r3, [r7, #4]
    1e3c:	2200      	movs	r2, #0
    1e3e:	731a      	strb	r2, [r3, #12]
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	2201      	movs	r2, #1
    1e44:	735a      	strb	r2, [r3, #13]
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	2200      	movs	r2, #0
    1e4a:	739a      	strb	r2, [r3, #14]
    1e4c:	46c0      	nop			; (mov r8, r8)
    1e4e:	46bd      	mov	sp, r7
    1e50:	b002      	add	sp, #8
    1e52:	bd80      	pop	{r7, pc}

00001e54 <system_clock_source_osc8m_get_config_defaults>:
    1e54:	b580      	push	{r7, lr}
    1e56:	b082      	sub	sp, #8
    1e58:	af00      	add	r7, sp, #0
    1e5a:	6078      	str	r0, [r7, #4]
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	2203      	movs	r2, #3
    1e60:	701a      	strb	r2, [r3, #0]
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	2200      	movs	r2, #0
    1e66:	705a      	strb	r2, [r3, #1]
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	2201      	movs	r2, #1
    1e6c:	709a      	strb	r2, [r3, #2]
    1e6e:	46c0      	nop			; (mov r8, r8)
    1e70:	46bd      	mov	sp, r7
    1e72:	b002      	add	sp, #8
    1e74:	bd80      	pop	{r7, pc}

00001e76 <system_clock_source_dfll_get_config_defaults>:
    1e76:	b580      	push	{r7, lr}
    1e78:	b082      	sub	sp, #8
    1e7a:	af00      	add	r7, sp, #0
    1e7c:	6078      	str	r0, [r7, #4]
    1e7e:	687b      	ldr	r3, [r7, #4]
    1e80:	2200      	movs	r2, #0
    1e82:	701a      	strb	r2, [r3, #0]
    1e84:	687b      	ldr	r3, [r7, #4]
    1e86:	2200      	movs	r2, #0
    1e88:	805a      	strh	r2, [r3, #2]
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	2200      	movs	r2, #0
    1e8e:	809a      	strh	r2, [r3, #4]
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	2200      	movs	r2, #0
    1e94:	719a      	strb	r2, [r3, #6]
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	2200      	movs	r2, #0
    1e9a:	71da      	strb	r2, [r3, #7]
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	2201      	movs	r2, #1
    1ea0:	705a      	strb	r2, [r3, #1]
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	2207      	movs	r2, #7
    1ea6:	721a      	strb	r2, [r3, #8]
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	223f      	movs	r2, #63	; 0x3f
    1eac:	815a      	strh	r2, [r3, #10]
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	2201      	movs	r2, #1
    1eb2:	731a      	strb	r2, [r3, #12]
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	2201      	movs	r2, #1
    1eb8:	81da      	strh	r2, [r3, #14]
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	2206      	movs	r2, #6
    1ebe:	821a      	strh	r2, [r3, #16]
    1ec0:	46c0      	nop			; (mov r8, r8)
    1ec2:	46bd      	mov	sp, r7
    1ec4:	b002      	add	sp, #8
    1ec6:	bd80      	pop	{r7, pc}

00001ec8 <system_cpu_clock_set_divider>:
    1ec8:	b580      	push	{r7, lr}
    1eca:	b082      	sub	sp, #8
    1ecc:	af00      	add	r7, sp, #0
    1ece:	0002      	movs	r2, r0
    1ed0:	1dfb      	adds	r3, r7, #7
    1ed2:	701a      	strb	r2, [r3, #0]
    1ed4:	4a03      	ldr	r2, [pc, #12]	; (1ee4 <system_cpu_clock_set_divider+0x1c>)
    1ed6:	1dfb      	adds	r3, r7, #7
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	7213      	strb	r3, [r2, #8]
    1edc:	46c0      	nop			; (mov r8, r8)
    1ede:	46bd      	mov	sp, r7
    1ee0:	b002      	add	sp, #8
    1ee2:	bd80      	pop	{r7, pc}
    1ee4:	40000400 	.word	0x40000400

00001ee8 <system_apb_clock_set_divider>:
    1ee8:	b580      	push	{r7, lr}
    1eea:	b082      	sub	sp, #8
    1eec:	af00      	add	r7, sp, #0
    1eee:	0002      	movs	r2, r0
    1ef0:	1dfb      	adds	r3, r7, #7
    1ef2:	701a      	strb	r2, [r3, #0]
    1ef4:	1dbb      	adds	r3, r7, #6
    1ef6:	1c0a      	adds	r2, r1, #0
    1ef8:	701a      	strb	r2, [r3, #0]
    1efa:	1dfb      	adds	r3, r7, #7
    1efc:	781b      	ldrb	r3, [r3, #0]
    1efe:	2b01      	cmp	r3, #1
    1f00:	d008      	beq.n	1f14 <system_apb_clock_set_divider+0x2c>
    1f02:	2b02      	cmp	r3, #2
    1f04:	d00b      	beq.n	1f1e <system_apb_clock_set_divider+0x36>
    1f06:	2b00      	cmp	r3, #0
    1f08:	d10e      	bne.n	1f28 <system_apb_clock_set_divider+0x40>
    1f0a:	4a0b      	ldr	r2, [pc, #44]	; (1f38 <system_apb_clock_set_divider+0x50>)
    1f0c:	1dbb      	adds	r3, r7, #6
    1f0e:	781b      	ldrb	r3, [r3, #0]
    1f10:	7253      	strb	r3, [r2, #9]
    1f12:	e00b      	b.n	1f2c <system_apb_clock_set_divider+0x44>
    1f14:	4a08      	ldr	r2, [pc, #32]	; (1f38 <system_apb_clock_set_divider+0x50>)
    1f16:	1dbb      	adds	r3, r7, #6
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	7293      	strb	r3, [r2, #10]
    1f1c:	e006      	b.n	1f2c <system_apb_clock_set_divider+0x44>
    1f1e:	4a06      	ldr	r2, [pc, #24]	; (1f38 <system_apb_clock_set_divider+0x50>)
    1f20:	1dbb      	adds	r3, r7, #6
    1f22:	781b      	ldrb	r3, [r3, #0]
    1f24:	72d3      	strb	r3, [r2, #11]
    1f26:	e001      	b.n	1f2c <system_apb_clock_set_divider+0x44>
    1f28:	2317      	movs	r3, #23
    1f2a:	e000      	b.n	1f2e <system_apb_clock_set_divider+0x46>
    1f2c:	2300      	movs	r3, #0
    1f2e:	0018      	movs	r0, r3
    1f30:	46bd      	mov	sp, r7
    1f32:	b002      	add	sp, #8
    1f34:	bd80      	pop	{r7, pc}
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	40000400 	.word	0x40000400

00001f3c <system_flash_set_waitstates>:
    1f3c:	b580      	push	{r7, lr}
    1f3e:	b082      	sub	sp, #8
    1f40:	af00      	add	r7, sp, #0
    1f42:	0002      	movs	r2, r0
    1f44:	1dfb      	adds	r3, r7, #7
    1f46:	701a      	strb	r2, [r3, #0]
    1f48:	4a08      	ldr	r2, [pc, #32]	; (1f6c <system_flash_set_waitstates+0x30>)
    1f4a:	1dfb      	adds	r3, r7, #7
    1f4c:	781b      	ldrb	r3, [r3, #0]
    1f4e:	210f      	movs	r1, #15
    1f50:	400b      	ands	r3, r1
    1f52:	b2d9      	uxtb	r1, r3
    1f54:	6853      	ldr	r3, [r2, #4]
    1f56:	200f      	movs	r0, #15
    1f58:	4001      	ands	r1, r0
    1f5a:	0049      	lsls	r1, r1, #1
    1f5c:	201e      	movs	r0, #30
    1f5e:	4383      	bics	r3, r0
    1f60:	430b      	orrs	r3, r1
    1f62:	6053      	str	r3, [r2, #4]
    1f64:	46c0      	nop			; (mov r8, r8)
    1f66:	46bd      	mov	sp, r7
    1f68:	b002      	add	sp, #8
    1f6a:	bd80      	pop	{r7, pc}
    1f6c:	41004000 	.word	0x41004000

00001f70 <_system_dfll_wait_for_sync>:
    1f70:	b580      	push	{r7, lr}
    1f72:	af00      	add	r7, sp, #0
    1f74:	46c0      	nop			; (mov r8, r8)
    1f76:	4b04      	ldr	r3, [pc, #16]	; (1f88 <_system_dfll_wait_for_sync+0x18>)
    1f78:	68db      	ldr	r3, [r3, #12]
    1f7a:	2210      	movs	r2, #16
    1f7c:	4013      	ands	r3, r2
    1f7e:	d0fa      	beq.n	1f76 <_system_dfll_wait_for_sync+0x6>
    1f80:	46c0      	nop			; (mov r8, r8)
    1f82:	46bd      	mov	sp, r7
    1f84:	bd80      	pop	{r7, pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	40000800 	.word	0x40000800

00001f8c <_system_clock_source_dfll_set_config_errata_9905>:
    1f8c:	b580      	push	{r7, lr}
    1f8e:	af00      	add	r7, sp, #0
    1f90:	4b0c      	ldr	r3, [pc, #48]	; (1fc4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1f92:	2202      	movs	r2, #2
    1f94:	849a      	strh	r2, [r3, #36]	; 0x24
    1f96:	4b0c      	ldr	r3, [pc, #48]	; (1fc8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1f98:	4798      	blx	r3
    1f9a:	4a0a      	ldr	r2, [pc, #40]	; (1fc4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1f9c:	4b0b      	ldr	r3, [pc, #44]	; (1fcc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1f9e:	689b      	ldr	r3, [r3, #8]
    1fa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    1fa2:	4a08      	ldr	r2, [pc, #32]	; (1fc4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1fa4:	4b09      	ldr	r3, [pc, #36]	; (1fcc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1fa6:	685b      	ldr	r3, [r3, #4]
    1fa8:	6293      	str	r3, [r2, #40]	; 0x28
    1faa:	4b06      	ldr	r3, [pc, #24]	; (1fc4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1fac:	2200      	movs	r2, #0
    1fae:	849a      	strh	r2, [r3, #36]	; 0x24
    1fb0:	4b05      	ldr	r3, [pc, #20]	; (1fc8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1fb2:	4798      	blx	r3
    1fb4:	4a03      	ldr	r2, [pc, #12]	; (1fc4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1fb6:	4b05      	ldr	r3, [pc, #20]	; (1fcc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	b29b      	uxth	r3, r3
    1fbc:	8493      	strh	r3, [r2, #36]	; 0x24
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	46bd      	mov	sp, r7
    1fc2:	bd80      	pop	{r7, pc}
    1fc4:	40000800 	.word	0x40000800
    1fc8:	00001f71 	.word	0x00001f71
    1fcc:	200000b4 	.word	0x200000b4

00001fd0 <system_clock_source_get_hz>:
    1fd0:	b580      	push	{r7, lr}
    1fd2:	b082      	sub	sp, #8
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	0002      	movs	r2, r0
    1fd8:	1dfb      	adds	r3, r7, #7
    1fda:	701a      	strb	r2, [r3, #0]
    1fdc:	1dfb      	adds	r3, r7, #7
    1fde:	781b      	ldrb	r3, [r3, #0]
    1fe0:	2b08      	cmp	r3, #8
    1fe2:	d841      	bhi.n	2068 <STACK_SIZE+0x68>
    1fe4:	009a      	lsls	r2, r3, #2
    1fe6:	4b23      	ldr	r3, [pc, #140]	; (2074 <STACK_SIZE+0x74>)
    1fe8:	18d3      	adds	r3, r2, r3
    1fea:	681b      	ldr	r3, [r3, #0]
    1fec:	469f      	mov	pc, r3
    1fee:	4b22      	ldr	r3, [pc, #136]	; (2078 <STACK_SIZE+0x78>)
    1ff0:	691b      	ldr	r3, [r3, #16]
    1ff2:	e03a      	b.n	206a <STACK_SIZE+0x6a>
    1ff4:	4b21      	ldr	r3, [pc, #132]	; (207c <STACK_SIZE+0x7c>)
    1ff6:	6a1b      	ldr	r3, [r3, #32]
    1ff8:	059b      	lsls	r3, r3, #22
    1ffa:	0f9b      	lsrs	r3, r3, #30
    1ffc:	b2db      	uxtb	r3, r3
    1ffe:	001a      	movs	r2, r3
    2000:	4b1f      	ldr	r3, [pc, #124]	; (2080 <STACK_SIZE+0x80>)
    2002:	40d3      	lsrs	r3, r2
    2004:	e031      	b.n	206a <STACK_SIZE+0x6a>
    2006:	2380      	movs	r3, #128	; 0x80
    2008:	021b      	lsls	r3, r3, #8
    200a:	e02e      	b.n	206a <STACK_SIZE+0x6a>
    200c:	2380      	movs	r3, #128	; 0x80
    200e:	021b      	lsls	r3, r3, #8
    2010:	e02b      	b.n	206a <STACK_SIZE+0x6a>
    2012:	4b19      	ldr	r3, [pc, #100]	; (2078 <STACK_SIZE+0x78>)
    2014:	695b      	ldr	r3, [r3, #20]
    2016:	e028      	b.n	206a <STACK_SIZE+0x6a>
    2018:	4b17      	ldr	r3, [pc, #92]	; (2078 <STACK_SIZE+0x78>)
    201a:	681b      	ldr	r3, [r3, #0]
    201c:	2202      	movs	r2, #2
    201e:	4013      	ands	r3, r2
    2020:	d101      	bne.n	2026 <STACK_SIZE+0x26>
    2022:	2300      	movs	r3, #0
    2024:	e021      	b.n	206a <STACK_SIZE+0x6a>
    2026:	4b17      	ldr	r3, [pc, #92]	; (2084 <STACK_SIZE+0x84>)
    2028:	4798      	blx	r3
    202a:	4b13      	ldr	r3, [pc, #76]	; (2078 <STACK_SIZE+0x78>)
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	2224      	movs	r2, #36	; 0x24
    2030:	4013      	ands	r3, r2
    2032:	2b04      	cmp	r3, #4
    2034:	d109      	bne.n	204a <STACK_SIZE+0x4a>
    2036:	2000      	movs	r0, #0
    2038:	4b13      	ldr	r3, [pc, #76]	; (2088 <STACK_SIZE+0x88>)
    203a:	4798      	blx	r3
    203c:	0002      	movs	r2, r0
    203e:	4b0e      	ldr	r3, [pc, #56]	; (2078 <STACK_SIZE+0x78>)
    2040:	689b      	ldr	r3, [r3, #8]
    2042:	041b      	lsls	r3, r3, #16
    2044:	0c1b      	lsrs	r3, r3, #16
    2046:	4353      	muls	r3, r2
    2048:	e00f      	b.n	206a <STACK_SIZE+0x6a>
    204a:	4b10      	ldr	r3, [pc, #64]	; (208c <STACK_SIZE+0x8c>)
    204c:	e00d      	b.n	206a <STACK_SIZE+0x6a>
    204e:	4a0b      	ldr	r2, [pc, #44]	; (207c <STACK_SIZE+0x7c>)
    2050:	2350      	movs	r3, #80	; 0x50
    2052:	5cd3      	ldrb	r3, [r2, r3]
    2054:	b2db      	uxtb	r3, r3
    2056:	001a      	movs	r2, r3
    2058:	2304      	movs	r3, #4
    205a:	4013      	ands	r3, r2
    205c:	d101      	bne.n	2062 <STACK_SIZE+0x62>
    205e:	2300      	movs	r3, #0
    2060:	e003      	b.n	206a <STACK_SIZE+0x6a>
    2062:	4b05      	ldr	r3, [pc, #20]	; (2078 <STACK_SIZE+0x78>)
    2064:	68db      	ldr	r3, [r3, #12]
    2066:	e000      	b.n	206a <STACK_SIZE+0x6a>
    2068:	2300      	movs	r3, #0
    206a:	0018      	movs	r0, r3
    206c:	46bd      	mov	sp, r7
    206e:	b002      	add	sp, #8
    2070:	bd80      	pop	{r7, pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00003864 	.word	0x00003864
    2078:	200000b4 	.word	0x200000b4
    207c:	40000800 	.word	0x40000800
    2080:	007a1200 	.word	0x007a1200
    2084:	00001f71 	.word	0x00001f71
    2088:	00002b2d 	.word	0x00002b2d
    208c:	02dc6c00 	.word	0x02dc6c00

00002090 <system_clock_source_osc8m_set_config>:
    2090:	b580      	push	{r7, lr}
    2092:	b084      	sub	sp, #16
    2094:	af00      	add	r7, sp, #0
    2096:	6078      	str	r0, [r7, #4]
    2098:	4b1a      	ldr	r3, [pc, #104]	; (2104 <system_clock_source_osc8m_set_config+0x74>)
    209a:	6a1b      	ldr	r3, [r3, #32]
    209c:	60fb      	str	r3, [r7, #12]
    209e:	687b      	ldr	r3, [r7, #4]
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	1c1a      	adds	r2, r3, #0
    20a4:	2303      	movs	r3, #3
    20a6:	4013      	ands	r3, r2
    20a8:	b2da      	uxtb	r2, r3
    20aa:	230d      	movs	r3, #13
    20ac:	18fb      	adds	r3, r7, r3
    20ae:	2103      	movs	r1, #3
    20b0:	400a      	ands	r2, r1
    20b2:	0010      	movs	r0, r2
    20b4:	781a      	ldrb	r2, [r3, #0]
    20b6:	2103      	movs	r1, #3
    20b8:	438a      	bics	r2, r1
    20ba:	1c11      	adds	r1, r2, #0
    20bc:	1c02      	adds	r2, r0, #0
    20be:	430a      	orrs	r2, r1
    20c0:	701a      	strb	r2, [r3, #0]
    20c2:	687b      	ldr	r3, [r7, #4]
    20c4:	789a      	ldrb	r2, [r3, #2]
    20c6:	230c      	movs	r3, #12
    20c8:	18fb      	adds	r3, r7, r3
    20ca:	01d0      	lsls	r0, r2, #7
    20cc:	781a      	ldrb	r2, [r3, #0]
    20ce:	217f      	movs	r1, #127	; 0x7f
    20d0:	400a      	ands	r2, r1
    20d2:	1c11      	adds	r1, r2, #0
    20d4:	1c02      	adds	r2, r0, #0
    20d6:	430a      	orrs	r2, r1
    20d8:	701a      	strb	r2, [r3, #0]
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	785a      	ldrb	r2, [r3, #1]
    20de:	230c      	movs	r3, #12
    20e0:	18fb      	adds	r3, r7, r3
    20e2:	2101      	movs	r1, #1
    20e4:	400a      	ands	r2, r1
    20e6:	0190      	lsls	r0, r2, #6
    20e8:	781a      	ldrb	r2, [r3, #0]
    20ea:	2140      	movs	r1, #64	; 0x40
    20ec:	438a      	bics	r2, r1
    20ee:	1c11      	adds	r1, r2, #0
    20f0:	1c02      	adds	r2, r0, #0
    20f2:	430a      	orrs	r2, r1
    20f4:	701a      	strb	r2, [r3, #0]
    20f6:	4b03      	ldr	r3, [pc, #12]	; (2104 <system_clock_source_osc8m_set_config+0x74>)
    20f8:	68fa      	ldr	r2, [r7, #12]
    20fa:	621a      	str	r2, [r3, #32]
    20fc:	46c0      	nop			; (mov r8, r8)
    20fe:	46bd      	mov	sp, r7
    2100:	b004      	add	sp, #16
    2102:	bd80      	pop	{r7, pc}
    2104:	40000800 	.word	0x40000800

00002108 <system_clock_source_xosc32k_set_config>:
    2108:	b580      	push	{r7, lr}
    210a:	b084      	sub	sp, #16
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
    2110:	4a43      	ldr	r2, [pc, #268]	; (2220 <system_clock_source_xosc32k_set_config+0x118>)
    2112:	230c      	movs	r3, #12
    2114:	18fb      	adds	r3, r7, r3
    2116:	8a92      	ldrh	r2, [r2, #20]
    2118:	801a      	strh	r2, [r3, #0]
    211a:	687b      	ldr	r3, [r7, #4]
    211c:	785b      	ldrb	r3, [r3, #1]
    211e:	1c1a      	adds	r2, r3, #0
    2120:	2307      	movs	r3, #7
    2122:	4013      	ands	r3, r2
    2124:	b2da      	uxtb	r2, r3
    2126:	230c      	movs	r3, #12
    2128:	18fb      	adds	r3, r7, r3
    212a:	2107      	movs	r1, #7
    212c:	400a      	ands	r2, r1
    212e:	0010      	movs	r0, r2
    2130:	785a      	ldrb	r2, [r3, #1]
    2132:	2107      	movs	r1, #7
    2134:	438a      	bics	r2, r1
    2136:	1c11      	adds	r1, r2, #0
    2138:	1c02      	adds	r2, r0, #0
    213a:	430a      	orrs	r2, r1
    213c:	705a      	strb	r2, [r3, #1]
    213e:	687b      	ldr	r3, [r7, #4]
    2140:	781b      	ldrb	r3, [r3, #0]
    2142:	2b00      	cmp	r3, #0
    2144:	d106      	bne.n	2154 <system_clock_source_xosc32k_set_config+0x4c>
    2146:	230c      	movs	r3, #12
    2148:	18fb      	adds	r3, r7, r3
    214a:	781a      	ldrb	r2, [r3, #0]
    214c:	2104      	movs	r1, #4
    214e:	430a      	orrs	r2, r1
    2150:	701a      	strb	r2, [r3, #0]
    2152:	e005      	b.n	2160 <system_clock_source_xosc32k_set_config+0x58>
    2154:	230c      	movs	r3, #12
    2156:	18fb      	adds	r3, r7, r3
    2158:	781a      	ldrb	r2, [r3, #0]
    215a:	2104      	movs	r1, #4
    215c:	438a      	bics	r2, r1
    215e:	701a      	strb	r2, [r3, #0]
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	789a      	ldrb	r2, [r3, #2]
    2164:	230c      	movs	r3, #12
    2166:	18fb      	adds	r3, r7, r3
    2168:	2101      	movs	r1, #1
    216a:	400a      	ands	r2, r1
    216c:	0150      	lsls	r0, r2, #5
    216e:	781a      	ldrb	r2, [r3, #0]
    2170:	2120      	movs	r1, #32
    2172:	438a      	bics	r2, r1
    2174:	1c11      	adds	r1, r2, #0
    2176:	1c02      	adds	r2, r0, #0
    2178:	430a      	orrs	r2, r1
    217a:	701a      	strb	r2, [r3, #0]
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	78da      	ldrb	r2, [r3, #3]
    2180:	230c      	movs	r3, #12
    2182:	18fb      	adds	r3, r7, r3
    2184:	2101      	movs	r1, #1
    2186:	400a      	ands	r2, r1
    2188:	0110      	lsls	r0, r2, #4
    218a:	781a      	ldrb	r2, [r3, #0]
    218c:	2110      	movs	r1, #16
    218e:	438a      	bics	r2, r1
    2190:	1c11      	adds	r1, r2, #0
    2192:	1c02      	adds	r2, r0, #0
    2194:	430a      	orrs	r2, r1
    2196:	701a      	strb	r2, [r3, #0]
    2198:	687b      	ldr	r3, [r7, #4]
    219a:	791a      	ldrb	r2, [r3, #4]
    219c:	230c      	movs	r3, #12
    219e:	18fb      	adds	r3, r7, r3
    21a0:	2101      	movs	r1, #1
    21a2:	400a      	ands	r2, r1
    21a4:	00d0      	lsls	r0, r2, #3
    21a6:	781a      	ldrb	r2, [r3, #0]
    21a8:	2108      	movs	r1, #8
    21aa:	438a      	bics	r2, r1
    21ac:	1c11      	adds	r1, r2, #0
    21ae:	1c02      	adds	r2, r0, #0
    21b0:	430a      	orrs	r2, r1
    21b2:	701a      	strb	r2, [r3, #0]
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	7b5a      	ldrb	r2, [r3, #13]
    21b8:	230c      	movs	r3, #12
    21ba:	18fb      	adds	r3, r7, r3
    21bc:	01d0      	lsls	r0, r2, #7
    21be:	781a      	ldrb	r2, [r3, #0]
    21c0:	217f      	movs	r1, #127	; 0x7f
    21c2:	400a      	ands	r2, r1
    21c4:	1c11      	adds	r1, r2, #0
    21c6:	1c02      	adds	r2, r0, #0
    21c8:	430a      	orrs	r2, r1
    21ca:	701a      	strb	r2, [r3, #0]
    21cc:	687b      	ldr	r3, [r7, #4]
    21ce:	7b1a      	ldrb	r2, [r3, #12]
    21d0:	230c      	movs	r3, #12
    21d2:	18fb      	adds	r3, r7, r3
    21d4:	2101      	movs	r1, #1
    21d6:	400a      	ands	r2, r1
    21d8:	0190      	lsls	r0, r2, #6
    21da:	781a      	ldrb	r2, [r3, #0]
    21dc:	2140      	movs	r1, #64	; 0x40
    21de:	438a      	bics	r2, r1
    21e0:	1c11      	adds	r1, r2, #0
    21e2:	1c02      	adds	r2, r0, #0
    21e4:	430a      	orrs	r2, r1
    21e6:	701a      	strb	r2, [r3, #0]
    21e8:	687b      	ldr	r3, [r7, #4]
    21ea:	7b9a      	ldrb	r2, [r3, #14]
    21ec:	230c      	movs	r3, #12
    21ee:	18fb      	adds	r3, r7, r3
    21f0:	2101      	movs	r1, #1
    21f2:	400a      	ands	r2, r1
    21f4:	0110      	lsls	r0, r2, #4
    21f6:	785a      	ldrb	r2, [r3, #1]
    21f8:	2110      	movs	r1, #16
    21fa:	438a      	bics	r2, r1
    21fc:	1c11      	adds	r1, r2, #0
    21fe:	1c02      	adds	r2, r0, #0
    2200:	430a      	orrs	r2, r1
    2202:	705a      	strb	r2, [r3, #1]
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	689a      	ldr	r2, [r3, #8]
    2208:	4b06      	ldr	r3, [pc, #24]	; (2224 <system_clock_source_xosc32k_set_config+0x11c>)
    220a:	615a      	str	r2, [r3, #20]
    220c:	4a04      	ldr	r2, [pc, #16]	; (2220 <system_clock_source_xosc32k_set_config+0x118>)
    220e:	230c      	movs	r3, #12
    2210:	18fb      	adds	r3, r7, r3
    2212:	881b      	ldrh	r3, [r3, #0]
    2214:	8293      	strh	r3, [r2, #20]
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	46bd      	mov	sp, r7
    221a:	b004      	add	sp, #16
    221c:	bd80      	pop	{r7, pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	40000800 	.word	0x40000800
    2224:	200000b4 	.word	0x200000b4

00002228 <system_clock_source_dfll_set_config>:
    2228:	b580      	push	{r7, lr}
    222a:	b082      	sub	sp, #8
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	7a1b      	ldrb	r3, [r3, #8]
    2234:	029b      	lsls	r3, r3, #10
    2236:	041b      	lsls	r3, r3, #16
    2238:	0c1a      	lsrs	r2, r3, #16
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	895b      	ldrh	r3, [r3, #10]
    223e:	059b      	lsls	r3, r3, #22
    2240:	0d9b      	lsrs	r3, r3, #22
    2242:	431a      	orrs	r2, r3
    2244:	4b2a      	ldr	r3, [pc, #168]	; (22f0 <system_clock_source_dfll_set_config+0xc8>)
    2246:	605a      	str	r2, [r3, #4]
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	799a      	ldrb	r2, [r3, #6]
    224c:	687b      	ldr	r3, [r7, #4]
    224e:	79db      	ldrb	r3, [r3, #7]
    2250:	4313      	orrs	r3, r2
    2252:	b2db      	uxtb	r3, r3
    2254:	001a      	movs	r2, r3
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	885b      	ldrh	r3, [r3, #2]
    225a:	4313      	orrs	r3, r2
    225c:	687a      	ldr	r2, [r7, #4]
    225e:	8892      	ldrh	r2, [r2, #4]
    2260:	431a      	orrs	r2, r3
    2262:	687b      	ldr	r3, [r7, #4]
    2264:	785b      	ldrb	r3, [r3, #1]
    2266:	01db      	lsls	r3, r3, #7
    2268:	431a      	orrs	r2, r3
    226a:	4b21      	ldr	r3, [pc, #132]	; (22f0 <system_clock_source_dfll_set_config+0xc8>)
    226c:	601a      	str	r2, [r3, #0]
    226e:	687b      	ldr	r3, [r7, #4]
    2270:	781b      	ldrb	r3, [r3, #0]
    2272:	2b04      	cmp	r3, #4
    2274:	d116      	bne.n	22a4 <system_clock_source_dfll_set_config+0x7c>
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	7b1b      	ldrb	r3, [r3, #12]
    227a:	069b      	lsls	r3, r3, #26
    227c:	001a      	movs	r2, r3
    227e:	687b      	ldr	r3, [r7, #4]
    2280:	89db      	ldrh	r3, [r3, #14]
    2282:	041b      	lsls	r3, r3, #16
    2284:	0019      	movs	r1, r3
    2286:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <system_clock_source_dfll_set_config+0xcc>)
    2288:	400b      	ands	r3, r1
    228a:	4313      	orrs	r3, r2
    228c:	687a      	ldr	r2, [r7, #4]
    228e:	8a12      	ldrh	r2, [r2, #16]
    2290:	431a      	orrs	r2, r3
    2292:	4b17      	ldr	r3, [pc, #92]	; (22f0 <system_clock_source_dfll_set_config+0xc8>)
    2294:	609a      	str	r2, [r3, #8]
    2296:	4b16      	ldr	r3, [pc, #88]	; (22f0 <system_clock_source_dfll_set_config+0xc8>)
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	687a      	ldr	r2, [r7, #4]
    229c:	7812      	ldrb	r2, [r2, #0]
    229e:	431a      	orrs	r2, r3
    22a0:	4b13      	ldr	r3, [pc, #76]	; (22f0 <system_clock_source_dfll_set_config+0xc8>)
    22a2:	601a      	str	r2, [r3, #0]
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	781b      	ldrb	r3, [r3, #0]
    22a8:	2b20      	cmp	r3, #32
    22aa:	d11c      	bne.n	22e6 <system_clock_source_dfll_set_config+0xbe>
    22ac:	687b      	ldr	r3, [r7, #4]
    22ae:	7b1b      	ldrb	r3, [r3, #12]
    22b0:	069b      	lsls	r3, r3, #26
    22b2:	001a      	movs	r2, r3
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	89db      	ldrh	r3, [r3, #14]
    22b8:	041b      	lsls	r3, r3, #16
    22ba:	0019      	movs	r1, r3
    22bc:	4b0d      	ldr	r3, [pc, #52]	; (22f4 <system_clock_source_dfll_set_config+0xcc>)
    22be:	400b      	ands	r3, r1
    22c0:	4313      	orrs	r3, r2
    22c2:	687a      	ldr	r2, [r7, #4]
    22c4:	8a12      	ldrh	r2, [r2, #16]
    22c6:	431a      	orrs	r2, r3
    22c8:	4b09      	ldr	r3, [pc, #36]	; (22f0 <system_clock_source_dfll_set_config+0xc8>)
    22ca:	609a      	str	r2, [r3, #8]
    22cc:	4b08      	ldr	r3, [pc, #32]	; (22f0 <system_clock_source_dfll_set_config+0xc8>)
    22ce:	681b      	ldr	r3, [r3, #0]
    22d0:	687a      	ldr	r2, [r7, #4]
    22d2:	7812      	ldrb	r2, [r2, #0]
    22d4:	2104      	movs	r1, #4
    22d6:	430a      	orrs	r2, r1
    22d8:	b2d2      	uxtb	r2, r2
    22da:	4313      	orrs	r3, r2
    22dc:	2280      	movs	r2, #128	; 0x80
    22de:	00d2      	lsls	r2, r2, #3
    22e0:	431a      	orrs	r2, r3
    22e2:	4b03      	ldr	r3, [pc, #12]	; (22f0 <system_clock_source_dfll_set_config+0xc8>)
    22e4:	601a      	str	r2, [r3, #0]
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	46bd      	mov	sp, r7
    22ea:	b002      	add	sp, #8
    22ec:	bd80      	pop	{r7, pc}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	200000b4 	.word	0x200000b4
    22f4:	03ff0000 	.word	0x03ff0000

000022f8 <system_clock_source_enable>:
    22f8:	b580      	push	{r7, lr}
    22fa:	b082      	sub	sp, #8
    22fc:	af00      	add	r7, sp, #0
    22fe:	0002      	movs	r2, r0
    2300:	1dfb      	adds	r3, r7, #7
    2302:	701a      	strb	r2, [r3, #0]
    2304:	1dfb      	adds	r3, r7, #7
    2306:	781b      	ldrb	r3, [r3, #0]
    2308:	2b08      	cmp	r3, #8
    230a:	d83b      	bhi.n	2384 <system_clock_source_enable+0x8c>
    230c:	009a      	lsls	r2, r3, #2
    230e:	4b21      	ldr	r3, [pc, #132]	; (2394 <system_clock_source_enable+0x9c>)
    2310:	18d3      	adds	r3, r2, r3
    2312:	681b      	ldr	r3, [r3, #0]
    2314:	469f      	mov	pc, r3
    2316:	4b20      	ldr	r3, [pc, #128]	; (2398 <system_clock_source_enable+0xa0>)
    2318:	4a1f      	ldr	r2, [pc, #124]	; (2398 <system_clock_source_enable+0xa0>)
    231a:	6a12      	ldr	r2, [r2, #32]
    231c:	2102      	movs	r1, #2
    231e:	430a      	orrs	r2, r1
    2320:	621a      	str	r2, [r3, #32]
    2322:	2300      	movs	r3, #0
    2324:	e031      	b.n	238a <system_clock_source_enable+0x92>
    2326:	4b1c      	ldr	r3, [pc, #112]	; (2398 <system_clock_source_enable+0xa0>)
    2328:	4a1b      	ldr	r2, [pc, #108]	; (2398 <system_clock_source_enable+0xa0>)
    232a:	6992      	ldr	r2, [r2, #24]
    232c:	2102      	movs	r1, #2
    232e:	430a      	orrs	r2, r1
    2330:	619a      	str	r2, [r3, #24]
    2332:	e029      	b.n	2388 <system_clock_source_enable+0x90>
    2334:	4a18      	ldr	r2, [pc, #96]	; (2398 <system_clock_source_enable+0xa0>)
    2336:	4b18      	ldr	r3, [pc, #96]	; (2398 <system_clock_source_enable+0xa0>)
    2338:	8a1b      	ldrh	r3, [r3, #16]
    233a:	b29b      	uxth	r3, r3
    233c:	2102      	movs	r1, #2
    233e:	430b      	orrs	r3, r1
    2340:	b29b      	uxth	r3, r3
    2342:	8213      	strh	r3, [r2, #16]
    2344:	e020      	b.n	2388 <system_clock_source_enable+0x90>
    2346:	4a14      	ldr	r2, [pc, #80]	; (2398 <system_clock_source_enable+0xa0>)
    2348:	4b13      	ldr	r3, [pc, #76]	; (2398 <system_clock_source_enable+0xa0>)
    234a:	8a9b      	ldrh	r3, [r3, #20]
    234c:	b29b      	uxth	r3, r3
    234e:	2102      	movs	r1, #2
    2350:	430b      	orrs	r3, r1
    2352:	b29b      	uxth	r3, r3
    2354:	8293      	strh	r3, [r2, #20]
    2356:	e017      	b.n	2388 <system_clock_source_enable+0x90>
    2358:	4b10      	ldr	r3, [pc, #64]	; (239c <system_clock_source_enable+0xa4>)
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	2202      	movs	r2, #2
    235e:	431a      	orrs	r2, r3
    2360:	4b0e      	ldr	r3, [pc, #56]	; (239c <system_clock_source_enable+0xa4>)
    2362:	601a      	str	r2, [r3, #0]
    2364:	4b0e      	ldr	r3, [pc, #56]	; (23a0 <system_clock_source_enable+0xa8>)
    2366:	4798      	blx	r3
    2368:	e00e      	b.n	2388 <system_clock_source_enable+0x90>
    236a:	4a0b      	ldr	r2, [pc, #44]	; (2398 <system_clock_source_enable+0xa0>)
    236c:	490a      	ldr	r1, [pc, #40]	; (2398 <system_clock_source_enable+0xa0>)
    236e:	2344      	movs	r3, #68	; 0x44
    2370:	5ccb      	ldrb	r3, [r1, r3]
    2372:	b2db      	uxtb	r3, r3
    2374:	2102      	movs	r1, #2
    2376:	430b      	orrs	r3, r1
    2378:	b2d9      	uxtb	r1, r3
    237a:	2344      	movs	r3, #68	; 0x44
    237c:	54d1      	strb	r1, [r2, r3]
    237e:	e003      	b.n	2388 <system_clock_source_enable+0x90>
    2380:	2300      	movs	r3, #0
    2382:	e002      	b.n	238a <system_clock_source_enable+0x92>
    2384:	2317      	movs	r3, #23
    2386:	e000      	b.n	238a <system_clock_source_enable+0x92>
    2388:	2300      	movs	r3, #0
    238a:	0018      	movs	r0, r3
    238c:	46bd      	mov	sp, r7
    238e:	b002      	add	sp, #8
    2390:	bd80      	pop	{r7, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	00003888 	.word	0x00003888
    2398:	40000800 	.word	0x40000800
    239c:	200000b4 	.word	0x200000b4
    23a0:	00001f8d 	.word	0x00001f8d

000023a4 <system_clock_source_is_ready>:
    23a4:	b580      	push	{r7, lr}
    23a6:	b084      	sub	sp, #16
    23a8:	af00      	add	r7, sp, #0
    23aa:	0002      	movs	r2, r0
    23ac:	1dfb      	adds	r3, r7, #7
    23ae:	701a      	strb	r2, [r3, #0]
    23b0:	2300      	movs	r3, #0
    23b2:	60fb      	str	r3, [r7, #12]
    23b4:	1dfb      	adds	r3, r7, #7
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	2b08      	cmp	r3, #8
    23ba:	d821      	bhi.n	2400 <system_clock_source_is_ready+0x5c>
    23bc:	009a      	lsls	r2, r3, #2
    23be:	4b18      	ldr	r3, [pc, #96]	; (2420 <system_clock_source_is_ready+0x7c>)
    23c0:	18d3      	adds	r3, r2, r3
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	469f      	mov	pc, r3
    23c6:	2308      	movs	r3, #8
    23c8:	60fb      	str	r3, [r7, #12]
    23ca:	e01b      	b.n	2404 <system_clock_source_is_ready+0x60>
    23cc:	2304      	movs	r3, #4
    23ce:	60fb      	str	r3, [r7, #12]
    23d0:	e018      	b.n	2404 <system_clock_source_is_ready+0x60>
    23d2:	2301      	movs	r3, #1
    23d4:	60fb      	str	r3, [r7, #12]
    23d6:	e015      	b.n	2404 <system_clock_source_is_ready+0x60>
    23d8:	2302      	movs	r3, #2
    23da:	60fb      	str	r3, [r7, #12]
    23dc:	e012      	b.n	2404 <system_clock_source_is_ready+0x60>
    23de:	23d0      	movs	r3, #208	; 0xd0
    23e0:	60fb      	str	r3, [r7, #12]
    23e2:	e00f      	b.n	2404 <system_clock_source_is_ready+0x60>
    23e4:	4a0f      	ldr	r2, [pc, #60]	; (2424 <system_clock_source_is_ready+0x80>)
    23e6:	2350      	movs	r3, #80	; 0x50
    23e8:	5cd3      	ldrb	r3, [r2, r3]
    23ea:	b2db      	uxtb	r3, r3
    23ec:	001a      	movs	r2, r3
    23ee:	2303      	movs	r3, #3
    23f0:	4013      	ands	r3, r2
    23f2:	3b03      	subs	r3, #3
    23f4:	425a      	negs	r2, r3
    23f6:	4153      	adcs	r3, r2
    23f8:	b2db      	uxtb	r3, r3
    23fa:	e00c      	b.n	2416 <system_clock_source_is_ready+0x72>
    23fc:	2301      	movs	r3, #1
    23fe:	e00a      	b.n	2416 <system_clock_source_is_ready+0x72>
    2400:	2300      	movs	r3, #0
    2402:	e008      	b.n	2416 <system_clock_source_is_ready+0x72>
    2404:	4b07      	ldr	r3, [pc, #28]	; (2424 <system_clock_source_is_ready+0x80>)
    2406:	68db      	ldr	r3, [r3, #12]
    2408:	68fa      	ldr	r2, [r7, #12]
    240a:	401a      	ands	r2, r3
    240c:	68fb      	ldr	r3, [r7, #12]
    240e:	1ad3      	subs	r3, r2, r3
    2410:	425a      	negs	r2, r3
    2412:	4153      	adcs	r3, r2
    2414:	b2db      	uxtb	r3, r3
    2416:	0018      	movs	r0, r3
    2418:	46bd      	mov	sp, r7
    241a:	b004      	add	sp, #16
    241c:	bd80      	pop	{r7, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	000038ac 	.word	0x000038ac
    2424:	40000800 	.word	0x40000800

00002428 <_switch_peripheral_gclk>:
    2428:	b580      	push	{r7, lr}
    242a:	b082      	sub	sp, #8
    242c:	af00      	add	r7, sp, #0
    242e:	003b      	movs	r3, r7
    2430:	2202      	movs	r2, #2
    2432:	701a      	strb	r2, [r3, #0]
    2434:	2300      	movs	r3, #0
    2436:	607b      	str	r3, [r7, #4]
    2438:	e009      	b.n	244e <_switch_peripheral_gclk+0x26>
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	b2db      	uxtb	r3, r3
    243e:	003a      	movs	r2, r7
    2440:	0011      	movs	r1, r2
    2442:	0018      	movs	r0, r3
    2444:	4b05      	ldr	r3, [pc, #20]	; (245c <_switch_peripheral_gclk+0x34>)
    2446:	4798      	blx	r3
    2448:	687b      	ldr	r3, [r7, #4]
    244a:	3301      	adds	r3, #1
    244c:	607b      	str	r3, [r7, #4]
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	2b24      	cmp	r3, #36	; 0x24
    2452:	d9f2      	bls.n	243a <_switch_peripheral_gclk+0x12>
    2454:	46c0      	nop			; (mov r8, r8)
    2456:	46bd      	mov	sp, r7
    2458:	b002      	add	sp, #8
    245a:	bd80      	pop	{r7, pc}
    245c:	00002a09 	.word	0x00002a09

00002460 <system_clock_init>:
    2460:	b580      	push	{r7, lr}
    2462:	b0aa      	sub	sp, #168	; 0xa8
    2464:	af00      	add	r7, sp, #0
    2466:	4b87      	ldr	r3, [pc, #540]	; (2684 <system_clock_init+0x224>)
    2468:	22c2      	movs	r2, #194	; 0xc2
    246a:	00d2      	lsls	r2, r2, #3
    246c:	609a      	str	r2, [r3, #8]
    246e:	2002      	movs	r0, #2
    2470:	4b85      	ldr	r3, [pc, #532]	; (2688 <system_clock_init+0x228>)
    2472:	4798      	blx	r3
    2474:	4b85      	ldr	r3, [pc, #532]	; (268c <system_clock_init+0x22c>)
    2476:	4798      	blx	r3
    2478:	2394      	movs	r3, #148	; 0x94
    247a:	18fb      	adds	r3, r7, r3
    247c:	0018      	movs	r0, r3
    247e:	4b84      	ldr	r3, [pc, #528]	; (2690 <system_clock_init+0x230>)
    2480:	4798      	blx	r3
    2482:	2394      	movs	r3, #148	; 0x94
    2484:	18fb      	adds	r3, r7, r3
    2486:	2280      	movs	r2, #128	; 0x80
    2488:	0212      	lsls	r2, r2, #8
    248a:	609a      	str	r2, [r3, #8]
    248c:	2394      	movs	r3, #148	; 0x94
    248e:	18fb      	adds	r3, r7, r3
    2490:	2200      	movs	r2, #0
    2492:	701a      	strb	r2, [r3, #0]
    2494:	2394      	movs	r3, #148	; 0x94
    2496:	18fb      	adds	r3, r7, r3
    2498:	2203      	movs	r2, #3
    249a:	705a      	strb	r2, [r3, #1]
    249c:	2394      	movs	r3, #148	; 0x94
    249e:	18fb      	adds	r3, r7, r3
    24a0:	2200      	movs	r2, #0
    24a2:	709a      	strb	r2, [r3, #2]
    24a4:	2394      	movs	r3, #148	; 0x94
    24a6:	18fb      	adds	r3, r7, r3
    24a8:	2200      	movs	r2, #0
    24aa:	70da      	strb	r2, [r3, #3]
    24ac:	2394      	movs	r3, #148	; 0x94
    24ae:	18fb      	adds	r3, r7, r3
    24b0:	2201      	movs	r2, #1
    24b2:	711a      	strb	r2, [r3, #4]
    24b4:	2394      	movs	r3, #148	; 0x94
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	2200      	movs	r2, #0
    24ba:	735a      	strb	r2, [r3, #13]
    24bc:	2394      	movs	r3, #148	; 0x94
    24be:	18fb      	adds	r3, r7, r3
    24c0:	2200      	movs	r2, #0
    24c2:	731a      	strb	r2, [r3, #12]
    24c4:	2394      	movs	r3, #148	; 0x94
    24c6:	18fb      	adds	r3, r7, r3
    24c8:	0018      	movs	r0, r3
    24ca:	4b72      	ldr	r3, [pc, #456]	; (2694 <system_clock_init+0x234>)
    24cc:	4798      	blx	r3
    24ce:	2005      	movs	r0, #5
    24d0:	4b71      	ldr	r3, [pc, #452]	; (2698 <system_clock_init+0x238>)
    24d2:	4798      	blx	r3
    24d4:	46c0      	nop			; (mov r8, r8)
    24d6:	2005      	movs	r0, #5
    24d8:	4b70      	ldr	r3, [pc, #448]	; (269c <system_clock_init+0x23c>)
    24da:	4798      	blx	r3
    24dc:	0003      	movs	r3, r0
    24de:	001a      	movs	r2, r3
    24e0:	2301      	movs	r3, #1
    24e2:	4053      	eors	r3, r2
    24e4:	b2db      	uxtb	r3, r3
    24e6:	2b00      	cmp	r3, #0
    24e8:	d1f5      	bne.n	24d6 <system_clock_init+0x76>
    24ea:	4a66      	ldr	r2, [pc, #408]	; (2684 <system_clock_init+0x224>)
    24ec:	8a93      	ldrh	r3, [r2, #20]
    24ee:	2180      	movs	r1, #128	; 0x80
    24f0:	430b      	orrs	r3, r1
    24f2:	8293      	strh	r3, [r2, #20]
    24f4:	2380      	movs	r3, #128	; 0x80
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	0018      	movs	r0, r3
    24fa:	4b69      	ldr	r3, [pc, #420]	; (26a0 <system_clock_init+0x240>)
    24fc:	4798      	blx	r3
    24fe:	2380      	movs	r3, #128	; 0x80
    2500:	18fb      	adds	r3, r7, r3
    2502:	2204      	movs	r2, #4
    2504:	701a      	strb	r2, [r3, #0]
    2506:	2380      	movs	r3, #128	; 0x80
    2508:	18fb      	adds	r3, r7, r3
    250a:	2200      	movs	r2, #0
    250c:	705a      	strb	r2, [r3, #1]
    250e:	4b65      	ldr	r3, [pc, #404]	; (26a4 <system_clock_init+0x244>)
    2510:	681b      	ldr	r3, [r3, #0]
    2512:	0e9b      	lsrs	r3, r3, #26
    2514:	22a4      	movs	r2, #164	; 0xa4
    2516:	18ba      	adds	r2, r7, r2
    2518:	6013      	str	r3, [r2, #0]
    251a:	23a4      	movs	r3, #164	; 0xa4
    251c:	18fb      	adds	r3, r7, r3
    251e:	681b      	ldr	r3, [r3, #0]
    2520:	2b3f      	cmp	r3, #63	; 0x3f
    2522:	d103      	bne.n	252c <system_clock_init+0xcc>
    2524:	231f      	movs	r3, #31
    2526:	22a4      	movs	r2, #164	; 0xa4
    2528:	18ba      	adds	r2, r7, r2
    252a:	6013      	str	r3, [r2, #0]
    252c:	23a4      	movs	r3, #164	; 0xa4
    252e:	18fb      	adds	r3, r7, r3
    2530:	681b      	ldr	r3, [r3, #0]
    2532:	b2da      	uxtb	r2, r3
    2534:	2380      	movs	r3, #128	; 0x80
    2536:	18fb      	adds	r3, r7, r3
    2538:	721a      	strb	r2, [r3, #8]
    253a:	2380      	movs	r3, #128	; 0x80
    253c:	18fb      	adds	r3, r7, r3
    253e:	2200      	movs	r2, #0
    2540:	805a      	strh	r2, [r3, #2]
    2542:	2380      	movs	r3, #128	; 0x80
    2544:	18fb      	adds	r3, r7, r3
    2546:	2200      	movs	r2, #0
    2548:	71da      	strb	r2, [r3, #7]
    254a:	2380      	movs	r3, #128	; 0x80
    254c:	18fb      	adds	r3, r7, r3
    254e:	2200      	movs	r2, #0
    2550:	719a      	strb	r2, [r3, #6]
    2552:	2380      	movs	r3, #128	; 0x80
    2554:	18fb      	adds	r3, r7, r3
    2556:	2200      	movs	r2, #0
    2558:	809a      	strh	r2, [r3, #4]
    255a:	2380      	movs	r3, #128	; 0x80
    255c:	18fb      	adds	r3, r7, r3
    255e:	4a52      	ldr	r2, [pc, #328]	; (26a8 <system_clock_init+0x248>)
    2560:	821a      	strh	r2, [r3, #16]
    2562:	2380      	movs	r3, #128	; 0x80
    2564:	18fb      	adds	r3, r7, r3
    2566:	2207      	movs	r2, #7
    2568:	731a      	strb	r2, [r3, #12]
    256a:	2380      	movs	r3, #128	; 0x80
    256c:	18fb      	adds	r3, r7, r3
    256e:	223f      	movs	r2, #63	; 0x3f
    2570:	81da      	strh	r2, [r3, #14]
    2572:	2380      	movs	r3, #128	; 0x80
    2574:	18fb      	adds	r3, r7, r3
    2576:	0018      	movs	r0, r3
    2578:	4b4c      	ldr	r3, [pc, #304]	; (26ac <system_clock_init+0x24c>)
    257a:	4798      	blx	r3
    257c:	237c      	movs	r3, #124	; 0x7c
    257e:	18fb      	adds	r3, r7, r3
    2580:	0018      	movs	r0, r3
    2582:	4b4b      	ldr	r3, [pc, #300]	; (26b0 <system_clock_init+0x250>)
    2584:	4798      	blx	r3
    2586:	237c      	movs	r3, #124	; 0x7c
    2588:	18fb      	adds	r3, r7, r3
    258a:	2200      	movs	r2, #0
    258c:	701a      	strb	r2, [r3, #0]
    258e:	237c      	movs	r3, #124	; 0x7c
    2590:	18fb      	adds	r3, r7, r3
    2592:	2201      	movs	r2, #1
    2594:	709a      	strb	r2, [r3, #2]
    2596:	237c      	movs	r3, #124	; 0x7c
    2598:	18fb      	adds	r3, r7, r3
    259a:	2200      	movs	r2, #0
    259c:	705a      	strb	r2, [r3, #1]
    259e:	237c      	movs	r3, #124	; 0x7c
    25a0:	18fb      	adds	r3, r7, r3
    25a2:	0018      	movs	r0, r3
    25a4:	4b43      	ldr	r3, [pc, #268]	; (26b4 <system_clock_init+0x254>)
    25a6:	4798      	blx	r3
    25a8:	2006      	movs	r0, #6
    25aa:	4b3b      	ldr	r3, [pc, #236]	; (2698 <system_clock_init+0x238>)
    25ac:	4798      	blx	r3
    25ae:	4b42      	ldr	r3, [pc, #264]	; (26b8 <system_clock_init+0x258>)
    25b0:	4798      	blx	r3
    25b2:	2364      	movs	r3, #100	; 0x64
    25b4:	18fb      	adds	r3, r7, r3
    25b6:	0018      	movs	r0, r3
    25b8:	4b40      	ldr	r3, [pc, #256]	; (26bc <system_clock_init+0x25c>)
    25ba:	4798      	blx	r3
    25bc:	2364      	movs	r3, #100	; 0x64
    25be:	18fb      	adds	r3, r7, r3
    25c0:	2205      	movs	r2, #5
    25c2:	701a      	strb	r2, [r3, #0]
    25c4:	2364      	movs	r3, #100	; 0x64
    25c6:	18fb      	adds	r3, r7, r3
    25c8:	2201      	movs	r2, #1
    25ca:	605a      	str	r2, [r3, #4]
    25cc:	2364      	movs	r3, #100	; 0x64
    25ce:	18fb      	adds	r3, r7, r3
    25d0:	2200      	movs	r2, #0
    25d2:	721a      	strb	r2, [r3, #8]
    25d4:	2364      	movs	r3, #100	; 0x64
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	2200      	movs	r2, #0
    25da:	725a      	strb	r2, [r3, #9]
    25dc:	2364      	movs	r3, #100	; 0x64
    25de:	18fb      	adds	r3, r7, r3
    25e0:	0019      	movs	r1, r3
    25e2:	2001      	movs	r0, #1
    25e4:	4b36      	ldr	r3, [pc, #216]	; (26c0 <system_clock_init+0x260>)
    25e6:	4798      	blx	r3
    25e8:	2001      	movs	r0, #1
    25ea:	4b36      	ldr	r3, [pc, #216]	; (26c4 <system_clock_init+0x264>)
    25ec:	4798      	blx	r3
    25ee:	230c      	movs	r3, #12
    25f0:	18fb      	adds	r3, r7, r3
    25f2:	0018      	movs	r0, r3
    25f4:	4b34      	ldr	r3, [pc, #208]	; (26c8 <system_clock_init+0x268>)
    25f6:	4798      	blx	r3
    25f8:	230c      	movs	r3, #12
    25fa:	18fb      	adds	r3, r7, r3
    25fc:	2201      	movs	r2, #1
    25fe:	701a      	strb	r2, [r3, #0]
    2600:	230c      	movs	r3, #12
    2602:	18fb      	adds	r3, r7, r3
    2604:	0019      	movs	r1, r3
    2606:	2000      	movs	r0, #0
    2608:	4b30      	ldr	r3, [pc, #192]	; (26cc <system_clock_init+0x26c>)
    260a:	4798      	blx	r3
    260c:	2000      	movs	r0, #0
    260e:	4b30      	ldr	r3, [pc, #192]	; (26d0 <system_clock_init+0x270>)
    2610:	4798      	blx	r3
    2612:	2007      	movs	r0, #7
    2614:	4b20      	ldr	r3, [pc, #128]	; (2698 <system_clock_init+0x238>)
    2616:	4798      	blx	r3
    2618:	46c0      	nop			; (mov r8, r8)
    261a:	2007      	movs	r0, #7
    261c:	4b1f      	ldr	r3, [pc, #124]	; (269c <system_clock_init+0x23c>)
    261e:	4798      	blx	r3
    2620:	0003      	movs	r3, r0
    2622:	001a      	movs	r2, r3
    2624:	2301      	movs	r3, #1
    2626:	4053      	eors	r3, r2
    2628:	b2db      	uxtb	r3, r3
    262a:	2b00      	cmp	r3, #0
    262c:	d1f5      	bne.n	261a <system_clock_init+0x1ba>
    262e:	2000      	movs	r0, #0
    2630:	4b28      	ldr	r3, [pc, #160]	; (26d4 <system_clock_init+0x274>)
    2632:	4798      	blx	r3
    2634:	2100      	movs	r1, #0
    2636:	2000      	movs	r0, #0
    2638:	4b27      	ldr	r3, [pc, #156]	; (26d8 <system_clock_init+0x278>)
    263a:	4798      	blx	r3
    263c:	2100      	movs	r1, #0
    263e:	2001      	movs	r0, #1
    2640:	4b25      	ldr	r3, [pc, #148]	; (26d8 <system_clock_init+0x278>)
    2642:	4798      	blx	r3
    2644:	2100      	movs	r1, #0
    2646:	2002      	movs	r0, #2
    2648:	4b23      	ldr	r3, [pc, #140]	; (26d8 <system_clock_init+0x278>)
    264a:	4798      	blx	r3
    264c:	003b      	movs	r3, r7
    264e:	0018      	movs	r0, r3
    2650:	4b1a      	ldr	r3, [pc, #104]	; (26bc <system_clock_init+0x25c>)
    2652:	4798      	blx	r3
    2654:	003b      	movs	r3, r7
    2656:	2207      	movs	r2, #7
    2658:	701a      	strb	r2, [r3, #0]
    265a:	003b      	movs	r3, r7
    265c:	2201      	movs	r2, #1
    265e:	605a      	str	r2, [r3, #4]
    2660:	003b      	movs	r3, r7
    2662:	2200      	movs	r2, #0
    2664:	721a      	strb	r2, [r3, #8]
    2666:	003b      	movs	r3, r7
    2668:	2200      	movs	r2, #0
    266a:	725a      	strb	r2, [r3, #9]
    266c:	003b      	movs	r3, r7
    266e:	0019      	movs	r1, r3
    2670:	2000      	movs	r0, #0
    2672:	4b13      	ldr	r3, [pc, #76]	; (26c0 <system_clock_init+0x260>)
    2674:	4798      	blx	r3
    2676:	2000      	movs	r0, #0
    2678:	4b12      	ldr	r3, [pc, #72]	; (26c4 <system_clock_init+0x264>)
    267a:	4798      	blx	r3
    267c:	46c0      	nop			; (mov r8, r8)
    267e:	46bd      	mov	sp, r7
    2680:	b02a      	add	sp, #168	; 0xa8
    2682:	bd80      	pop	{r7, pc}
    2684:	40000800 	.word	0x40000800
    2688:	00001f3d 	.word	0x00001f3d
    268c:	00002429 	.word	0x00002429
    2690:	00001e0d 	.word	0x00001e0d
    2694:	00002109 	.word	0x00002109
    2698:	000022f9 	.word	0x000022f9
    269c:	000023a5 	.word	0x000023a5
    26a0:	00001e77 	.word	0x00001e77
    26a4:	00806024 	.word	0x00806024
    26a8:	000005b9 	.word	0x000005b9
    26ac:	00002229 	.word	0x00002229
    26b0:	00001e55 	.word	0x00001e55
    26b4:	00002091 	.word	0x00002091
    26b8:	00002781 	.word	0x00002781
    26bc:	00001dc9 	.word	0x00001dc9
    26c0:	000027b1 	.word	0x000027b1
    26c4:	000028d5 	.word	0x000028d5
    26c8:	00001df7 	.word	0x00001df7
    26cc:	00002a09 	.word	0x00002a09
    26d0:	00002a4d 	.word	0x00002a4d
    26d4:	00001ec9 	.word	0x00001ec9
    26d8:	00001ee9 	.word	0x00001ee9

000026dc <system_apb_clock_set_mask>:
    26dc:	b580      	push	{r7, lr}
    26de:	b082      	sub	sp, #8
    26e0:	af00      	add	r7, sp, #0
    26e2:	0002      	movs	r2, r0
    26e4:	6039      	str	r1, [r7, #0]
    26e6:	1dfb      	adds	r3, r7, #7
    26e8:	701a      	strb	r2, [r3, #0]
    26ea:	1dfb      	adds	r3, r7, #7
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	2b01      	cmp	r3, #1
    26f0:	d00a      	beq.n	2708 <system_apb_clock_set_mask+0x2c>
    26f2:	2b02      	cmp	r3, #2
    26f4:	d00f      	beq.n	2716 <system_apb_clock_set_mask+0x3a>
    26f6:	2b00      	cmp	r3, #0
    26f8:	d114      	bne.n	2724 <system_apb_clock_set_mask+0x48>
    26fa:	4b0e      	ldr	r3, [pc, #56]	; (2734 <system_apb_clock_set_mask+0x58>)
    26fc:	4a0d      	ldr	r2, [pc, #52]	; (2734 <system_apb_clock_set_mask+0x58>)
    26fe:	6991      	ldr	r1, [r2, #24]
    2700:	683a      	ldr	r2, [r7, #0]
    2702:	430a      	orrs	r2, r1
    2704:	619a      	str	r2, [r3, #24]
    2706:	e00f      	b.n	2728 <system_apb_clock_set_mask+0x4c>
    2708:	4b0a      	ldr	r3, [pc, #40]	; (2734 <system_apb_clock_set_mask+0x58>)
    270a:	4a0a      	ldr	r2, [pc, #40]	; (2734 <system_apb_clock_set_mask+0x58>)
    270c:	69d1      	ldr	r1, [r2, #28]
    270e:	683a      	ldr	r2, [r7, #0]
    2710:	430a      	orrs	r2, r1
    2712:	61da      	str	r2, [r3, #28]
    2714:	e008      	b.n	2728 <system_apb_clock_set_mask+0x4c>
    2716:	4b07      	ldr	r3, [pc, #28]	; (2734 <system_apb_clock_set_mask+0x58>)
    2718:	4a06      	ldr	r2, [pc, #24]	; (2734 <system_apb_clock_set_mask+0x58>)
    271a:	6a11      	ldr	r1, [r2, #32]
    271c:	683a      	ldr	r2, [r7, #0]
    271e:	430a      	orrs	r2, r1
    2720:	621a      	str	r2, [r3, #32]
    2722:	e001      	b.n	2728 <system_apb_clock_set_mask+0x4c>
    2724:	2317      	movs	r3, #23
    2726:	e000      	b.n	272a <system_apb_clock_set_mask+0x4e>
    2728:	2300      	movs	r3, #0
    272a:	0018      	movs	r0, r3
    272c:	46bd      	mov	sp, r7
    272e:	b002      	add	sp, #8
    2730:	bd80      	pop	{r7, pc}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	40000400 	.word	0x40000400

00002738 <system_interrupt_enter_critical_section>:
    2738:	b580      	push	{r7, lr}
    273a:	af00      	add	r7, sp, #0
    273c:	4b02      	ldr	r3, [pc, #8]	; (2748 <system_interrupt_enter_critical_section+0x10>)
    273e:	4798      	blx	r3
    2740:	46c0      	nop			; (mov r8, r8)
    2742:	46bd      	mov	sp, r7
    2744:	bd80      	pop	{r7, pc}
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	00001b61 	.word	0x00001b61

0000274c <system_interrupt_leave_critical_section>:
    274c:	b580      	push	{r7, lr}
    274e:	af00      	add	r7, sp, #0
    2750:	4b02      	ldr	r3, [pc, #8]	; (275c <system_interrupt_leave_critical_section+0x10>)
    2752:	4798      	blx	r3
    2754:	46c0      	nop			; (mov r8, r8)
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	00001bb5 	.word	0x00001bb5

00002760 <system_gclk_is_syncing>:
    2760:	b580      	push	{r7, lr}
    2762:	af00      	add	r7, sp, #0
    2764:	4b05      	ldr	r3, [pc, #20]	; (277c <system_gclk_is_syncing+0x1c>)
    2766:	785b      	ldrb	r3, [r3, #1]
    2768:	b2db      	uxtb	r3, r3
    276a:	b25b      	sxtb	r3, r3
    276c:	2b00      	cmp	r3, #0
    276e:	da01      	bge.n	2774 <system_gclk_is_syncing+0x14>
    2770:	2301      	movs	r3, #1
    2772:	e000      	b.n	2776 <system_gclk_is_syncing+0x16>
    2774:	2300      	movs	r3, #0
    2776:	0018      	movs	r0, r3
    2778:	46bd      	mov	sp, r7
    277a:	bd80      	pop	{r7, pc}
    277c:	40000c00 	.word	0x40000c00

00002780 <system_gclk_init>:
    2780:	b580      	push	{r7, lr}
    2782:	af00      	add	r7, sp, #0
    2784:	2108      	movs	r1, #8
    2786:	2000      	movs	r0, #0
    2788:	4b07      	ldr	r3, [pc, #28]	; (27a8 <system_gclk_init+0x28>)
    278a:	4798      	blx	r3
    278c:	4b07      	ldr	r3, [pc, #28]	; (27ac <system_gclk_init+0x2c>)
    278e:	2201      	movs	r2, #1
    2790:	701a      	strb	r2, [r3, #0]
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	4b05      	ldr	r3, [pc, #20]	; (27ac <system_gclk_init+0x2c>)
    2796:	781b      	ldrb	r3, [r3, #0]
    2798:	b2db      	uxtb	r3, r3
    279a:	001a      	movs	r2, r3
    279c:	2301      	movs	r3, #1
    279e:	4013      	ands	r3, r2
    27a0:	d1f8      	bne.n	2794 <system_gclk_init+0x14>
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	46bd      	mov	sp, r7
    27a6:	bd80      	pop	{r7, pc}
    27a8:	000026dd 	.word	0x000026dd
    27ac:	40000c00 	.word	0x40000c00

000027b0 <system_gclk_gen_set_config>:
    27b0:	b580      	push	{r7, lr}
    27b2:	b086      	sub	sp, #24
    27b4:	af00      	add	r7, sp, #0
    27b6:	0002      	movs	r2, r0
    27b8:	6039      	str	r1, [r7, #0]
    27ba:	1dfb      	adds	r3, r7, #7
    27bc:	701a      	strb	r2, [r3, #0]
    27be:	1dfb      	adds	r3, r7, #7
    27c0:	781b      	ldrb	r3, [r3, #0]
    27c2:	617b      	str	r3, [r7, #20]
    27c4:	1dfb      	adds	r3, r7, #7
    27c6:	781b      	ldrb	r3, [r3, #0]
    27c8:	613b      	str	r3, [r7, #16]
    27ca:	683b      	ldr	r3, [r7, #0]
    27cc:	781b      	ldrb	r3, [r3, #0]
    27ce:	021b      	lsls	r3, r3, #8
    27d0:	001a      	movs	r2, r3
    27d2:	697b      	ldr	r3, [r7, #20]
    27d4:	4313      	orrs	r3, r2
    27d6:	617b      	str	r3, [r7, #20]
    27d8:	683b      	ldr	r3, [r7, #0]
    27da:	785b      	ldrb	r3, [r3, #1]
    27dc:	2b00      	cmp	r3, #0
    27de:	d004      	beq.n	27ea <system_gclk_gen_set_config+0x3a>
    27e0:	697b      	ldr	r3, [r7, #20]
    27e2:	2280      	movs	r2, #128	; 0x80
    27e4:	02d2      	lsls	r2, r2, #11
    27e6:	4313      	orrs	r3, r2
    27e8:	617b      	str	r3, [r7, #20]
    27ea:	683b      	ldr	r3, [r7, #0]
    27ec:	7a5b      	ldrb	r3, [r3, #9]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d004      	beq.n	27fc <system_gclk_gen_set_config+0x4c>
    27f2:	697b      	ldr	r3, [r7, #20]
    27f4:	2280      	movs	r2, #128	; 0x80
    27f6:	0312      	lsls	r2, r2, #12
    27f8:	4313      	orrs	r3, r2
    27fa:	617b      	str	r3, [r7, #20]
    27fc:	683b      	ldr	r3, [r7, #0]
    27fe:	685b      	ldr	r3, [r3, #4]
    2800:	2b01      	cmp	r3, #1
    2802:	d92c      	bls.n	285e <system_gclk_gen_set_config+0xae>
    2804:	683b      	ldr	r3, [r7, #0]
    2806:	685a      	ldr	r2, [r3, #4]
    2808:	683b      	ldr	r3, [r7, #0]
    280a:	685b      	ldr	r3, [r3, #4]
    280c:	3b01      	subs	r3, #1
    280e:	4013      	ands	r3, r2
    2810:	d11a      	bne.n	2848 <system_gclk_gen_set_config+0x98>
    2812:	2300      	movs	r3, #0
    2814:	60fb      	str	r3, [r7, #12]
    2816:	2302      	movs	r3, #2
    2818:	60bb      	str	r3, [r7, #8]
    281a:	e005      	b.n	2828 <system_gclk_gen_set_config+0x78>
    281c:	68fb      	ldr	r3, [r7, #12]
    281e:	3301      	adds	r3, #1
    2820:	60fb      	str	r3, [r7, #12]
    2822:	68bb      	ldr	r3, [r7, #8]
    2824:	005b      	lsls	r3, r3, #1
    2826:	60bb      	str	r3, [r7, #8]
    2828:	683b      	ldr	r3, [r7, #0]
    282a:	685a      	ldr	r2, [r3, #4]
    282c:	68bb      	ldr	r3, [r7, #8]
    282e:	429a      	cmp	r2, r3
    2830:	d8f4      	bhi.n	281c <system_gclk_gen_set_config+0x6c>
    2832:	68fb      	ldr	r3, [r7, #12]
    2834:	021b      	lsls	r3, r3, #8
    2836:	693a      	ldr	r2, [r7, #16]
    2838:	4313      	orrs	r3, r2
    283a:	613b      	str	r3, [r7, #16]
    283c:	697b      	ldr	r3, [r7, #20]
    283e:	2280      	movs	r2, #128	; 0x80
    2840:	0352      	lsls	r2, r2, #13
    2842:	4313      	orrs	r3, r2
    2844:	617b      	str	r3, [r7, #20]
    2846:	e00a      	b.n	285e <system_gclk_gen_set_config+0xae>
    2848:	683b      	ldr	r3, [r7, #0]
    284a:	685b      	ldr	r3, [r3, #4]
    284c:	021b      	lsls	r3, r3, #8
    284e:	693a      	ldr	r2, [r7, #16]
    2850:	4313      	orrs	r3, r2
    2852:	613b      	str	r3, [r7, #16]
    2854:	697b      	ldr	r3, [r7, #20]
    2856:	2280      	movs	r2, #128	; 0x80
    2858:	0292      	lsls	r2, r2, #10
    285a:	4313      	orrs	r3, r2
    285c:	617b      	str	r3, [r7, #20]
    285e:	683b      	ldr	r3, [r7, #0]
    2860:	7a1b      	ldrb	r3, [r3, #8]
    2862:	2b00      	cmp	r3, #0
    2864:	d004      	beq.n	2870 <system_gclk_gen_set_config+0xc0>
    2866:	697b      	ldr	r3, [r7, #20]
    2868:	2280      	movs	r2, #128	; 0x80
    286a:	0392      	lsls	r2, r2, #14
    286c:	4313      	orrs	r3, r2
    286e:	617b      	str	r3, [r7, #20]
    2870:	46c0      	nop			; (mov r8, r8)
    2872:	4b13      	ldr	r3, [pc, #76]	; (28c0 <system_gclk_gen_set_config+0x110>)
    2874:	4798      	blx	r3
    2876:	1e03      	subs	r3, r0, #0
    2878:	d1fb      	bne.n	2872 <system_gclk_gen_set_config+0xc2>
    287a:	4b12      	ldr	r3, [pc, #72]	; (28c4 <system_gclk_gen_set_config+0x114>)
    287c:	4798      	blx	r3
    287e:	4a12      	ldr	r2, [pc, #72]	; (28c8 <system_gclk_gen_set_config+0x118>)
    2880:	1dfb      	adds	r3, r7, #7
    2882:	781b      	ldrb	r3, [r3, #0]
    2884:	7013      	strb	r3, [r2, #0]
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	4b0d      	ldr	r3, [pc, #52]	; (28c0 <system_gclk_gen_set_config+0x110>)
    288a:	4798      	blx	r3
    288c:	1e03      	subs	r3, r0, #0
    288e:	d1fb      	bne.n	2888 <system_gclk_gen_set_config+0xd8>
    2890:	4b0e      	ldr	r3, [pc, #56]	; (28cc <system_gclk_gen_set_config+0x11c>)
    2892:	693a      	ldr	r2, [r7, #16]
    2894:	609a      	str	r2, [r3, #8]
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	4b09      	ldr	r3, [pc, #36]	; (28c0 <system_gclk_gen_set_config+0x110>)
    289a:	4798      	blx	r3
    289c:	1e03      	subs	r3, r0, #0
    289e:	d1fb      	bne.n	2898 <system_gclk_gen_set_config+0xe8>
    28a0:	4b0a      	ldr	r3, [pc, #40]	; (28cc <system_gclk_gen_set_config+0x11c>)
    28a2:	4a0a      	ldr	r2, [pc, #40]	; (28cc <system_gclk_gen_set_config+0x11c>)
    28a4:	6851      	ldr	r1, [r2, #4]
    28a6:	2280      	movs	r2, #128	; 0x80
    28a8:	0252      	lsls	r2, r2, #9
    28aa:	4011      	ands	r1, r2
    28ac:	697a      	ldr	r2, [r7, #20]
    28ae:	430a      	orrs	r2, r1
    28b0:	605a      	str	r2, [r3, #4]
    28b2:	4b07      	ldr	r3, [pc, #28]	; (28d0 <system_gclk_gen_set_config+0x120>)
    28b4:	4798      	blx	r3
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	46bd      	mov	sp, r7
    28ba:	b006      	add	sp, #24
    28bc:	bd80      	pop	{r7, pc}
    28be:	46c0      	nop			; (mov r8, r8)
    28c0:	00002761 	.word	0x00002761
    28c4:	00002739 	.word	0x00002739
    28c8:	40000c08 	.word	0x40000c08
    28cc:	40000c00 	.word	0x40000c00
    28d0:	0000274d 	.word	0x0000274d

000028d4 <system_gclk_gen_enable>:
    28d4:	b580      	push	{r7, lr}
    28d6:	b082      	sub	sp, #8
    28d8:	af00      	add	r7, sp, #0
    28da:	0002      	movs	r2, r0
    28dc:	1dfb      	adds	r3, r7, #7
    28de:	701a      	strb	r2, [r3, #0]
    28e0:	46c0      	nop			; (mov r8, r8)
    28e2:	4b0e      	ldr	r3, [pc, #56]	; (291c <system_gclk_gen_enable+0x48>)
    28e4:	4798      	blx	r3
    28e6:	1e03      	subs	r3, r0, #0
    28e8:	d1fb      	bne.n	28e2 <system_gclk_gen_enable+0xe>
    28ea:	4b0d      	ldr	r3, [pc, #52]	; (2920 <system_gclk_gen_enable+0x4c>)
    28ec:	4798      	blx	r3
    28ee:	4a0d      	ldr	r2, [pc, #52]	; (2924 <system_gclk_gen_enable+0x50>)
    28f0:	1dfb      	adds	r3, r7, #7
    28f2:	781b      	ldrb	r3, [r3, #0]
    28f4:	7013      	strb	r3, [r2, #0]
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	4b08      	ldr	r3, [pc, #32]	; (291c <system_gclk_gen_enable+0x48>)
    28fa:	4798      	blx	r3
    28fc:	1e03      	subs	r3, r0, #0
    28fe:	d1fb      	bne.n	28f8 <system_gclk_gen_enable+0x24>
    2900:	4b09      	ldr	r3, [pc, #36]	; (2928 <system_gclk_gen_enable+0x54>)
    2902:	4a09      	ldr	r2, [pc, #36]	; (2928 <system_gclk_gen_enable+0x54>)
    2904:	6852      	ldr	r2, [r2, #4]
    2906:	2180      	movs	r1, #128	; 0x80
    2908:	0249      	lsls	r1, r1, #9
    290a:	430a      	orrs	r2, r1
    290c:	605a      	str	r2, [r3, #4]
    290e:	4b07      	ldr	r3, [pc, #28]	; (292c <system_gclk_gen_enable+0x58>)
    2910:	4798      	blx	r3
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	46bd      	mov	sp, r7
    2916:	b002      	add	sp, #8
    2918:	bd80      	pop	{r7, pc}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	00002761 	.word	0x00002761
    2920:	00002739 	.word	0x00002739
    2924:	40000c04 	.word	0x40000c04
    2928:	40000c00 	.word	0x40000c00
    292c:	0000274d 	.word	0x0000274d

00002930 <system_gclk_gen_get_hz>:
    2930:	b580      	push	{r7, lr}
    2932:	b086      	sub	sp, #24
    2934:	af00      	add	r7, sp, #0
    2936:	0002      	movs	r2, r0
    2938:	1dfb      	adds	r3, r7, #7
    293a:	701a      	strb	r2, [r3, #0]
    293c:	46c0      	nop			; (mov r8, r8)
    293e:	4b2a      	ldr	r3, [pc, #168]	; (29e8 <system_gclk_gen_get_hz+0xb8>)
    2940:	4798      	blx	r3
    2942:	1e03      	subs	r3, r0, #0
    2944:	d1fb      	bne.n	293e <system_gclk_gen_get_hz+0xe>
    2946:	4b29      	ldr	r3, [pc, #164]	; (29ec <system_gclk_gen_get_hz+0xbc>)
    2948:	4798      	blx	r3
    294a:	4a29      	ldr	r2, [pc, #164]	; (29f0 <system_gclk_gen_get_hz+0xc0>)
    294c:	1dfb      	adds	r3, r7, #7
    294e:	781b      	ldrb	r3, [r3, #0]
    2950:	7013      	strb	r3, [r2, #0]
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	4b24      	ldr	r3, [pc, #144]	; (29e8 <system_gclk_gen_get_hz+0xb8>)
    2956:	4798      	blx	r3
    2958:	1e03      	subs	r3, r0, #0
    295a:	d1fb      	bne.n	2954 <system_gclk_gen_get_hz+0x24>
    295c:	4b25      	ldr	r3, [pc, #148]	; (29f4 <system_gclk_gen_get_hz+0xc4>)
    295e:	685b      	ldr	r3, [r3, #4]
    2960:	04db      	lsls	r3, r3, #19
    2962:	0edb      	lsrs	r3, r3, #27
    2964:	b2db      	uxtb	r3, r3
    2966:	0018      	movs	r0, r3
    2968:	4b23      	ldr	r3, [pc, #140]	; (29f8 <system_gclk_gen_get_hz+0xc8>)
    296a:	4798      	blx	r3
    296c:	0003      	movs	r3, r0
    296e:	617b      	str	r3, [r7, #20]
    2970:	4a1f      	ldr	r2, [pc, #124]	; (29f0 <system_gclk_gen_get_hz+0xc0>)
    2972:	1dfb      	adds	r3, r7, #7
    2974:	781b      	ldrb	r3, [r3, #0]
    2976:	7013      	strb	r3, [r2, #0]
    2978:	4b1e      	ldr	r3, [pc, #120]	; (29f4 <system_gclk_gen_get_hz+0xc4>)
    297a:	685b      	ldr	r3, [r3, #4]
    297c:	02db      	lsls	r3, r3, #11
    297e:	0fdb      	lsrs	r3, r3, #31
    2980:	b2da      	uxtb	r2, r3
    2982:	2313      	movs	r3, #19
    2984:	18fb      	adds	r3, r7, r3
    2986:	701a      	strb	r2, [r3, #0]
    2988:	4a1c      	ldr	r2, [pc, #112]	; (29fc <system_gclk_gen_get_hz+0xcc>)
    298a:	1dfb      	adds	r3, r7, #7
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	7013      	strb	r3, [r2, #0]
    2990:	46c0      	nop			; (mov r8, r8)
    2992:	4b15      	ldr	r3, [pc, #84]	; (29e8 <system_gclk_gen_get_hz+0xb8>)
    2994:	4798      	blx	r3
    2996:	1e03      	subs	r3, r0, #0
    2998:	d1fb      	bne.n	2992 <system_gclk_gen_get_hz+0x62>
    299a:	4b16      	ldr	r3, [pc, #88]	; (29f4 <system_gclk_gen_get_hz+0xc4>)
    299c:	689b      	ldr	r3, [r3, #8]
    299e:	021b      	lsls	r3, r3, #8
    29a0:	0c1b      	lsrs	r3, r3, #16
    29a2:	b29b      	uxth	r3, r3
    29a4:	60fb      	str	r3, [r7, #12]
    29a6:	4b16      	ldr	r3, [pc, #88]	; (2a00 <system_gclk_gen_get_hz+0xd0>)
    29a8:	4798      	blx	r3
    29aa:	2313      	movs	r3, #19
    29ac:	18fb      	adds	r3, r7, r3
    29ae:	781b      	ldrb	r3, [r3, #0]
    29b0:	2b00      	cmp	r3, #0
    29b2:	d109      	bne.n	29c8 <system_gclk_gen_get_hz+0x98>
    29b4:	68fb      	ldr	r3, [r7, #12]
    29b6:	2b01      	cmp	r3, #1
    29b8:	d906      	bls.n	29c8 <system_gclk_gen_get_hz+0x98>
    29ba:	4b12      	ldr	r3, [pc, #72]	; (2a04 <system_gclk_gen_get_hz+0xd4>)
    29bc:	68f9      	ldr	r1, [r7, #12]
    29be:	6978      	ldr	r0, [r7, #20]
    29c0:	4798      	blx	r3
    29c2:	0003      	movs	r3, r0
    29c4:	617b      	str	r3, [r7, #20]
    29c6:	e00a      	b.n	29de <system_gclk_gen_get_hz+0xae>
    29c8:	2313      	movs	r3, #19
    29ca:	18fb      	adds	r3, r7, r3
    29cc:	781b      	ldrb	r3, [r3, #0]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d005      	beq.n	29de <system_gclk_gen_get_hz+0xae>
    29d2:	68fb      	ldr	r3, [r7, #12]
    29d4:	3301      	adds	r3, #1
    29d6:	697a      	ldr	r2, [r7, #20]
    29d8:	40da      	lsrs	r2, r3
    29da:	0013      	movs	r3, r2
    29dc:	617b      	str	r3, [r7, #20]
    29de:	697b      	ldr	r3, [r7, #20]
    29e0:	0018      	movs	r0, r3
    29e2:	46bd      	mov	sp, r7
    29e4:	b006      	add	sp, #24
    29e6:	bd80      	pop	{r7, pc}
    29e8:	00002761 	.word	0x00002761
    29ec:	00002739 	.word	0x00002739
    29f0:	40000c04 	.word	0x40000c04
    29f4:	40000c00 	.word	0x40000c00
    29f8:	00001fd1 	.word	0x00001fd1
    29fc:	40000c08 	.word	0x40000c08
    2a00:	0000274d 	.word	0x0000274d
    2a04:	000034f1 	.word	0x000034f1

00002a08 <system_gclk_chan_set_config>:
    2a08:	b580      	push	{r7, lr}
    2a0a:	b084      	sub	sp, #16
    2a0c:	af00      	add	r7, sp, #0
    2a0e:	0002      	movs	r2, r0
    2a10:	6039      	str	r1, [r7, #0]
    2a12:	1dfb      	adds	r3, r7, #7
    2a14:	701a      	strb	r2, [r3, #0]
    2a16:	1dfb      	adds	r3, r7, #7
    2a18:	781b      	ldrb	r3, [r3, #0]
    2a1a:	60fb      	str	r3, [r7, #12]
    2a1c:	683b      	ldr	r3, [r7, #0]
    2a1e:	781b      	ldrb	r3, [r3, #0]
    2a20:	021b      	lsls	r3, r3, #8
    2a22:	001a      	movs	r2, r3
    2a24:	68fb      	ldr	r3, [r7, #12]
    2a26:	4313      	orrs	r3, r2
    2a28:	60fb      	str	r3, [r7, #12]
    2a2a:	1dfb      	adds	r3, r7, #7
    2a2c:	781b      	ldrb	r3, [r3, #0]
    2a2e:	0018      	movs	r0, r3
    2a30:	4b04      	ldr	r3, [pc, #16]	; (2a44 <system_gclk_chan_set_config+0x3c>)
    2a32:	4798      	blx	r3
    2a34:	4b04      	ldr	r3, [pc, #16]	; (2a48 <system_gclk_chan_set_config+0x40>)
    2a36:	68fa      	ldr	r2, [r7, #12]
    2a38:	b292      	uxth	r2, r2
    2a3a:	805a      	strh	r2, [r3, #2]
    2a3c:	46c0      	nop			; (mov r8, r8)
    2a3e:	46bd      	mov	sp, r7
    2a40:	b004      	add	sp, #16
    2a42:	bd80      	pop	{r7, pc}
    2a44:	00002a95 	.word	0x00002a95
    2a48:	40000c00 	.word	0x40000c00

00002a4c <system_gclk_chan_enable>:
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b082      	sub	sp, #8
    2a50:	af00      	add	r7, sp, #0
    2a52:	0002      	movs	r2, r0
    2a54:	1dfb      	adds	r3, r7, #7
    2a56:	701a      	strb	r2, [r3, #0]
    2a58:	4b0a      	ldr	r3, [pc, #40]	; (2a84 <system_gclk_chan_enable+0x38>)
    2a5a:	4798      	blx	r3
    2a5c:	4a0a      	ldr	r2, [pc, #40]	; (2a88 <system_gclk_chan_enable+0x3c>)
    2a5e:	1dfb      	adds	r3, r7, #7
    2a60:	781b      	ldrb	r3, [r3, #0]
    2a62:	7013      	strb	r3, [r2, #0]
    2a64:	4909      	ldr	r1, [pc, #36]	; (2a8c <system_gclk_chan_enable+0x40>)
    2a66:	4b09      	ldr	r3, [pc, #36]	; (2a8c <system_gclk_chan_enable+0x40>)
    2a68:	885b      	ldrh	r3, [r3, #2]
    2a6a:	b29b      	uxth	r3, r3
    2a6c:	2280      	movs	r2, #128	; 0x80
    2a6e:	01d2      	lsls	r2, r2, #7
    2a70:	4313      	orrs	r3, r2
    2a72:	b29b      	uxth	r3, r3
    2a74:	804b      	strh	r3, [r1, #2]
    2a76:	4b06      	ldr	r3, [pc, #24]	; (2a90 <system_gclk_chan_enable+0x44>)
    2a78:	4798      	blx	r3
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	46bd      	mov	sp, r7
    2a7e:	b002      	add	sp, #8
    2a80:	bd80      	pop	{r7, pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	00002739 	.word	0x00002739
    2a88:	40000c02 	.word	0x40000c02
    2a8c:	40000c00 	.word	0x40000c00
    2a90:	0000274d 	.word	0x0000274d

00002a94 <system_gclk_chan_disable>:
    2a94:	b580      	push	{r7, lr}
    2a96:	b084      	sub	sp, #16
    2a98:	af00      	add	r7, sp, #0
    2a9a:	0002      	movs	r2, r0
    2a9c:	1dfb      	adds	r3, r7, #7
    2a9e:	701a      	strb	r2, [r3, #0]
    2aa0:	4b1c      	ldr	r3, [pc, #112]	; (2b14 <system_gclk_chan_disable+0x80>)
    2aa2:	4798      	blx	r3
    2aa4:	4a1c      	ldr	r2, [pc, #112]	; (2b18 <system_gclk_chan_disable+0x84>)
    2aa6:	1dfb      	adds	r3, r7, #7
    2aa8:	781b      	ldrb	r3, [r3, #0]
    2aaa:	7013      	strb	r3, [r2, #0]
    2aac:	4b1b      	ldr	r3, [pc, #108]	; (2b1c <system_gclk_chan_disable+0x88>)
    2aae:	885b      	ldrh	r3, [r3, #2]
    2ab0:	051b      	lsls	r3, r3, #20
    2ab2:	0f1b      	lsrs	r3, r3, #28
    2ab4:	b2db      	uxtb	r3, r3
    2ab6:	60fb      	str	r3, [r7, #12]
    2ab8:	4a18      	ldr	r2, [pc, #96]	; (2b1c <system_gclk_chan_disable+0x88>)
    2aba:	8853      	ldrh	r3, [r2, #2]
    2abc:	4918      	ldr	r1, [pc, #96]	; (2b20 <system_gclk_chan_disable+0x8c>)
    2abe:	400b      	ands	r3, r1
    2ac0:	8053      	strh	r3, [r2, #2]
    2ac2:	4a16      	ldr	r2, [pc, #88]	; (2b1c <system_gclk_chan_disable+0x88>)
    2ac4:	4b15      	ldr	r3, [pc, #84]	; (2b1c <system_gclk_chan_disable+0x88>)
    2ac6:	885b      	ldrh	r3, [r3, #2]
    2ac8:	b29b      	uxth	r3, r3
    2aca:	4916      	ldr	r1, [pc, #88]	; (2b24 <system_gclk_chan_disable+0x90>)
    2acc:	400b      	ands	r3, r1
    2ace:	b29b      	uxth	r3, r3
    2ad0:	8053      	strh	r3, [r2, #2]
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	4b11      	ldr	r3, [pc, #68]	; (2b1c <system_gclk_chan_disable+0x88>)
    2ad6:	885b      	ldrh	r3, [r3, #2]
    2ad8:	b29b      	uxth	r3, r3
    2ada:	001a      	movs	r2, r3
    2adc:	2380      	movs	r3, #128	; 0x80
    2ade:	01db      	lsls	r3, r3, #7
    2ae0:	4013      	ands	r3, r2
    2ae2:	d1f7      	bne.n	2ad4 <system_gclk_chan_disable+0x40>
    2ae4:	4a0d      	ldr	r2, [pc, #52]	; (2b1c <system_gclk_chan_disable+0x88>)
    2ae6:	68fb      	ldr	r3, [r7, #12]
    2ae8:	b2db      	uxtb	r3, r3
    2aea:	1c19      	adds	r1, r3, #0
    2aec:	230f      	movs	r3, #15
    2aee:	400b      	ands	r3, r1
    2af0:	b2d9      	uxtb	r1, r3
    2af2:	8853      	ldrh	r3, [r2, #2]
    2af4:	1c08      	adds	r0, r1, #0
    2af6:	210f      	movs	r1, #15
    2af8:	4001      	ands	r1, r0
    2afa:	0208      	lsls	r0, r1, #8
    2afc:	4908      	ldr	r1, [pc, #32]	; (2b20 <system_gclk_chan_disable+0x8c>)
    2afe:	400b      	ands	r3, r1
    2b00:	1c19      	adds	r1, r3, #0
    2b02:	1c03      	adds	r3, r0, #0
    2b04:	430b      	orrs	r3, r1
    2b06:	8053      	strh	r3, [r2, #2]
    2b08:	4b07      	ldr	r3, [pc, #28]	; (2b28 <system_gclk_chan_disable+0x94>)
    2b0a:	4798      	blx	r3
    2b0c:	46c0      	nop			; (mov r8, r8)
    2b0e:	46bd      	mov	sp, r7
    2b10:	b004      	add	sp, #16
    2b12:	bd80      	pop	{r7, pc}
    2b14:	00002739 	.word	0x00002739
    2b18:	40000c02 	.word	0x40000c02
    2b1c:	40000c00 	.word	0x40000c00
    2b20:	fffff0ff 	.word	0xfffff0ff
    2b24:	ffffbfff 	.word	0xffffbfff
    2b28:	0000274d 	.word	0x0000274d

00002b2c <system_gclk_chan_get_hz>:
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b084      	sub	sp, #16
    2b30:	af00      	add	r7, sp, #0
    2b32:	0002      	movs	r2, r0
    2b34:	1dfb      	adds	r3, r7, #7
    2b36:	701a      	strb	r2, [r3, #0]
    2b38:	4b0d      	ldr	r3, [pc, #52]	; (2b70 <system_gclk_chan_get_hz+0x44>)
    2b3a:	4798      	blx	r3
    2b3c:	4a0d      	ldr	r2, [pc, #52]	; (2b74 <system_gclk_chan_get_hz+0x48>)
    2b3e:	1dfb      	adds	r3, r7, #7
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	7013      	strb	r3, [r2, #0]
    2b44:	4b0c      	ldr	r3, [pc, #48]	; (2b78 <system_gclk_chan_get_hz+0x4c>)
    2b46:	885b      	ldrh	r3, [r3, #2]
    2b48:	051b      	lsls	r3, r3, #20
    2b4a:	0f1b      	lsrs	r3, r3, #28
    2b4c:	b2da      	uxtb	r2, r3
    2b4e:	230f      	movs	r3, #15
    2b50:	18fb      	adds	r3, r7, r3
    2b52:	701a      	strb	r2, [r3, #0]
    2b54:	4b09      	ldr	r3, [pc, #36]	; (2b7c <system_gclk_chan_get_hz+0x50>)
    2b56:	4798      	blx	r3
    2b58:	230f      	movs	r3, #15
    2b5a:	18fb      	adds	r3, r7, r3
    2b5c:	781b      	ldrb	r3, [r3, #0]
    2b5e:	0018      	movs	r0, r3
    2b60:	4b07      	ldr	r3, [pc, #28]	; (2b80 <system_gclk_chan_get_hz+0x54>)
    2b62:	4798      	blx	r3
    2b64:	0003      	movs	r3, r0
    2b66:	0018      	movs	r0, r3
    2b68:	46bd      	mov	sp, r7
    2b6a:	b004      	add	sp, #16
    2b6c:	bd80      	pop	{r7, pc}
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	00002739 	.word	0x00002739
    2b74:	40000c02 	.word	0x40000c02
    2b78:	40000c00 	.word	0x40000c00
    2b7c:	0000274d 	.word	0x0000274d
    2b80:	00002931 	.word	0x00002931

00002b84 <system_pinmux_get_group_from_gpio_pin>:
    2b84:	b580      	push	{r7, lr}
    2b86:	b084      	sub	sp, #16
    2b88:	af00      	add	r7, sp, #0
    2b8a:	0002      	movs	r2, r0
    2b8c:	1dfb      	adds	r3, r7, #7
    2b8e:	701a      	strb	r2, [r3, #0]
    2b90:	230f      	movs	r3, #15
    2b92:	18fb      	adds	r3, r7, r3
    2b94:	1dfa      	adds	r2, r7, #7
    2b96:	7812      	ldrb	r2, [r2, #0]
    2b98:	09d2      	lsrs	r2, r2, #7
    2b9a:	701a      	strb	r2, [r3, #0]
    2b9c:	230e      	movs	r3, #14
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	1dfa      	adds	r2, r7, #7
    2ba2:	7812      	ldrb	r2, [r2, #0]
    2ba4:	0952      	lsrs	r2, r2, #5
    2ba6:	701a      	strb	r2, [r3, #0]
    2ba8:	4b0d      	ldr	r3, [pc, #52]	; (2be0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2baa:	60bb      	str	r3, [r7, #8]
    2bac:	230f      	movs	r3, #15
    2bae:	18fb      	adds	r3, r7, r3
    2bb0:	781b      	ldrb	r3, [r3, #0]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d10f      	bne.n	2bd6 <system_pinmux_get_group_from_gpio_pin+0x52>
    2bb6:	230f      	movs	r3, #15
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	781b      	ldrb	r3, [r3, #0]
    2bbc:	009b      	lsls	r3, r3, #2
    2bbe:	2210      	movs	r2, #16
    2bc0:	4694      	mov	ip, r2
    2bc2:	44bc      	add	ip, r7
    2bc4:	4463      	add	r3, ip
    2bc6:	3b08      	subs	r3, #8
    2bc8:	681a      	ldr	r2, [r3, #0]
    2bca:	230e      	movs	r3, #14
    2bcc:	18fb      	adds	r3, r7, r3
    2bce:	781b      	ldrb	r3, [r3, #0]
    2bd0:	01db      	lsls	r3, r3, #7
    2bd2:	18d3      	adds	r3, r2, r3
    2bd4:	e000      	b.n	2bd8 <system_pinmux_get_group_from_gpio_pin+0x54>
    2bd6:	2300      	movs	r3, #0
    2bd8:	0018      	movs	r0, r3
    2bda:	46bd      	mov	sp, r7
    2bdc:	b004      	add	sp, #16
    2bde:	bd80      	pop	{r7, pc}
    2be0:	41004400 	.word	0x41004400

00002be4 <_system_pinmux_config>:
    2be4:	b580      	push	{r7, lr}
    2be6:	b088      	sub	sp, #32
    2be8:	af00      	add	r7, sp, #0
    2bea:	60f8      	str	r0, [r7, #12]
    2bec:	60b9      	str	r1, [r7, #8]
    2bee:	607a      	str	r2, [r7, #4]
    2bf0:	2300      	movs	r3, #0
    2bf2:	61fb      	str	r3, [r7, #28]
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	78db      	ldrb	r3, [r3, #3]
    2bf8:	2201      	movs	r2, #1
    2bfa:	4053      	eors	r3, r2
    2bfc:	b2db      	uxtb	r3, r3
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d035      	beq.n	2c6e <_system_pinmux_config+0x8a>
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	781b      	ldrb	r3, [r3, #0]
    2c06:	2b80      	cmp	r3, #128	; 0x80
    2c08:	d00b      	beq.n	2c22 <_system_pinmux_config+0x3e>
    2c0a:	69fb      	ldr	r3, [r7, #28]
    2c0c:	2280      	movs	r2, #128	; 0x80
    2c0e:	0252      	lsls	r2, r2, #9
    2c10:	4313      	orrs	r3, r2
    2c12:	61fb      	str	r3, [r7, #28]
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	781b      	ldrb	r3, [r3, #0]
    2c18:	061b      	lsls	r3, r3, #24
    2c1a:	001a      	movs	r2, r3
    2c1c:	69fb      	ldr	r3, [r7, #28]
    2c1e:	4313      	orrs	r3, r2
    2c20:	61fb      	str	r3, [r7, #28]
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	785b      	ldrb	r3, [r3, #1]
    2c26:	2b00      	cmp	r3, #0
    2c28:	d003      	beq.n	2c32 <_system_pinmux_config+0x4e>
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	785b      	ldrb	r3, [r3, #1]
    2c2e:	2b02      	cmp	r3, #2
    2c30:	d110      	bne.n	2c54 <_system_pinmux_config+0x70>
    2c32:	69fb      	ldr	r3, [r7, #28]
    2c34:	2280      	movs	r2, #128	; 0x80
    2c36:	0292      	lsls	r2, r2, #10
    2c38:	4313      	orrs	r3, r2
    2c3a:	61fb      	str	r3, [r7, #28]
    2c3c:	687b      	ldr	r3, [r7, #4]
    2c3e:	789b      	ldrb	r3, [r3, #2]
    2c40:	2b00      	cmp	r3, #0
    2c42:	d004      	beq.n	2c4e <_system_pinmux_config+0x6a>
    2c44:	69fb      	ldr	r3, [r7, #28]
    2c46:	2280      	movs	r2, #128	; 0x80
    2c48:	02d2      	lsls	r2, r2, #11
    2c4a:	4313      	orrs	r3, r2
    2c4c:	61fb      	str	r3, [r7, #28]
    2c4e:	68fb      	ldr	r3, [r7, #12]
    2c50:	68ba      	ldr	r2, [r7, #8]
    2c52:	605a      	str	r2, [r3, #4]
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	785b      	ldrb	r3, [r3, #1]
    2c58:	2b01      	cmp	r3, #1
    2c5a:	d003      	beq.n	2c64 <_system_pinmux_config+0x80>
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	785b      	ldrb	r3, [r3, #1]
    2c60:	2b02      	cmp	r3, #2
    2c62:	d107      	bne.n	2c74 <_system_pinmux_config+0x90>
    2c64:	69fb      	ldr	r3, [r7, #28]
    2c66:	4a22      	ldr	r2, [pc, #136]	; (2cf0 <_system_pinmux_config+0x10c>)
    2c68:	4013      	ands	r3, r2
    2c6a:	61fb      	str	r3, [r7, #28]
    2c6c:	e002      	b.n	2c74 <_system_pinmux_config+0x90>
    2c6e:	68fb      	ldr	r3, [r7, #12]
    2c70:	68ba      	ldr	r2, [r7, #8]
    2c72:	605a      	str	r2, [r3, #4]
    2c74:	68bb      	ldr	r3, [r7, #8]
    2c76:	041b      	lsls	r3, r3, #16
    2c78:	0c1b      	lsrs	r3, r3, #16
    2c7a:	61bb      	str	r3, [r7, #24]
    2c7c:	68bb      	ldr	r3, [r7, #8]
    2c7e:	0c1b      	lsrs	r3, r3, #16
    2c80:	617b      	str	r3, [r7, #20]
    2c82:	69ba      	ldr	r2, [r7, #24]
    2c84:	69fb      	ldr	r3, [r7, #28]
    2c86:	4313      	orrs	r3, r2
    2c88:	22a0      	movs	r2, #160	; 0xa0
    2c8a:	05d2      	lsls	r2, r2, #23
    2c8c:	431a      	orrs	r2, r3
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	629a      	str	r2, [r3, #40]	; 0x28
    2c92:	697a      	ldr	r2, [r7, #20]
    2c94:	69fb      	ldr	r3, [r7, #28]
    2c96:	4313      	orrs	r3, r2
    2c98:	22d0      	movs	r2, #208	; 0xd0
    2c9a:	0612      	lsls	r2, r2, #24
    2c9c:	431a      	orrs	r2, r3
    2c9e:	68fb      	ldr	r3, [r7, #12]
    2ca0:	629a      	str	r2, [r3, #40]	; 0x28
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	78db      	ldrb	r3, [r3, #3]
    2ca6:	2201      	movs	r2, #1
    2ca8:	4053      	eors	r3, r2
    2caa:	b2db      	uxtb	r3, r3
    2cac:	2b00      	cmp	r3, #0
    2cae:	d01a      	beq.n	2ce6 <_system_pinmux_config+0x102>
    2cb0:	69fa      	ldr	r2, [r7, #28]
    2cb2:	2380      	movs	r3, #128	; 0x80
    2cb4:	02db      	lsls	r3, r3, #11
    2cb6:	4013      	ands	r3, r2
    2cb8:	d00a      	beq.n	2cd0 <_system_pinmux_config+0xec>
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	789b      	ldrb	r3, [r3, #2]
    2cbe:	2b01      	cmp	r3, #1
    2cc0:	d103      	bne.n	2cca <_system_pinmux_config+0xe6>
    2cc2:	68fb      	ldr	r3, [r7, #12]
    2cc4:	68ba      	ldr	r2, [r7, #8]
    2cc6:	619a      	str	r2, [r3, #24]
    2cc8:	e002      	b.n	2cd0 <_system_pinmux_config+0xec>
    2cca:	68fb      	ldr	r3, [r7, #12]
    2ccc:	68ba      	ldr	r2, [r7, #8]
    2cce:	615a      	str	r2, [r3, #20]
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	785b      	ldrb	r3, [r3, #1]
    2cd4:	2b01      	cmp	r3, #1
    2cd6:	d003      	beq.n	2ce0 <_system_pinmux_config+0xfc>
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	785b      	ldrb	r3, [r3, #1]
    2cdc:	2b02      	cmp	r3, #2
    2cde:	d102      	bne.n	2ce6 <_system_pinmux_config+0x102>
    2ce0:	68fb      	ldr	r3, [r7, #12]
    2ce2:	68ba      	ldr	r2, [r7, #8]
    2ce4:	609a      	str	r2, [r3, #8]
    2ce6:	46c0      	nop			; (mov r8, r8)
    2ce8:	46bd      	mov	sp, r7
    2cea:	b008      	add	sp, #32
    2cec:	bd80      	pop	{r7, pc}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	fffbffff 	.word	0xfffbffff

00002cf4 <system_pinmux_pin_set_config>:
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b084      	sub	sp, #16
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	0002      	movs	r2, r0
    2cfc:	6039      	str	r1, [r7, #0]
    2cfe:	1dfb      	adds	r3, r7, #7
    2d00:	701a      	strb	r2, [r3, #0]
    2d02:	1dfb      	adds	r3, r7, #7
    2d04:	781b      	ldrb	r3, [r3, #0]
    2d06:	0018      	movs	r0, r3
    2d08:	4b0a      	ldr	r3, [pc, #40]	; (2d34 <system_pinmux_pin_set_config+0x40>)
    2d0a:	4798      	blx	r3
    2d0c:	0003      	movs	r3, r0
    2d0e:	60fb      	str	r3, [r7, #12]
    2d10:	1dfb      	adds	r3, r7, #7
    2d12:	781b      	ldrb	r3, [r3, #0]
    2d14:	221f      	movs	r2, #31
    2d16:	4013      	ands	r3, r2
    2d18:	2201      	movs	r2, #1
    2d1a:	409a      	lsls	r2, r3
    2d1c:	0013      	movs	r3, r2
    2d1e:	60bb      	str	r3, [r7, #8]
    2d20:	683a      	ldr	r2, [r7, #0]
    2d22:	68b9      	ldr	r1, [r7, #8]
    2d24:	68fb      	ldr	r3, [r7, #12]
    2d26:	0018      	movs	r0, r3
    2d28:	4b03      	ldr	r3, [pc, #12]	; (2d38 <system_pinmux_pin_set_config+0x44>)
    2d2a:	4798      	blx	r3
    2d2c:	46c0      	nop			; (mov r8, r8)
    2d2e:	46bd      	mov	sp, r7
    2d30:	b004      	add	sp, #16
    2d32:	bd80      	pop	{r7, pc}
    2d34:	00002b85 	.word	0x00002b85
    2d38:	00002be5 	.word	0x00002be5

00002d3c <_system_dummy_init>:
    2d3c:	b580      	push	{r7, lr}
    2d3e:	af00      	add	r7, sp, #0
    2d40:	46c0      	nop			; (mov r8, r8)
    2d42:	46bd      	mov	sp, r7
    2d44:	bd80      	pop	{r7, pc}
	...

00002d48 <system_init>:
    2d48:	b580      	push	{r7, lr}
    2d4a:	af00      	add	r7, sp, #0
    2d4c:	4b06      	ldr	r3, [pc, #24]	; (2d68 <system_init+0x20>)
    2d4e:	4798      	blx	r3
    2d50:	4b06      	ldr	r3, [pc, #24]	; (2d6c <system_init+0x24>)
    2d52:	4798      	blx	r3
    2d54:	4b06      	ldr	r3, [pc, #24]	; (2d70 <system_init+0x28>)
    2d56:	4798      	blx	r3
    2d58:	4b06      	ldr	r3, [pc, #24]	; (2d74 <system_init+0x2c>)
    2d5a:	4798      	blx	r3
    2d5c:	4b06      	ldr	r3, [pc, #24]	; (2d78 <system_init+0x30>)
    2d5e:	4798      	blx	r3
    2d60:	46c0      	nop			; (mov r8, r8)
    2d62:	46bd      	mov	sp, r7
    2d64:	bd80      	pop	{r7, pc}
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	00002461 	.word	0x00002461
    2d6c:	00001cf1 	.word	0x00001cf1
    2d70:	00002d3d 	.word	0x00002d3d
    2d74:	00002d3d 	.word	0x00002d3d
    2d78:	00002d3d 	.word	0x00002d3d

00002d7c <Reset_Handler>:
    2d7c:	b580      	push	{r7, lr}
    2d7e:	b082      	sub	sp, #8
    2d80:	af00      	add	r7, sp, #0
    2d82:	4b2f      	ldr	r3, [pc, #188]	; (2e40 <Reset_Handler+0xc4>)
    2d84:	607b      	str	r3, [r7, #4]
    2d86:	4b2f      	ldr	r3, [pc, #188]	; (2e44 <Reset_Handler+0xc8>)
    2d88:	603b      	str	r3, [r7, #0]
    2d8a:	687a      	ldr	r2, [r7, #4]
    2d8c:	683b      	ldr	r3, [r7, #0]
    2d8e:	429a      	cmp	r2, r3
    2d90:	d00c      	beq.n	2dac <Reset_Handler+0x30>
    2d92:	e007      	b.n	2da4 <Reset_Handler+0x28>
    2d94:	683b      	ldr	r3, [r7, #0]
    2d96:	1d1a      	adds	r2, r3, #4
    2d98:	603a      	str	r2, [r7, #0]
    2d9a:	687a      	ldr	r2, [r7, #4]
    2d9c:	1d11      	adds	r1, r2, #4
    2d9e:	6079      	str	r1, [r7, #4]
    2da0:	6812      	ldr	r2, [r2, #0]
    2da2:	601a      	str	r2, [r3, #0]
    2da4:	683a      	ldr	r2, [r7, #0]
    2da6:	4b28      	ldr	r3, [pc, #160]	; (2e48 <Reset_Handler+0xcc>)
    2da8:	429a      	cmp	r2, r3
    2daa:	d3f3      	bcc.n	2d94 <Reset_Handler+0x18>
    2dac:	4b27      	ldr	r3, [pc, #156]	; (2e4c <Reset_Handler+0xd0>)
    2dae:	603b      	str	r3, [r7, #0]
    2db0:	e004      	b.n	2dbc <Reset_Handler+0x40>
    2db2:	683b      	ldr	r3, [r7, #0]
    2db4:	1d1a      	adds	r2, r3, #4
    2db6:	603a      	str	r2, [r7, #0]
    2db8:	2200      	movs	r2, #0
    2dba:	601a      	str	r2, [r3, #0]
    2dbc:	683a      	ldr	r2, [r7, #0]
    2dbe:	4b24      	ldr	r3, [pc, #144]	; (2e50 <Reset_Handler+0xd4>)
    2dc0:	429a      	cmp	r2, r3
    2dc2:	d3f6      	bcc.n	2db2 <Reset_Handler+0x36>
    2dc4:	4b23      	ldr	r3, [pc, #140]	; (2e54 <Reset_Handler+0xd8>)
    2dc6:	607b      	str	r3, [r7, #4]
    2dc8:	4b23      	ldr	r3, [pc, #140]	; (2e58 <Reset_Handler+0xdc>)
    2dca:	687a      	ldr	r2, [r7, #4]
    2dcc:	21ff      	movs	r1, #255	; 0xff
    2dce:	438a      	bics	r2, r1
    2dd0:	609a      	str	r2, [r3, #8]
    2dd2:	4a22      	ldr	r2, [pc, #136]	; (2e5c <Reset_Handler+0xe0>)
    2dd4:	2390      	movs	r3, #144	; 0x90
    2dd6:	005b      	lsls	r3, r3, #1
    2dd8:	2102      	movs	r1, #2
    2dda:	50d1      	str	r1, [r2, r3]
    2ddc:	4a20      	ldr	r2, [pc, #128]	; (2e60 <Reset_Handler+0xe4>)
    2dde:	78d3      	ldrb	r3, [r2, #3]
    2de0:	2103      	movs	r1, #3
    2de2:	438b      	bics	r3, r1
    2de4:	1c19      	adds	r1, r3, #0
    2de6:	2302      	movs	r3, #2
    2de8:	430b      	orrs	r3, r1
    2dea:	70d3      	strb	r3, [r2, #3]
    2dec:	4a1c      	ldr	r2, [pc, #112]	; (2e60 <Reset_Handler+0xe4>)
    2dee:	78d3      	ldrb	r3, [r2, #3]
    2df0:	210c      	movs	r1, #12
    2df2:	438b      	bics	r3, r1
    2df4:	1c19      	adds	r1, r3, #0
    2df6:	2308      	movs	r3, #8
    2df8:	430b      	orrs	r3, r1
    2dfa:	70d3      	strb	r3, [r2, #3]
    2dfc:	4a19      	ldr	r2, [pc, #100]	; (2e64 <Reset_Handler+0xe8>)
    2dfe:	7b93      	ldrb	r3, [r2, #14]
    2e00:	2130      	movs	r1, #48	; 0x30
    2e02:	438b      	bics	r3, r1
    2e04:	1c19      	adds	r1, r3, #0
    2e06:	2320      	movs	r3, #32
    2e08:	430b      	orrs	r3, r1
    2e0a:	7393      	strb	r3, [r2, #14]
    2e0c:	4a15      	ldr	r2, [pc, #84]	; (2e64 <Reset_Handler+0xe8>)
    2e0e:	7b93      	ldrb	r3, [r2, #14]
    2e10:	210c      	movs	r1, #12
    2e12:	438b      	bics	r3, r1
    2e14:	1c19      	adds	r1, r3, #0
    2e16:	2308      	movs	r3, #8
    2e18:	430b      	orrs	r3, r1
    2e1a:	7393      	strb	r3, [r2, #14]
    2e1c:	4a11      	ldr	r2, [pc, #68]	; (2e64 <Reset_Handler+0xe8>)
    2e1e:	7b93      	ldrb	r3, [r2, #14]
    2e20:	2103      	movs	r1, #3
    2e22:	438b      	bics	r3, r1
    2e24:	1c19      	adds	r1, r3, #0
    2e26:	2302      	movs	r3, #2
    2e28:	430b      	orrs	r3, r1
    2e2a:	7393      	strb	r3, [r2, #14]
    2e2c:	4a0e      	ldr	r2, [pc, #56]	; (2e68 <Reset_Handler+0xec>)
    2e2e:	6853      	ldr	r3, [r2, #4]
    2e30:	2180      	movs	r1, #128	; 0x80
    2e32:	430b      	orrs	r3, r1
    2e34:	6053      	str	r3, [r2, #4]
    2e36:	4b0d      	ldr	r3, [pc, #52]	; (2e6c <Reset_Handler+0xf0>)
    2e38:	4798      	blx	r3
    2e3a:	4b0d      	ldr	r3, [pc, #52]	; (2e70 <Reset_Handler+0xf4>)
    2e3c:	4798      	blx	r3
    2e3e:	e7fe      	b.n	2e3e <Reset_Handler+0xc2>
    2e40:	000039c4 	.word	0x000039c4
    2e44:	20000000 	.word	0x20000000
    2e48:	2000006c 	.word	0x2000006c
    2e4c:	2000006c 	.word	0x2000006c
    2e50:	20000400 	.word	0x20000400
    2e54:	00000000 	.word	0x00000000
    2e58:	e000ed00 	.word	0xe000ed00
    2e5c:	41007000 	.word	0x41007000
    2e60:	41005000 	.word	0x41005000
    2e64:	41004800 	.word	0x41004800
    2e68:	41004000 	.word	0x41004000
    2e6c:	0000365d 	.word	0x0000365d
    2e70:	00003455 	.word	0x00003455

00002e74 <Dummy_Handler>:
    2e74:	b580      	push	{r7, lr}
    2e76:	af00      	add	r7, sp, #0
    2e78:	e7fe      	b.n	2e78 <Dummy_Handler+0x4>
	...

00002e7c <_sbrk>:
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b084      	sub	sp, #16
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
    2e84:	4b0a      	ldr	r3, [pc, #40]	; (2eb0 <_sbrk+0x34>)
    2e86:	681b      	ldr	r3, [r3, #0]
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d102      	bne.n	2e92 <_sbrk+0x16>
    2e8c:	4b08      	ldr	r3, [pc, #32]	; (2eb0 <_sbrk+0x34>)
    2e8e:	4a09      	ldr	r2, [pc, #36]	; (2eb4 <_sbrk+0x38>)
    2e90:	601a      	str	r2, [r3, #0]
    2e92:	4b07      	ldr	r3, [pc, #28]	; (2eb0 <_sbrk+0x34>)
    2e94:	681b      	ldr	r3, [r3, #0]
    2e96:	60fb      	str	r3, [r7, #12]
    2e98:	4b05      	ldr	r3, [pc, #20]	; (2eb0 <_sbrk+0x34>)
    2e9a:	681a      	ldr	r2, [r3, #0]
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	18d2      	adds	r2, r2, r3
    2ea0:	4b03      	ldr	r3, [pc, #12]	; (2eb0 <_sbrk+0x34>)
    2ea2:	601a      	str	r2, [r3, #0]
    2ea4:	68fb      	ldr	r3, [r7, #12]
    2ea6:	0018      	movs	r0, r3
    2ea8:	46bd      	mov	sp, r7
    2eaa:	b004      	add	sp, #16
    2eac:	bd80      	pop	{r7, pc}
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	200000cc 	.word	0x200000cc
    2eb4:	20002400 	.word	0x20002400

00002eb8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b084      	sub	sp, #16
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	0002      	movs	r2, r0
    2ec0:	1dfb      	adds	r3, r7, #7
    2ec2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2ec4:	230f      	movs	r3, #15
    2ec6:	18fb      	adds	r3, r7, r3
    2ec8:	1dfa      	adds	r2, r7, #7
    2eca:	7812      	ldrb	r2, [r2, #0]
    2ecc:	09d2      	lsrs	r2, r2, #7
    2ece:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2ed0:	230e      	movs	r3, #14
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	1dfa      	adds	r2, r7, #7
    2ed6:	7812      	ldrb	r2, [r2, #0]
    2ed8:	0952      	lsrs	r2, r2, #5
    2eda:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2edc:	4b0d      	ldr	r3, [pc, #52]	; (2f14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2ede:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2ee0:	230f      	movs	r3, #15
    2ee2:	18fb      	adds	r3, r7, r3
    2ee4:	781b      	ldrb	r3, [r3, #0]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d10f      	bne.n	2f0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2eea:	230f      	movs	r3, #15
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	781b      	ldrb	r3, [r3, #0]
    2ef0:	009b      	lsls	r3, r3, #2
    2ef2:	2210      	movs	r2, #16
    2ef4:	4694      	mov	ip, r2
    2ef6:	44bc      	add	ip, r7
    2ef8:	4463      	add	r3, ip
    2efa:	3b08      	subs	r3, #8
    2efc:	681a      	ldr	r2, [r3, #0]
    2efe:	230e      	movs	r3, #14
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	781b      	ldrb	r3, [r3, #0]
    2f04:	01db      	lsls	r3, r3, #7
    2f06:	18d3      	adds	r3, r2, r3
    2f08:	e000      	b.n	2f0c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2f0a:	2300      	movs	r3, #0
	}
}
    2f0c:	0018      	movs	r0, r3
    2f0e:	46bd      	mov	sp, r7
    2f10:	b004      	add	sp, #16
    2f12:	bd80      	pop	{r7, pc}
    2f14:	41004400 	.word	0x41004400

00002f18 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	0002      	movs	r2, r0
    2f20:	1dfb      	adds	r3, r7, #7
    2f22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2f24:	1dfb      	adds	r3, r7, #7
    2f26:	781b      	ldrb	r3, [r3, #0]
    2f28:	0018      	movs	r0, r3
    2f2a:	4b03      	ldr	r3, [pc, #12]	; (2f38 <port_get_group_from_gpio_pin+0x20>)
    2f2c:	4798      	blx	r3
    2f2e:	0003      	movs	r3, r0
}
    2f30:	0018      	movs	r0, r3
    2f32:	46bd      	mov	sp, r7
    2f34:	b002      	add	sp, #8
    2f36:	bd80      	pop	{r7, pc}
    2f38:	00002eb9 	.word	0x00002eb9

00002f3c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b084      	sub	sp, #16
    2f40:	af00      	add	r7, sp, #0
    2f42:	0002      	movs	r2, r0
    2f44:	1dfb      	adds	r3, r7, #7
    2f46:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2f48:	1dfb      	adds	r3, r7, #7
    2f4a:	781b      	ldrb	r3, [r3, #0]
    2f4c:	0018      	movs	r0, r3
    2f4e:	4b0b      	ldr	r3, [pc, #44]	; (2f7c <port_pin_get_input_level+0x40>)
    2f50:	4798      	blx	r3
    2f52:	0003      	movs	r3, r0
    2f54:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f56:	1dfb      	adds	r3, r7, #7
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	221f      	movs	r2, #31
    2f5c:	4013      	ands	r3, r2
    2f5e:	2201      	movs	r2, #1
    2f60:	409a      	lsls	r2, r3
    2f62:	0013      	movs	r3, r2
    2f64:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    2f66:	68fb      	ldr	r3, [r7, #12]
    2f68:	6a1b      	ldr	r3, [r3, #32]
    2f6a:	68ba      	ldr	r2, [r7, #8]
    2f6c:	4013      	ands	r3, r2
    2f6e:	1e5a      	subs	r2, r3, #1
    2f70:	4193      	sbcs	r3, r2
    2f72:	b2db      	uxtb	r3, r3
}
    2f74:	0018      	movs	r0, r3
    2f76:	46bd      	mov	sp, r7
    2f78:	b004      	add	sp, #16
    2f7a:	bd80      	pop	{r7, pc}
    2f7c:	00002f19 	.word	0x00002f19

00002f80 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b084      	sub	sp, #16
    2f84:	af00      	add	r7, sp, #0
    2f86:	0002      	movs	r2, r0
    2f88:	1dfb      	adds	r3, r7, #7
    2f8a:	701a      	strb	r2, [r3, #0]
    2f8c:	1dbb      	adds	r3, r7, #6
    2f8e:	1c0a      	adds	r2, r1, #0
    2f90:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2f92:	1dfb      	adds	r3, r7, #7
    2f94:	781b      	ldrb	r3, [r3, #0]
    2f96:	0018      	movs	r0, r3
    2f98:	4b0d      	ldr	r3, [pc, #52]	; (2fd0 <port_pin_set_output_level+0x50>)
    2f9a:	4798      	blx	r3
    2f9c:	0003      	movs	r3, r0
    2f9e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2fa0:	1dfb      	adds	r3, r7, #7
    2fa2:	781b      	ldrb	r3, [r3, #0]
    2fa4:	221f      	movs	r2, #31
    2fa6:	4013      	ands	r3, r2
    2fa8:	2201      	movs	r2, #1
    2faa:	409a      	lsls	r2, r3
    2fac:	0013      	movs	r3, r2
    2fae:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2fb0:	1dbb      	adds	r3, r7, #6
    2fb2:	781b      	ldrb	r3, [r3, #0]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d003      	beq.n	2fc0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2fb8:	68fb      	ldr	r3, [r7, #12]
    2fba:	68ba      	ldr	r2, [r7, #8]
    2fbc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2fbe:	e002      	b.n	2fc6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2fc0:	68fb      	ldr	r3, [r7, #12]
    2fc2:	68ba      	ldr	r2, [r7, #8]
    2fc4:	615a      	str	r2, [r3, #20]
}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	46bd      	mov	sp, r7
    2fca:	b004      	add	sp, #16
    2fcc:	bd80      	pop	{r7, pc}
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	00002f19 	.word	0x00002f19

00002fd4 <system_interrupt_enable_global>:
{
    2fd4:	b580      	push	{r7, lr}
    2fd6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    2fd8:	4b04      	ldr	r3, [pc, #16]	; (2fec <system_interrupt_enable_global+0x18>)
    2fda:	2201      	movs	r2, #1
    2fdc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2fde:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2fe2:	b662      	cpsie	i
}
    2fe4:	46c0      	nop			; (mov r8, r8)
    2fe6:	46bd      	mov	sp, r7
    2fe8:	bd80      	pop	{r7, pc}
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	20000004 	.word	0x20000004

00002ff0 <matchCommand>:
volatile uint8_t rx_buffer[MAX_RX_BUFFER_LENGTH];

//volatile char buffer[50];


void matchCommand(){
    2ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ff2:	b0c9      	sub	sp, #292	; 0x124
    2ff4:	af00      	add	r7, sp, #0
	char buffer[200];
	int len = 0;
    2ff6:	2300      	movs	r3, #0
    2ff8:	22dc      	movs	r2, #220	; 0xdc
    2ffa:	2140      	movs	r1, #64	; 0x40
    2ffc:	468c      	mov	ip, r1
    2ffe:	44bc      	add	ip, r7
    3000:	4462      	add	r2, ip
    3002:	6013      	str	r3, [r2, #0]
	
	bool enterFound = false;
    3004:	23da      	movs	r3, #218	; 0xda
    3006:	2240      	movs	r2, #64	; 0x40
    3008:	18ba      	adds	r2, r7, r2
    300a:	18d2      	adds	r2, r2, r3
    300c:	2300      	movs	r3, #0
    300e:	7013      	strb	r3, [r2, #0]
	bool deviceNameFound = false;
    3010:	23db      	movs	r3, #219	; 0xdb
    3012:	2240      	movs	r2, #64	; 0x40
    3014:	18ba      	adds	r2, r7, r2
    3016:	18d2      	adds	r2, r2, r3
    3018:	2300      	movs	r3, #0
    301a:	7013      	strb	r3, [r2, #0]
	
	while (!rxbufferIsEmpty() && !enterFound)
    301c:	e0f0      	b.n	3200 <matchCommand+0x210>
	{
		char c = getNextRxChar();
    301e:	23d9      	movs	r3, #217	; 0xd9
    3020:	2240      	movs	r2, #64	; 0x40
    3022:	18ba      	adds	r2, r7, r2
    3024:	18d4      	adds	r4, r2, r3
    3026:	4bdf      	ldr	r3, [pc, #892]	; (33a4 <matchCommand+0x3b4>)
    3028:	4798      	blx	r3
    302a:	0003      	movs	r3, r0
    302c:	7023      	strb	r3, [r4, #0]
		if(c == 0x0D) {// enter
    302e:	23d9      	movs	r3, #217	; 0xd9
    3030:	2240      	movs	r2, #64	; 0x40
    3032:	4694      	mov	ip, r2
    3034:	44bc      	add	ip, r7
    3036:	4463      	add	r3, ip
    3038:	781b      	ldrb	r3, [r3, #0]
    303a:	2b0d      	cmp	r3, #13
    303c:	d117      	bne.n	306e <matchCommand+0x7e>
			enterFound = !enterFound;
    303e:	23da      	movs	r3, #218	; 0xda
    3040:	2240      	movs	r2, #64	; 0x40
    3042:	4694      	mov	ip, r2
    3044:	44bc      	add	ip, r7
    3046:	4463      	add	r3, ip
    3048:	781b      	ldrb	r3, [r3, #0]
    304a:	1e5a      	subs	r2, r3, #1
    304c:	4193      	sbcs	r3, r2
    304e:	b2db      	uxtb	r3, r3
    3050:	2201      	movs	r2, #1
    3052:	4053      	eors	r3, r2
    3054:	b2db      	uxtb	r3, r3
    3056:	001a      	movs	r2, r3
    3058:	23da      	movs	r3, #218	; 0xda
    305a:	2140      	movs	r1, #64	; 0x40
    305c:	468c      	mov	ip, r1
    305e:	44bc      	add	ip, r7
    3060:	4463      	add	r3, ip
    3062:	701a      	strb	r2, [r3, #0]
    3064:	781a      	ldrb	r2, [r3, #0]
    3066:	2101      	movs	r1, #1
    3068:	400a      	ands	r2, r1
    306a:	701a      	strb	r2, [r3, #0]
			break;
    306c:	e0dd      	b.n	322a <matchCommand+0x23a>
		} else if (c == 0x08){// backspace
    306e:	23d9      	movs	r3, #217	; 0xd9
    3070:	2240      	movs	r2, #64	; 0x40
    3072:	4694      	mov	ip, r2
    3074:	44bc      	add	ip, r7
    3076:	4463      	add	r3, ip
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	2b08      	cmp	r3, #8
    307c:	d118      	bne.n	30b0 <matchCommand+0xc0>
			len--;
    307e:	23dc      	movs	r3, #220	; 0xdc
    3080:	2240      	movs	r2, #64	; 0x40
    3082:	4694      	mov	ip, r2
    3084:	44bc      	add	ip, r7
    3086:	4463      	add	r3, ip
    3088:	681b      	ldr	r3, [r3, #0]
    308a:	3b01      	subs	r3, #1
    308c:	22dc      	movs	r2, #220	; 0xdc
    308e:	2140      	movs	r1, #64	; 0x40
    3090:	468c      	mov	ip, r1
    3092:	44bc      	add	ip, r7
    3094:	4462      	add	r2, ip
    3096:	6013      	str	r3, [r2, #0]
    3098:	23db      	movs	r3, #219	; 0xdb
    309a:	2240      	movs	r2, #64	; 0x40
    309c:	18ba      	adds	r2, r7, r2
    309e:	18d2      	adds	r2, r2, r3
    30a0:	23db      	movs	r3, #219	; 0xdb
    30a2:	2140      	movs	r1, #64	; 0x40
    30a4:	468c      	mov	ip, r1
    30a6:	44bc      	add	ip, r7
    30a8:	4463      	add	r3, ip
    30aa:	781b      	ldrb	r3, [r3, #0]
    30ac:	7013      	strb	r3, [r2, #0]
			continue;
    30ae:	e0a7      	b.n	3200 <matchCommand+0x210>
		} else if (c == 0x20){// space
    30b0:	23d9      	movs	r3, #217	; 0xd9
    30b2:	2240      	movs	r2, #64	; 0x40
    30b4:	4694      	mov	ip, r2
    30b6:	44bc      	add	ip, r7
    30b8:	4463      	add	r3, ip
    30ba:	781b      	ldrb	r3, [r3, #0]
    30bc:	2b20      	cmp	r3, #32
    30be:	d000      	beq.n	30c2 <matchCommand+0xd2>
    30c0:	e07d      	b.n	31be <matchCommand+0x1ce>
    30c2:	466b      	mov	r3, sp
    30c4:	001c      	movs	r4, r3
			char trimmedString[len+1];
    30c6:	23dc      	movs	r3, #220	; 0xdc
    30c8:	2240      	movs	r2, #64	; 0x40
    30ca:	4694      	mov	ip, r2
    30cc:	44bc      	add	ip, r7
    30ce:	4463      	add	r3, ip
    30d0:	681b      	ldr	r3, [r3, #0]
    30d2:	1c5a      	adds	r2, r3, #1
    30d4:	1e53      	subs	r3, r2, #1
    30d6:	21d4      	movs	r1, #212	; 0xd4
    30d8:	2040      	movs	r0, #64	; 0x40
    30da:	4684      	mov	ip, r0
    30dc:	44bc      	add	ip, r7
    30de:	4461      	add	r1, ip
    30e0:	600b      	str	r3, [r1, #0]
    30e2:	0013      	movs	r3, r2
    30e4:	61bb      	str	r3, [r7, #24]
    30e6:	2300      	movs	r3, #0
    30e8:	61fb      	str	r3, [r7, #28]
    30ea:	69b8      	ldr	r0, [r7, #24]
    30ec:	69f9      	ldr	r1, [r7, #28]
    30ee:	0003      	movs	r3, r0
    30f0:	0f5b      	lsrs	r3, r3, #29
    30f2:	000d      	movs	r5, r1
    30f4:	00ed      	lsls	r5, r5, #3
    30f6:	63fd      	str	r5, [r7, #60]	; 0x3c
    30f8:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
    30fa:	431d      	orrs	r5, r3
    30fc:	63fd      	str	r5, [r7, #60]	; 0x3c
    30fe:	0003      	movs	r3, r0
    3100:	00db      	lsls	r3, r3, #3
    3102:	63bb      	str	r3, [r7, #56]	; 0x38
    3104:	0013      	movs	r3, r2
    3106:	613b      	str	r3, [r7, #16]
    3108:	2300      	movs	r3, #0
    310a:	617b      	str	r3, [r7, #20]
    310c:	6938      	ldr	r0, [r7, #16]
    310e:	6979      	ldr	r1, [r7, #20]
    3110:	0003      	movs	r3, r0
    3112:	0f5b      	lsrs	r3, r3, #29
    3114:	000d      	movs	r5, r1
    3116:	00ed      	lsls	r5, r5, #3
    3118:	637d      	str	r5, [r7, #52]	; 0x34
    311a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    311c:	431d      	orrs	r5, r3
    311e:	637d      	str	r5, [r7, #52]	; 0x34
    3120:	0003      	movs	r3, r0
    3122:	00db      	lsls	r3, r3, #3
    3124:	633b      	str	r3, [r7, #48]	; 0x30
    3126:	0013      	movs	r3, r2
    3128:	3307      	adds	r3, #7
    312a:	08db      	lsrs	r3, r3, #3
    312c:	00db      	lsls	r3, r3, #3
    312e:	466a      	mov	r2, sp
    3130:	1ad3      	subs	r3, r2, r3
    3132:	469d      	mov	sp, r3
    3134:	466b      	mov	r3, sp
    3136:	3300      	adds	r3, #0
    3138:	22d0      	movs	r2, #208	; 0xd0
    313a:	2140      	movs	r1, #64	; 0x40
    313c:	468c      	mov	ip, r1
    313e:	44bc      	add	ip, r7
    3140:	4462      	add	r2, ip
    3142:	6013      	str	r3, [r2, #0]
			getTrimmedString(buffer, trimmedString, len);
    3144:	23d0      	movs	r3, #208	; 0xd0
    3146:	2240      	movs	r2, #64	; 0x40
    3148:	4694      	mov	ip, r2
    314a:	44bc      	add	ip, r7
    314c:	4463      	add	r3, ip
    314e:	6819      	ldr	r1, [r3, #0]
    3150:	23dc      	movs	r3, #220	; 0xdc
    3152:	2240      	movs	r2, #64	; 0x40
    3154:	4694      	mov	ip, r2
    3156:	44bc      	add	ip, r7
    3158:	4463      	add	r3, ip
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	2240      	movs	r2, #64	; 0x40
    315e:	18b8      	adds	r0, r7, r2
    3160:	001a      	movs	r2, r3
    3162:	4b91      	ldr	r3, [pc, #580]	; (33a8 <matchCommand+0x3b8>)
    3164:	4798      	blx	r3
			if(strcmp(trimmedString, "setDeviceName") == 0){
    3166:	23d0      	movs	r3, #208	; 0xd0
    3168:	2240      	movs	r2, #64	; 0x40
    316a:	4694      	mov	ip, r2
    316c:	44bc      	add	ip, r7
    316e:	4463      	add	r3, ip
    3170:	681a      	ldr	r2, [r3, #0]
    3172:	4b8e      	ldr	r3, [pc, #568]	; (33ac <matchCommand+0x3bc>)
    3174:	0019      	movs	r1, r3
    3176:	0010      	movs	r0, r2
    3178:	4b8d      	ldr	r3, [pc, #564]	; (33b0 <matchCommand+0x3c0>)
    317a:	4798      	blx	r3
    317c:	1e03      	subs	r3, r0, #0
    317e:	d11d      	bne.n	31bc <matchCommand+0x1cc>
				len = 0;
    3180:	2300      	movs	r3, #0
    3182:	22dc      	movs	r2, #220	; 0xdc
    3184:	2140      	movs	r1, #64	; 0x40
    3186:	468c      	mov	ip, r1
    3188:	44bc      	add	ip, r7
    318a:	4462      	add	r2, ip
    318c:	6013      	str	r3, [r2, #0]
				deviceNameFound = !deviceNameFound;
    318e:	23db      	movs	r3, #219	; 0xdb
    3190:	2240      	movs	r2, #64	; 0x40
    3192:	4694      	mov	ip, r2
    3194:	44bc      	add	ip, r7
    3196:	4463      	add	r3, ip
    3198:	781b      	ldrb	r3, [r3, #0]
    319a:	1e5a      	subs	r2, r3, #1
    319c:	4193      	sbcs	r3, r2
    319e:	b2da      	uxtb	r2, r3
    31a0:	2301      	movs	r3, #1
    31a2:	4053      	eors	r3, r2
    31a4:	b2db      	uxtb	r3, r3
    31a6:	22db      	movs	r2, #219	; 0xdb
    31a8:	2140      	movs	r1, #64	; 0x40
    31aa:	1879      	adds	r1, r7, r1
    31ac:	1889      	adds	r1, r1, r2
    31ae:	700b      	strb	r3, [r1, #0]
    31b0:	780a      	ldrb	r2, [r1, #0]
    31b2:	2301      	movs	r3, #1
    31b4:	4013      	ands	r3, r2
    31b6:	700b      	strb	r3, [r1, #0]
    31b8:	46a5      	mov	sp, r4
    31ba:	e021      	b.n	3200 <matchCommand+0x210>
    31bc:	46a5      	mov	sp, r4
				continue;
			}
		}
		
		buffer[len++] = c;
    31be:	23dc      	movs	r3, #220	; 0xdc
    31c0:	2240      	movs	r2, #64	; 0x40
    31c2:	4694      	mov	ip, r2
    31c4:	44bc      	add	ip, r7
    31c6:	4463      	add	r3, ip
    31c8:	6819      	ldr	r1, [r3, #0]
    31ca:	1c4b      	adds	r3, r1, #1
    31cc:	22dc      	movs	r2, #220	; 0xdc
    31ce:	2040      	movs	r0, #64	; 0x40
    31d0:	4684      	mov	ip, r0
    31d2:	44bc      	add	ip, r7
    31d4:	4462      	add	r2, ip
    31d6:	6013      	str	r3, [r2, #0]
    31d8:	2340      	movs	r3, #64	; 0x40
    31da:	18fa      	adds	r2, r7, r3
    31dc:	23d9      	movs	r3, #217	; 0xd9
    31de:	2040      	movs	r0, #64	; 0x40
    31e0:	4684      	mov	ip, r0
    31e2:	44bc      	add	ip, r7
    31e4:	4463      	add	r3, ip
    31e6:	781b      	ldrb	r3, [r3, #0]
    31e8:	5453      	strb	r3, [r2, r1]
    31ea:	23db      	movs	r3, #219	; 0xdb
    31ec:	2240      	movs	r2, #64	; 0x40
    31ee:	18ba      	adds	r2, r7, r2
    31f0:	18d2      	adds	r2, r2, r3
    31f2:	23db      	movs	r3, #219	; 0xdb
    31f4:	2140      	movs	r1, #64	; 0x40
    31f6:	468c      	mov	ip, r1
    31f8:	44bc      	add	ip, r7
    31fa:	4463      	add	r3, ip
    31fc:	781b      	ldrb	r3, [r3, #0]
    31fe:	7013      	strb	r3, [r2, #0]
	while (!rxbufferIsEmpty() && !enterFound)
    3200:	4b6c      	ldr	r3, [pc, #432]	; (33b4 <matchCommand+0x3c4>)
    3202:	4798      	blx	r3
    3204:	0003      	movs	r3, r0
    3206:	001a      	movs	r2, r3
    3208:	2301      	movs	r3, #1
    320a:	4053      	eors	r3, r2
    320c:	b2db      	uxtb	r3, r3
    320e:	2b00      	cmp	r3, #0
    3210:	d00b      	beq.n	322a <matchCommand+0x23a>
    3212:	23da      	movs	r3, #218	; 0xda
    3214:	2240      	movs	r2, #64	; 0x40
    3216:	4694      	mov	ip, r2
    3218:	44bc      	add	ip, r7
    321a:	4463      	add	r3, ip
    321c:	781a      	ldrb	r2, [r3, #0]
    321e:	2301      	movs	r3, #1
    3220:	4053      	eors	r3, r2
    3222:	b2db      	uxtb	r3, r3
    3224:	2b00      	cmp	r3, #0
    3226:	d000      	beq.n	322a <matchCommand+0x23a>
    3228:	e6f9      	b.n	301e <matchCommand+0x2e>
		
	}
	char trimmedString[len+1];
    322a:	23dc      	movs	r3, #220	; 0xdc
    322c:	2240      	movs	r2, #64	; 0x40
    322e:	4694      	mov	ip, r2
    3230:	44bc      	add	ip, r7
    3232:	4463      	add	r3, ip
    3234:	681b      	ldr	r3, [r3, #0]
    3236:	3301      	adds	r3, #1
    3238:	466a      	mov	r2, sp
    323a:	0014      	movs	r4, r2
    323c:	1e5a      	subs	r2, r3, #1
    323e:	21cc      	movs	r1, #204	; 0xcc
    3240:	2040      	movs	r0, #64	; 0x40
    3242:	4684      	mov	ip, r0
    3244:	44bc      	add	ip, r7
    3246:	4461      	add	r1, ip
    3248:	600a      	str	r2, [r1, #0]
    324a:	001a      	movs	r2, r3
    324c:	60ba      	str	r2, [r7, #8]
    324e:	2200      	movs	r2, #0
    3250:	60fa      	str	r2, [r7, #12]
    3252:	68b8      	ldr	r0, [r7, #8]
    3254:	68f9      	ldr	r1, [r7, #12]
    3256:	0002      	movs	r2, r0
    3258:	0f52      	lsrs	r2, r2, #29
    325a:	000d      	movs	r5, r1
    325c:	00ed      	lsls	r5, r5, #3
    325e:	62fd      	str	r5, [r7, #44]	; 0x2c
    3260:	6afd      	ldr	r5, [r7, #44]	; 0x2c
    3262:	4315      	orrs	r5, r2
    3264:	62fd      	str	r5, [r7, #44]	; 0x2c
    3266:	0002      	movs	r2, r0
    3268:	00d2      	lsls	r2, r2, #3
    326a:	62ba      	str	r2, [r7, #40]	; 0x28
    326c:	001a      	movs	r2, r3
    326e:	603a      	str	r2, [r7, #0]
    3270:	2200      	movs	r2, #0
    3272:	607a      	str	r2, [r7, #4]
    3274:	6838      	ldr	r0, [r7, #0]
    3276:	6879      	ldr	r1, [r7, #4]
    3278:	0002      	movs	r2, r0
    327a:	0f52      	lsrs	r2, r2, #29
    327c:	000d      	movs	r5, r1
    327e:	00ed      	lsls	r5, r5, #3
    3280:	627d      	str	r5, [r7, #36]	; 0x24
    3282:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    3284:	4315      	orrs	r5, r2
    3286:	627d      	str	r5, [r7, #36]	; 0x24
    3288:	0002      	movs	r2, r0
    328a:	00d2      	lsls	r2, r2, #3
    328c:	623a      	str	r2, [r7, #32]
    328e:	3307      	adds	r3, #7
    3290:	08db      	lsrs	r3, r3, #3
    3292:	00db      	lsls	r3, r3, #3
    3294:	466a      	mov	r2, sp
    3296:	1ad3      	subs	r3, r2, r3
    3298:	469d      	mov	sp, r3
    329a:	466b      	mov	r3, sp
    329c:	3300      	adds	r3, #0
    329e:	22c8      	movs	r2, #200	; 0xc8
    32a0:	2140      	movs	r1, #64	; 0x40
    32a2:	468c      	mov	ip, r1
    32a4:	44bc      	add	ip, r7
    32a6:	4462      	add	r2, ip
    32a8:	6013      	str	r3, [r2, #0]
	
	getTrimmedString(buffer, trimmedString, len);
    32aa:	23c8      	movs	r3, #200	; 0xc8
    32ac:	2240      	movs	r2, #64	; 0x40
    32ae:	4694      	mov	ip, r2
    32b0:	44bc      	add	ip, r7
    32b2:	4463      	add	r3, ip
    32b4:	6819      	ldr	r1, [r3, #0]
    32b6:	23dc      	movs	r3, #220	; 0xdc
    32b8:	2240      	movs	r2, #64	; 0x40
    32ba:	4694      	mov	ip, r2
    32bc:	44bc      	add	ip, r7
    32be:	4463      	add	r3, ip
    32c0:	681a      	ldr	r2, [r3, #0]
    32c2:	2340      	movs	r3, #64	; 0x40
    32c4:	18fb      	adds	r3, r7, r3
    32c6:	0018      	movs	r0, r3
    32c8:	4b37      	ldr	r3, [pc, #220]	; (33a8 <matchCommand+0x3b8>)
    32ca:	4798      	blx	r3
	
	// New Line for output of CLI
	//SerialConsoleWriteString("\n");

	if(deviceNameFound){
    32cc:	23db      	movs	r3, #219	; 0xdb
    32ce:	2240      	movs	r2, #64	; 0x40
    32d0:	4694      	mov	ip, r2
    32d2:	44bc      	add	ip, r7
    32d4:	4463      	add	r3, ip
    32d6:	781b      	ldrb	r3, [r3, #0]
    32d8:	2b00      	cmp	r3, #0
    32da:	d00b      	beq.n	32f4 <matchCommand+0x304>
		//SerialConsoleWriteString("\n");
		setDeviceName(trimmedString);
    32dc:	23c8      	movs	r3, #200	; 0xc8
    32de:	2240      	movs	r2, #64	; 0x40
    32e0:	4694      	mov	ip, r2
    32e2:	44bc      	add	ip, r7
    32e4:	4463      	add	r3, ip
    32e6:	681b      	ldr	r3, [r3, #0]
    32e8:	0018      	movs	r0, r3
    32ea:	4b33      	ldr	r3, [pc, #204]	; (33b8 <matchCommand+0x3c8>)
    32ec:	4798      	blx	r3
		return;
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	46a5      	mov	sp, r4
    32f2:	e09e      	b.n	3432 <matchCommand+0x442>
	}		
	if(strcmp(trimmedString, "help") == 0){
    32f4:	23c8      	movs	r3, #200	; 0xc8
    32f6:	2240      	movs	r2, #64	; 0x40
    32f8:	4694      	mov	ip, r2
    32fa:	44bc      	add	ip, r7
    32fc:	4463      	add	r3, ip
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	4a2e      	ldr	r2, [pc, #184]	; (33bc <matchCommand+0x3cc>)
    3302:	0011      	movs	r1, r2
    3304:	0018      	movs	r0, r3
    3306:	4b2a      	ldr	r3, [pc, #168]	; (33b0 <matchCommand+0x3c0>)
    3308:	4798      	blx	r3
    330a:	1e03      	subs	r3, r0, #0
    330c:	d102      	bne.n	3314 <matchCommand+0x324>
		helpFunction();
    330e:	4b2c      	ldr	r3, [pc, #176]	; (33c0 <matchCommand+0x3d0>)
    3310:	4798      	blx	r3
    3312:	e08d      	b.n	3430 <matchCommand+0x440>
	} else if(strcmp(trimmedString, "ver_bl") == 0){
    3314:	23c8      	movs	r3, #200	; 0xc8
    3316:	2240      	movs	r2, #64	; 0x40
    3318:	4694      	mov	ip, r2
    331a:	44bc      	add	ip, r7
    331c:	4463      	add	r3, ip
    331e:	681b      	ldr	r3, [r3, #0]
    3320:	4a28      	ldr	r2, [pc, #160]	; (33c4 <matchCommand+0x3d4>)
    3322:	0011      	movs	r1, r2
    3324:	0018      	movs	r0, r3
    3326:	4b22      	ldr	r3, [pc, #136]	; (33b0 <matchCommand+0x3c0>)
    3328:	4798      	blx	r3
    332a:	1e03      	subs	r3, r0, #0
    332c:	d104      	bne.n	3338 <matchCommand+0x348>
		
		SerialConsoleWriteString(ver_bl);
    332e:	4b26      	ldr	r3, [pc, #152]	; (33c8 <matchCommand+0x3d8>)
    3330:	0018      	movs	r0, r3
    3332:	4b26      	ldr	r3, [pc, #152]	; (33cc <matchCommand+0x3dc>)
    3334:	4798      	blx	r3
    3336:	e07b      	b.n	3430 <matchCommand+0x440>
	
	} else if(strcmp(trimmedString, "ver_app") == 0){
    3338:	23c8      	movs	r3, #200	; 0xc8
    333a:	2240      	movs	r2, #64	; 0x40
    333c:	4694      	mov	ip, r2
    333e:	44bc      	add	ip, r7
    3340:	4463      	add	r3, ip
    3342:	681b      	ldr	r3, [r3, #0]
    3344:	4a22      	ldr	r2, [pc, #136]	; (33d0 <matchCommand+0x3e0>)
    3346:	0011      	movs	r1, r2
    3348:	0018      	movs	r0, r3
    334a:	4b19      	ldr	r3, [pc, #100]	; (33b0 <matchCommand+0x3c0>)
    334c:	4798      	blx	r3
    334e:	1e03      	subs	r3, r0, #0
    3350:	d104      	bne.n	335c <matchCommand+0x36c>
		
		SerialConsoleWriteString(ver_app);			
    3352:	4b1d      	ldr	r3, [pc, #116]	; (33c8 <matchCommand+0x3d8>)
    3354:	0018      	movs	r0, r3
    3356:	4b1d      	ldr	r3, [pc, #116]	; (33cc <matchCommand+0x3dc>)
    3358:	4798      	blx	r3
    335a:	e069      	b.n	3430 <matchCommand+0x440>
		
	} else if(strcmp(trimmedString, "mac") == 0){
    335c:	23c8      	movs	r3, #200	; 0xc8
    335e:	2240      	movs	r2, #64	; 0x40
    3360:	4694      	mov	ip, r2
    3362:	44bc      	add	ip, r7
    3364:	4463      	add	r3, ip
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	4a1a      	ldr	r2, [pc, #104]	; (33d4 <matchCommand+0x3e4>)
    336a:	0011      	movs	r1, r2
    336c:	0018      	movs	r0, r3
    336e:	4b10      	ldr	r3, [pc, #64]	; (33b0 <matchCommand+0x3c0>)
    3370:	4798      	blx	r3
    3372:	1e03      	subs	r3, r0, #0
    3374:	d104      	bne.n	3380 <matchCommand+0x390>
		
		SerialConsoleWriteString("00:00:00:00:00:00 \r\n");
    3376:	4b18      	ldr	r3, [pc, #96]	; (33d8 <matchCommand+0x3e8>)
    3378:	0018      	movs	r0, r3
    337a:	4b14      	ldr	r3, [pc, #80]	; (33cc <matchCommand+0x3dc>)
    337c:	4798      	blx	r3
    337e:	e057      	b.n	3430 <matchCommand+0x440>
		
	} else if(strcmp(trimmedString, "ip") == 0){
    3380:	23c8      	movs	r3, #200	; 0xc8
    3382:	2240      	movs	r2, #64	; 0x40
    3384:	4694      	mov	ip, r2
    3386:	44bc      	add	ip, r7
    3388:	4463      	add	r3, ip
    338a:	681b      	ldr	r3, [r3, #0]
    338c:	4a13      	ldr	r2, [pc, #76]	; (33dc <matchCommand+0x3ec>)
    338e:	0011      	movs	r1, r2
    3390:	0018      	movs	r0, r3
    3392:	4b07      	ldr	r3, [pc, #28]	; (33b0 <matchCommand+0x3c0>)
    3394:	4798      	blx	r3
    3396:	1e03      	subs	r3, r0, #0
    3398:	d124      	bne.n	33e4 <matchCommand+0x3f4>
		
		SerialConsoleWriteString("255.255.255.255 \r\n");
    339a:	4b11      	ldr	r3, [pc, #68]	; (33e0 <matchCommand+0x3f0>)
    339c:	0018      	movs	r0, r3
    339e:	4b0b      	ldr	r3, [pc, #44]	; (33cc <matchCommand+0x3dc>)
    33a0:	4798      	blx	r3
    33a2:	e045      	b.n	3430 <matchCommand+0x440>
    33a4:	00000bb1 	.word	0x00000bb1
    33a8:	00000c09 	.word	0x00000c09
    33ac:	000038d0 	.word	0x000038d0
    33b0:	00003799 	.word	0x00003799
    33b4:	00000be9 	.word	0x00000be9
    33b8:	00000b7d 	.word	0x00000b7d
    33bc:	000038e0 	.word	0x000038e0
    33c0:	00000b61 	.word	0x00000b61
    33c4:	000038e8 	.word	0x000038e8
    33c8:	000038f0 	.word	0x000038f0
    33cc:	00000ab5 	.word	0x00000ab5
    33d0:	000038fc 	.word	0x000038fc
    33d4:	00003904 	.word	0x00003904
    33d8:	00003908 	.word	0x00003908
    33dc:	00003920 	.word	0x00003920
    33e0:	00003924 	.word	0x00003924
		
	} else if(strcmp(trimmedString, "devName") == 0){
    33e4:	23c8      	movs	r3, #200	; 0xc8
    33e6:	2240      	movs	r2, #64	; 0x40
    33e8:	4694      	mov	ip, r2
    33ea:	44bc      	add	ip, r7
    33ec:	4463      	add	r3, ip
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	4a11      	ldr	r2, [pc, #68]	; (3438 <matchCommand+0x448>)
    33f2:	0011      	movs	r1, r2
    33f4:	0018      	movs	r0, r3
    33f6:	4b11      	ldr	r3, [pc, #68]	; (343c <matchCommand+0x44c>)
    33f8:	4798      	blx	r3
    33fa:	1e03      	subs	r3, r0, #0
    33fc:	d104      	bne.n	3408 <matchCommand+0x418>
		
		SerialConsoleWriteString("sheils \r\n");
    33fe:	4b10      	ldr	r3, [pc, #64]	; (3440 <matchCommand+0x450>)
    3400:	0018      	movs	r0, r3
    3402:	4b10      	ldr	r3, [pc, #64]	; (3444 <matchCommand+0x454>)
    3404:	4798      	blx	r3
    3406:	e013      	b.n	3430 <matchCommand+0x440>
		
	} else if(strcmp(trimmedString, "getDeviceName") == 0){
    3408:	23c8      	movs	r3, #200	; 0xc8
    340a:	2240      	movs	r2, #64	; 0x40
    340c:	4694      	mov	ip, r2
    340e:	44bc      	add	ip, r7
    3410:	4463      	add	r3, ip
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	4a0c      	ldr	r2, [pc, #48]	; (3448 <matchCommand+0x458>)
    3416:	0011      	movs	r1, r2
    3418:	0018      	movs	r0, r3
    341a:	4b08      	ldr	r3, [pc, #32]	; (343c <matchCommand+0x44c>)
    341c:	4798      	blx	r3
    341e:	1e03      	subs	r3, r0, #0
    3420:	d102      	bne.n	3428 <matchCommand+0x438>
		
		getDeviceName();
    3422:	4b0a      	ldr	r3, [pc, #40]	; (344c <matchCommand+0x45c>)
    3424:	4798      	blx	r3
    3426:	e003      	b.n	3430 <matchCommand+0x440>
		
	} else {
		SerialConsoleWriteString("\r\nError\r\n");
    3428:	4b09      	ldr	r3, [pc, #36]	; (3450 <matchCommand+0x460>)
    342a:	0018      	movs	r0, r3
    342c:	4b05      	ldr	r3, [pc, #20]	; (3444 <matchCommand+0x454>)
    342e:	4798      	blx	r3
    3430:	46a5      	mov	sp, r4
	}

	
}
    3432:	46bd      	mov	sp, r7
    3434:	b049      	add	sp, #292	; 0x124
    3436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3438:	00003938 	.word	0x00003938
    343c:	00003799 	.word	0x00003799
    3440:	00003940 	.word	0x00003940
    3444:	00000ab5 	.word	0x00000ab5
    3448:	0000394c 	.word	0x0000394c
    344c:	00000c4d 	.word	0x00000c4d
    3450:	0000395c 	.word	0x0000395c

00003454 <main>:


int main (void)
{
    3454:	b590      	push	{r4, r7, lr}
    3456:	b089      	sub	sp, #36	; 0x24
    3458:	af00      	add	r7, sp, #0
	//Board Initialization -- Code that initializes the HW and happens only once
	system_init();
    345a:	4b1a      	ldr	r3, [pc, #104]	; (34c4 <main+0x70>)
    345c:	4798      	blx	r3
	InitializeSerialConsole();
    345e:	4b1a      	ldr	r3, [pc, #104]	; (34c8 <main+0x74>)
    3460:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */


	system_interrupt_enable_global();
    3462:	4b1a      	ldr	r3, [pc, #104]	; (34cc <main+0x78>)
    3464:	4798      	blx	r3
	
	SerialConsoleWriteString("ESE516 - CLI and Debug Logger\r\n");	//Order to add string to TX Buffer
    3466:	4b1a      	ldr	r3, [pc, #104]	; (34d0 <main+0x7c>)
    3468:	0018      	movs	r0, r3
    346a:	4b1a      	ldr	r3, [pc, #104]	; (34d4 <main+0x80>)
    346c:	4798      	blx	r3
	
	char string[] = "CLI starter code - ESE516\r\n";
    346e:	1d3b      	adds	r3, r7, #4
    3470:	4a19      	ldr	r2, [pc, #100]	; (34d8 <main+0x84>)
    3472:	ca13      	ldmia	r2!, {r0, r1, r4}
    3474:	c313      	stmia	r3!, {r0, r1, r4}
    3476:	ca13      	ldmia	r2!, {r0, r1, r4}
    3478:	c313      	stmia	r3!, {r0, r1, r4}
    347a:	6812      	ldr	r2, [r2, #0]
    347c:	601a      	str	r2, [r3, #0]
	
	/*Simple DebugLogger Test*/
	setLogLevel(LOG_INFO_LVL); 
    347e:	2000      	movs	r0, #0
    3480:	4b16      	ldr	r3, [pc, #88]	; (34dc <main+0x88>)
    3482:	4798      	blx	r3
//	LogMessage(LOG_INFO_LVL , "%s", string); //Test
	setLogLevel(LOG_ERROR_LVL); //Sets the Debug Logger to only allow messages with LOG_ERROR_LVL or higher to be printed
    3484:	2003      	movs	r0, #3
    3486:	4b15      	ldr	r3, [pc, #84]	; (34dc <main+0x88>)
    3488:	4798      	blx	r3

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {

		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    348a:	2037      	movs	r0, #55	; 0x37
    348c:	4b14      	ldr	r3, [pc, #80]	; (34e0 <main+0x8c>)
    348e:	4798      	blx	r3
    3490:	0003      	movs	r3, r0
    3492:	001a      	movs	r2, r3
    3494:	2301      	movs	r3, #1
    3496:	4053      	eors	r3, r2
    3498:	b2db      	uxtb	r3, r3
    349a:	2b00      	cmp	r3, #0
    349c:	d004      	beq.n	34a8 <main+0x54>
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
    349e:	2100      	movs	r1, #0
    34a0:	2017      	movs	r0, #23
    34a2:	4b10      	ldr	r3, [pc, #64]	; (34e4 <main+0x90>)
    34a4:	4798      	blx	r3
    34a6:	e003      	b.n	34b0 <main+0x5c>
		} else {
			/* No, so turn LED off. */
			port_pin_set_output_level(LED_0_PIN, !LED_0_ACTIVE);
    34a8:	2101      	movs	r1, #1
    34aa:	2017      	movs	r0, #23
    34ac:	4b0d      	ldr	r3, [pc, #52]	; (34e4 <main+0x90>)
    34ae:	4798      	blx	r3
		
		//At the very end of the system, we tell the MCU to handle the text that is currently on the RX buffer
		//Put a call to your state machine code that will handle the CLI by reading the data
		//present on the RX buffer.
		
		if (enterSeen == 1)
    34b0:	4b0d      	ldr	r3, [pc, #52]	; (34e8 <main+0x94>)
    34b2:	681b      	ldr	r3, [r3, #0]
    34b4:	2b01      	cmp	r3, #1
    34b6:	d1e8      	bne.n	348a <main+0x36>
		{
			enterSeen = 0;
    34b8:	4b0b      	ldr	r3, [pc, #44]	; (34e8 <main+0x94>)
    34ba:	2200      	movs	r2, #0
    34bc:	601a      	str	r2, [r3, #0]
			matchCommand();
    34be:	4b0b      	ldr	r3, [pc, #44]	; (34ec <main+0x98>)
    34c0:	4798      	blx	r3
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    34c2:	e7e2      	b.n	348a <main+0x36>
    34c4:	00002d49 	.word	0x00002d49
    34c8:	00000a45 	.word	0x00000a45
    34cc:	00002fd5 	.word	0x00002fd5
    34d0:	00003968 	.word	0x00003968
    34d4:	00000ab5 	.word	0x00000ab5
    34d8:	00003988 	.word	0x00003988
    34dc:	00000b41 	.word	0x00000b41
    34e0:	00002f3d 	.word	0x00002f3d
    34e4:	00002f81 	.word	0x00002f81
    34e8:	2000008c 	.word	0x2000008c
    34ec:	00002ff1 	.word	0x00002ff1

000034f0 <__udivsi3>:
    34f0:	2200      	movs	r2, #0
    34f2:	0843      	lsrs	r3, r0, #1
    34f4:	428b      	cmp	r3, r1
    34f6:	d374      	bcc.n	35e2 <__udivsi3+0xf2>
    34f8:	0903      	lsrs	r3, r0, #4
    34fa:	428b      	cmp	r3, r1
    34fc:	d35f      	bcc.n	35be <__udivsi3+0xce>
    34fe:	0a03      	lsrs	r3, r0, #8
    3500:	428b      	cmp	r3, r1
    3502:	d344      	bcc.n	358e <__udivsi3+0x9e>
    3504:	0b03      	lsrs	r3, r0, #12
    3506:	428b      	cmp	r3, r1
    3508:	d328      	bcc.n	355c <__udivsi3+0x6c>
    350a:	0c03      	lsrs	r3, r0, #16
    350c:	428b      	cmp	r3, r1
    350e:	d30d      	bcc.n	352c <__udivsi3+0x3c>
    3510:	22ff      	movs	r2, #255	; 0xff
    3512:	0209      	lsls	r1, r1, #8
    3514:	ba12      	rev	r2, r2
    3516:	0c03      	lsrs	r3, r0, #16
    3518:	428b      	cmp	r3, r1
    351a:	d302      	bcc.n	3522 <__udivsi3+0x32>
    351c:	1212      	asrs	r2, r2, #8
    351e:	0209      	lsls	r1, r1, #8
    3520:	d065      	beq.n	35ee <__udivsi3+0xfe>
    3522:	0b03      	lsrs	r3, r0, #12
    3524:	428b      	cmp	r3, r1
    3526:	d319      	bcc.n	355c <__udivsi3+0x6c>
    3528:	e000      	b.n	352c <__udivsi3+0x3c>
    352a:	0a09      	lsrs	r1, r1, #8
    352c:	0bc3      	lsrs	r3, r0, #15
    352e:	428b      	cmp	r3, r1
    3530:	d301      	bcc.n	3536 <__udivsi3+0x46>
    3532:	03cb      	lsls	r3, r1, #15
    3534:	1ac0      	subs	r0, r0, r3
    3536:	4152      	adcs	r2, r2
    3538:	0b83      	lsrs	r3, r0, #14
    353a:	428b      	cmp	r3, r1
    353c:	d301      	bcc.n	3542 <__udivsi3+0x52>
    353e:	038b      	lsls	r3, r1, #14
    3540:	1ac0      	subs	r0, r0, r3
    3542:	4152      	adcs	r2, r2
    3544:	0b43      	lsrs	r3, r0, #13
    3546:	428b      	cmp	r3, r1
    3548:	d301      	bcc.n	354e <__udivsi3+0x5e>
    354a:	034b      	lsls	r3, r1, #13
    354c:	1ac0      	subs	r0, r0, r3
    354e:	4152      	adcs	r2, r2
    3550:	0b03      	lsrs	r3, r0, #12
    3552:	428b      	cmp	r3, r1
    3554:	d301      	bcc.n	355a <__udivsi3+0x6a>
    3556:	030b      	lsls	r3, r1, #12
    3558:	1ac0      	subs	r0, r0, r3
    355a:	4152      	adcs	r2, r2
    355c:	0ac3      	lsrs	r3, r0, #11
    355e:	428b      	cmp	r3, r1
    3560:	d301      	bcc.n	3566 <__udivsi3+0x76>
    3562:	02cb      	lsls	r3, r1, #11
    3564:	1ac0      	subs	r0, r0, r3
    3566:	4152      	adcs	r2, r2
    3568:	0a83      	lsrs	r3, r0, #10
    356a:	428b      	cmp	r3, r1
    356c:	d301      	bcc.n	3572 <__udivsi3+0x82>
    356e:	028b      	lsls	r3, r1, #10
    3570:	1ac0      	subs	r0, r0, r3
    3572:	4152      	adcs	r2, r2
    3574:	0a43      	lsrs	r3, r0, #9
    3576:	428b      	cmp	r3, r1
    3578:	d301      	bcc.n	357e <__udivsi3+0x8e>
    357a:	024b      	lsls	r3, r1, #9
    357c:	1ac0      	subs	r0, r0, r3
    357e:	4152      	adcs	r2, r2
    3580:	0a03      	lsrs	r3, r0, #8
    3582:	428b      	cmp	r3, r1
    3584:	d301      	bcc.n	358a <__udivsi3+0x9a>
    3586:	020b      	lsls	r3, r1, #8
    3588:	1ac0      	subs	r0, r0, r3
    358a:	4152      	adcs	r2, r2
    358c:	d2cd      	bcs.n	352a <__udivsi3+0x3a>
    358e:	09c3      	lsrs	r3, r0, #7
    3590:	428b      	cmp	r3, r1
    3592:	d301      	bcc.n	3598 <__udivsi3+0xa8>
    3594:	01cb      	lsls	r3, r1, #7
    3596:	1ac0      	subs	r0, r0, r3
    3598:	4152      	adcs	r2, r2
    359a:	0983      	lsrs	r3, r0, #6
    359c:	428b      	cmp	r3, r1
    359e:	d301      	bcc.n	35a4 <__udivsi3+0xb4>
    35a0:	018b      	lsls	r3, r1, #6
    35a2:	1ac0      	subs	r0, r0, r3
    35a4:	4152      	adcs	r2, r2
    35a6:	0943      	lsrs	r3, r0, #5
    35a8:	428b      	cmp	r3, r1
    35aa:	d301      	bcc.n	35b0 <__udivsi3+0xc0>
    35ac:	014b      	lsls	r3, r1, #5
    35ae:	1ac0      	subs	r0, r0, r3
    35b0:	4152      	adcs	r2, r2
    35b2:	0903      	lsrs	r3, r0, #4
    35b4:	428b      	cmp	r3, r1
    35b6:	d301      	bcc.n	35bc <__udivsi3+0xcc>
    35b8:	010b      	lsls	r3, r1, #4
    35ba:	1ac0      	subs	r0, r0, r3
    35bc:	4152      	adcs	r2, r2
    35be:	08c3      	lsrs	r3, r0, #3
    35c0:	428b      	cmp	r3, r1
    35c2:	d301      	bcc.n	35c8 <__udivsi3+0xd8>
    35c4:	00cb      	lsls	r3, r1, #3
    35c6:	1ac0      	subs	r0, r0, r3
    35c8:	4152      	adcs	r2, r2
    35ca:	0883      	lsrs	r3, r0, #2
    35cc:	428b      	cmp	r3, r1
    35ce:	d301      	bcc.n	35d4 <__udivsi3+0xe4>
    35d0:	008b      	lsls	r3, r1, #2
    35d2:	1ac0      	subs	r0, r0, r3
    35d4:	4152      	adcs	r2, r2
    35d6:	0843      	lsrs	r3, r0, #1
    35d8:	428b      	cmp	r3, r1
    35da:	d301      	bcc.n	35e0 <__udivsi3+0xf0>
    35dc:	004b      	lsls	r3, r1, #1
    35de:	1ac0      	subs	r0, r0, r3
    35e0:	4152      	adcs	r2, r2
    35e2:	1a41      	subs	r1, r0, r1
    35e4:	d200      	bcs.n	35e8 <__udivsi3+0xf8>
    35e6:	4601      	mov	r1, r0
    35e8:	4152      	adcs	r2, r2
    35ea:	4610      	mov	r0, r2
    35ec:	4770      	bx	lr
    35ee:	e7ff      	b.n	35f0 <__udivsi3+0x100>
    35f0:	b501      	push	{r0, lr}
    35f2:	2000      	movs	r0, #0
    35f4:	f000 f806 	bl	3604 <__aeabi_idiv0>
    35f8:	bd02      	pop	{r1, pc}
    35fa:	46c0      	nop			; (mov r8, r8)

000035fc <__aeabi_uidivmod>:
    35fc:	2900      	cmp	r1, #0
    35fe:	d0f7      	beq.n	35f0 <__udivsi3+0x100>
    3600:	e776      	b.n	34f0 <__udivsi3>
    3602:	4770      	bx	lr

00003604 <__aeabi_idiv0>:
    3604:	4770      	bx	lr
    3606:	46c0      	nop			; (mov r8, r8)

00003608 <__aeabi_lmul>:
    3608:	b5f0      	push	{r4, r5, r6, r7, lr}
    360a:	46ce      	mov	lr, r9
    360c:	4647      	mov	r7, r8
    360e:	0415      	lsls	r5, r2, #16
    3610:	0c2d      	lsrs	r5, r5, #16
    3612:	002e      	movs	r6, r5
    3614:	b580      	push	{r7, lr}
    3616:	0407      	lsls	r7, r0, #16
    3618:	0c14      	lsrs	r4, r2, #16
    361a:	0c3f      	lsrs	r7, r7, #16
    361c:	4699      	mov	r9, r3
    361e:	0c03      	lsrs	r3, r0, #16
    3620:	437e      	muls	r6, r7
    3622:	435d      	muls	r5, r3
    3624:	4367      	muls	r7, r4
    3626:	4363      	muls	r3, r4
    3628:	197f      	adds	r7, r7, r5
    362a:	0c34      	lsrs	r4, r6, #16
    362c:	19e4      	adds	r4, r4, r7
    362e:	469c      	mov	ip, r3
    3630:	42a5      	cmp	r5, r4
    3632:	d903      	bls.n	363c <__aeabi_lmul+0x34>
    3634:	2380      	movs	r3, #128	; 0x80
    3636:	025b      	lsls	r3, r3, #9
    3638:	4698      	mov	r8, r3
    363a:	44c4      	add	ip, r8
    363c:	464b      	mov	r3, r9
    363e:	4351      	muls	r1, r2
    3640:	4343      	muls	r3, r0
    3642:	0436      	lsls	r6, r6, #16
    3644:	0c36      	lsrs	r6, r6, #16
    3646:	0c25      	lsrs	r5, r4, #16
    3648:	0424      	lsls	r4, r4, #16
    364a:	4465      	add	r5, ip
    364c:	19a4      	adds	r4, r4, r6
    364e:	1859      	adds	r1, r3, r1
    3650:	1949      	adds	r1, r1, r5
    3652:	0020      	movs	r0, r4
    3654:	bc0c      	pop	{r2, r3}
    3656:	4690      	mov	r8, r2
    3658:	4699      	mov	r9, r3
    365a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000365c <__libc_init_array>:
    365c:	b570      	push	{r4, r5, r6, lr}
    365e:	2600      	movs	r6, #0
    3660:	4d0c      	ldr	r5, [pc, #48]	; (3694 <__libc_init_array+0x38>)
    3662:	4c0d      	ldr	r4, [pc, #52]	; (3698 <__libc_init_array+0x3c>)
    3664:	1b64      	subs	r4, r4, r5
    3666:	10a4      	asrs	r4, r4, #2
    3668:	42a6      	cmp	r6, r4
    366a:	d109      	bne.n	3680 <__libc_init_array+0x24>
    366c:	2600      	movs	r6, #0
    366e:	f000 f999 	bl	39a4 <_init>
    3672:	4d0a      	ldr	r5, [pc, #40]	; (369c <__libc_init_array+0x40>)
    3674:	4c0a      	ldr	r4, [pc, #40]	; (36a0 <__libc_init_array+0x44>)
    3676:	1b64      	subs	r4, r4, r5
    3678:	10a4      	asrs	r4, r4, #2
    367a:	42a6      	cmp	r6, r4
    367c:	d105      	bne.n	368a <__libc_init_array+0x2e>
    367e:	bd70      	pop	{r4, r5, r6, pc}
    3680:	00b3      	lsls	r3, r6, #2
    3682:	58eb      	ldr	r3, [r5, r3]
    3684:	4798      	blx	r3
    3686:	3601      	adds	r6, #1
    3688:	e7ee      	b.n	3668 <__libc_init_array+0xc>
    368a:	00b3      	lsls	r3, r6, #2
    368c:	58eb      	ldr	r3, [r5, r3]
    368e:	4798      	blx	r3
    3690:	3601      	adds	r6, #1
    3692:	e7f2      	b.n	367a <__libc_init_array+0x1e>
    3694:	000039b0 	.word	0x000039b0
    3698:	000039b0 	.word	0x000039b0
    369c:	000039b0 	.word	0x000039b0
    36a0:	000039b4 	.word	0x000039b4

000036a4 <malloc>:
    36a4:	b510      	push	{r4, lr}
    36a6:	4b03      	ldr	r3, [pc, #12]	; (36b4 <malloc+0x10>)
    36a8:	0001      	movs	r1, r0
    36aa:	6818      	ldr	r0, [r3, #0]
    36ac:	f000 f804 	bl	36b8 <_malloc_r>
    36b0:	bd10      	pop	{r4, pc}
    36b2:	46c0      	nop			; (mov r8, r8)
    36b4:	20000008 	.word	0x20000008

000036b8 <_malloc_r>:
    36b8:	2303      	movs	r3, #3
    36ba:	b570      	push	{r4, r5, r6, lr}
    36bc:	1ccd      	adds	r5, r1, #3
    36be:	439d      	bics	r5, r3
    36c0:	3508      	adds	r5, #8
    36c2:	0006      	movs	r6, r0
    36c4:	2d0c      	cmp	r5, #12
    36c6:	d21e      	bcs.n	3706 <_malloc_r+0x4e>
    36c8:	250c      	movs	r5, #12
    36ca:	42a9      	cmp	r1, r5
    36cc:	d81d      	bhi.n	370a <_malloc_r+0x52>
    36ce:	0030      	movs	r0, r6
    36d0:	f000 f87b 	bl	37ca <__malloc_lock>
    36d4:	4a25      	ldr	r2, [pc, #148]	; (376c <_malloc_r+0xb4>)
    36d6:	6814      	ldr	r4, [r2, #0]
    36d8:	0021      	movs	r1, r4
    36da:	2900      	cmp	r1, #0
    36dc:	d119      	bne.n	3712 <_malloc_r+0x5a>
    36de:	4c24      	ldr	r4, [pc, #144]	; (3770 <_malloc_r+0xb8>)
    36e0:	6823      	ldr	r3, [r4, #0]
    36e2:	2b00      	cmp	r3, #0
    36e4:	d103      	bne.n	36ee <_malloc_r+0x36>
    36e6:	0030      	movs	r0, r6
    36e8:	f000 f844 	bl	3774 <_sbrk_r>
    36ec:	6020      	str	r0, [r4, #0]
    36ee:	0029      	movs	r1, r5
    36f0:	0030      	movs	r0, r6
    36f2:	f000 f83f 	bl	3774 <_sbrk_r>
    36f6:	1c43      	adds	r3, r0, #1
    36f8:	d12c      	bne.n	3754 <_malloc_r+0x9c>
    36fa:	230c      	movs	r3, #12
    36fc:	0030      	movs	r0, r6
    36fe:	6033      	str	r3, [r6, #0]
    3700:	f000 f864 	bl	37cc <__malloc_unlock>
    3704:	e003      	b.n	370e <_malloc_r+0x56>
    3706:	2d00      	cmp	r5, #0
    3708:	dadf      	bge.n	36ca <_malloc_r+0x12>
    370a:	230c      	movs	r3, #12
    370c:	6033      	str	r3, [r6, #0]
    370e:	2000      	movs	r0, #0
    3710:	bd70      	pop	{r4, r5, r6, pc}
    3712:	680b      	ldr	r3, [r1, #0]
    3714:	1b5b      	subs	r3, r3, r5
    3716:	d41a      	bmi.n	374e <_malloc_r+0x96>
    3718:	2b0b      	cmp	r3, #11
    371a:	d903      	bls.n	3724 <_malloc_r+0x6c>
    371c:	600b      	str	r3, [r1, #0]
    371e:	18cc      	adds	r4, r1, r3
    3720:	6025      	str	r5, [r4, #0]
    3722:	e003      	b.n	372c <_malloc_r+0x74>
    3724:	428c      	cmp	r4, r1
    3726:	d10e      	bne.n	3746 <_malloc_r+0x8e>
    3728:	6863      	ldr	r3, [r4, #4]
    372a:	6013      	str	r3, [r2, #0]
    372c:	0030      	movs	r0, r6
    372e:	f000 f84d 	bl	37cc <__malloc_unlock>
    3732:	0020      	movs	r0, r4
    3734:	2207      	movs	r2, #7
    3736:	300b      	adds	r0, #11
    3738:	1d23      	adds	r3, r4, #4
    373a:	4390      	bics	r0, r2
    373c:	1ac3      	subs	r3, r0, r3
    373e:	d0e7      	beq.n	3710 <_malloc_r+0x58>
    3740:	425a      	negs	r2, r3
    3742:	50e2      	str	r2, [r4, r3]
    3744:	e7e4      	b.n	3710 <_malloc_r+0x58>
    3746:	684b      	ldr	r3, [r1, #4]
    3748:	6063      	str	r3, [r4, #4]
    374a:	000c      	movs	r4, r1
    374c:	e7ee      	b.n	372c <_malloc_r+0x74>
    374e:	000c      	movs	r4, r1
    3750:	6849      	ldr	r1, [r1, #4]
    3752:	e7c2      	b.n	36da <_malloc_r+0x22>
    3754:	2303      	movs	r3, #3
    3756:	1cc4      	adds	r4, r0, #3
    3758:	439c      	bics	r4, r3
    375a:	42a0      	cmp	r0, r4
    375c:	d0e0      	beq.n	3720 <_malloc_r+0x68>
    375e:	1a21      	subs	r1, r4, r0
    3760:	0030      	movs	r0, r6
    3762:	f000 f807 	bl	3774 <_sbrk_r>
    3766:	1c43      	adds	r3, r0, #1
    3768:	d1da      	bne.n	3720 <_malloc_r+0x68>
    376a:	e7c6      	b.n	36fa <_malloc_r+0x42>
    376c:	200000d0 	.word	0x200000d0
    3770:	200000d4 	.word	0x200000d4

00003774 <_sbrk_r>:
    3774:	2300      	movs	r3, #0
    3776:	b570      	push	{r4, r5, r6, lr}
    3778:	4c06      	ldr	r4, [pc, #24]	; (3794 <_sbrk_r+0x20>)
    377a:	0005      	movs	r5, r0
    377c:	0008      	movs	r0, r1
    377e:	6023      	str	r3, [r4, #0]
    3780:	f7ff fb7c 	bl	2e7c <_sbrk>
    3784:	1c43      	adds	r3, r0, #1
    3786:	d103      	bne.n	3790 <_sbrk_r+0x1c>
    3788:	6823      	ldr	r3, [r4, #0]
    378a:	2b00      	cmp	r3, #0
    378c:	d000      	beq.n	3790 <_sbrk_r+0x1c>
    378e:	602b      	str	r3, [r5, #0]
    3790:	bd70      	pop	{r4, r5, r6, pc}
    3792:	46c0      	nop			; (mov r8, r8)
    3794:	200003fc 	.word	0x200003fc

00003798 <strcmp>:
    3798:	7802      	ldrb	r2, [r0, #0]
    379a:	780b      	ldrb	r3, [r1, #0]
    379c:	2a00      	cmp	r2, #0
    379e:	d003      	beq.n	37a8 <strcmp+0x10>
    37a0:	3001      	adds	r0, #1
    37a2:	3101      	adds	r1, #1
    37a4:	429a      	cmp	r2, r3
    37a6:	d0f7      	beq.n	3798 <strcmp>
    37a8:	1ad0      	subs	r0, r2, r3
    37aa:	4770      	bx	lr

000037ac <strcpy>:
    37ac:	1c03      	adds	r3, r0, #0
    37ae:	780a      	ldrb	r2, [r1, #0]
    37b0:	3101      	adds	r1, #1
    37b2:	701a      	strb	r2, [r3, #0]
    37b4:	3301      	adds	r3, #1
    37b6:	2a00      	cmp	r2, #0
    37b8:	d1f9      	bne.n	37ae <strcpy+0x2>
    37ba:	4770      	bx	lr

000037bc <strlen>:
    37bc:	2300      	movs	r3, #0
    37be:	5cc2      	ldrb	r2, [r0, r3]
    37c0:	3301      	adds	r3, #1
    37c2:	2a00      	cmp	r2, #0
    37c4:	d1fb      	bne.n	37be <strlen+0x2>
    37c6:	1e58      	subs	r0, r3, #1
    37c8:	4770      	bx	lr

000037ca <__malloc_lock>:
    37ca:	4770      	bx	lr

000037cc <__malloc_unlock>:
    37cc:	4770      	bx	lr
    37ce:	0000      	movs	r0, r0
    37d0:	42000800 	.word	0x42000800
    37d4:	42000c00 	.word	0x42000c00
    37d8:	42001000 	.word	0x42001000
    37dc:	42001400 	.word	0x42001400
    37e0:	42001800 	.word	0x42001800
    37e4:	42001c00 	.word	0x42001c00
    37e8:	706c6568 	.word	0x706c6568
    37ec:	65760a0d 	.word	0x65760a0d
    37f0:	6c625f72 	.word	0x6c625f72
    37f4:	65760a0d 	.word	0x65760a0d
    37f8:	70615f72 	.word	0x70615f72
    37fc:	6d0a0d70 	.word	0x6d0a0d70
    3800:	0a0d6361 	.word	0x0a0d6361
    3804:	0a0d7069 	.word	0x0a0d7069
    3808:	4e766564 	.word	0x4e766564
    380c:	0d656d61 	.word	0x0d656d61
    3810:	7465730a 	.word	0x7465730a
    3814:	69766544 	.word	0x69766544
    3818:	614e6563 	.word	0x614e6563
    381c:	3c20656d 	.word	0x3c20656d
    3820:	69727473 	.word	0x69727473
    3824:	6e20676e 	.word	0x6e20676e
    3828:	3e656d61 	.word	0x3e656d61
    382c:	65670a0d 	.word	0x65670a0d
    3830:	76654474 	.word	0x76654474
    3834:	4e656369 	.word	0x4e656369
    3838:	0d656d61 	.word	0x0d656d61
    383c:	0000000a 	.word	0x0000000a
    3840:	00000a0d 	.word	0x00000a0d
    3844:	69766544 	.word	0x69766544
    3848:	6e206563 	.word	0x6e206563
    384c:	20656d61 	.word	0x20656d61
    3850:	27207369 	.word	0x27207369
    3854:	00000000 	.word	0x00000000
    3858:	00000027 	.word	0x00000027
    385c:	0c0b0a09 	.word	0x0c0b0a09
    3860:	00000e0d 	.word	0x00000e0d
    3864:	00001fee 	.word	0x00001fee
    3868:	00002068 	.word	0x00002068
    386c:	00002068 	.word	0x00002068
    3870:	0000200c 	.word	0x0000200c
    3874:	00002006 	.word	0x00002006
    3878:	00002012 	.word	0x00002012
    387c:	00001ff4 	.word	0x00001ff4
    3880:	00002018 	.word	0x00002018
    3884:	0000204e 	.word	0x0000204e
    3888:	00002334 	.word	0x00002334
    388c:	00002384 	.word	0x00002384
    3890:	00002384 	.word	0x00002384
    3894:	00002380 	.word	0x00002380
    3898:	00002326 	.word	0x00002326
    389c:	00002346 	.word	0x00002346
    38a0:	00002316 	.word	0x00002316
    38a4:	00002358 	.word	0x00002358
    38a8:	0000236a 	.word	0x0000236a
    38ac:	000023d2 	.word	0x000023d2
    38b0:	00002400 	.word	0x00002400
    38b4:	00002400 	.word	0x00002400
    38b8:	000023fc 	.word	0x000023fc
    38bc:	000023cc 	.word	0x000023cc
    38c0:	000023d8 	.word	0x000023d8
    38c4:	000023c6 	.word	0x000023c6
    38c8:	000023de 	.word	0x000023de
    38cc:	000023e4 	.word	0x000023e4
    38d0:	44746573 	.word	0x44746573
    38d4:	63697665 	.word	0x63697665
    38d8:	6d614e65 	.word	0x6d614e65
    38dc:	00000065 	.word	0x00000065
    38e0:	706c6568 	.word	0x706c6568
    38e4:	00000000 	.word	0x00000000
    38e8:	5f726576 	.word	0x5f726576
    38ec:	00006c62 	.word	0x00006c62
    38f0:	2e312e31 	.word	0x2e312e31
    38f4:	0a0d2032 	.word	0x0a0d2032
    38f8:	00000000 	.word	0x00000000
    38fc:	5f726576 	.word	0x5f726576
    3900:	00707061 	.word	0x00707061
    3904:	0063616d 	.word	0x0063616d
    3908:	303a3030 	.word	0x303a3030
    390c:	30303a30 	.word	0x30303a30
    3910:	3a30303a 	.word	0x3a30303a
    3914:	303a3030 	.word	0x303a3030
    3918:	0a0d2030 	.word	0x0a0d2030
    391c:	00000000 	.word	0x00000000
    3920:	00007069 	.word	0x00007069
    3924:	2e353532 	.word	0x2e353532
    3928:	2e353532 	.word	0x2e353532
    392c:	2e353532 	.word	0x2e353532
    3930:	20353532 	.word	0x20353532
    3934:	00000a0d 	.word	0x00000a0d
    3938:	4e766564 	.word	0x4e766564
    393c:	00656d61 	.word	0x00656d61
    3940:	69656873 	.word	0x69656873
    3944:	0d20736c 	.word	0x0d20736c
    3948:	0000000a 	.word	0x0000000a
    394c:	44746567 	.word	0x44746567
    3950:	63697665 	.word	0x63697665
    3954:	6d614e65 	.word	0x6d614e65
    3958:	00000065 	.word	0x00000065
    395c:	72450a0d 	.word	0x72450a0d
    3960:	0d726f72 	.word	0x0d726f72
    3964:	0000000a 	.word	0x0000000a
    3968:	35455345 	.word	0x35455345
    396c:	2d203631 	.word	0x2d203631
    3970:	494c4320 	.word	0x494c4320
    3974:	646e6120 	.word	0x646e6120
    3978:	62654420 	.word	0x62654420
    397c:	4c206775 	.word	0x4c206775
    3980:	6567676f 	.word	0x6567676f
    3984:	000a0d72 	.word	0x000a0d72
    3988:	20494c43 	.word	0x20494c43
    398c:	72617473 	.word	0x72617473
    3990:	20726574 	.word	0x20726574
    3994:	65646f63 	.word	0x65646f63
    3998:	45202d20 	.word	0x45202d20
    399c:	31354553 	.word	0x31354553
    39a0:	000a0d36 	.word	0x000a0d36

000039a4 <_init>:
    39a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39aa:	bc08      	pop	{r3}
    39ac:	469e      	mov	lr, r3
    39ae:	4770      	bx	lr

000039b0 <__init_array_start>:
    39b0:	000000dd 	.word	0x000000dd

000039b4 <_fini>:
    39b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39ba:	bc08      	pop	{r3}
    39bc:	469e      	mov	lr, r3
    39be:	4770      	bx	lr

000039c0 <__fini_array_start>:
    39c0:	000000b5 	.word	0x000000b5
