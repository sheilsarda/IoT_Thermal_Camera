
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f34  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00006f34  00006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000084  20000000  00006f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c18  20000084  00006fc0  00020084  2**2
                  ALLOC
  4 .stack        00002004  20000c9c  00007bd8  00020084  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   000458b1  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000656f  00000000  00000000  000659b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010bc8  00000000  00000000  0006bf25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b18  00000000  00000000  0007caed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001050  00000000  00000000  0007d605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f95c  00000000  00000000  0007e655  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000151ec  00000000  00000000  0009dfb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093b1d  00000000  00000000  000b319d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000217c  00000000  00000000  00146cbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 2c 00 20 9d 34 00 00 99 34 00 00 99 34 00 00     .,. .4...4...4..
	...
      2c:	99 34 00 00 00 00 00 00 00 00 00 00 99 34 00 00     .4...........4..
      3c:	99 34 00 00 99 34 00 00 99 34 00 00 99 34 00 00     .4...4...4...4..
      4c:	99 34 00 00 99 34 00 00 99 34 00 00 99 34 00 00     .4...4...4...4..
      5c:	99 34 00 00 99 34 00 00 8d 1f 00 00 9d 1f 00 00     .4...4..........
      6c:	ad 1f 00 00 bd 1f 00 00 cd 1f 00 00 dd 1f 00 00     ................
      7c:	99 34 00 00 99 34 00 00 99 34 00 00 99 34 00 00     .4...4...4...4..
      8c:	99 34 00 00 99 34 00 00 00 00 00 00 00 00 00 00     .4...4..........
      9c:	99 34 00 00 99 34 00 00 99 34 00 00 99 34 00 00     .4...4...4...4..
      ac:	99 34 00 00 00 00 00 00                             .4......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	00006f3c 	.word	0x00006f3c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	00006f3c 	.word	0x00006f3c
     10c:	00006f3c 	.word	0x00006f3c
     110:	00000000 	.word	0x00000000

00000114 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46c6      	mov	lr, r8
     118:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
     11a:	2303      	movs	r3, #3
     11c:	0007      	movs	r7, r0
     11e:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
     120:	6813      	ldr	r3, [r2, #0]
     122:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
     124:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
     126:	2903      	cmp	r1, #3
     128:	d902      	bls.n	130 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
     12a:	4244      	negs	r4, r0
     12c:	2003      	movs	r0, #3
     12e:	4004      	ands	r4, r0
	}

	if (temp_length) {
     130:	2c00      	cmp	r4, #0
     132:	d016      	beq.n	162 <crc32_recalculate+0x4e>
		length -= temp_length;
     134:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
     136:	1d3e      	adds	r6, r7, #4
     138:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
     13a:	00e0      	lsls	r0, r4, #3
     13c:	4240      	negs	r0, r0
     13e:	3020      	adds	r0, #32
     140:	40c5      	lsrs	r5, r0
	crc ^= data;
     142:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
     144:	00e0      	lsls	r0, r4, #3
     146:	d019      	beq.n	17c <crc32_recalculate+0x68>
		if (crc & 1) {
     148:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     14a:	4d27      	ldr	r5, [pc, #156]	; (1e8 <crc32_recalculate+0xd4>)
     14c:	e003      	b.n	156 <crc32_recalculate+0x42>
			crc >>= 1;
     14e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     150:	3801      	subs	r0, #1
     152:	2800      	cmp	r0, #0
     154:	d004      	beq.n	160 <crc32_recalculate+0x4c>
		if (crc & 1) {
     156:	421c      	tst	r4, r3
     158:	d0f9      	beq.n	14e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     15a:	085b      	lsrs	r3, r3, #1
     15c:	406b      	eors	r3, r5
     15e:	e7f7      	b.n	150 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
     160:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
     162:	2003      	movs	r0, #3
     164:	000c      	movs	r4, r1
     166:	4384      	bics	r4, r0

	if (temp_length) {
     168:	d01e      	beq.n	1a8 <crc32_recalculate+0x94>
		length -= temp_length;
     16a:	1b08      	subs	r0, r1, r4
     16c:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
     16e:	0889      	lsrs	r1, r1, #2
     170:	4688      	mov	r8, r1
     172:	003e      	movs	r6, r7
     174:	000d      	movs	r5, r1
		if (crc & 1) {
     176:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     178:	4c1b      	ldr	r4, [pc, #108]	; (1e8 <crc32_recalculate+0xd4>)

		while (temp_length--) {
     17a:	e00b      	b.n	194 <crc32_recalculate+0x80>
		word = *(word_ptr++);
     17c:	0037      	movs	r7, r6
     17e:	e7f0      	b.n	162 <crc32_recalculate+0x4e>
			crc >>= 1;
     180:	085b      	lsrs	r3, r3, #1
     182:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     184:	2900      	cmp	r1, #0
     186:	d004      	beq.n	192 <crc32_recalculate+0x7e>
		if (crc & 1) {
     188:	4218      	tst	r0, r3
     18a:	d0f9      	beq.n	180 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     18c:	085b      	lsrs	r3, r3, #1
     18e:	4063      	eors	r3, r4
     190:	e7f7      	b.n	182 <crc32_recalculate+0x6e>
     192:	3604      	adds	r6, #4
		while (temp_length--) {
     194:	3d01      	subs	r5, #1
     196:	d303      	bcc.n	1a0 <crc32_recalculate+0x8c>
	crc ^= data;
     198:	6831      	ldr	r1, [r6, #0]
     19a:	404b      	eors	r3, r1
     19c:	2120      	movs	r1, #32
     19e:	e7f3      	b.n	188 <crc32_recalculate+0x74>
     1a0:	4641      	mov	r1, r8
     1a2:	0089      	lsls	r1, r1, #2
     1a4:	187f      	adds	r7, r7, r1
		length -= temp_length;
     1a6:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
     1a8:	2900      	cmp	r1, #0
     1aa:	d017      	beq.n	1dc <crc32_recalculate+0xc8>
		word = *word_ptr;
     1ac:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
     1ae:	00c8      	lsls	r0, r1, #3
     1b0:	4240      	negs	r0, r0
     1b2:	3020      	adds	r0, #32
     1b4:	2501      	movs	r5, #1
     1b6:	426d      	negs	r5, r5
     1b8:	40c5      	lsrs	r5, r0
     1ba:	0028      	movs	r0, r5
     1bc:	4020      	ands	r0, r4
	crc ^= data;
     1be:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
     1c0:	00c9      	lsls	r1, r1, #3
     1c2:	d00b      	beq.n	1dc <crc32_recalculate+0xc8>
		if (crc & 1) {
     1c4:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1c6:	4c08      	ldr	r4, [pc, #32]	; (1e8 <crc32_recalculate+0xd4>)
     1c8:	e003      	b.n	1d2 <crc32_recalculate+0xbe>
			crc >>= 1;
     1ca:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     1cc:	3901      	subs	r1, #1
     1ce:	2900      	cmp	r1, #0
     1d0:	d004      	beq.n	1dc <crc32_recalculate+0xc8>
		if (crc & 1) {
     1d2:	4218      	tst	r0, r3
     1d4:	d0f9      	beq.n	1ca <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     1d6:	085b      	lsrs	r3, r3, #1
     1d8:	4063      	eors	r3, r4
     1da:	e7f7      	b.n	1cc <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
     1dc:	43db      	mvns	r3, r3
     1de:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
     1e0:	2000      	movs	r0, #0
     1e2:	bc04      	pop	{r2}
     1e4:	4690      	mov	r8, r2
     1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1e8:	edb88320 	.word	0xedb88320

000001ec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ee:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f0:	ac01      	add	r4, sp, #4
     1f2:	2501      	movs	r5, #1
     1f4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1f6:	2700      	movs	r7, #0
     1f8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1fc:	0021      	movs	r1, r4
     1fe:	2017      	movs	r0, #23
     200:	4e06      	ldr	r6, [pc, #24]	; (21c <system_board_init+0x30>)
     202:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     204:	2280      	movs	r2, #128	; 0x80
     206:	0412      	lsls	r2, r2, #16
     208:	4b05      	ldr	r3, [pc, #20]	; (220 <system_board_init+0x34>)
     20a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     20c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     20e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     210:	0021      	movs	r1, r4
     212:	2037      	movs	r0, #55	; 0x37
     214:	47b0      	blx	r6
}
     216:	b003      	add	sp, #12
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	000019ad 	.word	0x000019ad
     220:	41004400 	.word	0x41004400

00000224 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     224:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     226:	4a1e      	ldr	r2, [pc, #120]	; (2a0 <nvm_set_config+0x7c>)
     228:	69d3      	ldr	r3, [r2, #28]
     22a:	2104      	movs	r1, #4
     22c:	430b      	orrs	r3, r1
     22e:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     230:	4b1c      	ldr	r3, [pc, #112]	; (2a4 <nvm_set_config+0x80>)
     232:	2220      	movs	r2, #32
     234:	32ff      	adds	r2, #255	; 0xff
     236:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     238:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     23a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     23c:	07d2      	lsls	r2, r2, #31
     23e:	d401      	bmi.n	244 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     240:	0018      	movs	r0, r3
     242:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     244:	7803      	ldrb	r3, [r0, #0]
     246:	021b      	lsls	r3, r3, #8
     248:	22c0      	movs	r2, #192	; 0xc0
     24a:	0092      	lsls	r2, r2, #2
     24c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     24e:	7841      	ldrb	r1, [r0, #1]
     250:	01c9      	lsls	r1, r1, #7
     252:	22ff      	movs	r2, #255	; 0xff
     254:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     256:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     258:	7881      	ldrb	r1, [r0, #2]
     25a:	0049      	lsls	r1, r1, #1
     25c:	221e      	movs	r2, #30
     25e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     260:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     262:	78c2      	ldrb	r2, [r0, #3]
     264:	0492      	lsls	r2, r2, #18
     266:	2180      	movs	r1, #128	; 0x80
     268:	02c9      	lsls	r1, r1, #11
     26a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     26c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     26e:	7902      	ldrb	r2, [r0, #4]
     270:	0412      	lsls	r2, r2, #16
     272:	21c0      	movs	r1, #192	; 0xc0
     274:	0289      	lsls	r1, r1, #10
     276:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     278:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     27a:	4a0a      	ldr	r2, [pc, #40]	; (2a4 <nvm_set_config+0x80>)
     27c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     27e:	6893      	ldr	r3, [r2, #8]
     280:	035b      	lsls	r3, r3, #13
     282:	0f5b      	lsrs	r3, r3, #29
     284:	4908      	ldr	r1, [pc, #32]	; (2a8 <nvm_set_config+0x84>)
     286:	2408      	movs	r4, #8
     288:	409c      	lsls	r4, r3
     28a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     28c:	6893      	ldr	r3, [r2, #8]
     28e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     290:	7843      	ldrb	r3, [r0, #1]
     292:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     294:	8b13      	ldrh	r3, [r2, #24]
     296:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     298:	0fdb      	lsrs	r3, r3, #31
     29a:	011b      	lsls	r3, r3, #4
     29c:	e7d0      	b.n	240 <nvm_set_config+0x1c>
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	40000400 	.word	0x40000400
     2a4:	41004000 	.word	0x41004000
     2a8:	200000a0 	.word	0x200000a0

000002ac <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     2ac:	b530      	push	{r4, r5, lr}
     2ae:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     2b0:	4a22      	ldr	r2, [pc, #136]	; (33c <nvm_execute_command+0x90>)
     2b2:	8810      	ldrh	r0, [r2, #0]
     2b4:	8853      	ldrh	r3, [r2, #2]
     2b6:	4343      	muls	r3, r0
     2b8:	428b      	cmp	r3, r1
     2ba:	d206      	bcs.n	2ca <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     2bc:	2280      	movs	r2, #128	; 0x80
     2be:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     2c0:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     2c2:	4b1f      	ldr	r3, [pc, #124]	; (340 <nvm_execute_command+0x94>)
     2c4:	18cb      	adds	r3, r1, r3
     2c6:	4293      	cmp	r3, r2
     2c8:	d80e      	bhi.n	2e8 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     2ca:	4b1e      	ldr	r3, [pc, #120]	; (344 <nvm_execute_command+0x98>)
     2cc:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     2ce:	2280      	movs	r2, #128	; 0x80
     2d0:	02d2      	lsls	r2, r2, #11
     2d2:	432a      	orrs	r2, r5
     2d4:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     2d6:	2220      	movs	r2, #32
     2d8:	32ff      	adds	r2, #255	; 0xff
     2da:	831a      	strh	r2, [r3, #24]
     2dc:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     2de:	07db      	lsls	r3, r3, #31
     2e0:	d403      	bmi.n	2ea <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     2e2:	4b18      	ldr	r3, [pc, #96]	; (344 <nvm_execute_command+0x98>)
     2e4:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     2e6:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     2e8:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     2ea:	2c45      	cmp	r4, #69	; 0x45
     2ec:	d822      	bhi.n	334 <nvm_execute_command+0x88>
     2ee:	00a3      	lsls	r3, r4, #2
     2f0:	4a15      	ldr	r2, [pc, #84]	; (348 <nvm_execute_command+0x9c>)
     2f2:	58d3      	ldr	r3, [r2, r3]
     2f4:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     2f6:	4b13      	ldr	r3, [pc, #76]	; (344 <nvm_execute_command+0x98>)
     2f8:	8b1b      	ldrh	r3, [r3, #24]
     2fa:	05db      	lsls	r3, r3, #23
     2fc:	d503      	bpl.n	306 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <nvm_execute_command+0x98>)
     300:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     302:	2010      	movs	r0, #16
     304:	e7f0      	b.n	2e8 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     306:	0889      	lsrs	r1, r1, #2
     308:	0049      	lsls	r1, r1, #1
     30a:	4b0e      	ldr	r3, [pc, #56]	; (344 <nvm_execute_command+0x98>)
     30c:	61d9      	str	r1, [r3, #28]
			break;
     30e:	e003      	b.n	318 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     310:	0889      	lsrs	r1, r1, #2
     312:	0049      	lsls	r1, r1, #1
     314:	4b0b      	ldr	r3, [pc, #44]	; (344 <nvm_execute_command+0x98>)
     316:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     318:	20a5      	movs	r0, #165	; 0xa5
     31a:	0200      	lsls	r0, r0, #8
     31c:	4304      	orrs	r4, r0
     31e:	4b09      	ldr	r3, [pc, #36]	; (344 <nvm_execute_command+0x98>)
     320:	801c      	strh	r4, [r3, #0]
     322:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     324:	2201      	movs	r2, #1
     326:	7d0b      	ldrb	r3, [r1, #20]
     328:	4213      	tst	r3, r2
     32a:	d0fc      	beq.n	326 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     32c:	4b05      	ldr	r3, [pc, #20]	; (344 <nvm_execute_command+0x98>)
     32e:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     330:	2000      	movs	r0, #0
     332:	e7d9      	b.n	2e8 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     334:	4b03      	ldr	r3, [pc, #12]	; (344 <nvm_execute_command+0x98>)
     336:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     338:	2017      	movs	r0, #23
     33a:	e7d5      	b.n	2e8 <nvm_execute_command+0x3c>
     33c:	200000a0 	.word	0x200000a0
     340:	ff7fc000 	.word	0xff7fc000
     344:	41004000 	.word	0x41004000
     348:	00006560 	.word	0x00006560

0000034c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     34e:	4b25      	ldr	r3, [pc, #148]	; (3e4 <nvm_write_buffer+0x98>)
     350:	881d      	ldrh	r5, [r3, #0]
     352:	885b      	ldrh	r3, [r3, #2]
     354:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     356:	2418      	movs	r4, #24
	if (destination_address >
     358:	4283      	cmp	r3, r0
     35a:	d201      	bcs.n	360 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     35c:	0020      	movs	r0, r4
     35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     360:	1e6b      	subs	r3, r5, #1
     362:	4218      	tst	r0, r3
     364:	d1fa      	bne.n	35c <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     366:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     368:	4295      	cmp	r5, r2
     36a:	d3f7      	bcc.n	35c <nvm_write_buffer+0x10>
     36c:	4b1e      	ldr	r3, [pc, #120]	; (3e8 <nvm_write_buffer+0x9c>)
     36e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     370:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     372:	07db      	lsls	r3, r3, #31
     374:	d5f2      	bpl.n	35c <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     376:	4c1d      	ldr	r4, [pc, #116]	; (3ec <nvm_write_buffer+0xa0>)
     378:	4b1b      	ldr	r3, [pc, #108]	; (3e8 <nvm_write_buffer+0x9c>)
     37a:	801c      	strh	r4, [r3, #0]
     37c:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     37e:	2401      	movs	r4, #1
     380:	7d2b      	ldrb	r3, [r5, #20]
     382:	4223      	tst	r3, r4
     384:	d0fc      	beq.n	380 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     386:	2420      	movs	r4, #32
     388:	34ff      	adds	r4, #255	; 0xff
     38a:	4b17      	ldr	r3, [pc, #92]	; (3e8 <nvm_write_buffer+0x9c>)
     38c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     38e:	2a00      	cmp	r2, #0
     390:	d022      	beq.n	3d8 <nvm_write_buffer+0x8c>
     392:	2301      	movs	r3, #1
     394:	0005      	movs	r5, r0
     396:	439d      	bics	r5, r3
     398:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     39a:	1e57      	subs	r7, r2, #1
     39c:	e009      	b.n	3b2 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     39e:	18ce      	adds	r6, r1, r3
     3a0:	7876      	ldrb	r6, [r6, #1]
     3a2:	0236      	lsls	r6, r6, #8
     3a4:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     3a6:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     3a8:	3302      	adds	r3, #2
     3aa:	b29b      	uxth	r3, r3
     3ac:	3502      	adds	r5, #2
     3ae:	429a      	cmp	r2, r3
     3b0:	d904      	bls.n	3bc <nvm_write_buffer+0x70>
		data = buffer[i];
     3b2:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     3b4:	42bb      	cmp	r3, r7
     3b6:	dbf2      	blt.n	39e <nvm_write_buffer+0x52>
		data = buffer[i];
     3b8:	b2a4      	uxth	r4, r4
     3ba:	e7f4      	b.n	3a6 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     3bc:	4b09      	ldr	r3, [pc, #36]	; (3e4 <nvm_write_buffer+0x98>)
     3be:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     3c0:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     3c2:	2b00      	cmp	r3, #0
     3c4:	d1ca      	bne.n	35c <nvm_write_buffer+0x10>
     3c6:	2a3f      	cmp	r2, #63	; 0x3f
     3c8:	d8c8      	bhi.n	35c <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     3ca:	2200      	movs	r2, #0
     3cc:	0001      	movs	r1, r0
     3ce:	2004      	movs	r0, #4
     3d0:	4b07      	ldr	r3, [pc, #28]	; (3f0 <nvm_write_buffer+0xa4>)
     3d2:	4798      	blx	r3
     3d4:	0004      	movs	r4, r0
     3d6:	e7c1      	b.n	35c <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     3d8:	4b02      	ldr	r3, [pc, #8]	; (3e4 <nvm_write_buffer+0x98>)
     3da:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     3dc:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     3de:	2b00      	cmp	r3, #0
     3e0:	d0f3      	beq.n	3ca <nvm_write_buffer+0x7e>
     3e2:	e7bb      	b.n	35c <nvm_write_buffer+0x10>
     3e4:	200000a0 	.word	0x200000a0
     3e8:	41004000 	.word	0x41004000
     3ec:	ffffa544 	.word	0xffffa544
     3f0:	000002ad 	.word	0x000002ad

000003f4 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     3f4:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     3f6:	4b18      	ldr	r3, [pc, #96]	; (458 <nvm_read_buffer+0x64>)
     3f8:	881d      	ldrh	r5, [r3, #0]
     3fa:	885b      	ldrh	r3, [r3, #2]
     3fc:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     3fe:	2418      	movs	r4, #24
	if (source_address >
     400:	4283      	cmp	r3, r0
     402:	d201      	bcs.n	408 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     404:	0020      	movs	r0, r4
     406:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
     408:	1e6b      	subs	r3, r5, #1
     40a:	4218      	tst	r0, r3
     40c:	d1fa      	bne.n	404 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     40e:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     410:	4295      	cmp	r5, r2
     412:	d3f7      	bcc.n	404 <nvm_read_buffer+0x10>
     414:	4b11      	ldr	r3, [pc, #68]	; (45c <nvm_read_buffer+0x68>)
     416:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     418:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     41a:	07db      	lsls	r3, r3, #31
     41c:	d5f2      	bpl.n	404 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     41e:	2420      	movs	r4, #32
     420:	34ff      	adds	r4, #255	; 0xff
     422:	4b0e      	ldr	r3, [pc, #56]	; (45c <nvm_read_buffer+0x68>)
     424:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     426:	2a00      	cmp	r2, #0
     428:	d014      	beq.n	454 <nvm_read_buffer+0x60>
     42a:	2301      	movs	r3, #1
     42c:	4398      	bics	r0, r3
     42e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     430:	1e56      	subs	r6, r2, #1
     432:	e004      	b.n	43e <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
     434:	3302      	adds	r3, #2
     436:	b29b      	uxth	r3, r3
     438:	3002      	adds	r0, #2
     43a:	429a      	cmp	r2, r3
     43c:	d908      	bls.n	450 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
     43e:	8804      	ldrh	r4, [r0, #0]
     440:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     442:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     444:	42b3      	cmp	r3, r6
     446:	daf5      	bge.n	434 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
     448:	18cd      	adds	r5, r1, r3
     44a:	0a24      	lsrs	r4, r4, #8
     44c:	706c      	strb	r4, [r5, #1]
     44e:	e7f1      	b.n	434 <nvm_read_buffer+0x40>
	return STATUS_OK;
     450:	2400      	movs	r4, #0
     452:	e7d7      	b.n	404 <nvm_read_buffer+0x10>
     454:	2400      	movs	r4, #0
     456:	e7d5      	b.n	404 <nvm_read_buffer+0x10>
     458:	200000a0 	.word	0x200000a0
     45c:	41004000 	.word	0x41004000

00000460 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     460:	4b13      	ldr	r3, [pc, #76]	; (4b0 <nvm_erase_row+0x50>)
     462:	881a      	ldrh	r2, [r3, #0]
     464:	885b      	ldrh	r3, [r3, #2]
     466:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     468:	2118      	movs	r1, #24
	if (row_address >
     46a:	4283      	cmp	r3, r0
     46c:	d201      	bcs.n	472 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     46e:	0008      	movs	r0, r1
     470:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     472:	0092      	lsls	r2, r2, #2
     474:	3a01      	subs	r2, #1
     476:	4210      	tst	r0, r2
     478:	d1f9      	bne.n	46e <nvm_erase_row+0xe>
     47a:	4b0e      	ldr	r3, [pc, #56]	; (4b4 <nvm_erase_row+0x54>)
     47c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     47e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     480:	07db      	lsls	r3, r3, #31
     482:	d5f4      	bpl.n	46e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     484:	4b0b      	ldr	r3, [pc, #44]	; (4b4 <nvm_erase_row+0x54>)
     486:	2220      	movs	r2, #32
     488:	32ff      	adds	r2, #255	; 0xff
     48a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     48c:	0880      	lsrs	r0, r0, #2
     48e:	0040      	lsls	r0, r0, #1
     490:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     492:	4a09      	ldr	r2, [pc, #36]	; (4b8 <nvm_erase_row+0x58>)
     494:	801a      	strh	r2, [r3, #0]
     496:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     498:	2201      	movs	r2, #1
     49a:	7d0b      	ldrb	r3, [r1, #20]
     49c:	4213      	tst	r3, r2
     49e:	d0fc      	beq.n	49a <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     4a0:	4b04      	ldr	r3, [pc, #16]	; (4b4 <nvm_erase_row+0x54>)
     4a2:	8b19      	ldrh	r1, [r3, #24]
     4a4:	201c      	movs	r0, #28
     4a6:	4001      	ands	r1, r0
	return STATUS_OK;
     4a8:	1e48      	subs	r0, r1, #1
     4aa:	4181      	sbcs	r1, r0
     4ac:	0089      	lsls	r1, r1, #2
     4ae:	e7de      	b.n	46e <nvm_erase_row+0xe>
     4b0:	200000a0 	.word	0x200000a0
     4b4:	41004000 	.word	0x41004000
     4b8:	ffffa502 	.word	0xffffa502

000004bc <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     4bc:	b510      	push	{r4, lr}
     4be:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     4c0:	7c03      	ldrb	r3, [r0, #16]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d005      	beq.n	4d2 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     4c6:	6883      	ldr	r3, [r0, #8]
     4c8:	1c58      	adds	r0, r3, #1
     4ca:	68e1      	ldr	r1, [r4, #12]
     4cc:	4b07      	ldr	r3, [pc, #28]	; (4ec <advance_pointer+0x30>)
     4ce:	4798      	blx	r3
     4d0:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     4d2:	6863      	ldr	r3, [r4, #4]
     4d4:	1c58      	adds	r0, r3, #1
     4d6:	68e1      	ldr	r1, [r4, #12]
     4d8:	4b04      	ldr	r3, [pc, #16]	; (4ec <advance_pointer+0x30>)
     4da:	4798      	blx	r3
     4dc:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     4de:	68a3      	ldr	r3, [r4, #8]
     4e0:	1a59      	subs	r1, r3, r1
     4e2:	424a      	negs	r2, r1
     4e4:	414a      	adcs	r2, r1
     4e6:	7422      	strb	r2, [r4, #16]
 }
     4e8:	bd10      	pop	{r4, pc}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	00005845 	.word	0x00005845

000004f0 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     4f0:	b570      	push	{r4, r5, r6, lr}
     4f2:	0005      	movs	r5, r0
     4f4:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     4f6:	2014      	movs	r0, #20
     4f8:	4b04      	ldr	r3, [pc, #16]	; (50c <circular_buf_init+0x1c>)
     4fa:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     4fc:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     4fe:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     500:	2300      	movs	r3, #0
     502:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     504:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     506:	7403      	strb	r3, [r0, #16]
 }
     508:	bd70      	pop	{r4, r5, r6, pc}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	00005cd5 	.word	0x00005cd5

00000510 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     510:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     512:	6803      	ldr	r3, [r0, #0]
     514:	6842      	ldr	r2, [r0, #4]
     516:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     518:	4b01      	ldr	r3, [pc, #4]	; (520 <circular_buf_put+0x10>)
     51a:	4798      	blx	r3
 }
     51c:	bd10      	pop	{r4, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	000004bd 	.word	0x000004bd

00000524 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     524:	7c02      	ldrb	r2, [r0, #16]
     526:	2300      	movs	r3, #0
     528:	2a00      	cmp	r2, #0
     52a:	d105      	bne.n	538 <circular_buf_empty+0x14>
     52c:	6843      	ldr	r3, [r0, #4]
     52e:	6880      	ldr	r0, [r0, #8]
     530:	1a1b      	subs	r3, r3, r0
     532:	4258      	negs	r0, r3
     534:	4143      	adcs	r3, r0
     536:	b2db      	uxtb	r3, r3
     538:	0018      	movs	r0, r3
 }
     53a:	4770      	bx	lr

0000053c <circular_buf_get>:
 {
     53c:	b570      	push	{r4, r5, r6, lr}
     53e:	0004      	movs	r4, r0
     540:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     542:	4b0a      	ldr	r3, [pc, #40]	; (56c <circular_buf_get+0x30>)
     544:	4798      	blx	r3
     546:	2800      	cmp	r0, #0
     548:	d10d      	bne.n	566 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     54a:	6823      	ldr	r3, [r4, #0]
     54c:	68a2      	ldr	r2, [r4, #8]
     54e:	5c9b      	ldrb	r3, [r3, r2]
     550:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     552:	2300      	movs	r3, #0
     554:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     556:	68a3      	ldr	r3, [r4, #8]
     558:	1c58      	adds	r0, r3, #1
     55a:	68e1      	ldr	r1, [r4, #12]
     55c:	4b04      	ldr	r3, [pc, #16]	; (570 <circular_buf_get+0x34>)
     55e:	4798      	blx	r3
     560:	60a1      	str	r1, [r4, #8]
		 r = 0;
     562:	2000      	movs	r0, #0
 }
     564:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     566:	2001      	movs	r0, #1
     568:	4240      	negs	r0, r0
	 return r;
     56a:	e7fb      	b.n	564 <circular_buf_get+0x28>
     56c:	00000525 	.word	0x00000525
     570:	00005845 	.word	0x00005845

00000574 <usart_write_callback>:
usart_enable(&usart_instance);
}


/**************************************************************************//**
* @fn			static void configure_usart_callbacks(void)
     574:	b510      	push	{r4, lr}
* @brief		Code to register callbacks
     576:	4b06      	ldr	r3, [pc, #24]	; (590 <usart_write_callback+0x1c>)
     578:	6818      	ldr	r0, [r3, #0]
     57a:	4906      	ldr	r1, [pc, #24]	; (594 <usart_write_callback+0x20>)
     57c:	4b06      	ldr	r3, [pc, #24]	; (598 <usart_write_callback+0x24>)
     57e:	4798      	blx	r3
     580:	1c43      	adds	r3, r0, #1
     582:	d004      	beq.n	58e <usart_write_callback+0x1a>
* @note
*****************************************************************************/
     584:	2201      	movs	r2, #1
     586:	4903      	ldr	r1, [pc, #12]	; (594 <usart_write_callback+0x20>)
     588:	4804      	ldr	r0, [pc, #16]	; (59c <usart_write_callback+0x28>)
     58a:	4b05      	ldr	r3, [pc, #20]	; (5a0 <usart_write_callback+0x2c>)
     58c:	4798      	blx	r3
static void configure_usart_callbacks(void)
{
usart_register_callback(&usart_instance,
     58e:	bd10      	pop	{r4, pc}
     590:	200009d8 	.word	0x200009d8
     594:	200009d4 	.word	0x200009d4
     598:	0000053d 	.word	0x0000053d
     59c:	20000198 	.word	0x20000198
     5a0:	00002b15 	.word	0x00002b15

000005a4 <InitializeSerialConsole>:
*****************************************************************************/
     5a4:	b530      	push	{r4, r5, lr}
     5a6:	b091      	sub	sp, #68	; 0x44
{
     5a8:	2580      	movs	r5, #128	; 0x80
     5aa:	00ed      	lsls	r5, r5, #3
     5ac:	0029      	movs	r1, r5
     5ae:	4836      	ldr	r0, [pc, #216]	; (688 <InitializeSerialConsole+0xe4>)
     5b0:	4c36      	ldr	r4, [pc, #216]	; (68c <InitializeSerialConsole+0xe8>)
     5b2:	47a0      	blx	r4
     5b4:	4b36      	ldr	r3, [pc, #216]	; (690 <InitializeSerialConsole+0xec>)
     5b6:	6018      	str	r0, [r3, #0]

     5b8:	0029      	movs	r1, r5
     5ba:	4836      	ldr	r0, [pc, #216]	; (694 <InitializeSerialConsole+0xf0>)
     5bc:	47a0      	blx	r4
     5be:	4b36      	ldr	r3, [pc, #216]	; (698 <InitializeSerialConsole+0xf4>)
     5c0:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     5c2:	2380      	movs	r3, #128	; 0x80
     5c4:	05db      	lsls	r3, r3, #23
     5c6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     5c8:	2300      	movs	r3, #0
     5ca:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     5cc:	22ff      	movs	r2, #255	; 0xff
     5ce:	4669      	mov	r1, sp
     5d0:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     5d2:	2200      	movs	r2, #0
     5d4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     5d6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     5d8:	2101      	movs	r1, #1
     5da:	2024      	movs	r0, #36	; 0x24
     5dc:	466c      	mov	r4, sp
     5de:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     5e0:	3001      	adds	r0, #1
     5e2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     5e4:	3125      	adds	r1, #37	; 0x25
     5e6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     5e8:	3101      	adds	r1, #1
     5ea:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     5ec:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     5ee:	3105      	adds	r1, #5
     5f0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     5f2:	3101      	adds	r1, #1
     5f4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     5f6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     5f8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     5fa:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     5fc:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     5fe:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     600:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     602:	2313      	movs	r3, #19
     604:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     606:	7762      	strb	r2, [r4, #29]
SerialConsoleWriteString("\r\n");
     608:	23e1      	movs	r3, #225	; 0xe1
     60a:	025b      	lsls	r3, r3, #9
     60c:	9308      	str	r3, [sp, #32]

     60e:	23c4      	movs	r3, #196	; 0xc4
     610:	039b      	lsls	r3, r3, #14
     612:	9303      	str	r3, [sp, #12]
}
     614:	2301      	movs	r3, #1
     616:	425b      	negs	r3, r3
     618:	930c      	str	r3, [sp, #48]	; 0x30

     61a:	930d      	str	r3, [sp, #52]	; 0x34
char getNextRxChar(){
     61c:	4b1f      	ldr	r3, [pc, #124]	; (69c <InitializeSerialConsole+0xf8>)
     61e:	930e      	str	r3, [sp, #56]	; 0x38
char c = 0;
     620:	4b1f      	ldr	r3, [pc, #124]	; (6a0 <InitializeSerialConsole+0xfc>)
     622:	930f      	str	r3, [sp, #60]	; 0x3c
if(circular_buf_get(cbufRx, (uint8_t*) &c) != -1)
     624:	4d1f      	ldr	r5, [pc, #124]	; (6a4 <InitializeSerialConsole+0x100>)
     626:	4c20      	ldr	r4, [pc, #128]	; (6a8 <InitializeSerialConsole+0x104>)
     628:	466a      	mov	r2, sp
     62a:	4920      	ldr	r1, [pc, #128]	; (6ac <InitializeSerialConsole+0x108>)
     62c:	0028      	movs	r0, r5
     62e:	47a0      	blx	r4
     630:	2800      	cmp	r0, #0
     632:	d1f9      	bne.n	628 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     634:	4d1b      	ldr	r5, [pc, #108]	; (6a4 <InitializeSerialConsole+0x100>)
     636:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     638:	0020      	movs	r0, r4
     63a:	4b1d      	ldr	r3, [pc, #116]	; (6b0 <InitializeSerialConsole+0x10c>)
     63c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     63e:	231f      	movs	r3, #31
     640:	4018      	ands	r0, r3
     642:	3b1e      	subs	r3, #30
     644:	4083      	lsls	r3, r0
     646:	4a1b      	ldr	r2, [pc, #108]	; (6b4 <InitializeSerialConsole+0x110>)
     648:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     64a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     64c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     64e:	2b00      	cmp	r3, #0
     650:	d1fc      	bne.n	64c <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     652:	6823      	ldr	r3, [r4, #0]
     654:	2202      	movs	r2, #2
     656:	4313      	orrs	r3, r2
     658:	6023      	str	r3, [r4, #0]
return;
     65a:	4c12      	ldr	r4, [pc, #72]	; (6a4 <InitializeSerialConsole+0x100>)
     65c:	2200      	movs	r2, #0
     65e:	4916      	ldr	r1, [pc, #88]	; (6b8 <InitializeSerialConsole+0x114>)
     660:	0020      	movs	r0, r4
     662:	4d16      	ldr	r5, [pc, #88]	; (6bc <InitializeSerialConsole+0x118>)
     664:	47a8      	blx	r5

     666:	2201      	movs	r2, #1
     668:	4915      	ldr	r1, [pc, #84]	; (6c0 <InitializeSerialConsole+0x11c>)
     66a:	0020      	movs	r0, r4
     66c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     66e:	2231      	movs	r2, #49	; 0x31
     670:	5ca3      	ldrb	r3, [r4, r2]
     672:	2103      	movs	r1, #3
     674:	430b      	orrs	r3, r1
     676:	54a3      	strb	r3, [r4, r2]
configure_usart();
     678:	3a30      	subs	r2, #48	; 0x30
     67a:	4912      	ldr	r1, [pc, #72]	; (6c4 <InitializeSerialConsole+0x120>)
     67c:	0020      	movs	r0, r4
     67e:	4b12      	ldr	r3, [pc, #72]	; (6c8 <InitializeSerialConsole+0x124>)
     680:	4798      	blx	r3
usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     682:	b011      	add	sp, #68	; 0x44
     684:	bd30      	pop	{r4, r5, pc}
     686:	46c0      	nop			; (mov r8, r8)
     688:	200005d4 	.word	0x200005d4
     68c:	000004f1 	.word	0x000004f1
     690:	200001cc 	.word	0x200001cc
     694:	200001d4 	.word	0x200001d4
     698:	200009d8 	.word	0x200009d8
     69c:	002a0003 	.word	0x002a0003
     6a0:	002b0003 	.word	0x002b0003
     6a4:	20000198 	.word	0x20000198
     6a8:	0000272d 	.word	0x0000272d
     6ac:	42001800 	.word	0x42001800
     6b0:	00001f5d 	.word	0x00001f5d
     6b4:	e000e100 	.word	0xe000e100
     6b8:	00000575 	.word	0x00000575
     6bc:	00002afd 	.word	0x00002afd
     6c0:	00000779 	.word	0x00000779
     6c4:	200001d0 	.word	0x200001d0
     6c8:	00002b35 	.word	0x00002b35

000006cc <DeinitializeSerialConsole>:

     6cc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6ce:	4d0a      	ldr	r5, [pc, #40]	; (6f8 <DeinitializeSerialConsole+0x2c>)
     6d0:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     6d2:	0020      	movs	r0, r4
     6d4:	4b09      	ldr	r3, [pc, #36]	; (6fc <DeinitializeSerialConsole+0x30>)
     6d6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6d8:	231f      	movs	r3, #31
     6da:	4018      	ands	r0, r3
     6dc:	3b1e      	subs	r3, #30
     6de:	4083      	lsls	r3, r0
     6e0:	2280      	movs	r2, #128	; 0x80
     6e2:	4907      	ldr	r1, [pc, #28]	; (700 <DeinitializeSerialConsole+0x34>)
     6e4:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6e6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     6e8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     6ea:	2b00      	cmp	r3, #0
     6ec:	d1fc      	bne.n	6e8 <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     6ee:	6823      	ldr	r3, [r4, #0]
     6f0:	2202      	movs	r2, #2
     6f2:	4393      	bics	r3, r2
     6f4:	6023      	str	r3, [r4, #0]
{
     6f6:	bd70      	pop	{r4, r5, r6, pc}
     6f8:	20000198 	.word	0x20000198
     6fc:	00001f5d 	.word	0x00001f5d
     700:	e000e100 	.word	0xe000e100

00000704 <SerialConsoleWriteString>:
* @note			Use to send a string of characters to the user via UART
     704:	b5f0      	push	{r4, r5, r6, r7, lr}
     706:	46c6      	mov	lr, r8
     708:	b500      	push	{lr}
     70a:	0005      	movs	r5, r0
     70c:	2400      	movs	r4, #0
*****************************************************************************/
     70e:	2800      	cmp	r0, #0
     710:	d012      	beq.n	738 <SerialConsoleWriteString+0x34>
{
     712:	4e11      	ldr	r6, [pc, #68]	; (758 <SerialConsoleWriteString+0x54>)
{
     714:	4f11      	ldr	r7, [pc, #68]	; (75c <SerialConsoleWriteString+0x58>)
     716:	4b12      	ldr	r3, [pc, #72]	; (760 <SerialConsoleWriteString+0x5c>)
     718:	4698      	mov	r8, r3
     71a:	e003      	b.n	724 <SerialConsoleWriteString+0x20>
     71c:	5d29      	ldrb	r1, [r5, r4]
     71e:	6838      	ldr	r0, [r7, #0]
     720:	47c0      	blx	r8
{
     722:	3401      	adds	r4, #1
     724:	0028      	movs	r0, r5
     726:	47b0      	blx	r6
     728:	4284      	cmp	r4, r0
     72a:	d3f7      	bcc.n	71c <SerialConsoleWriteString+0x18>
circular_buf_put(cbufTx, string[iter]);
     72c:	2101      	movs	r1, #1
     72e:	480d      	ldr	r0, [pc, #52]	; (764 <SerialConsoleWriteString+0x60>)
     730:	4b0d      	ldr	r3, [pc, #52]	; (768 <SerialConsoleWriteString+0x64>)
     732:	4798      	blx	r3
     734:	2800      	cmp	r0, #0
     736:	d002      	beq.n	73e <SerialConsoleWriteString+0x3a>
usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     738:	bc04      	pop	{r2}
     73a:	4690      	mov	r8, r2
     73c:	bdf0      	pop	{r4, r5, r6, r7, pc}

     73e:	4c0b      	ldr	r4, [pc, #44]	; (76c <SerialConsoleWriteString+0x68>)
     740:	4b06      	ldr	r3, [pc, #24]	; (75c <SerialConsoleWriteString+0x58>)
     742:	6818      	ldr	r0, [r3, #0]
     744:	0021      	movs	r1, r4
     746:	4b0a      	ldr	r3, [pc, #40]	; (770 <SerialConsoleWriteString+0x6c>)
     748:	4798      	blx	r3
if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     74a:	2201      	movs	r2, #1
     74c:	0021      	movs	r1, r4
     74e:	4805      	ldr	r0, [pc, #20]	; (764 <SerialConsoleWriteString+0x60>)
     750:	4b08      	ldr	r3, [pc, #32]	; (774 <SerialConsoleWriteString+0x70>)
     752:	4798      	blx	r3
usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     754:	e7f0      	b.n	738 <SerialConsoleWriteString+0x34>
     756:	46c0      	nop			; (mov r8, r8)
     758:	00005ed9 	.word	0x00005ed9
     75c:	200009d8 	.word	0x200009d8
     760:	00000511 	.word	0x00000511
     764:	20000198 	.word	0x20000198
     768:	00002b55 	.word	0x00002b55
     76c:	200009d4 	.word	0x200009d4
     770:	0000053d 	.word	0x0000053d
     774:	00002b15 	.word	0x00002b15

00000778 <usart_read_callback>:
{
     778:	b510      	push	{r4, lr}
     77a:	b082      	sub	sp, #8
usart_get_config_defaults(&config_usart);
     77c:	4c0d      	ldr	r4, [pc, #52]	; (7b4 <usart_read_callback+0x3c>)
     77e:	0020      	movs	r0, r4
     780:	4b0d      	ldr	r3, [pc, #52]	; (7b8 <usart_read_callback+0x40>)
     782:	4798      	blx	r3

     784:	7823      	ldrb	r3, [r4, #0]
     786:	2b08      	cmp	r3, #8
     788:	d00c      	beq.n	7a4 <usart_read_callback+0x2c>
while (usart_init(&usart_instance,
     78a:	4c0a      	ldr	r4, [pc, #40]	; (7b4 <usart_read_callback+0x3c>)
     78c:	7821      	ldrb	r1, [r4, #0]
     78e:	4b0b      	ldr	r3, [pc, #44]	; (7bc <usart_read_callback+0x44>)
     790:	6818      	ldr	r0, [r3, #0]
     792:	4b0b      	ldr	r3, [pc, #44]	; (7c0 <usart_read_callback+0x48>)
     794:	4798      	blx	r3
&config_usart) != STATUS_OK)
     796:	2201      	movs	r2, #1
     798:	0021      	movs	r1, r4
     79a:	480a      	ldr	r0, [pc, #40]	; (7c4 <usart_read_callback+0x4c>)
     79c:	4b0a      	ldr	r3, [pc, #40]	; (7c8 <usart_read_callback+0x50>)
     79e:	4798      	blx	r3
{
     7a0:	b002      	add	sp, #8
     7a2:	bd10      	pop	{r4, pc}
config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     7a4:	a801      	add	r0, sp, #4
     7a6:	3318      	adds	r3, #24
     7a8:	7003      	strb	r3, [r0, #0]
config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     7aa:	3b18      	subs	r3, #24
     7ac:	7043      	strb	r3, [r0, #1]
config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     7ae:	4b02      	ldr	r3, [pc, #8]	; (7b8 <usart_read_callback+0x40>)
     7b0:	4798      	blx	r3
     7b2:	e7ea      	b.n	78a <usart_read_callback+0x12>
     7b4:	200001d0 	.word	0x200001d0
     7b8:	00000705 	.word	0x00000705
     7bc:	200001cc 	.word	0x200001cc
     7c0:	00000511 	.word	0x00000511
     7c4:	20000198 	.word	0x20000198
     7c8:	00002b35 	.word	0x00002b35

000007cc <LogMessage>:
* @note
     7cc:	b40e      	push	{r1, r2, r3}
{
     7ce:	b003      	add	sp, #12
     7d0:	4770      	bx	lr
	...

000007d4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     7d4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     7d6:	4b06      	ldr	r3, [pc, #24]	; (7f0 <sd_mmc_configure_slot+0x1c>)
     7d8:	6819      	ldr	r1, [r3, #0]
     7da:	7f8b      	ldrb	r3, [r1, #30]
     7dc:	1e5a      	subs	r2, r3, #1
     7de:	4193      	sbcs	r3, r2
     7e0:	b2db      	uxtb	r3, r3
     7e2:	7b4a      	ldrb	r2, [r1, #13]
     7e4:	6809      	ldr	r1, [r1, #0]
     7e6:	4803      	ldr	r0, [pc, #12]	; (7f4 <sd_mmc_configure_slot+0x20>)
     7e8:	7800      	ldrb	r0, [r0, #0]
     7ea:	4c03      	ldr	r4, [pc, #12]	; (7f8 <sd_mmc_configure_slot+0x24>)
     7ec:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     7ee:	bd10      	pop	{r4, pc}
     7f0:	200000a8 	.word	0x200000a8
     7f4:	200000d0 	.word	0x200000d0
     7f8:	00001491 	.word	0x00001491

000007fc <sd_mmc_select_slot>:
{
     7fc:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     7fe:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     800:	2800      	cmp	r0, #0
     802:	d001      	beq.n	808 <sd_mmc_select_slot+0xc>
}
     804:	0018      	movs	r0, r3
     806:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     808:	4b0e      	ldr	r3, [pc, #56]	; (844 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     80a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     80c:	3b03      	subs	r3, #3
     80e:	2b01      	cmp	r3, #1
     810:	d90d      	bls.n	82e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     812:	2200      	movs	r2, #0
     814:	4b0c      	ldr	r3, [pc, #48]	; (848 <sd_mmc_select_slot+0x4c>)
     816:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     818:	4c0a      	ldr	r4, [pc, #40]	; (844 <sd_mmc_select_slot+0x48>)
     81a:	4b0c      	ldr	r3, [pc, #48]	; (84c <sd_mmc_select_slot+0x50>)
     81c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     81e:	4b0c      	ldr	r3, [pc, #48]	; (850 <sd_mmc_select_slot+0x54>)
     820:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     822:	7aa3      	ldrb	r3, [r4, #10]
     824:	3b02      	subs	r3, #2
     826:	4258      	negs	r0, r3
     828:	4143      	adcs	r3, r0
     82a:	b2db      	uxtb	r3, r3
     82c:	e7ea      	b.n	804 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     82e:	4b05      	ldr	r3, [pc, #20]	; (844 <sd_mmc_select_slot+0x48>)
     830:	2202      	movs	r2, #2
     832:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     834:	4a07      	ldr	r2, [pc, #28]	; (854 <sd_mmc_select_slot+0x58>)
     836:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     838:	2201      	movs	r2, #1
     83a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     83c:	2200      	movs	r2, #0
     83e:	779a      	strb	r2, [r3, #30]
     840:	e7e7      	b.n	812 <sd_mmc_select_slot+0x16>
     842:	46c0      	nop			; (mov r8, r8)
     844:	200000ac 	.word	0x200000ac
     848:	200000d0 	.word	0x200000d0
     84c:	200000a8 	.word	0x200000a8
     850:	000007d5 	.word	0x000007d5
     854:	00061a80 	.word	0x00061a80

00000858 <sd_mmc_cmd13>:
{
     858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     85a:	4d09      	ldr	r5, [pc, #36]	; (880 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     85c:	4f09      	ldr	r7, [pc, #36]	; (884 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     85e:	4e0a      	ldr	r6, [pc, #40]	; (888 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     860:	2100      	movs	r1, #0
     862:	480a      	ldr	r0, [pc, #40]	; (88c <sd_mmc_cmd13+0x34>)
     864:	47b8      	blx	r7
     866:	1e04      	subs	r4, r0, #0
     868:	d007      	beq.n	87a <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     86a:	47b0      	blx	r6
     86c:	23ff      	movs	r3, #255	; 0xff
     86e:	4203      	tst	r3, r0
     870:	d003      	beq.n	87a <sd_mmc_cmd13+0x22>
     872:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     874:	2d00      	cmp	r5, #0
     876:	d1f3      	bne.n	860 <sd_mmc_cmd13+0x8>
			return false;
     878:	2400      	movs	r4, #0
}
     87a:	0020      	movs	r0, r4
     87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	00030d41 	.word	0x00030d41
     884:	000016d5 	.word	0x000016d5
     888:	000016ed 	.word	0x000016ed
     88c:	00001b0d 	.word	0x00001b0d

00000890 <sd_mmc_cmd9_spi>:
{
     890:	b510      	push	{r4, lr}
     892:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     894:	4b0c      	ldr	r3, [pc, #48]	; (8c8 <sd_mmc_cmd9_spi+0x38>)
     896:	681b      	ldr	r3, [r3, #0]
     898:	8919      	ldrh	r1, [r3, #8]
     89a:	0409      	lsls	r1, r1, #16
     89c:	2301      	movs	r3, #1
     89e:	9300      	str	r3, [sp, #0]
     8a0:	2210      	movs	r2, #16
     8a2:	480a      	ldr	r0, [pc, #40]	; (8cc <sd_mmc_cmd9_spi+0x3c>)
     8a4:	4c0a      	ldr	r4, [pc, #40]	; (8d0 <sd_mmc_cmd9_spi+0x40>)
     8a6:	47a0      	blx	r4
     8a8:	2800      	cmp	r0, #0
     8aa:	d101      	bne.n	8b0 <sd_mmc_cmd9_spi+0x20>
}
     8ac:	b002      	add	sp, #8
     8ae:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     8b0:	4b05      	ldr	r3, [pc, #20]	; (8c8 <sd_mmc_cmd9_spi+0x38>)
     8b2:	6818      	ldr	r0, [r3, #0]
     8b4:	300e      	adds	r0, #14
     8b6:	2101      	movs	r1, #1
     8b8:	4b06      	ldr	r3, [pc, #24]	; (8d4 <sd_mmc_cmd9_spi+0x44>)
     8ba:	4798      	blx	r3
     8bc:	2800      	cmp	r0, #0
     8be:	d0f5      	beq.n	8ac <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     8c0:	4b05      	ldr	r3, [pc, #20]	; (8d8 <sd_mmc_cmd9_spi+0x48>)
     8c2:	4798      	blx	r3
     8c4:	e7f2      	b.n	8ac <sd_mmc_cmd9_spi+0x1c>
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	200000a8 	.word	0x200000a8
     8cc:	00081109 	.word	0x00081109
     8d0:	00001545 	.word	0x00001545
     8d4:	00001771 	.word	0x00001771
     8d8:	000017fd 	.word	0x000017fd

000008dc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     8dc:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     8de:	4b04      	ldr	r3, [pc, #16]	; (8f0 <sd_mmc_deselect_slot+0x14>)
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d000      	beq.n	8e8 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     8e6:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     8e8:	2000      	movs	r0, #0
     8ea:	4b02      	ldr	r3, [pc, #8]	; (8f4 <sd_mmc_deselect_slot+0x18>)
     8ec:	4798      	blx	r3
}
     8ee:	e7fa      	b.n	8e6 <sd_mmc_deselect_slot+0xa>
     8f0:	200000d0 	.word	0x200000d0
     8f4:	000014e5 	.word	0x000014e5

000008f8 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     8f8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     8fa:	2204      	movs	r2, #4
     8fc:	4b03      	ldr	r3, [pc, #12]	; (90c <sd_mmc_init+0x14>)
     8fe:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     900:	32fb      	adds	r2, #251	; 0xfb
     902:	4b03      	ldr	r3, [pc, #12]	; (910 <sd_mmc_init+0x18>)
     904:	701a      	strb	r2, [r3, #0]
	driver_init();
     906:	4b03      	ldr	r3, [pc, #12]	; (914 <sd_mmc_init+0x1c>)
     908:	4798      	blx	r3
}
     90a:	bd10      	pop	{r4, pc}
     90c:	200000ac 	.word	0x200000ac
     910:	200000d0 	.word	0x200000d0
     914:	00001391 	.word	0x00001391

00000918 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     918:	b5f0      	push	{r4, r5, r6, r7, lr}
     91a:	46c6      	mov	lr, r8
     91c:	b500      	push	{lr}
     91e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     920:	4bcb      	ldr	r3, [pc, #812]	; (c50 <sd_mmc_check+0x338>)
     922:	4798      	blx	r3
     924:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     926:	2801      	cmp	r0, #1
     928:	d006      	beq.n	938 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     92a:	4bca      	ldr	r3, [pc, #808]	; (c54 <sd_mmc_check+0x33c>)
     92c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     92e:	0020      	movs	r0, r4
     930:	b008      	add	sp, #32
     932:	bc04      	pop	{r2}
     934:	4690      	mov	r8, r2
     936:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     938:	4bc7      	ldr	r3, [pc, #796]	; (c58 <sd_mmc_check+0x340>)
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	2201      	movs	r2, #1
     93e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     940:	2200      	movs	r2, #0
     942:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     944:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     946:	4bc5      	ldr	r3, [pc, #788]	; (c5c <sd_mmc_check+0x344>)
     948:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     94a:	2100      	movs	r1, #0
     94c:	2088      	movs	r0, #136	; 0x88
     94e:	0140      	lsls	r0, r0, #5
     950:	4bc3      	ldr	r3, [pc, #780]	; (c60 <sd_mmc_check+0x348>)
     952:	4798      	blx	r3
     954:	2800      	cmp	r0, #0
     956:	d107      	bne.n	968 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     958:	4bbf      	ldr	r3, [pc, #764]	; (c58 <sd_mmc_check+0x340>)
     95a:	681b      	ldr	r3, [r3, #0]
     95c:	2203      	movs	r2, #3
     95e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     960:	4bbc      	ldr	r3, [pc, #752]	; (c54 <sd_mmc_check+0x33c>)
     962:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     964:	2403      	movs	r4, #3
     966:	e7e2      	b.n	92e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     968:	21d5      	movs	r1, #213	; 0xd5
     96a:	0049      	lsls	r1, r1, #1
     96c:	48bd      	ldr	r0, [pc, #756]	; (c64 <sd_mmc_check+0x34c>)
     96e:	4bbc      	ldr	r3, [pc, #752]	; (c60 <sd_mmc_check+0x348>)
     970:	4798      	blx	r3
	*v2 = 0;
     972:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     974:	2800      	cmp	r0, #0
     976:	d125      	bne.n	9c4 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     978:	4bb7      	ldr	r3, [pc, #732]	; (c58 <sd_mmc_check+0x340>)
     97a:	681b      	ldr	r3, [r3, #0]
     97c:	7adb      	ldrb	r3, [r3, #11]
     97e:	07db      	lsls	r3, r3, #31
     980:	d500      	bpl.n	984 <sd_mmc_check+0x6c>
     982:	e1eb      	b.n	d5c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     984:	4bb4      	ldr	r3, [pc, #720]	; (c58 <sd_mmc_check+0x340>)
     986:	681b      	ldr	r3, [r3, #0]
     988:	7ada      	ldrb	r2, [r3, #11]
     98a:	2309      	movs	r3, #9
     98c:	4013      	ands	r3, r2
     98e:	2b01      	cmp	r3, #1
     990:	d10f      	bne.n	9b2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     992:	2180      	movs	r1, #128	; 0x80
     994:	0089      	lsls	r1, r1, #2
     996:	48b4      	ldr	r0, [pc, #720]	; (c68 <sd_mmc_check+0x350>)
     998:	4bb1      	ldr	r3, [pc, #708]	; (c60 <sd_mmc_check+0x348>)
     99a:	4798      	blx	r3
     99c:	2800      	cmp	r0, #0
     99e:	d0db      	beq.n	958 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     9a0:	4bad      	ldr	r3, [pc, #692]	; (c58 <sd_mmc_check+0x340>)
     9a2:	681b      	ldr	r3, [r3, #0]
     9a4:	7adb      	ldrb	r3, [r3, #11]
     9a6:	07db      	lsls	r3, r3, #31
     9a8:	d503      	bpl.n	9b2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     9aa:	4bb0      	ldr	r3, [pc, #704]	; (c6c <sd_mmc_check+0x354>)
     9ac:	4798      	blx	r3
     9ae:	2800      	cmp	r0, #0
     9b0:	d0d2      	beq.n	958 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     9b2:	4baf      	ldr	r3, [pc, #700]	; (c70 <sd_mmc_check+0x358>)
     9b4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     9b6:	4ba8      	ldr	r3, [pc, #672]	; (c58 <sd_mmc_check+0x340>)
     9b8:	681b      	ldr	r3, [r3, #0]
     9ba:	2200      	movs	r2, #0
     9bc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     9be:	4ba5      	ldr	r3, [pc, #660]	; (c54 <sd_mmc_check+0x33c>)
     9c0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     9c2:	e7b4      	b.n	92e <sd_mmc_check+0x16>
	resp = driver_get_response();
     9c4:	4bab      	ldr	r3, [pc, #684]	; (c74 <sd_mmc_check+0x35c>)
     9c6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     9c8:	1c43      	adds	r3, r0, #1
     9ca:	d100      	bne.n	9ce <sd_mmc_check+0xb6>
     9cc:	e1c4      	b.n	d58 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     9ce:	0500      	lsls	r0, r0, #20
     9d0:	0d00      	lsrs	r0, r0, #20
     9d2:	23d5      	movs	r3, #213	; 0xd5
     9d4:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     9d6:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     9d8:	4298      	cmp	r0, r3
     9da:	d1bd      	bne.n	958 <sd_mmc_check+0x40>
     9dc:	e7cc      	b.n	978 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     9de:	2100      	movs	r1, #0
     9e0:	48a5      	ldr	r0, [pc, #660]	; (c78 <sd_mmc_check+0x360>)
     9e2:	4b9f      	ldr	r3, [pc, #636]	; (c60 <sd_mmc_check+0x348>)
     9e4:	4798      	blx	r3
     9e6:	2800      	cmp	r0, #0
     9e8:	d119      	bne.n	a1e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     9ea:	4b9b      	ldr	r3, [pc, #620]	; (c58 <sd_mmc_check+0x340>)
     9ec:	681b      	ldr	r3, [r3, #0]
     9ee:	2202      	movs	r2, #2
     9f0:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     9f2:	2100      	movs	r1, #0
     9f4:	2088      	movs	r0, #136	; 0x88
     9f6:	0140      	lsls	r0, r0, #5
     9f8:	4b99      	ldr	r3, [pc, #612]	; (c60 <sd_mmc_check+0x348>)
     9fa:	4798      	blx	r3
     9fc:	2800      	cmp	r0, #0
     9fe:	d0ab      	beq.n	958 <sd_mmc_check+0x40>
     a00:	4d9e      	ldr	r5, [pc, #632]	; (c7c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a02:	4f97      	ldr	r7, [pc, #604]	; (c60 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     a04:	4e9b      	ldr	r6, [pc, #620]	; (c74 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a06:	2100      	movs	r1, #0
     a08:	489d      	ldr	r0, [pc, #628]	; (c80 <sd_mmc_check+0x368>)
     a0a:	47b8      	blx	r7
     a0c:	2800      	cmp	r0, #0
     a0e:	d0a3      	beq.n	958 <sd_mmc_check+0x40>
		resp = driver_get_response();
     a10:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     a12:	07c3      	lsls	r3, r0, #31
     a14:	d57d      	bpl.n	b12 <sd_mmc_check+0x1fa>
     a16:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     a18:	2d00      	cmp	r5, #0
     a1a:	d1f4      	bne.n	a06 <sd_mmc_check+0xee>
     a1c:	e79c      	b.n	958 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     a1e:	4b95      	ldr	r3, [pc, #596]	; (c74 <sd_mmc_check+0x35c>)
     a20:	4798      	blx	r3
     a22:	0043      	lsls	r3, r0, #1
     a24:	d505      	bpl.n	a32 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     a26:	4b8c      	ldr	r3, [pc, #560]	; (c58 <sd_mmc_check+0x340>)
     a28:	681a      	ldr	r2, [r3, #0]
     a2a:	7ad3      	ldrb	r3, [r2, #11]
     a2c:	2108      	movs	r1, #8
     a2e:	430b      	orrs	r3, r1
     a30:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     a32:	2100      	movs	r1, #0
     a34:	4893      	ldr	r0, [pc, #588]	; (c84 <sd_mmc_check+0x36c>)
     a36:	4b8a      	ldr	r3, [pc, #552]	; (c60 <sd_mmc_check+0x348>)
     a38:	4798      	blx	r3
     a3a:	2800      	cmp	r0, #0
     a3c:	d08c      	beq.n	958 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a3e:	4b86      	ldr	r3, [pc, #536]	; (c58 <sd_mmc_check+0x340>)
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	7adb      	ldrb	r3, [r3, #11]
     a44:	07da      	lsls	r2, r3, #31
     a46:	d400      	bmi.n	a4a <sd_mmc_check+0x132>
     a48:	e1a4      	b.n	d94 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     a4a:	4b8f      	ldr	r3, [pc, #572]	; (c88 <sd_mmc_check+0x370>)
     a4c:	4798      	blx	r3
     a4e:	2800      	cmp	r0, #0
     a50:	d082      	beq.n	958 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     a52:	4b81      	ldr	r3, [pc, #516]	; (c58 <sd_mmc_check+0x340>)
     a54:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     a56:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     a58:	2107      	movs	r1, #7
     a5a:	4019      	ands	r1, r3
     a5c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     a5e:	488b      	ldr	r0, [pc, #556]	; (c8c <sd_mmc_check+0x374>)
     a60:	5808      	ldr	r0, [r1, r0]
     a62:	21fa      	movs	r1, #250	; 0xfa
     a64:	0089      	lsls	r1, r1, #2
     a66:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     a68:	065b      	lsls	r3, r3, #25
     a6a:	0f1b      	lsrs	r3, r3, #28
     a6c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     a6e:	4888      	ldr	r0, [pc, #544]	; (c90 <sd_mmc_check+0x378>)
     a70:	581b      	ldr	r3, [r3, r0]
     a72:	434b      	muls	r3, r1
     a74:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     a76:	7b93      	ldrb	r3, [r2, #14]
     a78:	099b      	lsrs	r3, r3, #6
     a7a:	d000      	beq.n	a7e <sd_mmc_check+0x166>
     a7c:	e13c      	b.n	cf8 <sd_mmc_check+0x3e0>
     a7e:	7d91      	ldrb	r1, [r2, #22]
     a80:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     a82:	7d53      	ldrb	r3, [r2, #21]
     a84:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a86:	7d10      	ldrb	r0, [r2, #20]
     a88:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a8a:	4303      	orrs	r3, r0
     a8c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     a8e:	7e10      	ldrb	r0, [r2, #24]
     a90:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     a92:	7dd1      	ldrb	r1, [r2, #23]
     a94:	0049      	lsls	r1, r1, #1
     a96:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     a98:	051b      	lsls	r3, r3, #20
     a9a:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     a9c:	3301      	adds	r3, #1
     a9e:	2107      	movs	r1, #7
     aa0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     aa2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     aa4:	408b      	lsls	r3, r1
     aa6:	7cd0      	ldrb	r0, [r2, #19]
     aa8:	210f      	movs	r1, #15
     aaa:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     aac:	408b      	lsls	r3, r1
				/ 1024;
     aae:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     ab0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     ab2:	8911      	ldrh	r1, [r2, #8]
     ab4:	0409      	lsls	r1, r1, #16
     ab6:	4877      	ldr	r0, [pc, #476]	; (c94 <sd_mmc_check+0x37c>)
     ab8:	4b69      	ldr	r3, [pc, #420]	; (c60 <sd_mmc_check+0x348>)
     aba:	4798      	blx	r3
     abc:	2800      	cmp	r0, #0
     abe:	d100      	bne.n	ac2 <sd_mmc_check+0x1aa>
     ac0:	e74a      	b.n	958 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     ac2:	2301      	movs	r3, #1
     ac4:	9300      	str	r3, [sp, #0]
     ac6:	2208      	movs	r2, #8
     ac8:	2100      	movs	r1, #0
     aca:	4873      	ldr	r0, [pc, #460]	; (c98 <sd_mmc_check+0x380>)
     acc:	4d73      	ldr	r5, [pc, #460]	; (c9c <sd_mmc_check+0x384>)
     ace:	47a8      	blx	r5
     ad0:	2800      	cmp	r0, #0
     ad2:	d100      	bne.n	ad6 <sd_mmc_check+0x1be>
     ad4:	e740      	b.n	958 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     ad6:	2101      	movs	r1, #1
     ad8:	a806      	add	r0, sp, #24
     ada:	4b71      	ldr	r3, [pc, #452]	; (ca0 <sd_mmc_check+0x388>)
     adc:	4798      	blx	r3
     ade:	2800      	cmp	r0, #0
     ae0:	d100      	bne.n	ae4 <sd_mmc_check+0x1cc>
     ae2:	e739      	b.n	958 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     ae4:	4b6f      	ldr	r3, [pc, #444]	; (ca4 <sd_mmc_check+0x38c>)
     ae6:	4798      	blx	r3
     ae8:	2800      	cmp	r0, #0
     aea:	d100      	bne.n	aee <sd_mmc_check+0x1d6>
     aec:	e734      	b.n	958 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     aee:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     af0:	781b      	ldrb	r3, [r3, #0]
     af2:	220f      	movs	r2, #15
     af4:	4013      	ands	r3, r2
     af6:	2b01      	cmp	r3, #1
     af8:	d100      	bne.n	afc <sd_mmc_check+0x1e4>
     afa:	e119      	b.n	d30 <sd_mmc_check+0x418>
     afc:	2b00      	cmp	r3, #0
     afe:	d100      	bne.n	b02 <sd_mmc_check+0x1ea>
     b00:	e109      	b.n	d16 <sd_mmc_check+0x3fe>
     b02:	2b02      	cmp	r3, #2
     b04:	d100      	bne.n	b08 <sd_mmc_check+0x1f0>
     b06:	e118      	b.n	d3a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     b08:	4b53      	ldr	r3, [pc, #332]	; (c58 <sd_mmc_check+0x340>)
     b0a:	681b      	ldr	r3, [r3, #0]
     b0c:	2210      	movs	r2, #16
     b0e:	731a      	strb	r2, [r3, #12]
     b10:	e105      	b.n	d1e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     b12:	2100      	movs	r1, #0
     b14:	4858      	ldr	r0, [pc, #352]	; (c78 <sd_mmc_check+0x360>)
     b16:	4b52      	ldr	r3, [pc, #328]	; (c60 <sd_mmc_check+0x348>)
     b18:	4798      	blx	r3
     b1a:	2800      	cmp	r0, #0
     b1c:	d100      	bne.n	b20 <sd_mmc_check+0x208>
     b1e:	e71b      	b.n	958 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     b20:	4b54      	ldr	r3, [pc, #336]	; (c74 <sd_mmc_check+0x35c>)
     b22:	4798      	blx	r3
     b24:	23c0      	movs	r3, #192	; 0xc0
     b26:	05db      	lsls	r3, r3, #23
     b28:	4018      	ands	r0, r3
     b2a:	2380      	movs	r3, #128	; 0x80
     b2c:	05db      	lsls	r3, r3, #23
     b2e:	4298      	cmp	r0, r3
     b30:	d105      	bne.n	b3e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     b32:	4b49      	ldr	r3, [pc, #292]	; (c58 <sd_mmc_check+0x340>)
     b34:	681a      	ldr	r2, [r3, #0]
     b36:	7ad1      	ldrb	r1, [r2, #11]
     b38:	2308      	movs	r3, #8
     b3a:	430b      	orrs	r3, r1
     b3c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     b3e:	2100      	movs	r1, #0
     b40:	4850      	ldr	r0, [pc, #320]	; (c84 <sd_mmc_check+0x36c>)
     b42:	4b47      	ldr	r3, [pc, #284]	; (c60 <sd_mmc_check+0x348>)
     b44:	4798      	blx	r3
     b46:	2800      	cmp	r0, #0
     b48:	d100      	bne.n	b4c <sd_mmc_check+0x234>
     b4a:	e705      	b.n	958 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     b4c:	4b4e      	ldr	r3, [pc, #312]	; (c88 <sd_mmc_check+0x370>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d100      	bne.n	b56 <sd_mmc_check+0x23e>
     b54:	e700      	b.n	958 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     b56:	4b40      	ldr	r3, [pc, #256]	; (c58 <sd_mmc_check+0x340>)
     b58:	681a      	ldr	r2, [r3, #0]
     b5a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     b5c:	069b      	lsls	r3, r3, #26
     b5e:	0f1b      	lsrs	r3, r3, #28
     b60:	2b02      	cmp	r3, #2
     b62:	d100      	bne.n	b66 <sd_mmc_check+0x24e>
     b64:	e0a8      	b.n	cb8 <sd_mmc_check+0x3a0>
     b66:	d907      	bls.n	b78 <sd_mmc_check+0x260>
     b68:	2b03      	cmp	r3, #3
     b6a:	d100      	bne.n	b6e <sd_mmc_check+0x256>
     b6c:	e0a7      	b.n	cbe <sd_mmc_check+0x3a6>
     b6e:	2b04      	cmp	r3, #4
     b70:	d104      	bne.n	b7c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     b72:	2340      	movs	r3, #64	; 0x40
     b74:	7313      	strb	r3, [r2, #12]
     b76:	e003      	b.n	b80 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     b78:	2b01      	cmp	r3, #1
     b7a:	d066      	beq.n	c4a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     b7c:	2312      	movs	r3, #18
     b7e:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b80:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     b82:	0659      	lsls	r1, r3, #25
     b84:	0f09      	lsrs	r1, r1, #28
     b86:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     b88:	2007      	movs	r0, #7
     b8a:	4003      	ands	r3, r0
     b8c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b8e:	483f      	ldr	r0, [pc, #252]	; (c8c <sd_mmc_check+0x374>)
     b90:	5818      	ldr	r0, [r3, r0]
     b92:	23fa      	movs	r3, #250	; 0xfa
     b94:	009b      	lsls	r3, r3, #2
     b96:	4343      	muls	r3, r0
     b98:	4843      	ldr	r0, [pc, #268]	; (ca8 <sd_mmc_check+0x390>)
     b9a:	5809      	ldr	r1, [r1, r0]
     b9c:	434b      	muls	r3, r1
     b9e:	6013      	str	r3, [r2, #0]
     ba0:	7d91      	ldrb	r1, [r2, #22]
     ba2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ba4:	7d53      	ldrb	r3, [r2, #21]
     ba6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ba8:	7d10      	ldrb	r0, [r2, #20]
     baa:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     bac:	4303      	orrs	r3, r0
     bae:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     bb0:	051b      	lsls	r3, r3, #20
     bb2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     bb4:	493d      	ldr	r1, [pc, #244]	; (cac <sd_mmc_check+0x394>)
     bb6:	428b      	cmp	r3, r1
     bb8:	d00f      	beq.n	bda <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     bba:	7e10      	ldrb	r0, [r2, #24]
     bbc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     bbe:	7dd1      	ldrb	r1, [r2, #23]
     bc0:	0049      	lsls	r1, r1, #1
     bc2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     bc4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     bc6:	2007      	movs	r0, #7
     bc8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     bca:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     bcc:	408b      	lsls	r3, r1
     bce:	7cd1      	ldrb	r1, [r2, #19]
     bd0:	3008      	adds	r0, #8
     bd2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     bd4:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     bd6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     bd8:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     bda:	7b13      	ldrb	r3, [r2, #12]
     bdc:	2b3f      	cmp	r3, #63	; 0x3f
     bde:	d97b      	bls.n	cd8 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     be0:	2100      	movs	r1, #0
     be2:	9100      	str	r1, [sp, #0]
     be4:	2301      	movs	r3, #1
     be6:	2280      	movs	r2, #128	; 0x80
     be8:	0092      	lsls	r2, r2, #2
     bea:	4831      	ldr	r0, [pc, #196]	; (cb0 <sd_mmc_check+0x398>)
     bec:	4d2b      	ldr	r5, [pc, #172]	; (c9c <sd_mmc_check+0x384>)
     bee:	47a8      	blx	r5
     bf0:	2800      	cmp	r0, #0
     bf2:	d100      	bne.n	bf6 <sd_mmc_check+0x2de>
     bf4:	e6b0      	b.n	958 <sd_mmc_check+0x40>
     bf6:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     bf8:	4e2e      	ldr	r6, [pc, #184]	; (cb4 <sd_mmc_check+0x39c>)
     bfa:	a805      	add	r0, sp, #20
     bfc:	47b0      	blx	r6
     bfe:	2800      	cmp	r0, #0
     c00:	d100      	bne.n	c04 <sd_mmc_check+0x2ec>
     c02:	e6a9      	b.n	958 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     c04:	3501      	adds	r5, #1
     c06:	b2ad      	uxth	r5, r5
     c08:	2d32      	cmp	r5, #50	; 0x32
     c0a:	d1f6      	bne.n	bfa <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     c0c:	4b12      	ldr	r3, [pc, #72]	; (c58 <sd_mmc_check+0x340>)
     c0e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c10:	7d8a      	ldrb	r2, [r1, #22]
     c12:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c14:	7d4b      	ldrb	r3, [r1, #21]
     c16:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c18:	7d09      	ldrb	r1, [r1, #20]
     c1a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c1c:	430b      	orrs	r3, r1
     c1e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     c20:	051b      	lsls	r3, r3, #20
     c22:	0d1b      	lsrs	r3, r3, #20
     c24:	4a21      	ldr	r2, [pc, #132]	; (cac <sd_mmc_check+0x394>)
     c26:	4293      	cmp	r3, r2
     c28:	d154      	bne.n	cd4 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     c2a:	4e22      	ldr	r6, [pc, #136]	; (cb4 <sd_mmc_check+0x39c>)
     c2c:	a806      	add	r0, sp, #24
     c2e:	47b0      	blx	r6
     c30:	2800      	cmp	r0, #0
     c32:	d100      	bne.n	c36 <sd_mmc_check+0x31e>
     c34:	e690      	b.n	958 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     c36:	3501      	adds	r5, #1
     c38:	b2ad      	uxth	r5, r5
     c3a:	2d35      	cmp	r5, #53	; 0x35
     c3c:	d9f6      	bls.n	c2c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     c3e:	4b06      	ldr	r3, [pc, #24]	; (c58 <sd_mmc_check+0x340>)
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	9b06      	ldr	r3, [sp, #24]
     c44:	085b      	lsrs	r3, r3, #1
     c46:	6053      	str	r3, [r2, #4]
     c48:	e044      	b.n	cd4 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     c4a:	2314      	movs	r3, #20
     c4c:	7313      	strb	r3, [r2, #12]
     c4e:	e797      	b.n	b80 <sd_mmc_check+0x268>
     c50:	000007fd 	.word	0x000007fd
     c54:	000008dd 	.word	0x000008dd
     c58:	200000a8 	.word	0x200000a8
     c5c:	0000150d 	.word	0x0000150d
     c60:	000016d5 	.word	0x000016d5
     c64:	00005508 	.word	0x00005508
     c68:	00001110 	.word	0x00001110
     c6c:	00000859 	.word	0x00000859
     c70:	000007d5 	.word	0x000007d5
     c74:	000016ed 	.word	0x000016ed
     c78:	0000053a 	.word	0x0000053a
     c7c:	00001bef 	.word	0x00001bef
     c80:	00001101 	.word	0x00001101
     c84:	0000113b 	.word	0x0000113b
     c88:	00000891 	.word	0x00000891
     c8c:	000066b8 	.word	0x000066b8
     c90:	000066d4 	.word	0x000066d4
     c94:	00001137 	.word	0x00001137
     c98:	00081133 	.word	0x00081133
     c9c:	00001545 	.word	0x00001545
     ca0:	00001771 	.word	0x00001771
     ca4:	000017fd 	.word	0x000017fd
     ca8:	00006678 	.word	0x00006678
     cac:	00000fff 	.word	0x00000fff
     cb0:	00081108 	.word	0x00081108
     cb4:	000016f9 	.word	0x000016f9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     cb8:	2322      	movs	r3, #34	; 0x22
     cba:	7313      	strb	r3, [r2, #12]
     cbc:	e760      	b.n	b80 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     cbe:	2330      	movs	r3, #48	; 0x30
     cc0:	7313      	strb	r3, [r2, #12]
     cc2:	e75d      	b.n	b80 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     cc4:	a806      	add	r0, sp, #24
     cc6:	4b36      	ldr	r3, [pc, #216]	; (da0 <sd_mmc_check+0x488>)
     cc8:	4798      	blx	r3
     cca:	2800      	cmp	r0, #0
     ccc:	d100      	bne.n	cd0 <sd_mmc_check+0x3b8>
     cce:	e643      	b.n	958 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     cd0:	3501      	adds	r5, #1
     cd2:	b2ad      	uxth	r5, r5
     cd4:	2d7f      	cmp	r5, #127	; 0x7f
     cd6:	d9f5      	bls.n	cc4 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     cd8:	2180      	movs	r1, #128	; 0x80
     cda:	0089      	lsls	r1, r1, #2
     cdc:	4831      	ldr	r0, [pc, #196]	; (da4 <sd_mmc_check+0x48c>)
     cde:	4b32      	ldr	r3, [pc, #200]	; (da8 <sd_mmc_check+0x490>)
     ce0:	4798      	blx	r3
     ce2:	2800      	cmp	r0, #0
     ce4:	d100      	bne.n	ce8 <sd_mmc_check+0x3d0>
     ce6:	e637      	b.n	958 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     ce8:	4b30      	ldr	r3, [pc, #192]	; (dac <sd_mmc_check+0x494>)
     cea:	4798      	blx	r3
     cec:	2800      	cmp	r0, #0
     cee:	d100      	bne.n	cf2 <sd_mmc_check+0x3da>
     cf0:	e632      	b.n	958 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     cf2:	4b2f      	ldr	r3, [pc, #188]	; (db0 <sd_mmc_check+0x498>)
     cf4:	4798      	blx	r3
     cf6:	e65e      	b.n	9b6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     cf8:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     cfa:	7d93      	ldrb	r3, [r2, #22]
     cfc:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cfe:	7d51      	ldrb	r1, [r2, #21]
     d00:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d02:	430b      	orrs	r3, r1
     d04:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     d06:	029b      	lsls	r3, r3, #10
				* 512;
     d08:	085b      	lsrs	r3, r3, #1
     d0a:	2180      	movs	r1, #128	; 0x80
     d0c:	0089      	lsls	r1, r1, #2
     d0e:	468c      	mov	ip, r1
     d10:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     d12:	6053      	str	r3, [r2, #4]
     d14:	e6cd      	b.n	ab2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     d16:	4b27      	ldr	r3, [pc, #156]	; (db4 <sd_mmc_check+0x49c>)
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	2210      	movs	r2, #16
     d1c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     d1e:	4b25      	ldr	r3, [pc, #148]	; (db4 <sd_mmc_check+0x49c>)
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	7adb      	ldrb	r3, [r3, #11]
     d24:	2209      	movs	r2, #9
     d26:	4013      	ands	r3, r2
     d28:	2b01      	cmp	r3, #1
     d2a:	d000      	beq.n	d2e <sd_mmc_check+0x416>
     d2c:	e638      	b.n	9a0 <sd_mmc_check+0x88>
     d2e:	e630      	b.n	992 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     d30:	4b20      	ldr	r3, [pc, #128]	; (db4 <sd_mmc_check+0x49c>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	221a      	movs	r2, #26
     d36:	731a      	strb	r2, [r3, #12]
     d38:	e7f1      	b.n	d1e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d3a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     d3c:	789b      	ldrb	r3, [r3, #2]
     d3e:	09db      	lsrs	r3, r3, #7
     d40:	2b01      	cmp	r3, #1
     d42:	d104      	bne.n	d4e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     d44:	4b1b      	ldr	r3, [pc, #108]	; (db4 <sd_mmc_check+0x49c>)
     d46:	681b      	ldr	r3, [r3, #0]
     d48:	2230      	movs	r2, #48	; 0x30
     d4a:	731a      	strb	r2, [r3, #12]
     d4c:	e7e7      	b.n	d1e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     d4e:	4b19      	ldr	r3, [pc, #100]	; (db4 <sd_mmc_check+0x49c>)
     d50:	681b      	ldr	r3, [r3, #0]
     d52:	2220      	movs	r2, #32
     d54:	731a      	strb	r2, [r3, #12]
     d56:	e7e2      	b.n	d1e <sd_mmc_check+0x406>
	*v2 = 0;
     d58:	2600      	movs	r6, #0
     d5a:	e60d      	b.n	978 <sd_mmc_check+0x60>
     d5c:	1e73      	subs	r3, r6, #1
     d5e:	419e      	sbcs	r6, r3
     d60:	07b3      	lsls	r3, r6, #30
     d62:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d64:	4d14      	ldr	r5, [pc, #80]	; (db8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     d66:	4f10      	ldr	r7, [pc, #64]	; (da8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     d68:	46b8      	mov	r8, r7
		resp = driver_get_response();
     d6a:	4e14      	ldr	r6, [pc, #80]	; (dbc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     d6c:	2100      	movs	r1, #0
     d6e:	4814      	ldr	r0, [pc, #80]	; (dc0 <sd_mmc_check+0x4a8>)
     d70:	47b8      	blx	r7
     d72:	2800      	cmp	r0, #0
     d74:	d100      	bne.n	d78 <sd_mmc_check+0x460>
     d76:	e638      	b.n	9ea <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     d78:	9903      	ldr	r1, [sp, #12]
     d7a:	4812      	ldr	r0, [pc, #72]	; (dc4 <sd_mmc_check+0x4ac>)
     d7c:	47c0      	blx	r8
     d7e:	2800      	cmp	r0, #0
     d80:	d100      	bne.n	d84 <sd_mmc_check+0x46c>
     d82:	e632      	b.n	9ea <sd_mmc_check+0xd2>
		resp = driver_get_response();
     d84:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     d86:	07c3      	lsls	r3, r0, #31
     d88:	d400      	bmi.n	d8c <sd_mmc_check+0x474>
     d8a:	e628      	b.n	9de <sd_mmc_check+0xc6>
     d8c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     d8e:	2d00      	cmp	r5, #0
     d90:	d1ec      	bne.n	d6c <sd_mmc_check+0x454>
     d92:	e62a      	b.n	9ea <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     d94:	2209      	movs	r2, #9
     d96:	4013      	ands	r3, r2
     d98:	2b01      	cmp	r3, #1
     d9a:	d000      	beq.n	d9e <sd_mmc_check+0x486>
     d9c:	e609      	b.n	9b2 <sd_mmc_check+0x9a>
     d9e:	e5f8      	b.n	992 <sd_mmc_check+0x7a>
     da0:	000016f9 	.word	0x000016f9
     da4:	00001110 	.word	0x00001110
     da8:	000016d5 	.word	0x000016d5
     dac:	00000859 	.word	0x00000859
     db0:	000007d5 	.word	0x000007d5
     db4:	200000a8 	.word	0x200000a8
     db8:	00001bef 	.word	0x00001bef
     dbc:	000016ed 	.word	0x000016ed
     dc0:	00001137 	.word	0x00001137
     dc4:	00001129 	.word	0x00001129

00000dc8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     dc8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     dca:	4b06      	ldr	r3, [pc, #24]	; (de4 <sd_mmc_get_type+0x1c>)
     dcc:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     dce:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     dd0:	2800      	cmp	r0, #0
     dd2:	d001      	beq.n	dd8 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     dd4:	0018      	movs	r0, r3
     dd6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     dd8:	4b03      	ldr	r3, [pc, #12]	; (de8 <sd_mmc_get_type+0x20>)
     dda:	4798      	blx	r3
	return sd_mmc_card->type;
     ddc:	4b03      	ldr	r3, [pc, #12]	; (dec <sd_mmc_get_type+0x24>)
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	7adb      	ldrb	r3, [r3, #11]
     de2:	e7f7      	b.n	dd4 <sd_mmc_get_type+0xc>
     de4:	000007fd 	.word	0x000007fd
     de8:	000008dd 	.word	0x000008dd
     dec:	200000a8 	.word	0x200000a8

00000df0 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     df0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <sd_mmc_get_capacity+0x1c>)
     df4:	4798      	blx	r3
		return 0;
     df6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     df8:	2800      	cmp	r0, #0
     dfa:	d001      	beq.n	e00 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     dfc:	0018      	movs	r0, r3
     dfe:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e00:	4b03      	ldr	r3, [pc, #12]	; (e10 <sd_mmc_get_capacity+0x20>)
     e02:	4798      	blx	r3
	return sd_mmc_card->capacity;
     e04:	4b03      	ldr	r3, [pc, #12]	; (e14 <sd_mmc_get_capacity+0x24>)
     e06:	681b      	ldr	r3, [r3, #0]
     e08:	685b      	ldr	r3, [r3, #4]
     e0a:	e7f7      	b.n	dfc <sd_mmc_get_capacity+0xc>
     e0c:	000007fd 	.word	0x000007fd
     e10:	000008dd 	.word	0x000008dd
     e14:	200000a8 	.word	0x200000a8

00000e18 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     e18:	2000      	movs	r0, #0
     e1a:	4770      	bx	lr

00000e1c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	b082      	sub	sp, #8
     e20:	000e      	movs	r6, r1
     e22:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     e24:	4b16      	ldr	r3, [pc, #88]	; (e80 <sd_mmc_init_read_blocks+0x64>)
     e26:	4798      	blx	r3
     e28:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     e2a:	d002      	beq.n	e32 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     e2c:	0020      	movs	r0, r4
     e2e:	b002      	add	sp, #8
     e30:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     e32:	4b14      	ldr	r3, [pc, #80]	; (e84 <sd_mmc_init_read_blocks+0x68>)
     e34:	4798      	blx	r3
     e36:	2800      	cmp	r0, #0
     e38:	d017      	beq.n	e6a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     e3a:	2d01      	cmp	r5, #1
     e3c:	d919      	bls.n	e72 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     e3e:	4812      	ldr	r0, [pc, #72]	; (e88 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     e40:	4b12      	ldr	r3, [pc, #72]	; (e8c <sd_mmc_init_read_blocks+0x70>)
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	7adb      	ldrb	r3, [r3, #11]
     e46:	071b      	lsls	r3, r3, #28
     e48:	d400      	bmi.n	e4c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     e4a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     e4c:	2301      	movs	r3, #1
     e4e:	9300      	str	r3, [sp, #0]
     e50:	002b      	movs	r3, r5
     e52:	2280      	movs	r2, #128	; 0x80
     e54:	0092      	lsls	r2, r2, #2
     e56:	0031      	movs	r1, r6
     e58:	4e0d      	ldr	r6, [pc, #52]	; (e90 <sd_mmc_init_read_blocks+0x74>)
     e5a:	47b0      	blx	r6
     e5c:	2800      	cmp	r0, #0
     e5e:	d00a      	beq.n	e76 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     e60:	4b0c      	ldr	r3, [pc, #48]	; (e94 <sd_mmc_init_read_blocks+0x78>)
     e62:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     e64:	4b0c      	ldr	r3, [pc, #48]	; (e98 <sd_mmc_init_read_blocks+0x7c>)
     e66:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     e68:	e7e0      	b.n	e2c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     e6a:	4b0c      	ldr	r3, [pc, #48]	; (e9c <sd_mmc_init_read_blocks+0x80>)
     e6c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     e6e:	3405      	adds	r4, #5
     e70:	e7dc      	b.n	e2c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     e72:	480b      	ldr	r0, [pc, #44]	; (ea0 <sd_mmc_init_read_blocks+0x84>)
     e74:	e7e4      	b.n	e40 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     e76:	4b09      	ldr	r3, [pc, #36]	; (e9c <sd_mmc_init_read_blocks+0x80>)
     e78:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     e7a:	2405      	movs	r4, #5
     e7c:	e7d6      	b.n	e2c <sd_mmc_init_read_blocks+0x10>
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	000007fd 	.word	0x000007fd
     e84:	00000859 	.word	0x00000859
     e88:	00101112 	.word	0x00101112
     e8c:	200000a8 	.word	0x200000a8
     e90:	00001545 	.word	0x00001545
     e94:	200000cc 	.word	0x200000cc
     e98:	200000ce 	.word	0x200000ce
     e9c:	000008dd 	.word	0x000008dd
     ea0:	00081111 	.word	0x00081111

00000ea4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     ea4:	b510      	push	{r4, lr}
     ea6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     ea8:	4b07      	ldr	r3, [pc, #28]	; (ec8 <sd_mmc_start_read_blocks+0x24>)
     eaa:	4798      	blx	r3
     eac:	2800      	cmp	r0, #0
     eae:	d104      	bne.n	eba <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     eb0:	2200      	movs	r2, #0
     eb2:	4b06      	ldr	r3, [pc, #24]	; (ecc <sd_mmc_start_read_blocks+0x28>)
     eb4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     eb6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     eb8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     eba:	4a04      	ldr	r2, [pc, #16]	; (ecc <sd_mmc_start_read_blocks+0x28>)
     ebc:	8813      	ldrh	r3, [r2, #0]
     ebe:	1b1c      	subs	r4, r3, r4
     ec0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     ec2:	2000      	movs	r0, #0
     ec4:	e7f8      	b.n	eb8 <sd_mmc_start_read_blocks+0x14>
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	00001771 	.word	0x00001771
     ecc:	200000cc 	.word	0x200000cc

00000ed0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     ed0:	b510      	push	{r4, lr}
     ed2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     ed4:	4b14      	ldr	r3, [pc, #80]	; (f28 <sd_mmc_wait_end_of_read_blocks+0x58>)
     ed6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     ed8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     eda:	2800      	cmp	r0, #0
     edc:	d101      	bne.n	ee2 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     ede:	0018      	movs	r0, r3
     ee0:	bd10      	pop	{r4, pc}
	if (abort) {
     ee2:	2c00      	cmp	r4, #0
     ee4:	d010      	beq.n	f08 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     ee6:	2200      	movs	r2, #0
     ee8:	4b10      	ldr	r3, [pc, #64]	; (f2c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     eea:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     eec:	4b10      	ldr	r3, [pc, #64]	; (f30 <sd_mmc_wait_end_of_read_blocks+0x60>)
     eee:	881b      	ldrh	r3, [r3, #0]
     ef0:	2b01      	cmp	r3, #1
     ef2:	d00f      	beq.n	f14 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     ef4:	2100      	movs	r1, #0
     ef6:	480f      	ldr	r0, [pc, #60]	; (f34 <sd_mmc_wait_end_of_read_blocks+0x64>)
     ef8:	4b0f      	ldr	r3, [pc, #60]	; (f38 <sd_mmc_wait_end_of_read_blocks+0x68>)
     efa:	4798      	blx	r3
     efc:	2800      	cmp	r0, #0
     efe:	d00d      	beq.n	f1c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     f00:	4b0e      	ldr	r3, [pc, #56]	; (f3c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     f02:	4798      	blx	r3
	return SD_MMC_OK;
     f04:	2300      	movs	r3, #0
     f06:	e7ea      	b.n	ede <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     f08:	4b08      	ldr	r3, [pc, #32]	; (f2c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f0a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     f0c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     f0e:	2a00      	cmp	r2, #0
     f10:	d0ec      	beq.n	eec <sd_mmc_wait_end_of_read_blocks+0x1c>
     f12:	e7e4      	b.n	ede <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     f14:	4b09      	ldr	r3, [pc, #36]	; (f3c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     f16:	4798      	blx	r3
		return SD_MMC_OK;
     f18:	2300      	movs	r3, #0
     f1a:	e7e0      	b.n	ede <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     f1c:	2100      	movs	r1, #0
     f1e:	4805      	ldr	r0, [pc, #20]	; (f34 <sd_mmc_wait_end_of_read_blocks+0x64>)
     f20:	4b05      	ldr	r3, [pc, #20]	; (f38 <sd_mmc_wait_end_of_read_blocks+0x68>)
     f22:	4798      	blx	r3
     f24:	e7ec      	b.n	f00 <sd_mmc_wait_end_of_read_blocks+0x30>
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	000017fd 	.word	0x000017fd
     f2c:	200000cc 	.word	0x200000cc
     f30:	200000ce 	.word	0x200000ce
     f34:	0000310c 	.word	0x0000310c
     f38:	000016d5 	.word	0x000016d5
     f3c:	000008dd 	.word	0x000008dd

00000f40 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     f40:	b570      	push	{r4, r5, r6, lr}
     f42:	b082      	sub	sp, #8
     f44:	000e      	movs	r6, r1
     f46:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     f48:	4b11      	ldr	r3, [pc, #68]	; (f90 <sd_mmc_init_write_blocks+0x50>)
     f4a:	4798      	blx	r3
     f4c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     f4e:	d116      	bne.n	f7e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     f50:	2d01      	cmp	r5, #1
     f52:	d917      	bls.n	f84 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     f54:	480f      	ldr	r0, [pc, #60]	; (f94 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     f56:	4b10      	ldr	r3, [pc, #64]	; (f98 <sd_mmc_init_write_blocks+0x58>)
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	7adb      	ldrb	r3, [r3, #11]
     f5c:	071b      	lsls	r3, r3, #28
     f5e:	d400      	bmi.n	f62 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     f60:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     f62:	2301      	movs	r3, #1
     f64:	9300      	str	r3, [sp, #0]
     f66:	002b      	movs	r3, r5
     f68:	2280      	movs	r2, #128	; 0x80
     f6a:	0092      	lsls	r2, r2, #2
     f6c:	0031      	movs	r1, r6
     f6e:	4e0b      	ldr	r6, [pc, #44]	; (f9c <sd_mmc_init_write_blocks+0x5c>)
     f70:	47b0      	blx	r6
     f72:	2800      	cmp	r0, #0
     f74:	d008      	beq.n	f88 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     f76:	4b0a      	ldr	r3, [pc, #40]	; (fa0 <sd_mmc_init_write_blocks+0x60>)
     f78:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     f7a:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <sd_mmc_init_write_blocks+0x64>)
     f7c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     f7e:	0020      	movs	r0, r4
     f80:	b002      	add	sp, #8
     f82:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     f84:	4808      	ldr	r0, [pc, #32]	; (fa8 <sd_mmc_init_write_blocks+0x68>)
     f86:	e7e6      	b.n	f56 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     f88:	4b08      	ldr	r3, [pc, #32]	; (fac <sd_mmc_init_write_blocks+0x6c>)
     f8a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f8c:	2405      	movs	r4, #5
     f8e:	e7f6      	b.n	f7e <sd_mmc_init_write_blocks+0x3e>
     f90:	000007fd 	.word	0x000007fd
     f94:	00109119 	.word	0x00109119
     f98:	200000a8 	.word	0x200000a8
     f9c:	00001545 	.word	0x00001545
     fa0:	200000cc 	.word	0x200000cc
     fa4:	200000ce 	.word	0x200000ce
     fa8:	00089118 	.word	0x00089118
     fac:	000008dd 	.word	0x000008dd

00000fb0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     fb0:	b510      	push	{r4, lr}
     fb2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     fb4:	4b07      	ldr	r3, [pc, #28]	; (fd4 <sd_mmc_start_write_blocks+0x24>)
     fb6:	4798      	blx	r3
     fb8:	2800      	cmp	r0, #0
     fba:	d104      	bne.n	fc6 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     fbc:	2200      	movs	r2, #0
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <sd_mmc_start_write_blocks+0x28>)
     fc0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     fc2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     fc4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     fc6:	4a04      	ldr	r2, [pc, #16]	; (fd8 <sd_mmc_start_write_blocks+0x28>)
     fc8:	8813      	ldrh	r3, [r2, #0]
     fca:	1b1c      	subs	r4, r3, r4
     fcc:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     fce:	2000      	movs	r0, #0
     fd0:	e7f8      	b.n	fc4 <sd_mmc_start_write_blocks+0x14>
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	00001801 	.word	0x00001801
     fd8:	200000cc 	.word	0x200000cc

00000fdc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     fdc:	b510      	push	{r4, lr}
     fde:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     fe0:	4b0e      	ldr	r3, [pc, #56]	; (101c <sd_mmc_wait_end_of_write_blocks+0x40>)
     fe2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     fe4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     fe6:	2800      	cmp	r0, #0
     fe8:	d101      	bne.n	fee <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     fea:	0018      	movs	r0, r3
     fec:	bd10      	pop	{r4, pc}
	if (abort) {
     fee:	2c00      	cmp	r4, #0
     ff0:	d00a      	beq.n	1008 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     ff2:	2200      	movs	r2, #0
     ff4:	4b0a      	ldr	r3, [pc, #40]	; (1020 <sd_mmc_wait_end_of_write_blocks+0x44>)
     ff6:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     ff8:	4b0a      	ldr	r3, [pc, #40]	; (1024 <sd_mmc_wait_end_of_write_blocks+0x48>)
     ffa:	881b      	ldrh	r3, [r3, #0]
     ffc:	2b01      	cmp	r3, #1
     ffe:	d009      	beq.n	1014 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1000:	4b09      	ldr	r3, [pc, #36]	; (1028 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1002:	4798      	blx	r3
	return SD_MMC_OK;
    1004:	2300      	movs	r3, #0
    1006:	e7f0      	b.n	fea <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1008:	4b05      	ldr	r3, [pc, #20]	; (1020 <sd_mmc_wait_end_of_write_blocks+0x44>)
    100a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    100c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    100e:	2a00      	cmp	r2, #0
    1010:	d0f2      	beq.n	ff8 <sd_mmc_wait_end_of_write_blocks+0x1c>
    1012:	e7ea      	b.n	fea <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1016:	4798      	blx	r3
		return SD_MMC_OK;
    1018:	2300      	movs	r3, #0
    101a:	e7e6      	b.n	fea <sd_mmc_wait_end_of_write_blocks+0xe>
    101c:	00001881 	.word	0x00001881
    1020:	200000cc 	.word	0x200000cc
    1024:	200000ce 	.word	0x200000ce
    1028:	000008dd 	.word	0x000008dd

0000102c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    102c:	b510      	push	{r4, lr}
    102e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    1030:	4b0f      	ldr	r3, [pc, #60]	; (1070 <sd_mmc_test_unit_ready+0x44>)
    1032:	4798      	blx	r3
    1034:	2801      	cmp	r0, #1
    1036:	d019      	beq.n	106c <sd_mmc_test_unit_ready+0x40>
    1038:	2800      	cmp	r0, #0
    103a:	d003      	beq.n	1044 <sd_mmc_test_unit_ready+0x18>
    103c:	2802      	cmp	r0, #2
    103e:	d010      	beq.n	1062 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    1040:	2001      	movs	r0, #1
	}
}
    1042:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    1044:	4b0b      	ldr	r3, [pc, #44]	; (1074 <sd_mmc_test_unit_ready+0x48>)
    1046:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    1048:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    104a:	2b00      	cmp	r3, #0
    104c:	d1f9      	bne.n	1042 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    104e:	0020      	movs	r0, r4
    1050:	4b09      	ldr	r3, [pc, #36]	; (1078 <sd_mmc_test_unit_ready+0x4c>)
    1052:	4798      	blx	r3
    1054:	0003      	movs	r3, r0
    1056:	2003      	movs	r0, #3
    1058:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    105a:	4243      	negs	r3, r0
    105c:	4158      	adcs	r0, r3
    105e:	0040      	lsls	r0, r0, #1
    1060:	e7ef      	b.n	1042 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    1062:	2200      	movs	r2, #0
    1064:	4b03      	ldr	r3, [pc, #12]	; (1074 <sd_mmc_test_unit_ready+0x48>)
    1066:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    1068:	2002      	movs	r0, #2
    106a:	e7ea      	b.n	1042 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    106c:	2003      	movs	r0, #3
    106e:	e7e8      	b.n	1042 <sd_mmc_test_unit_ready+0x16>
    1070:	00000919 	.word	0x00000919
    1074:	200000d4 	.word	0x200000d4
    1078:	00000dc9 	.word	0x00000dc9

0000107c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    107c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    107e:	2000      	movs	r0, #0
    1080:	4b01      	ldr	r3, [pc, #4]	; (1088 <sd_mmc_test_unit_ready_0+0xc>)
    1082:	4798      	blx	r3
}
    1084:	bd10      	pop	{r4, pc}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	0000102d 	.word	0x0000102d

0000108c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    108c:	b570      	push	{r4, r5, r6, lr}
    108e:	0004      	movs	r4, r0
    1090:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <sd_mmc_read_capacity+0x18>)
    1094:	4798      	blx	r3
    1096:	0040      	lsls	r0, r0, #1
    1098:	3801      	subs	r0, #1
    109a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    109c:	0020      	movs	r0, r4
    109e:	4b02      	ldr	r3, [pc, #8]	; (10a8 <sd_mmc_read_capacity+0x1c>)
    10a0:	4798      	blx	r3
}
    10a2:	bd70      	pop	{r4, r5, r6, pc}
    10a4:	00000df1 	.word	0x00000df1
    10a8:	0000102d 	.word	0x0000102d

000010ac <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    10ac:	b510      	push	{r4, lr}
    10ae:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    10b0:	2000      	movs	r0, #0
    10b2:	4b01      	ldr	r3, [pc, #4]	; (10b8 <sd_mmc_read_capacity_0+0xc>)
    10b4:	4798      	blx	r3
}
    10b6:	bd10      	pop	{r4, pc}
    10b8:	0000108d 	.word	0x0000108d

000010bc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    10bc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    10be:	2000      	movs	r0, #0
    10c0:	4b01      	ldr	r3, [pc, #4]	; (10c8 <sd_mmc_wr_protect_0+0xc>)
    10c2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    10c4:	bd10      	pop	{r4, pc}
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	00000e19 	.word	0x00000e19

000010cc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    10cc:	b510      	push	{r4, lr}
    10ce:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    10d0:	2201      	movs	r2, #1
    10d2:	4b0c      	ldr	r3, [pc, #48]	; (1104 <sd_mmc_mem_2_ram+0x38>)
    10d4:	4798      	blx	r3
    10d6:	2800      	cmp	r0, #0
    10d8:	d004      	beq.n	10e4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    10da:	3802      	subs	r0, #2
    10dc:	4243      	negs	r3, r0
    10de:	4158      	adcs	r0, r3
    10e0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    10e2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    10e4:	2101      	movs	r1, #1
    10e6:	0020      	movs	r0, r4
    10e8:	4b07      	ldr	r3, [pc, #28]	; (1108 <sd_mmc_mem_2_ram+0x3c>)
    10ea:	4798      	blx	r3
    10ec:	0003      	movs	r3, r0
		return CTRL_FAIL;
    10ee:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    10f0:	2b00      	cmp	r3, #0
    10f2:	d1f6      	bne.n	10e2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    10f4:	2000      	movs	r0, #0
    10f6:	4b05      	ldr	r3, [pc, #20]	; (110c <sd_mmc_mem_2_ram+0x40>)
    10f8:	4798      	blx	r3
    10fa:	1e43      	subs	r3, r0, #1
    10fc:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    10fe:	b2c0      	uxtb	r0, r0
    1100:	e7ef      	b.n	10e2 <sd_mmc_mem_2_ram+0x16>
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	00000e1d 	.word	0x00000e1d
    1108:	00000ea5 	.word	0x00000ea5
    110c:	00000ed1 	.word	0x00000ed1

00001110 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    1110:	b510      	push	{r4, lr}
    1112:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    1114:	0001      	movs	r1, r0
    1116:	2000      	movs	r0, #0
    1118:	4b01      	ldr	r3, [pc, #4]	; (1120 <sd_mmc_mem_2_ram_0+0x10>)
    111a:	4798      	blx	r3
}
    111c:	bd10      	pop	{r4, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	000010cd 	.word	0x000010cd

00001124 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    1124:	b510      	push	{r4, lr}
    1126:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    1128:	2201      	movs	r2, #1
    112a:	4b0c      	ldr	r3, [pc, #48]	; (115c <sd_mmc_ram_2_mem+0x38>)
    112c:	4798      	blx	r3
    112e:	2800      	cmp	r0, #0
    1130:	d004      	beq.n	113c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    1132:	3802      	subs	r0, #2
    1134:	4243      	negs	r3, r0
    1136:	4158      	adcs	r0, r3
    1138:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    113a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    113c:	2101      	movs	r1, #1
    113e:	0020      	movs	r0, r4
    1140:	4b07      	ldr	r3, [pc, #28]	; (1160 <sd_mmc_ram_2_mem+0x3c>)
    1142:	4798      	blx	r3
    1144:	0003      	movs	r3, r0
		return CTRL_FAIL;
    1146:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    1148:	2b00      	cmp	r3, #0
    114a:	d1f6      	bne.n	113a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    114c:	2000      	movs	r0, #0
    114e:	4b05      	ldr	r3, [pc, #20]	; (1164 <sd_mmc_ram_2_mem+0x40>)
    1150:	4798      	blx	r3
    1152:	1e43      	subs	r3, r0, #1
    1154:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    1156:	b2c0      	uxtb	r0, r0
    1158:	e7ef      	b.n	113a <sd_mmc_ram_2_mem+0x16>
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	00000f41 	.word	0x00000f41
    1160:	00000fb1 	.word	0x00000fb1
    1164:	00000fdd 	.word	0x00000fdd

00001168 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1168:	b510      	push	{r4, lr}
    116a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    116c:	0001      	movs	r1, r0
    116e:	2000      	movs	r0, #0
    1170:	4b01      	ldr	r3, [pc, #4]	; (1178 <sd_mmc_ram_2_mem_0+0x10>)
    1172:	4798      	blx	r3
}
    1174:	bd10      	pop	{r4, pc}
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00001125 	.word	0x00001125

0000117c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    117c:	b500      	push	{lr}
    117e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    1180:	466b      	mov	r3, sp
    1182:	1dd9      	adds	r1, r3, #7
    1184:	23ff      	movs	r3, #255	; 0xff
    1186:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    1188:	2201      	movs	r2, #1
    118a:	480b      	ldr	r0, [pc, #44]	; (11b8 <sd_mmc_spi_start_write_block+0x3c>)
    118c:	4b0b      	ldr	r3, [pc, #44]	; (11bc <sd_mmc_spi_start_write_block+0x40>)
    118e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    1190:	4b0b      	ldr	r3, [pc, #44]	; (11c0 <sd_mmc_spi_start_write_block+0x44>)
    1192:	881b      	ldrh	r3, [r3, #0]
    1194:	2b01      	cmp	r3, #1
    1196:	d00a      	beq.n	11ae <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    1198:	22fc      	movs	r2, #252	; 0xfc
    119a:	466b      	mov	r3, sp
    119c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    119e:	2201      	movs	r2, #1
    11a0:	466b      	mov	r3, sp
    11a2:	1d99      	adds	r1, r3, #6
    11a4:	4804      	ldr	r0, [pc, #16]	; (11b8 <sd_mmc_spi_start_write_block+0x3c>)
    11a6:	4b05      	ldr	r3, [pc, #20]	; (11bc <sd_mmc_spi_start_write_block+0x40>)
    11a8:	4798      	blx	r3
}
    11aa:	b003      	add	sp, #12
    11ac:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    11ae:	22fe      	movs	r2, #254	; 0xfe
    11b0:	466b      	mov	r3, sp
    11b2:	719a      	strb	r2, [r3, #6]
    11b4:	e7f3      	b.n	119e <sd_mmc_spi_start_write_block+0x22>
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	200000d8 	.word	0x200000d8
    11bc:	00002491 	.word	0x00002491
    11c0:	2000011c 	.word	0x2000011c

000011c4 <sd_mmc_spi_wait_busy>:
{
    11c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11c6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    11c8:	466b      	mov	r3, sp
    11ca:	1ddc      	adds	r4, r3, #7
    11cc:	23ff      	movs	r3, #255	; 0xff
    11ce:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    11d0:	4e12      	ldr	r6, [pc, #72]	; (121c <sd_mmc_spi_wait_busy+0x58>)
    11d2:	2201      	movs	r2, #1
    11d4:	0021      	movs	r1, r4
    11d6:	0030      	movs	r0, r6
    11d8:	4d11      	ldr	r5, [pc, #68]	; (1220 <sd_mmc_spi_wait_busy+0x5c>)
    11da:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    11dc:	23ff      	movs	r3, #255	; 0xff
    11de:	2201      	movs	r2, #1
    11e0:	0021      	movs	r1, r4
    11e2:	0030      	movs	r0, r6
    11e4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    11e6:	23ff      	movs	r3, #255	; 0xff
    11e8:	2201      	movs	r2, #1
    11ea:	0021      	movs	r1, r4
    11ec:	0030      	movs	r0, r6
    11ee:	47a8      	blx	r5
    11f0:	4c0c      	ldr	r4, [pc, #48]	; (1224 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    11f2:	466b      	mov	r3, sp
    11f4:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    11f6:	4e09      	ldr	r6, [pc, #36]	; (121c <sd_mmc_spi_wait_busy+0x58>)
    11f8:	4f09      	ldr	r7, [pc, #36]	; (1220 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    11fa:	782b      	ldrb	r3, [r5, #0]
    11fc:	2bff      	cmp	r3, #255	; 0xff
    11fe:	d009      	beq.n	1214 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1200:	23ff      	movs	r3, #255	; 0xff
    1202:	2201      	movs	r2, #1
    1204:	0029      	movs	r1, r5
    1206:	0030      	movs	r0, r6
    1208:	47b8      	blx	r7
    120a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    120c:	2c00      	cmp	r4, #0
    120e:	d1f4      	bne.n	11fa <sd_mmc_spi_wait_busy+0x36>
			return false;
    1210:	2000      	movs	r0, #0
    1212:	e000      	b.n	1216 <sd_mmc_spi_wait_busy+0x52>
	return true;
    1214:	2001      	movs	r0, #1
}
    1216:	b003      	add	sp, #12
    1218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	200000d8 	.word	0x200000d8
    1220:	000022c9 	.word	0x000022c9
    1224:	00030d40 	.word	0x00030d40

00001228 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    1228:	b570      	push	{r4, r5, r6, lr}
    122a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    122c:	4b14      	ldr	r3, [pc, #80]	; (1280 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    122e:	881c      	ldrh	r4, [r3, #0]
    1230:	2c01      	cmp	r4, #1
    1232:	d023      	beq.n	127c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    1234:	4b13      	ldr	r3, [pc, #76]	; (1284 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    1236:	8819      	ldrh	r1, [r3, #0]
    1238:	4b13      	ldr	r3, [pc, #76]	; (1288 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    123a:	6818      	ldr	r0, [r3, #0]
    123c:	4b13      	ldr	r3, [pc, #76]	; (128c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    123e:	4798      	blx	r3
		return true; // It is not the End of multi write
    1240:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    1242:	4284      	cmp	r4, r0
    1244:	d902      	bls.n	124c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    1246:	0018      	movs	r0, r3
    1248:	b002      	add	sp, #8
    124a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    124c:	466b      	mov	r3, sp
    124e:	1ddc      	adds	r4, r3, #7
    1250:	23ff      	movs	r3, #255	; 0xff
    1252:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    1254:	4e0e      	ldr	r6, [pc, #56]	; (1290 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    1256:	2201      	movs	r2, #1
    1258:	0021      	movs	r1, r4
    125a:	0030      	movs	r0, r6
    125c:	4d0d      	ldr	r5, [pc, #52]	; (1294 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    125e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    1260:	23fd      	movs	r3, #253	; 0xfd
    1262:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    1264:	2201      	movs	r2, #1
    1266:	0021      	movs	r1, r4
    1268:	0030      	movs	r0, r6
    126a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    126c:	4b0a      	ldr	r3, [pc, #40]	; (1298 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    126e:	4798      	blx	r3
    1270:	1e03      	subs	r3, r0, #0
    1272:	d1e8      	bne.n	1246 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1274:	2105      	movs	r1, #5
    1276:	4a09      	ldr	r2, [pc, #36]	; (129c <sd_mmc_spi_stop_multiwrite_block+0x74>)
    1278:	7011      	strb	r1, [r2, #0]
		return false;
    127a:	e7e4      	b.n	1246 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    127c:	2301      	movs	r3, #1
    127e:	e7e2      	b.n	1246 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    1280:	2000011c 	.word	0x2000011c
    1284:	20000114 	.word	0x20000114
    1288:	20000124 	.word	0x20000124
    128c:	00005739 	.word	0x00005739
    1290:	200000d8 	.word	0x200000d8
    1294:	00002491 	.word	0x00002491
    1298:	000011c5 	.word	0x000011c5
    129c:	2000011b 	.word	0x2000011b

000012a0 <sd_mmc_spi_start_read_block>:
{
    12a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12a2:	b083      	sub	sp, #12
	token = 0;
    12a4:	2200      	movs	r2, #0
    12a6:	466b      	mov	r3, sp
    12a8:	71da      	strb	r2, [r3, #7]
    12aa:	4c14      	ldr	r4, [pc, #80]	; (12fc <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    12ac:	466b      	mov	r3, sp
    12ae:	1ddd      	adds	r5, r3, #7
    12b0:	4e13      	ldr	r6, [pc, #76]	; (1300 <sd_mmc_spi_start_read_block+0x60>)
    12b2:	4f14      	ldr	r7, [pc, #80]	; (1304 <sd_mmc_spi_start_read_block+0x64>)
    12b4:	23ff      	movs	r3, #255	; 0xff
    12b6:	2201      	movs	r2, #1
    12b8:	0029      	movs	r1, r5
    12ba:	0030      	movs	r0, r6
    12bc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    12be:	782b      	ldrb	r3, [r5, #0]
    12c0:	220f      	movs	r2, #15
    12c2:	0019      	movs	r1, r3
    12c4:	4391      	bics	r1, r2
    12c6:	1e0a      	subs	r2, r1, #0
    12c8:	d009      	beq.n	12de <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    12ca:	2bfe      	cmp	r3, #254	; 0xfe
    12cc:	d013      	beq.n	12f6 <sd_mmc_spi_start_read_block+0x56>
    12ce:	3c01      	subs	r4, #1
		if (i-- == 0) {
    12d0:	2c00      	cmp	r4, #0
    12d2:	d1ef      	bne.n	12b4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    12d4:	2204      	movs	r2, #4
    12d6:	4b0c      	ldr	r3, [pc, #48]	; (1308 <sd_mmc_spi_start_read_block+0x68>)
    12d8:	701a      	strb	r2, [r3, #0]
			return false;
    12da:	2000      	movs	r0, #0
    12dc:	e00c      	b.n	12f8 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    12de:	075b      	lsls	r3, r3, #29
    12e0:	d004      	beq.n	12ec <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    12e2:	3207      	adds	r2, #7
    12e4:	4b08      	ldr	r3, [pc, #32]	; (1308 <sd_mmc_spi_start_read_block+0x68>)
    12e6:	701a      	strb	r2, [r3, #0]
			return false;
    12e8:	2000      	movs	r0, #0
    12ea:	e005      	b.n	12f8 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    12ec:	220b      	movs	r2, #11
    12ee:	4b06      	ldr	r3, [pc, #24]	; (1308 <sd_mmc_spi_start_read_block+0x68>)
    12f0:	701a      	strb	r2, [r3, #0]
			return false;
    12f2:	2000      	movs	r0, #0
    12f4:	e000      	b.n	12f8 <sd_mmc_spi_start_read_block+0x58>
	return true;
    12f6:	2001      	movs	r0, #1
}
    12f8:	b003      	add	sp, #12
    12fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12fc:	0007a120 	.word	0x0007a120
    1300:	200000d8 	.word	0x200000d8
    1304:	000022c9 	.word	0x000022c9
    1308:	2000011b 	.word	0x2000011b

0000130c <sd_mmc_spi_stop_write_block>:
{
    130c:	b530      	push	{r4, r5, lr}
    130e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    1310:	a901      	add	r1, sp, #4
    1312:	2301      	movs	r3, #1
    1314:	425b      	negs	r3, r3
    1316:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    1318:	4d14      	ldr	r5, [pc, #80]	; (136c <sd_mmc_spi_stop_write_block+0x60>)
    131a:	2202      	movs	r2, #2
    131c:	0028      	movs	r0, r5
    131e:	4b14      	ldr	r3, [pc, #80]	; (1370 <sd_mmc_spi_stop_write_block+0x64>)
    1320:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    1322:	466b      	mov	r3, sp
    1324:	1ddc      	adds	r4, r3, #7
    1326:	23ff      	movs	r3, #255	; 0xff
    1328:	2201      	movs	r2, #1
    132a:	0021      	movs	r1, r4
    132c:	0028      	movs	r0, r5
    132e:	4d11      	ldr	r5, [pc, #68]	; (1374 <sd_mmc_spi_stop_write_block+0x68>)
    1330:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    1332:	7822      	ldrb	r2, [r4, #0]
    1334:	2311      	movs	r3, #17
    1336:	4013      	ands	r3, r2
    1338:	2b01      	cmp	r3, #1
    133a:	d005      	beq.n	1348 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    133c:	2201      	movs	r2, #1
    133e:	4b0e      	ldr	r3, [pc, #56]	; (1378 <sd_mmc_spi_stop_write_block+0x6c>)
    1340:	701a      	strb	r2, [r3, #0]
		return false;
    1342:	2000      	movs	r0, #0
}
    1344:	b003      	add	sp, #12
    1346:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    1348:	231e      	movs	r3, #30
    134a:	401a      	ands	r2, r3
    134c:	2a04      	cmp	r2, #4
    134e:	d00b      	beq.n	1368 <sd_mmc_spi_stop_write_block+0x5c>
    1350:	2a0a      	cmp	r2, #10
    1352:	d104      	bne.n	135e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    1354:	3a02      	subs	r2, #2
    1356:	4b08      	ldr	r3, [pc, #32]	; (1378 <sd_mmc_spi_stop_write_block+0x6c>)
    1358:	701a      	strb	r2, [r3, #0]
		return false;
    135a:	2000      	movs	r0, #0
    135c:	e7f2      	b.n	1344 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    135e:	220a      	movs	r2, #10
    1360:	4b05      	ldr	r3, [pc, #20]	; (1378 <sd_mmc_spi_stop_write_block+0x6c>)
    1362:	701a      	strb	r2, [r3, #0]
		return false;
    1364:	2000      	movs	r0, #0
    1366:	e7ed      	b.n	1344 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    1368:	2001      	movs	r0, #1
    136a:	e7eb      	b.n	1344 <sd_mmc_spi_stop_write_block+0x38>
    136c:	200000d8 	.word	0x200000d8
    1370:	00002491 	.word	0x00002491
    1374:	000022c9 	.word	0x000022c9
    1378:	2000011b 	.word	0x2000011b

0000137c <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    137c:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    137e:	4802      	ldr	r0, [pc, #8]	; (1388 <sd_mmc_deinit+0xc>)
    1380:	4b02      	ldr	r3, [pc, #8]	; (138c <sd_mmc_deinit+0x10>)
    1382:	4798      	blx	r3
}
    1384:	bd10      	pop	{r4, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	200000d8 	.word	0x200000d8
    138c:	00001fed 	.word	0x00001fed

00001390 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    1390:	b570      	push	{r4, r5, r6, lr}
    1392:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1394:	2300      	movs	r3, #0
    1396:	4a2d      	ldr	r2, [pc, #180]	; (144c <sd_mmc_spi_init+0xbc>)
    1398:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    139a:	ac02      	add	r4, sp, #8
    139c:	2501      	movs	r5, #1
    139e:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    13a0:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    13a2:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    13a4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    13a6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    13a8:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    13aa:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    13ac:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    13ae:	2224      	movs	r2, #36	; 0x24
    13b0:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    13b2:	3a18      	subs	r2, #24
    13b4:	2100      	movs	r1, #0
    13b6:	a808      	add	r0, sp, #32
    13b8:	4b25      	ldr	r3, [pc, #148]	; (1450 <sd_mmc_spi_init+0xc0>)
    13ba:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    13bc:	2380      	movs	r3, #128	; 0x80
    13be:	025b      	lsls	r3, r3, #9
    13c0:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    13c2:	4b24      	ldr	r3, [pc, #144]	; (1454 <sd_mmc_spi_init+0xc4>)
    13c4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    13c6:	4b24      	ldr	r3, [pc, #144]	; (1458 <sd_mmc_spi_init+0xc8>)
    13c8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    13ca:	4b24      	ldr	r3, [pc, #144]	; (145c <sd_mmc_spi_init+0xcc>)
    13cc:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    13ce:	4b24      	ldr	r3, [pc, #144]	; (1460 <sd_mmc_spi_init+0xd0>)
    13d0:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    13d2:	4b24      	ldr	r3, [pc, #144]	; (1464 <sd_mmc_spi_init+0xd4>)
    13d4:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    13d6:	4e24      	ldr	r6, [pc, #144]	; (1468 <sd_mmc_spi_init+0xd8>)
    13d8:	0022      	movs	r2, r4
    13da:	4924      	ldr	r1, [pc, #144]	; (146c <sd_mmc_spi_init+0xdc>)
    13dc:	0030      	movs	r0, r6
    13de:	4b24      	ldr	r3, [pc, #144]	; (1470 <sd_mmc_spi_init+0xe0>)
    13e0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13e2:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    13e4:	0020      	movs	r0, r4
    13e6:	4b23      	ldr	r3, [pc, #140]	; (1474 <sd_mmc_spi_init+0xe4>)
    13e8:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    13ea:	231f      	movs	r3, #31
    13ec:	4018      	ands	r0, r3
    13ee:	4085      	lsls	r5, r0
    13f0:	4b21      	ldr	r3, [pc, #132]	; (1478 <sd_mmc_spi_init+0xe8>)
    13f2:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    13f4:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    13f6:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    13f8:	2b00      	cmp	r3, #0
    13fa:	d1fc      	bne.n	13f6 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    13fc:	6823      	ldr	r3, [r4, #0]
    13fe:	2202      	movs	r2, #2
    1400:	4313      	orrs	r3, r2
    1402:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    1404:	4a1d      	ldr	r2, [pc, #116]	; (147c <sd_mmc_spi_init+0xec>)
    1406:	2300      	movs	r3, #0
    1408:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    140a:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    140c:	491c      	ldr	r1, [pc, #112]	; (1480 <sd_mmc_spi_init+0xf0>)
    140e:	7808      	ldrb	r0, [r1, #0]
    1410:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1412:	4c1c      	ldr	r4, [pc, #112]	; (1484 <sd_mmc_spi_init+0xf4>)
    1414:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1416:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1418:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    141a:	a901      	add	r1, sp, #4
    141c:	2201      	movs	r2, #1
    141e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1420:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1422:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1424:	4b18      	ldr	r3, [pc, #96]	; (1488 <sd_mmc_spi_init+0xf8>)
    1426:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1428:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    142a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    142c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    142e:	2900      	cmp	r1, #0
    1430:	d104      	bne.n	143c <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    1432:	0953      	lsrs	r3, r2, #5
    1434:	01db      	lsls	r3, r3, #7
    1436:	4915      	ldr	r1, [pc, #84]	; (148c <sd_mmc_spi_init+0xfc>)
    1438:	468c      	mov	ip, r1
    143a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    143c:	211f      	movs	r1, #31
    143e:	4011      	ands	r1, r2
    1440:	2201      	movs	r2, #1
    1442:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1444:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    1446:	b010      	add	sp, #64	; 0x40
    1448:	bd70      	pop	{r4, r5, r6, pc}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	2000011b 	.word	0x2000011b
    1450:	00005cfb 	.word	0x00005cfb
    1454:	00100002 	.word	0x00100002
    1458:	00110002 	.word	0x00110002
    145c:	00120002 	.word	0x00120002
    1460:	00130002 	.word	0x00130002
    1464:	00061a80 	.word	0x00061a80
    1468:	200000d8 	.word	0x200000d8
    146c:	42000c00 	.word	0x42000c00
    1470:	000020f1 	.word	0x000020f1
    1474:	00001f5d 	.word	0x00001f5d
    1478:	e000e100 	.word	0xe000e100
    147c:	20000128 	.word	0x20000128
    1480:	2000000c 	.word	0x2000000c
    1484:	20000118 	.word	0x20000118
    1488:	000019ad 	.word	0x000019ad
    148c:	41004400 	.word	0x41004400

00001490 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    1490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1492:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1494:	2200      	movs	r2, #0
    1496:	4b0d      	ldr	r3, [pc, #52]	; (14cc <sd_mmc_spi_select_device+0x3c>)
    1498:	701a      	strb	r2, [r3, #0]
    149a:	000c      	movs	r4, r1
    149c:	4b0c      	ldr	r3, [pc, #48]	; (14d0 <sd_mmc_spi_select_device+0x40>)
    149e:	4299      	cmp	r1, r3
    14a0:	d900      	bls.n	14a4 <sd_mmc_spi_select_device+0x14>
    14a2:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    14a4:	4d0b      	ldr	r5, [pc, #44]	; (14d4 <sd_mmc_spi_select_device+0x44>)
    14a6:	4e0c      	ldr	r6, [pc, #48]	; (14d8 <sd_mmc_spi_select_device+0x48>)
    14a8:	e001      	b.n	14ae <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    14aa:	08e3      	lsrs	r3, r4, #3
    14ac:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    14ae:	0021      	movs	r1, r4
    14b0:	0028      	movs	r0, r5
    14b2:	47b0      	blx	r6
    14b4:	2817      	cmp	r0, #23
    14b6:	d0f8      	beq.n	14aa <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    14b8:	0079      	lsls	r1, r7, #1
    14ba:	19cf      	adds	r7, r1, r7
    14bc:	4907      	ldr	r1, [pc, #28]	; (14dc <sd_mmc_spi_select_device+0x4c>)
    14be:	19c9      	adds	r1, r1, r7
    14c0:	2201      	movs	r2, #1
    14c2:	4804      	ldr	r0, [pc, #16]	; (14d4 <sd_mmc_spi_select_device+0x44>)
    14c4:	4b06      	ldr	r3, [pc, #24]	; (14e0 <sd_mmc_spi_select_device+0x50>)
    14c6:	4798      	blx	r3
}
    14c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	2000011b 	.word	0x2000011b
    14d0:	00989680 	.word	0x00989680
    14d4:	200000d8 	.word	0x200000d8
    14d8:	00002039 	.word	0x00002039
    14dc:	20000118 	.word	0x20000118
    14e0:	0000239d 	.word	0x0000239d

000014e4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    14e4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    14e6:	2200      	movs	r2, #0
    14e8:	4b04      	ldr	r3, [pc, #16]	; (14fc <sd_mmc_spi_deselect_device+0x18>)
    14ea:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    14ec:	0041      	lsls	r1, r0, #1
    14ee:	1808      	adds	r0, r1, r0
    14f0:	4903      	ldr	r1, [pc, #12]	; (1500 <sd_mmc_spi_deselect_device+0x1c>)
    14f2:	1809      	adds	r1, r1, r0
    14f4:	4803      	ldr	r0, [pc, #12]	; (1504 <sd_mmc_spi_deselect_device+0x20>)
    14f6:	4b04      	ldr	r3, [pc, #16]	; (1508 <sd_mmc_spi_deselect_device+0x24>)
    14f8:	4798      	blx	r3
}
    14fa:	bd10      	pop	{r4, pc}
    14fc:	2000011b 	.word	0x2000011b
    1500:	20000118 	.word	0x20000118
    1504:	200000d8 	.word	0x200000d8
    1508:	0000239d 	.word	0x0000239d

0000150c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    150c:	b570      	push	{r4, r5, r6, lr}
    150e:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1510:	22ff      	movs	r2, #255	; 0xff
    1512:	466b      	mov	r3, sp
    1514:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1516:	2200      	movs	r2, #0
    1518:	4b07      	ldr	r3, [pc, #28]	; (1538 <sd_mmc_spi_send_clock+0x2c>)
    151a:	701a      	strb	r2, [r3, #0]
    151c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    151e:	4e07      	ldr	r6, [pc, #28]	; (153c <sd_mmc_spi_send_clock+0x30>)
    1520:	4d07      	ldr	r5, [pc, #28]	; (1540 <sd_mmc_spi_send_clock+0x34>)
    1522:	2201      	movs	r2, #1
    1524:	466b      	mov	r3, sp
    1526:	1dd9      	adds	r1, r3, #7
    1528:	0030      	movs	r0, r6
    152a:	47a8      	blx	r5
    152c:	3c01      	subs	r4, #1
    152e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    1530:	2c00      	cmp	r4, #0
    1532:	d1f6      	bne.n	1522 <sd_mmc_spi_send_clock+0x16>
	}
}
    1534:	b002      	add	sp, #8
    1536:	bd70      	pop	{r4, r5, r6, pc}
    1538:	2000011b 	.word	0x2000011b
    153c:	200000d8 	.word	0x200000d8
    1540:	00002491 	.word	0x00002491

00001544 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    1544:	b5f0      	push	{r4, r5, r6, r7, lr}
    1546:	46c6      	mov	lr, r8
    1548:	b500      	push	{lr}
    154a:	b086      	sub	sp, #24
    154c:	4680      	mov	r8, r0
    154e:	9200      	str	r2, [sp, #0]
    1550:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    1552:	22ff      	movs	r2, #255	; 0xff
    1554:	230f      	movs	r3, #15
    1556:	a802      	add	r0, sp, #8
    1558:	4684      	mov	ip, r0
    155a:	4463      	add	r3, ip
    155c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    155e:	2200      	movs	r2, #0
    1560:	4b53      	ldr	r3, [pc, #332]	; (16b0 <sd_mmc_spi_adtc_start+0x16c>)
    1562:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    1564:	ab04      	add	r3, sp, #16
    1566:	323f      	adds	r2, #63	; 0x3f
    1568:	4640      	mov	r0, r8
    156a:	4002      	ands	r2, r0
    156c:	2040      	movs	r0, #64	; 0x40
    156e:	4302      	orrs	r2, r0
    1570:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    1572:	0e0a      	lsrs	r2, r1, #24
    1574:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    1576:	0c0a      	lsrs	r2, r1, #16
    1578:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    157a:	0a0a      	lsrs	r2, r1, #8
    157c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    157e:	7119      	strb	r1, [r3, #4]
    1580:	2700      	movs	r7, #0
	crc = 0;
    1582:	2300      	movs	r3, #0
		value = *buf++;
    1584:	a904      	add	r1, sp, #16
    1586:	2208      	movs	r2, #8
				crc ^= 0x09;
    1588:	2409      	movs	r4, #9
    158a:	e011      	b.n	15b0 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    158c:	0076      	lsls	r6, r6, #1
    158e:	b2f6      	uxtb	r6, r6
    1590:	3801      	subs	r0, #1
    1592:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    1594:	2800      	cmp	r0, #0
    1596:	d008      	beq.n	15aa <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    1598:	005b      	lsls	r3, r3, #1
    159a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    159c:	001d      	movs	r5, r3
    159e:	4075      	eors	r5, r6
    15a0:	062d      	lsls	r5, r5, #24
    15a2:	d5f3      	bpl.n	158c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    15a4:	4063      	eors	r3, r4
    15a6:	b2db      	uxtb	r3, r3
    15a8:	e7f0      	b.n	158c <sd_mmc_spi_adtc_start+0x48>
    15aa:	3701      	adds	r7, #1
	while (size--) {
    15ac:	2f05      	cmp	r7, #5
    15ae:	d002      	beq.n	15b6 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    15b0:	5c7e      	ldrb	r6, [r7, r1]
    15b2:	0010      	movs	r0, r2
    15b4:	e7f0      	b.n	1598 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    15b6:	005b      	lsls	r3, r3, #1
    15b8:	2201      	movs	r2, #1
    15ba:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    15bc:	ac04      	add	r4, sp, #16
    15be:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    15c0:	4e3c      	ldr	r6, [pc, #240]	; (16b4 <sd_mmc_spi_adtc_start+0x170>)
    15c2:	2201      	movs	r2, #1
    15c4:	210f      	movs	r1, #15
    15c6:	ab02      	add	r3, sp, #8
    15c8:	469c      	mov	ip, r3
    15ca:	4461      	add	r1, ip
    15cc:	0030      	movs	r0, r6
    15ce:	4f3a      	ldr	r7, [pc, #232]	; (16b8 <sd_mmc_spi_adtc_start+0x174>)
    15d0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    15d2:	2206      	movs	r2, #6
    15d4:	0021      	movs	r1, r4
    15d6:	0030      	movs	r0, r6
    15d8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    15da:	ab02      	add	r3, sp, #8
    15dc:	1dd9      	adds	r1, r3, #7
    15de:	23ff      	movs	r3, #255	; 0xff
    15e0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    15e2:	2201      	movs	r2, #1
    15e4:	0030      	movs	r0, r6
    15e6:	4e35      	ldr	r6, [pc, #212]	; (16bc <sd_mmc_spi_adtc_start+0x178>)
    15e8:	47b0      	blx	r6
    15ea:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    15ec:	ab02      	add	r3, sp, #8
    15ee:	1dde      	adds	r6, r3, #7
    15f0:	4f30      	ldr	r7, [pc, #192]	; (16b4 <sd_mmc_spi_adtc_start+0x170>)
    15f2:	4d32      	ldr	r5, [pc, #200]	; (16bc <sd_mmc_spi_adtc_start+0x178>)
    15f4:	23ff      	movs	r3, #255	; 0xff
    15f6:	2201      	movs	r2, #1
    15f8:	0031      	movs	r1, r6
    15fa:	0038      	movs	r0, r7
    15fc:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    15fe:	7833      	ldrb	r3, [r6, #0]
    1600:	b25a      	sxtb	r2, r3
    1602:	2a00      	cmp	r2, #0
    1604:	da0b      	bge.n	161e <sd_mmc_spi_adtc_start+0xda>
    1606:	3c01      	subs	r4, #1
    1608:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    160a:	2c00      	cmp	r4, #0
    160c:	d1f2      	bne.n	15f4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    160e:	2202      	movs	r2, #2
    1610:	4b27      	ldr	r3, [pc, #156]	; (16b0 <sd_mmc_spi_adtc_start+0x16c>)
    1612:	701a      	strb	r2, [r3, #0]
			return false;
    1614:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    1616:	b006      	add	sp, #24
    1618:	bc04      	pop	{r2}
    161a:	4690      	mov	r8, r2
    161c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    161e:	4a28      	ldr	r2, [pc, #160]	; (16c0 <sd_mmc_spi_adtc_start+0x17c>)
    1620:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    1622:	071a      	lsls	r2, r3, #28
    1624:	d41a      	bmi.n	165c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    1626:	075a      	lsls	r2, r3, #29
    1628:	d41d      	bmi.n	1666 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    162a:	2201      	movs	r2, #1
    162c:	4393      	bics	r3, r2
    162e:	d11f      	bne.n	1670 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    1630:	4643      	mov	r3, r8
    1632:	049b      	lsls	r3, r3, #18
    1634:	d420      	bmi.n	1678 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    1636:	4643      	mov	r3, r8
    1638:	059b      	lsls	r3, r3, #22
    163a:	d425      	bmi.n	1688 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    163c:	4643      	mov	r3, r8
    163e:	055b      	lsls	r3, r3, #21
    1640:	d42b      	bmi.n	169a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    1642:	4b20      	ldr	r3, [pc, #128]	; (16c4 <sd_mmc_spi_adtc_start+0x180>)
    1644:	466a      	mov	r2, sp
    1646:	8812      	ldrh	r2, [r2, #0]
    1648:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    164a:	4b1f      	ldr	r3, [pc, #124]	; (16c8 <sd_mmc_spi_adtc_start+0x184>)
    164c:	466a      	mov	r2, sp
    164e:	8892      	ldrh	r2, [r2, #4]
    1650:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    1652:	2200      	movs	r2, #0
    1654:	4b1d      	ldr	r3, [pc, #116]	; (16cc <sd_mmc_spi_adtc_start+0x188>)
    1656:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    1658:	2001      	movs	r0, #1
    165a:	e7dc      	b.n	1616 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    165c:	2206      	movs	r2, #6
    165e:	4b14      	ldr	r3, [pc, #80]	; (16b0 <sd_mmc_spi_adtc_start+0x16c>)
    1660:	701a      	strb	r2, [r3, #0]
		return false;
    1662:	2000      	movs	r0, #0
    1664:	e7d7      	b.n	1616 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    1666:	2209      	movs	r2, #9
    1668:	4b11      	ldr	r3, [pc, #68]	; (16b0 <sd_mmc_spi_adtc_start+0x16c>)
    166a:	701a      	strb	r2, [r3, #0]
		return false;
    166c:	2000      	movs	r0, #0
    166e:	e7d2      	b.n	1616 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    1670:	4b0f      	ldr	r3, [pc, #60]	; (16b0 <sd_mmc_spi_adtc_start+0x16c>)
    1672:	701a      	strb	r2, [r3, #0]
		return false;
    1674:	2000      	movs	r0, #0
    1676:	e7ce      	b.n	1616 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    1678:	4b15      	ldr	r3, [pc, #84]	; (16d0 <sd_mmc_spi_adtc_start+0x18c>)
    167a:	4798      	blx	r3
    167c:	2800      	cmp	r0, #0
    167e:	d1da      	bne.n	1636 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    1680:	2203      	movs	r2, #3
    1682:	4b0b      	ldr	r3, [pc, #44]	; (16b0 <sd_mmc_spi_adtc_start+0x16c>)
    1684:	701a      	strb	r2, [r3, #0]
			return false;
    1686:	e7c6      	b.n	1616 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    1688:	490d      	ldr	r1, [pc, #52]	; (16c0 <sd_mmc_spi_adtc_start+0x17c>)
    168a:	2300      	movs	r3, #0
    168c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    168e:	33ff      	adds	r3, #255	; 0xff
    1690:	2201      	movs	r2, #1
    1692:	4808      	ldr	r0, [pc, #32]	; (16b4 <sd_mmc_spi_adtc_start+0x170>)
    1694:	4e09      	ldr	r6, [pc, #36]	; (16bc <sd_mmc_spi_adtc_start+0x178>)
    1696:	47b0      	blx	r6
    1698:	e7d0      	b.n	163c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    169a:	4e09      	ldr	r6, [pc, #36]	; (16c0 <sd_mmc_spi_adtc_start+0x17c>)
    169c:	23ff      	movs	r3, #255	; 0xff
    169e:	2204      	movs	r2, #4
    16a0:	0031      	movs	r1, r6
    16a2:	4804      	ldr	r0, [pc, #16]	; (16b4 <sd_mmc_spi_adtc_start+0x170>)
    16a4:	4f05      	ldr	r7, [pc, #20]	; (16bc <sd_mmc_spi_adtc_start+0x178>)
    16a6:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    16a8:	6833      	ldr	r3, [r6, #0]
    16aa:	ba1b      	rev	r3, r3
    16ac:	6033      	str	r3, [r6, #0]
    16ae:	e7c8      	b.n	1642 <sd_mmc_spi_adtc_start+0xfe>
    16b0:	2000011b 	.word	0x2000011b
    16b4:	200000d8 	.word	0x200000d8
    16b8:	00002491 	.word	0x00002491
    16bc:	000022c9 	.word	0x000022c9
    16c0:	20000120 	.word	0x20000120
    16c4:	20000114 	.word	0x20000114
    16c8:	2000011c 	.word	0x2000011c
    16cc:	20000124 	.word	0x20000124
    16d0:	000011c5 	.word	0x000011c5

000016d4 <sd_mmc_spi_send_cmd>:
{
    16d4:	b510      	push	{r4, lr}
    16d6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    16d8:	2300      	movs	r3, #0
    16da:	9300      	str	r3, [sp, #0]
    16dc:	2200      	movs	r2, #0
    16de:	4c02      	ldr	r4, [pc, #8]	; (16e8 <sd_mmc_spi_send_cmd+0x14>)
    16e0:	47a0      	blx	r4
}
    16e2:	b002      	add	sp, #8
    16e4:	bd10      	pop	{r4, pc}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	00001545 	.word	0x00001545

000016ec <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    16ec:	4b01      	ldr	r3, [pc, #4]	; (16f4 <sd_mmc_spi_get_response+0x8>)
    16ee:	6818      	ldr	r0, [r3, #0]
}
    16f0:	4770      	bx	lr
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	20000120 	.word	0x20000120

000016f8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    16f8:	b510      	push	{r4, lr}
    16fa:	b084      	sub	sp, #16
    16fc:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    16fe:	2200      	movs	r2, #0
    1700:	4b14      	ldr	r3, [pc, #80]	; (1754 <sd_mmc_spi_read_word+0x5c>)
    1702:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1704:	4b14      	ldr	r3, [pc, #80]	; (1758 <sd_mmc_spi_read_word+0x60>)
    1706:	8819      	ldrh	r1, [r3, #0]
    1708:	4b14      	ldr	r3, [pc, #80]	; (175c <sd_mmc_spi_read_word+0x64>)
    170a:	6818      	ldr	r0, [r3, #0]
    170c:	4b14      	ldr	r3, [pc, #80]	; (1760 <sd_mmc_spi_read_word+0x68>)
    170e:	4798      	blx	r3
    1710:	2900      	cmp	r1, #0
    1712:	d103      	bne.n	171c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1714:	4b13      	ldr	r3, [pc, #76]	; (1764 <sd_mmc_spi_read_word+0x6c>)
    1716:	4798      	blx	r3
    1718:	2800      	cmp	r0, #0
    171a:	d010      	beq.n	173e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    171c:	23ff      	movs	r3, #255	; 0xff
    171e:	2204      	movs	r2, #4
    1720:	a901      	add	r1, sp, #4
    1722:	4811      	ldr	r0, [pc, #68]	; (1768 <sd_mmc_spi_read_word+0x70>)
    1724:	4c11      	ldr	r4, [pc, #68]	; (176c <sd_mmc_spi_read_word+0x74>)
    1726:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1728:	4b0c      	ldr	r3, [pc, #48]	; (175c <sd_mmc_spi_read_word+0x64>)
    172a:	681a      	ldr	r2, [r3, #0]
    172c:	1d10      	adds	r0, r2, #4
    172e:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1730:	4b09      	ldr	r3, [pc, #36]	; (1758 <sd_mmc_spi_read_word+0x60>)
    1732:	8819      	ldrh	r1, [r3, #0]
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <sd_mmc_spi_read_word+0x68>)
    1736:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1738:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    173a:	2900      	cmp	r1, #0
    173c:	d001      	beq.n	1742 <sd_mmc_spi_read_word+0x4a>
}
    173e:	b004      	add	sp, #16
    1740:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1742:	23ff      	movs	r3, #255	; 0xff
    1744:	2202      	movs	r2, #2
    1746:	a903      	add	r1, sp, #12
    1748:	4807      	ldr	r0, [pc, #28]	; (1768 <sd_mmc_spi_read_word+0x70>)
    174a:	4c08      	ldr	r4, [pc, #32]	; (176c <sd_mmc_spi_read_word+0x74>)
    174c:	47a0      	blx	r4
	return true;
    174e:	2001      	movs	r0, #1
    1750:	e7f5      	b.n	173e <sd_mmc_spi_read_word+0x46>
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	2000011b 	.word	0x2000011b
    1758:	20000114 	.word	0x20000114
    175c:	20000124 	.word	0x20000124
    1760:	00005845 	.word	0x00005845
    1764:	000012a1 	.word	0x000012a1
    1768:	200000d8 	.word	0x200000d8
    176c:	000022c9 	.word	0x000022c9

00001770 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    1770:	b5f0      	push	{r4, r5, r6, r7, lr}
    1772:	46de      	mov	lr, fp
    1774:	4657      	mov	r7, sl
    1776:	4646      	mov	r6, r8
    1778:	b5c0      	push	{r6, r7, lr}
    177a:	b082      	sub	sp, #8
    177c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    177e:	2200      	movs	r2, #0
    1780:	4b17      	ldr	r3, [pc, #92]	; (17e0 <sd_mmc_spi_start_read_blocks+0x70>)
    1782:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1784:	1e4c      	subs	r4, r1, #1
    1786:	b2a4      	uxth	r4, r4
    1788:	2900      	cmp	r1, #0
    178a:	d026      	beq.n	17da <sd_mmc_spi_start_read_blocks+0x6a>
    178c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    178e:	4b15      	ldr	r3, [pc, #84]	; (17e4 <sd_mmc_spi_start_read_blocks+0x74>)
    1790:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1792:	4f15      	ldr	r7, [pc, #84]	; (17e8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1794:	47d0      	blx	sl
    1796:	4680      	mov	r8, r0
    1798:	2800      	cmp	r0, #0
    179a:	d017      	beq.n	17cc <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    179c:	883a      	ldrh	r2, [r7, #0]
    179e:	465b      	mov	r3, fp
    17a0:	1999      	adds	r1, r3, r6
    17a2:	23ff      	movs	r3, #255	; 0xff
    17a4:	4811      	ldr	r0, [pc, #68]	; (17ec <sd_mmc_spi_start_read_blocks+0x7c>)
    17a6:	4d12      	ldr	r5, [pc, #72]	; (17f0 <sd_mmc_spi_start_read_blocks+0x80>)
    17a8:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    17aa:	883b      	ldrh	r3, [r7, #0]
    17ac:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    17ae:	4a11      	ldr	r2, [pc, #68]	; (17f4 <sd_mmc_spi_start_read_blocks+0x84>)
    17b0:	6811      	ldr	r1, [r2, #0]
    17b2:	468c      	mov	ip, r1
    17b4:	4463      	add	r3, ip
    17b6:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    17b8:	23ff      	movs	r3, #255	; 0xff
    17ba:	2202      	movs	r2, #2
    17bc:	a901      	add	r1, sp, #4
    17be:	480b      	ldr	r0, [pc, #44]	; (17ec <sd_mmc_spi_start_read_blocks+0x7c>)
    17c0:	47a8      	blx	r5
	while (nb_block--) {
    17c2:	3c01      	subs	r4, #1
    17c4:	b2a4      	uxth	r4, r4
    17c6:	4b0c      	ldr	r3, [pc, #48]	; (17f8 <sd_mmc_spi_start_read_blocks+0x88>)
    17c8:	429c      	cmp	r4, r3
    17ca:	d1e3      	bne.n	1794 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    17cc:	4640      	mov	r0, r8
    17ce:	b002      	add	sp, #8
    17d0:	bc1c      	pop	{r2, r3, r4}
    17d2:	4690      	mov	r8, r2
    17d4:	469a      	mov	sl, r3
    17d6:	46a3      	mov	fp, r4
    17d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    17da:	2301      	movs	r3, #1
    17dc:	4698      	mov	r8, r3
    17de:	e7f5      	b.n	17cc <sd_mmc_spi_start_read_blocks+0x5c>
    17e0:	2000011b 	.word	0x2000011b
    17e4:	000012a1 	.word	0x000012a1
    17e8:	20000114 	.word	0x20000114
    17ec:	200000d8 	.word	0x200000d8
    17f0:	000022c9 	.word	0x000022c9
    17f4:	20000124 	.word	0x20000124
    17f8:	0000ffff 	.word	0x0000ffff

000017fc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    17fc:	2001      	movs	r0, #1
    17fe:	4770      	bx	lr

00001800 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1800:	b5f0      	push	{r4, r5, r6, r7, lr}
    1802:	46c6      	mov	lr, r8
    1804:	b500      	push	{lr}
    1806:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1808:	2200      	movs	r2, #0
    180a:	4b15      	ldr	r3, [pc, #84]	; (1860 <sd_mmc_spi_start_write_blocks+0x60>)
    180c:	701a      	strb	r2, [r3, #0]
	pos = 0;
    180e:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1810:	4f14      	ldr	r7, [pc, #80]	; (1864 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1812:	4e15      	ldr	r6, [pc, #84]	; (1868 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1814:	e000      	b.n	1818 <sd_mmc_spi_start_write_blocks+0x18>
{
    1816:	0021      	movs	r1, r4
	while (nb_block--) {
    1818:	1e4c      	subs	r4, r1, #1
    181a:	b2a4      	uxth	r4, r4
    181c:	2900      	cmp	r1, #0
    181e:	d01b      	beq.n	1858 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1820:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1822:	8832      	ldrh	r2, [r6, #0]
    1824:	4643      	mov	r3, r8
    1826:	1959      	adds	r1, r3, r5
    1828:	4810      	ldr	r0, [pc, #64]	; (186c <sd_mmc_spi_start_write_blocks+0x6c>)
    182a:	4b11      	ldr	r3, [pc, #68]	; (1870 <sd_mmc_spi_start_write_blocks+0x70>)
    182c:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    182e:	8833      	ldrh	r3, [r6, #0]
    1830:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1832:	4a10      	ldr	r2, [pc, #64]	; (1874 <sd_mmc_spi_start_write_blocks+0x74>)
    1834:	6811      	ldr	r1, [r2, #0]
    1836:	468c      	mov	ip, r1
    1838:	4463      	add	r3, ip
    183a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    183c:	4b0e      	ldr	r3, [pc, #56]	; (1878 <sd_mmc_spi_start_write_blocks+0x78>)
    183e:	4798      	blx	r3
    1840:	2800      	cmp	r0, #0
    1842:	d00a      	beq.n	185a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1844:	2c00      	cmp	r4, #0
    1846:	d0e6      	beq.n	1816 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1848:	4b0c      	ldr	r3, [pc, #48]	; (187c <sd_mmc_spi_start_write_blocks+0x7c>)
    184a:	4798      	blx	r3
    184c:	2800      	cmp	r0, #0
    184e:	d1e2      	bne.n	1816 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1850:	2205      	movs	r2, #5
    1852:	4b03      	ldr	r3, [pc, #12]	; (1860 <sd_mmc_spi_start_write_blocks+0x60>)
    1854:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1856:	e000      	b.n	185a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1858:	2001      	movs	r0, #1
}
    185a:	bc04      	pop	{r2}
    185c:	4690      	mov	r8, r2
    185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1860:	2000011b 	.word	0x2000011b
    1864:	0000117d 	.word	0x0000117d
    1868:	20000114 	.word	0x20000114
    186c:	200000d8 	.word	0x200000d8
    1870:	00002491 	.word	0x00002491
    1874:	20000124 	.word	0x20000124
    1878:	0000130d 	.word	0x0000130d
    187c:	000011c5 	.word	0x000011c5

00001880 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1880:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    1882:	4b05      	ldr	r3, [pc, #20]	; (1898 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1884:	4798      	blx	r3
    1886:	2800      	cmp	r0, #0
    1888:	d103      	bne.n	1892 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    188a:	2205      	movs	r2, #5
    188c:	4b03      	ldr	r3, [pc, #12]	; (189c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    188e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1890:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    1892:	4b03      	ldr	r3, [pc, #12]	; (18a0 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1894:	4798      	blx	r3
    1896:	e7fb      	b.n	1890 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1898:	000011c5 	.word	0x000011c5
    189c:	2000011b 	.word	0x2000011b
    18a0:	00001229 	.word	0x00001229

000018a4 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    18a4:	4770      	bx	lr
	...

000018a8 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    18a8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    18aa:	2301      	movs	r3, #1
    18ac:	2800      	cmp	r0, #0
    18ae:	d001      	beq.n	18b4 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    18b0:	0018      	movs	r0, r3
    18b2:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    18b4:	4b01      	ldr	r3, [pc, #4]	; (18bc <mem_test_unit_ready+0x14>)
    18b6:	4798      	blx	r3
    18b8:	0003      	movs	r3, r0
    18ba:	e7f9      	b.n	18b0 <mem_test_unit_ready+0x8>
    18bc:	0000107d 	.word	0x0000107d

000018c0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    18c0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    18c2:	2301      	movs	r3, #1
    18c4:	2800      	cmp	r0, #0
    18c6:	d001      	beq.n	18cc <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    18c8:	0018      	movs	r0, r3
    18ca:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    18cc:	0008      	movs	r0, r1
    18ce:	4b02      	ldr	r3, [pc, #8]	; (18d8 <mem_read_capacity+0x18>)
    18d0:	4798      	blx	r3
    18d2:	0003      	movs	r3, r0
    18d4:	e7f8      	b.n	18c8 <mem_read_capacity+0x8>
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	000010ad 	.word	0x000010ad

000018dc <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    18dc:	4243      	negs	r3, r0
    18de:	4158      	adcs	r0, r3
    18e0:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    18e2:	4770      	bx	lr

000018e4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    18e4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    18e6:	2301      	movs	r3, #1
    18e8:	2800      	cmp	r0, #0
    18ea:	d001      	beq.n	18f0 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    18ec:	0018      	movs	r0, r3
    18ee:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    18f0:	4b01      	ldr	r3, [pc, #4]	; (18f8 <mem_wr_protect+0x14>)
    18f2:	4798      	blx	r3
    18f4:	0003      	movs	r3, r0
    18f6:	e7f9      	b.n	18ec <mem_wr_protect+0x8>
    18f8:	000010bd 	.word	0x000010bd

000018fc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    18fc:	b510      	push	{r4, lr}
    18fe:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1900:	2301      	movs	r3, #1
    1902:	2800      	cmp	r0, #0
    1904:	d001      	beq.n	190a <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    1906:	0018      	movs	r0, r3
    1908:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    190a:	0011      	movs	r1, r2
    190c:	0020      	movs	r0, r4
    190e:	4b02      	ldr	r3, [pc, #8]	; (1918 <memory_2_ram+0x1c>)
    1910:	4798      	blx	r3
    1912:	0003      	movs	r3, r0
    1914:	e7f7      	b.n	1906 <memory_2_ram+0xa>
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	00001111 	.word	0x00001111

0000191c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    191c:	b510      	push	{r4, lr}
    191e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    1920:	2301      	movs	r3, #1
    1922:	2800      	cmp	r0, #0
    1924:	d001      	beq.n	192a <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    1926:	0018      	movs	r0, r3
    1928:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    192a:	0011      	movs	r1, r2
    192c:	0020      	movs	r0, r4
    192e:	4b02      	ldr	r3, [pc, #8]	; (1938 <ram_2_memory+0x1c>)
    1930:	4798      	blx	r3
    1932:	0003      	movs	r3, r0
    1934:	e7f7      	b.n	1926 <ram_2_memory+0xa>
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	00001169 	.word	0x00001169

0000193c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    193c:	4b0c      	ldr	r3, [pc, #48]	; (1970 <cpu_irq_enter_critical+0x34>)
    193e:	681b      	ldr	r3, [r3, #0]
    1940:	2b00      	cmp	r3, #0
    1942:	d106      	bne.n	1952 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1944:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1948:	2b00      	cmp	r3, #0
    194a:	d007      	beq.n	195c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    194c:	2200      	movs	r2, #0
    194e:	4b09      	ldr	r3, [pc, #36]	; (1974 <cpu_irq_enter_critical+0x38>)
    1950:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1952:	4a07      	ldr	r2, [pc, #28]	; (1970 <cpu_irq_enter_critical+0x34>)
    1954:	6813      	ldr	r3, [r2, #0]
    1956:	3301      	adds	r3, #1
    1958:	6013      	str	r3, [r2, #0]
}
    195a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    195c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    195e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1962:	2200      	movs	r2, #0
    1964:	4b04      	ldr	r3, [pc, #16]	; (1978 <cpu_irq_enter_critical+0x3c>)
    1966:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1968:	3201      	adds	r2, #1
    196a:	4b02      	ldr	r3, [pc, #8]	; (1974 <cpu_irq_enter_critical+0x38>)
    196c:	701a      	strb	r2, [r3, #0]
    196e:	e7f0      	b.n	1952 <cpu_irq_enter_critical+0x16>
    1970:	2000012c 	.word	0x2000012c
    1974:	20000130 	.word	0x20000130
    1978:	2000000d 	.word	0x2000000d

0000197c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    197c:	4b08      	ldr	r3, [pc, #32]	; (19a0 <cpu_irq_leave_critical+0x24>)
    197e:	681a      	ldr	r2, [r3, #0]
    1980:	3a01      	subs	r2, #1
    1982:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	2b00      	cmp	r3, #0
    1988:	d109      	bne.n	199e <cpu_irq_leave_critical+0x22>
    198a:	4b06      	ldr	r3, [pc, #24]	; (19a4 <cpu_irq_leave_critical+0x28>)
    198c:	781b      	ldrb	r3, [r3, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	d005      	beq.n	199e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1992:	2201      	movs	r2, #1
    1994:	4b04      	ldr	r3, [pc, #16]	; (19a8 <cpu_irq_leave_critical+0x2c>)
    1996:	701a      	strb	r2, [r3, #0]
    1998:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    199c:	b662      	cpsie	i
	}
}
    199e:	4770      	bx	lr
    19a0:	2000012c 	.word	0x2000012c
    19a4:	20000130 	.word	0x20000130
    19a8:	2000000d 	.word	0x2000000d

000019ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    19ac:	b500      	push	{lr}
    19ae:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    19b0:	ab01      	add	r3, sp, #4
    19b2:	2280      	movs	r2, #128	; 0x80
    19b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    19b6:	780a      	ldrb	r2, [r1, #0]
    19b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    19ba:	784a      	ldrb	r2, [r1, #1]
    19bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    19be:	788a      	ldrb	r2, [r1, #2]
    19c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    19c2:	0019      	movs	r1, r3
    19c4:	4b01      	ldr	r3, [pc, #4]	; (19cc <port_pin_set_config+0x20>)
    19c6:	4798      	blx	r3
}
    19c8:	b003      	add	sp, #12
    19ca:	bd00      	pop	{pc}
    19cc:	00003439 	.word	0x00003439

000019d0 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19d0:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    19d2:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    19d4:	b25b      	sxtb	r3, r3
    19d6:	2b00      	cmp	r3, #0
    19d8:	dbfb      	blt.n	19d2 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    19da:	8813      	ldrh	r3, [r2, #0]
    19dc:	2102      	movs	r1, #2
    19de:	430b      	orrs	r3, r1
    19e0:	8013      	strh	r3, [r2, #0]
}
    19e2:	4770      	bx	lr

000019e4 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19e4:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    19e6:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    19e8:	b25b      	sxtb	r3, r3
    19ea:	2b00      	cmp	r3, #0
    19ec:	dbfb      	blt.n	19e6 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    19ee:	23c1      	movs	r3, #193	; 0xc1
    19f0:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    19f2:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    19f4:	8813      	ldrh	r3, [r2, #0]
    19f6:	2102      	movs	r1, #2
    19f8:	438b      	bics	r3, r1
    19fa:	8013      	strh	r3, [r2, #0]
}
    19fc:	4770      	bx	lr
	...

00001a00 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1a00:	b570      	push	{r4, r5, r6, lr}
    1a02:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a04:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1a06:	4b06      	ldr	r3, [pc, #24]	; (1a20 <rtc_calendar_reset+0x20>)
    1a08:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    1a0a:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a0c:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a0e:	b25b      	sxtb	r3, r3
    1a10:	2b00      	cmp	r3, #0
    1a12:	dbfb      	blt.n	1a0c <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1a14:	882b      	ldrh	r3, [r5, #0]
    1a16:	2201      	movs	r2, #1
    1a18:	4313      	orrs	r3, r2
    1a1a:	802b      	strh	r3, [r5, #0]
}
    1a1c:	bd70      	pop	{r4, r5, r6, pc}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	000019e5 	.word	0x000019e5

00001a24 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1a24:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1a26:	88cb      	ldrh	r3, [r1, #6]
    1a28:	88c2      	ldrh	r2, [r0, #6]
    1a2a:	1a9a      	subs	r2, r3, r2
    1a2c:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1a2e:	794b      	ldrb	r3, [r1, #5]
    1a30:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1a32:	790c      	ldrb	r4, [r1, #4]
    1a34:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1a36:	4323      	orrs	r3, r4
    1a38:	788c      	ldrb	r4, [r1, #2]
    1a3a:	0324      	lsls	r4, r4, #12
    1a3c:	4323      	orrs	r3, r4
    1a3e:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1a40:	7902      	ldrb	r2, [r0, #4]
    1a42:	2a00      	cmp	r2, #0
    1a44:	d105      	bne.n	1a52 <rtc_calendar_time_to_register_value+0x2e>
    1a46:	78ca      	ldrb	r2, [r1, #3]
    1a48:	2a00      	cmp	r2, #0
    1a4a:	d002      	beq.n	1a52 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1a4c:	2280      	movs	r2, #128	; 0x80
    1a4e:	0252      	lsls	r2, r2, #9
    1a50:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1a52:	7848      	ldrb	r0, [r1, #1]
    1a54:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1a56:	780a      	ldrb	r2, [r1, #0]
    1a58:	4310      	orrs	r0, r2
    1a5a:	4318      	orrs	r0, r3

	return register_value;
}
    1a5c:	bd10      	pop	{r4, pc}

00001a5e <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1a5e:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1a60:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1a62:	88c4      	ldrh	r4, [r0, #6]
    1a64:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1a66:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1a68:	018b      	lsls	r3, r1, #6
    1a6a:	0f1b      	lsrs	r3, r3, #28
    1a6c:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1a6e:	028b      	lsls	r3, r1, #10
    1a70:	0edb      	lsrs	r3, r3, #27
    1a72:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1a74:	7903      	ldrb	r3, [r0, #4]
    1a76:	2b00      	cmp	r3, #0
    1a78:	d10c      	bne.n	1a94 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1a7a:	040b      	lsls	r3, r1, #16
    1a7c:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    1a7e:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1a80:	03cb      	lsls	r3, r1, #15
    1a82:	0fdb      	lsrs	r3, r3, #31
    1a84:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1a86:	0988      	lsrs	r0, r1, #6
    1a88:	233f      	movs	r3, #63	; 0x3f
    1a8a:	4018      	ands	r0, r3
    1a8c:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1a8e:	4019      	ands	r1, r3
    1a90:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1a92:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1a94:	03cb      	lsls	r3, r1, #15
    1a96:	0edb      	lsrs	r3, r3, #27
    1a98:	7093      	strb	r3, [r2, #2]
    1a9a:	e7f4      	b.n	1a86 <rtc_calendar_register_value_to_time+0x28>

00001a9c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1a9c:	b510      	push	{r4, lr}
    1a9e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1aa0:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1aa2:	7941      	ldrb	r1, [r0, #5]
    1aa4:	2900      	cmp	r1, #0
    1aa6:	d006      	beq.n	1ab6 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1aa8:	8859      	ldrh	r1, [r3, #2]
    1aaa:	0449      	lsls	r1, r1, #17
    1aac:	d50b      	bpl.n	1ac6 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1aae:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1ab0:	4b0a      	ldr	r3, [pc, #40]	; (1adc <rtc_calendar_get_time+0x40>)
    1ab2:	4798      	blx	r3
}
    1ab4:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1ab6:	490a      	ldr	r1, [pc, #40]	; (1ae0 <rtc_calendar_get_time+0x44>)
    1ab8:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1aba:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1abc:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1abe:	b249      	sxtb	r1, r1
    1ac0:	2900      	cmp	r1, #0
    1ac2:	dbfb      	blt.n	1abc <rtc_calendar_get_time+0x20>
    1ac4:	e7f3      	b.n	1aae <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1ac6:	8859      	ldrh	r1, [r3, #2]
    1ac8:	24c0      	movs	r4, #192	; 0xc0
    1aca:	0224      	lsls	r4, r4, #8
    1acc:	4321      	orrs	r1, r4
    1ace:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1ad0:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1ad2:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1ad4:	b249      	sxtb	r1, r1
    1ad6:	2900      	cmp	r1, #0
    1ad8:	dbfb      	blt.n	1ad2 <rtc_calendar_get_time+0x36>
    1ada:	e7e8      	b.n	1aae <rtc_calendar_get_time+0x12>
    1adc:	00001a5f 	.word	0x00001a5f
    1ae0:	ffff8000 	.word	0xffff8000

00001ae4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1ae4:	b570      	push	{r4, r5, r6, lr}
    1ae6:	000d      	movs	r5, r1
    1ae8:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1aea:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1aec:	2a01      	cmp	r2, #1
    1aee:	d901      	bls.n	1af4 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1af0:	0018      	movs	r0, r3
    1af2:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1af4:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1af6:	4b06      	ldr	r3, [pc, #24]	; (1b10 <rtc_calendar_set_alarm+0x2c>)
    1af8:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1afa:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1afc:	b25b      	sxtb	r3, r3
    1afe:	2b00      	cmp	r3, #0
    1b00:	dbfb      	blt.n	1afa <rtc_calendar_set_alarm+0x16>
    1b02:	00e4      	lsls	r4, r4, #3
    1b04:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1b06:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1b08:	7a2b      	ldrb	r3, [r5, #8]
    1b0a:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1b0c:	2300      	movs	r3, #0
    1b0e:	e7ef      	b.n	1af0 <rtc_calendar_set_alarm+0xc>
    1b10:	00001a25 	.word	0x00001a25

00001b14 <rtc_calendar_init>:
{
    1b14:	b530      	push	{r4, r5, lr}
    1b16:	b083      	sub	sp, #12
    1b18:	0005      	movs	r5, r0
    1b1a:	0014      	movs	r4, r2
	module->hw = hw;
    1b1c:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    1b1e:	4a1c      	ldr	r2, [pc, #112]	; (1b90 <rtc_calendar_init+0x7c>)
    1b20:	6993      	ldr	r3, [r2, #24]
    1b22:	2120      	movs	r1, #32
    1b24:	430b      	orrs	r3, r1
    1b26:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1b28:	a901      	add	r1, sp, #4
    1b2a:	2302      	movs	r3, #2
    1b2c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1b2e:	2004      	movs	r0, #4
    1b30:	4b18      	ldr	r3, [pc, #96]	; (1b94 <rtc_calendar_init+0x80>)
    1b32:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1b34:	2004      	movs	r0, #4
    1b36:	4b18      	ldr	r3, [pc, #96]	; (1b98 <rtc_calendar_init+0x84>)
    1b38:	4798      	blx	r3
	rtc_calendar_reset(module);
    1b3a:	0028      	movs	r0, r5
    1b3c:	4b17      	ldr	r3, [pc, #92]	; (1b9c <rtc_calendar_init+0x88>)
    1b3e:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1b40:	7923      	ldrb	r3, [r4, #4]
    1b42:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1b44:	78e3      	ldrb	r3, [r4, #3]
    1b46:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1b48:	88e3      	ldrh	r3, [r4, #6]
    1b4a:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1b4c:	4b14      	ldr	r3, [pc, #80]	; (1ba0 <rtc_calendar_init+0x8c>)
    1b4e:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1b50:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1b52:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1b54:	7921      	ldrb	r1, [r4, #4]
    1b56:	2900      	cmp	r1, #0
    1b58:	d017      	beq.n	1b8a <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1b5a:	2108      	movs	r1, #8
    1b5c:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    1b5e:	78a1      	ldrb	r1, [r4, #2]
    1b60:	2900      	cmp	r1, #0
    1b62:	d001      	beq.n	1b68 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1b64:	2180      	movs	r1, #128	; 0x80
    1b66:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1b68:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1b6a:	78e3      	ldrb	r3, [r4, #3]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d004      	beq.n	1b7a <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1b70:	8853      	ldrh	r3, [r2, #2]
    1b72:	2180      	movs	r1, #128	; 0x80
    1b74:	01c9      	lsls	r1, r1, #7
    1b76:	430b      	orrs	r3, r1
    1b78:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1b7a:	0021      	movs	r1, r4
    1b7c:	3108      	adds	r1, #8
    1b7e:	2200      	movs	r2, #0
    1b80:	0028      	movs	r0, r5
    1b82:	4b08      	ldr	r3, [pc, #32]	; (1ba4 <rtc_calendar_init+0x90>)
    1b84:	4798      	blx	r3
}
    1b86:	b003      	add	sp, #12
    1b88:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1b8a:	2148      	movs	r1, #72	; 0x48
    1b8c:	430b      	orrs	r3, r1
    1b8e:	e7e6      	b.n	1b5e <rtc_calendar_init+0x4a>
    1b90:	40000400 	.word	0x40000400
    1b94:	00003341 	.word	0x00003341
    1b98:	000032b5 	.word	0x000032b5
    1b9c:	00001a01 	.word	0x00001a01
    1ba0:	200009dc 	.word	0x200009dc
    1ba4:	00001ae5 	.word	0x00001ae5

00001ba8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1baa:	46de      	mov	lr, fp
    1bac:	4657      	mov	r7, sl
    1bae:	464e      	mov	r6, r9
    1bb0:	4645      	mov	r5, r8
    1bb2:	b5e0      	push	{r5, r6, r7, lr}
    1bb4:	b087      	sub	sp, #28
    1bb6:	4680      	mov	r8, r0
    1bb8:	9104      	str	r1, [sp, #16]
    1bba:	0016      	movs	r6, r2
    1bbc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1bbe:	2200      	movs	r2, #0
    1bc0:	2300      	movs	r3, #0
    1bc2:	2100      	movs	r1, #0
    1bc4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1bc6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1bc8:	2001      	movs	r0, #1
    1bca:	0021      	movs	r1, r4
    1bcc:	9600      	str	r6, [sp, #0]
    1bce:	9701      	str	r7, [sp, #4]
    1bd0:	465c      	mov	r4, fp
    1bd2:	9403      	str	r4, [sp, #12]
    1bd4:	4644      	mov	r4, r8
    1bd6:	9405      	str	r4, [sp, #20]
    1bd8:	e013      	b.n	1c02 <long_division+0x5a>
    1bda:	2420      	movs	r4, #32
    1bdc:	1a64      	subs	r4, r4, r1
    1bde:	0005      	movs	r5, r0
    1be0:	40e5      	lsrs	r5, r4
    1be2:	46a8      	mov	r8, r5
    1be4:	e014      	b.n	1c10 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1be6:	9c00      	ldr	r4, [sp, #0]
    1be8:	9d01      	ldr	r5, [sp, #4]
    1bea:	1b12      	subs	r2, r2, r4
    1bec:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1bee:	465c      	mov	r4, fp
    1bf0:	464d      	mov	r5, r9
    1bf2:	432c      	orrs	r4, r5
    1bf4:	46a3      	mov	fp, r4
    1bf6:	9c03      	ldr	r4, [sp, #12]
    1bf8:	4645      	mov	r5, r8
    1bfa:	432c      	orrs	r4, r5
    1bfc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1bfe:	3901      	subs	r1, #1
    1c00:	d325      	bcc.n	1c4e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1c02:	2420      	movs	r4, #32
    1c04:	4264      	negs	r4, r4
    1c06:	190c      	adds	r4, r1, r4
    1c08:	d4e7      	bmi.n	1bda <long_division+0x32>
    1c0a:	0005      	movs	r5, r0
    1c0c:	40a5      	lsls	r5, r4
    1c0e:	46a8      	mov	r8, r5
    1c10:	0004      	movs	r4, r0
    1c12:	408c      	lsls	r4, r1
    1c14:	46a1      	mov	r9, r4
		r = r << 1;
    1c16:	1892      	adds	r2, r2, r2
    1c18:	415b      	adcs	r3, r3
    1c1a:	0014      	movs	r4, r2
    1c1c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1c1e:	9e05      	ldr	r6, [sp, #20]
    1c20:	464f      	mov	r7, r9
    1c22:	403e      	ands	r6, r7
    1c24:	46b4      	mov	ip, r6
    1c26:	9e04      	ldr	r6, [sp, #16]
    1c28:	4647      	mov	r7, r8
    1c2a:	403e      	ands	r6, r7
    1c2c:	46b2      	mov	sl, r6
    1c2e:	4666      	mov	r6, ip
    1c30:	4657      	mov	r7, sl
    1c32:	433e      	orrs	r6, r7
    1c34:	d003      	beq.n	1c3e <long_division+0x96>
			r |= 0x01;
    1c36:	0006      	movs	r6, r0
    1c38:	4326      	orrs	r6, r4
    1c3a:	0032      	movs	r2, r6
    1c3c:	002b      	movs	r3, r5
		if (r >= d) {
    1c3e:	9c00      	ldr	r4, [sp, #0]
    1c40:	9d01      	ldr	r5, [sp, #4]
    1c42:	429d      	cmp	r5, r3
    1c44:	d8db      	bhi.n	1bfe <long_division+0x56>
    1c46:	d1ce      	bne.n	1be6 <long_division+0x3e>
    1c48:	4294      	cmp	r4, r2
    1c4a:	d8d8      	bhi.n	1bfe <long_division+0x56>
    1c4c:	e7cb      	b.n	1be6 <long_division+0x3e>
    1c4e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1c50:	4658      	mov	r0, fp
    1c52:	0019      	movs	r1, r3
    1c54:	b007      	add	sp, #28
    1c56:	bc3c      	pop	{r2, r3, r4, r5}
    1c58:	4690      	mov	r8, r2
    1c5a:	4699      	mov	r9, r3
    1c5c:	46a2      	mov	sl, r4
    1c5e:	46ab      	mov	fp, r5
    1c60:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c62 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1c62:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1c64:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c66:	2340      	movs	r3, #64	; 0x40
    1c68:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1c6a:	4281      	cmp	r1, r0
    1c6c:	d202      	bcs.n	1c74 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1c6e:	0018      	movs	r0, r3
    1c70:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1c72:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1c74:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1c76:	1c63      	adds	r3, r4, #1
    1c78:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1c7a:	4288      	cmp	r0, r1
    1c7c:	d9f9      	bls.n	1c72 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c7e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1c80:	2cff      	cmp	r4, #255	; 0xff
    1c82:	d8f4      	bhi.n	1c6e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1c84:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1c86:	2300      	movs	r3, #0
    1c88:	e7f1      	b.n	1c6e <_sercom_get_sync_baud_val+0xc>
	...

00001c8c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c8e:	b083      	sub	sp, #12
    1c90:	000f      	movs	r7, r1
    1c92:	0016      	movs	r6, r2
    1c94:	aa08      	add	r2, sp, #32
    1c96:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1c98:	0004      	movs	r4, r0
    1c9a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c9c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1c9e:	42bc      	cmp	r4, r7
    1ca0:	d902      	bls.n	1ca8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1ca2:	0010      	movs	r0, r2
    1ca4:	b003      	add	sp, #12
    1ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d114      	bne.n	1cd6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1cac:	0002      	movs	r2, r0
    1cae:	0008      	movs	r0, r1
    1cb0:	2100      	movs	r1, #0
    1cb2:	4c19      	ldr	r4, [pc, #100]	; (1d18 <_sercom_get_async_baud_val+0x8c>)
    1cb4:	47a0      	blx	r4
    1cb6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1cb8:	003a      	movs	r2, r7
    1cba:	2300      	movs	r3, #0
    1cbc:	2000      	movs	r0, #0
    1cbe:	4c17      	ldr	r4, [pc, #92]	; (1d1c <_sercom_get_async_baud_val+0x90>)
    1cc0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1cc2:	2200      	movs	r2, #0
    1cc4:	2301      	movs	r3, #1
    1cc6:	1a12      	subs	r2, r2, r0
    1cc8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1cca:	0c12      	lsrs	r2, r2, #16
    1ccc:	041b      	lsls	r3, r3, #16
    1cce:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1cd0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1cd2:	2200      	movs	r2, #0
    1cd4:	e7e5      	b.n	1ca2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1cd6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1cd8:	2b01      	cmp	r3, #1
    1cda:	d1f9      	bne.n	1cd0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1cdc:	000a      	movs	r2, r1
    1cde:	2300      	movs	r3, #0
    1ce0:	2100      	movs	r1, #0
    1ce2:	4c0d      	ldr	r4, [pc, #52]	; (1d18 <_sercom_get_async_baud_val+0x8c>)
    1ce4:	47a0      	blx	r4
    1ce6:	0002      	movs	r2, r0
    1ce8:	000b      	movs	r3, r1
    1cea:	9200      	str	r2, [sp, #0]
    1cec:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1cee:	0038      	movs	r0, r7
    1cf0:	2100      	movs	r1, #0
    1cf2:	4c0a      	ldr	r4, [pc, #40]	; (1d1c <_sercom_get_async_baud_val+0x90>)
    1cf4:	47a0      	blx	r4
    1cf6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1cf8:	2380      	movs	r3, #128	; 0x80
    1cfa:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1cfc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1cfe:	4298      	cmp	r0, r3
    1d00:	d8cf      	bhi.n	1ca2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1d02:	0f79      	lsrs	r1, r7, #29
    1d04:	00f8      	lsls	r0, r7, #3
    1d06:	9a00      	ldr	r2, [sp, #0]
    1d08:	9b01      	ldr	r3, [sp, #4]
    1d0a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1d0c:	00ea      	lsls	r2, r5, #3
    1d0e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1d10:	b2d2      	uxtb	r2, r2
    1d12:	0352      	lsls	r2, r2, #13
    1d14:	432a      	orrs	r2, r5
    1d16:	e7db      	b.n	1cd0 <_sercom_get_async_baud_val+0x44>
    1d18:	00005a65 	.word	0x00005a65
    1d1c:	00001ba9 	.word	0x00001ba9

00001d20 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1d20:	b510      	push	{r4, lr}
    1d22:	b082      	sub	sp, #8
    1d24:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1d26:	4b0e      	ldr	r3, [pc, #56]	; (1d60 <sercom_set_gclk_generator+0x40>)
    1d28:	781b      	ldrb	r3, [r3, #0]
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d007      	beq.n	1d3e <sercom_set_gclk_generator+0x1e>
    1d2e:	2900      	cmp	r1, #0
    1d30:	d105      	bne.n	1d3e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1d32:	4b0b      	ldr	r3, [pc, #44]	; (1d60 <sercom_set_gclk_generator+0x40>)
    1d34:	785b      	ldrb	r3, [r3, #1]
    1d36:	4283      	cmp	r3, r0
    1d38:	d010      	beq.n	1d5c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1d3a:	201d      	movs	r0, #29
    1d3c:	e00c      	b.n	1d58 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1d3e:	a901      	add	r1, sp, #4
    1d40:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1d42:	2013      	movs	r0, #19
    1d44:	4b07      	ldr	r3, [pc, #28]	; (1d64 <sercom_set_gclk_generator+0x44>)
    1d46:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1d48:	2013      	movs	r0, #19
    1d4a:	4b07      	ldr	r3, [pc, #28]	; (1d68 <sercom_set_gclk_generator+0x48>)
    1d4c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1d4e:	4b04      	ldr	r3, [pc, #16]	; (1d60 <sercom_set_gclk_generator+0x40>)
    1d50:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1d52:	2201      	movs	r2, #1
    1d54:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1d56:	2000      	movs	r0, #0
}
    1d58:	b002      	add	sp, #8
    1d5a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1d5c:	2000      	movs	r0, #0
    1d5e:	e7fb      	b.n	1d58 <sercom_set_gclk_generator+0x38>
    1d60:	20000134 	.word	0x20000134
    1d64:	00003341 	.word	0x00003341
    1d68:	000032b5 	.word	0x000032b5

00001d6c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1d6c:	4b40      	ldr	r3, [pc, #256]	; (1e70 <_sercom_get_default_pad+0x104>)
    1d6e:	4298      	cmp	r0, r3
    1d70:	d031      	beq.n	1dd6 <_sercom_get_default_pad+0x6a>
    1d72:	d90a      	bls.n	1d8a <_sercom_get_default_pad+0x1e>
    1d74:	4b3f      	ldr	r3, [pc, #252]	; (1e74 <_sercom_get_default_pad+0x108>)
    1d76:	4298      	cmp	r0, r3
    1d78:	d04d      	beq.n	1e16 <_sercom_get_default_pad+0xaa>
    1d7a:	4b3f      	ldr	r3, [pc, #252]	; (1e78 <_sercom_get_default_pad+0x10c>)
    1d7c:	4298      	cmp	r0, r3
    1d7e:	d05a      	beq.n	1e36 <_sercom_get_default_pad+0xca>
    1d80:	4b3e      	ldr	r3, [pc, #248]	; (1e7c <_sercom_get_default_pad+0x110>)
    1d82:	4298      	cmp	r0, r3
    1d84:	d037      	beq.n	1df6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1d86:	2000      	movs	r0, #0
}
    1d88:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1d8a:	4b3d      	ldr	r3, [pc, #244]	; (1e80 <_sercom_get_default_pad+0x114>)
    1d8c:	4298      	cmp	r0, r3
    1d8e:	d00c      	beq.n	1daa <_sercom_get_default_pad+0x3e>
    1d90:	4b3c      	ldr	r3, [pc, #240]	; (1e84 <_sercom_get_default_pad+0x118>)
    1d92:	4298      	cmp	r0, r3
    1d94:	d1f7      	bne.n	1d86 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d96:	2901      	cmp	r1, #1
    1d98:	d017      	beq.n	1dca <_sercom_get_default_pad+0x5e>
    1d9a:	2900      	cmp	r1, #0
    1d9c:	d05d      	beq.n	1e5a <_sercom_get_default_pad+0xee>
    1d9e:	2902      	cmp	r1, #2
    1da0:	d015      	beq.n	1dce <_sercom_get_default_pad+0x62>
    1da2:	2903      	cmp	r1, #3
    1da4:	d015      	beq.n	1dd2 <_sercom_get_default_pad+0x66>
	return 0;
    1da6:	2000      	movs	r0, #0
    1da8:	e7ee      	b.n	1d88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1daa:	2901      	cmp	r1, #1
    1dac:	d007      	beq.n	1dbe <_sercom_get_default_pad+0x52>
    1dae:	2900      	cmp	r1, #0
    1db0:	d051      	beq.n	1e56 <_sercom_get_default_pad+0xea>
    1db2:	2902      	cmp	r1, #2
    1db4:	d005      	beq.n	1dc2 <_sercom_get_default_pad+0x56>
    1db6:	2903      	cmp	r1, #3
    1db8:	d005      	beq.n	1dc6 <_sercom_get_default_pad+0x5a>
	return 0;
    1dba:	2000      	movs	r0, #0
    1dbc:	e7e4      	b.n	1d88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1dbe:	4832      	ldr	r0, [pc, #200]	; (1e88 <_sercom_get_default_pad+0x11c>)
    1dc0:	e7e2      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1dc2:	4832      	ldr	r0, [pc, #200]	; (1e8c <_sercom_get_default_pad+0x120>)
    1dc4:	e7e0      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1dc6:	4832      	ldr	r0, [pc, #200]	; (1e90 <_sercom_get_default_pad+0x124>)
    1dc8:	e7de      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1dca:	4832      	ldr	r0, [pc, #200]	; (1e94 <_sercom_get_default_pad+0x128>)
    1dcc:	e7dc      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1dce:	4832      	ldr	r0, [pc, #200]	; (1e98 <_sercom_get_default_pad+0x12c>)
    1dd0:	e7da      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1dd2:	4832      	ldr	r0, [pc, #200]	; (1e9c <_sercom_get_default_pad+0x130>)
    1dd4:	e7d8      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1dd6:	2901      	cmp	r1, #1
    1dd8:	d007      	beq.n	1dea <_sercom_get_default_pad+0x7e>
    1dda:	2900      	cmp	r1, #0
    1ddc:	d03f      	beq.n	1e5e <_sercom_get_default_pad+0xf2>
    1dde:	2902      	cmp	r1, #2
    1de0:	d005      	beq.n	1dee <_sercom_get_default_pad+0x82>
    1de2:	2903      	cmp	r1, #3
    1de4:	d005      	beq.n	1df2 <_sercom_get_default_pad+0x86>
	return 0;
    1de6:	2000      	movs	r0, #0
    1de8:	e7ce      	b.n	1d88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1dea:	482d      	ldr	r0, [pc, #180]	; (1ea0 <_sercom_get_default_pad+0x134>)
    1dec:	e7cc      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1dee:	482d      	ldr	r0, [pc, #180]	; (1ea4 <_sercom_get_default_pad+0x138>)
    1df0:	e7ca      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1df2:	482d      	ldr	r0, [pc, #180]	; (1ea8 <_sercom_get_default_pad+0x13c>)
    1df4:	e7c8      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1df6:	2901      	cmp	r1, #1
    1df8:	d007      	beq.n	1e0a <_sercom_get_default_pad+0x9e>
    1dfa:	2900      	cmp	r1, #0
    1dfc:	d031      	beq.n	1e62 <_sercom_get_default_pad+0xf6>
    1dfe:	2902      	cmp	r1, #2
    1e00:	d005      	beq.n	1e0e <_sercom_get_default_pad+0xa2>
    1e02:	2903      	cmp	r1, #3
    1e04:	d005      	beq.n	1e12 <_sercom_get_default_pad+0xa6>
	return 0;
    1e06:	2000      	movs	r0, #0
    1e08:	e7be      	b.n	1d88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e0a:	4828      	ldr	r0, [pc, #160]	; (1eac <_sercom_get_default_pad+0x140>)
    1e0c:	e7bc      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e0e:	4828      	ldr	r0, [pc, #160]	; (1eb0 <_sercom_get_default_pad+0x144>)
    1e10:	e7ba      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e12:	4828      	ldr	r0, [pc, #160]	; (1eb4 <_sercom_get_default_pad+0x148>)
    1e14:	e7b8      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e16:	2901      	cmp	r1, #1
    1e18:	d007      	beq.n	1e2a <_sercom_get_default_pad+0xbe>
    1e1a:	2900      	cmp	r1, #0
    1e1c:	d023      	beq.n	1e66 <_sercom_get_default_pad+0xfa>
    1e1e:	2902      	cmp	r1, #2
    1e20:	d005      	beq.n	1e2e <_sercom_get_default_pad+0xc2>
    1e22:	2903      	cmp	r1, #3
    1e24:	d005      	beq.n	1e32 <_sercom_get_default_pad+0xc6>
	return 0;
    1e26:	2000      	movs	r0, #0
    1e28:	e7ae      	b.n	1d88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e2a:	4823      	ldr	r0, [pc, #140]	; (1eb8 <_sercom_get_default_pad+0x14c>)
    1e2c:	e7ac      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e2e:	4823      	ldr	r0, [pc, #140]	; (1ebc <_sercom_get_default_pad+0x150>)
    1e30:	e7aa      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e32:	4823      	ldr	r0, [pc, #140]	; (1ec0 <_sercom_get_default_pad+0x154>)
    1e34:	e7a8      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e36:	2901      	cmp	r1, #1
    1e38:	d007      	beq.n	1e4a <_sercom_get_default_pad+0xde>
    1e3a:	2900      	cmp	r1, #0
    1e3c:	d015      	beq.n	1e6a <_sercom_get_default_pad+0xfe>
    1e3e:	2902      	cmp	r1, #2
    1e40:	d005      	beq.n	1e4e <_sercom_get_default_pad+0xe2>
    1e42:	2903      	cmp	r1, #3
    1e44:	d005      	beq.n	1e52 <_sercom_get_default_pad+0xe6>
	return 0;
    1e46:	2000      	movs	r0, #0
    1e48:	e79e      	b.n	1d88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e4a:	481e      	ldr	r0, [pc, #120]	; (1ec4 <_sercom_get_default_pad+0x158>)
    1e4c:	e79c      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e4e:	481e      	ldr	r0, [pc, #120]	; (1ec8 <_sercom_get_default_pad+0x15c>)
    1e50:	e79a      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e52:	481e      	ldr	r0, [pc, #120]	; (1ecc <_sercom_get_default_pad+0x160>)
    1e54:	e798      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e56:	481e      	ldr	r0, [pc, #120]	; (1ed0 <_sercom_get_default_pad+0x164>)
    1e58:	e796      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e5a:	2003      	movs	r0, #3
    1e5c:	e794      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e5e:	481d      	ldr	r0, [pc, #116]	; (1ed4 <_sercom_get_default_pad+0x168>)
    1e60:	e792      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e62:	481d      	ldr	r0, [pc, #116]	; (1ed8 <_sercom_get_default_pad+0x16c>)
    1e64:	e790      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e66:	481d      	ldr	r0, [pc, #116]	; (1edc <_sercom_get_default_pad+0x170>)
    1e68:	e78e      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e6a:	481d      	ldr	r0, [pc, #116]	; (1ee0 <_sercom_get_default_pad+0x174>)
    1e6c:	e78c      	b.n	1d88 <_sercom_get_default_pad+0x1c>
    1e6e:	46c0      	nop			; (mov r8, r8)
    1e70:	42001000 	.word	0x42001000
    1e74:	42001800 	.word	0x42001800
    1e78:	42001c00 	.word	0x42001c00
    1e7c:	42001400 	.word	0x42001400
    1e80:	42000800 	.word	0x42000800
    1e84:	42000c00 	.word	0x42000c00
    1e88:	00050003 	.word	0x00050003
    1e8c:	00060003 	.word	0x00060003
    1e90:	00070003 	.word	0x00070003
    1e94:	00010003 	.word	0x00010003
    1e98:	001e0003 	.word	0x001e0003
    1e9c:	001f0003 	.word	0x001f0003
    1ea0:	00090003 	.word	0x00090003
    1ea4:	000a0003 	.word	0x000a0003
    1ea8:	000b0003 	.word	0x000b0003
    1eac:	00110003 	.word	0x00110003
    1eb0:	00120003 	.word	0x00120003
    1eb4:	00130003 	.word	0x00130003
    1eb8:	000d0003 	.word	0x000d0003
    1ebc:	000e0003 	.word	0x000e0003
    1ec0:	000f0003 	.word	0x000f0003
    1ec4:	00170003 	.word	0x00170003
    1ec8:	00180003 	.word	0x00180003
    1ecc:	00190003 	.word	0x00190003
    1ed0:	00040003 	.word	0x00040003
    1ed4:	00080003 	.word	0x00080003
    1ed8:	00100003 	.word	0x00100003
    1edc:	000c0003 	.word	0x000c0003
    1ee0:	00160003 	.word	0x00160003

00001ee4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1ee4:	b530      	push	{r4, r5, lr}
    1ee6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1ee8:	4b0b      	ldr	r3, [pc, #44]	; (1f18 <_sercom_get_sercom_inst_index+0x34>)
    1eea:	466a      	mov	r2, sp
    1eec:	cb32      	ldmia	r3!, {r1, r4, r5}
    1eee:	c232      	stmia	r2!, {r1, r4, r5}
    1ef0:	cb32      	ldmia	r3!, {r1, r4, r5}
    1ef2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1ef4:	9b00      	ldr	r3, [sp, #0]
    1ef6:	4283      	cmp	r3, r0
    1ef8:	d00b      	beq.n	1f12 <_sercom_get_sercom_inst_index+0x2e>
    1efa:	2301      	movs	r3, #1
    1efc:	009a      	lsls	r2, r3, #2
    1efe:	4669      	mov	r1, sp
    1f00:	5852      	ldr	r2, [r2, r1]
    1f02:	4282      	cmp	r2, r0
    1f04:	d006      	beq.n	1f14 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f06:	3301      	adds	r3, #1
    1f08:	2b06      	cmp	r3, #6
    1f0a:	d1f7      	bne.n	1efc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1f0c:	2000      	movs	r0, #0
}
    1f0e:	b007      	add	sp, #28
    1f10:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f12:	2300      	movs	r3, #0
			return i;
    1f14:	b2d8      	uxtb	r0, r3
    1f16:	e7fa      	b.n	1f0e <_sercom_get_sercom_inst_index+0x2a>
    1f18:	00006714 	.word	0x00006714

00001f1c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1f1c:	4770      	bx	lr
	...

00001f20 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1f20:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1f22:	4b0a      	ldr	r3, [pc, #40]	; (1f4c <_sercom_set_handler+0x2c>)
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	2b00      	cmp	r3, #0
    1f28:	d10c      	bne.n	1f44 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f2a:	4f09      	ldr	r7, [pc, #36]	; (1f50 <_sercom_set_handler+0x30>)
    1f2c:	4e09      	ldr	r6, [pc, #36]	; (1f54 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1f2e:	4d0a      	ldr	r5, [pc, #40]	; (1f58 <_sercom_set_handler+0x38>)
    1f30:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1f32:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1f34:	195a      	adds	r2, r3, r5
    1f36:	6014      	str	r4, [r2, #0]
    1f38:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f3a:	2b18      	cmp	r3, #24
    1f3c:	d1f9      	bne.n	1f32 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1f3e:	2201      	movs	r2, #1
    1f40:	4b02      	ldr	r3, [pc, #8]	; (1f4c <_sercom_set_handler+0x2c>)
    1f42:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1f44:	0080      	lsls	r0, r0, #2
    1f46:	4b02      	ldr	r3, [pc, #8]	; (1f50 <_sercom_set_handler+0x30>)
    1f48:	50c1      	str	r1, [r0, r3]
}
    1f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f4c:	20000136 	.word	0x20000136
    1f50:	20000138 	.word	0x20000138
    1f54:	00001f1d 	.word	0x00001f1d
    1f58:	200009e0 	.word	0x200009e0

00001f5c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1f5c:	b500      	push	{lr}
    1f5e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1f60:	2309      	movs	r3, #9
    1f62:	466a      	mov	r2, sp
    1f64:	7013      	strb	r3, [r2, #0]
    1f66:	3301      	adds	r3, #1
    1f68:	7053      	strb	r3, [r2, #1]
    1f6a:	3301      	adds	r3, #1
    1f6c:	7093      	strb	r3, [r2, #2]
    1f6e:	3301      	adds	r3, #1
    1f70:	70d3      	strb	r3, [r2, #3]
    1f72:	3301      	adds	r3, #1
    1f74:	7113      	strb	r3, [r2, #4]
    1f76:	3301      	adds	r3, #1
    1f78:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1f7a:	4b03      	ldr	r3, [pc, #12]	; (1f88 <_sercom_get_interrupt_vector+0x2c>)
    1f7c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1f7e:	466b      	mov	r3, sp
    1f80:	5618      	ldrsb	r0, [r3, r0]
}
    1f82:	b003      	add	sp, #12
    1f84:	bd00      	pop	{pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	00001ee5 	.word	0x00001ee5

00001f8c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1f8c:	b510      	push	{r4, lr}
    1f8e:	4b02      	ldr	r3, [pc, #8]	; (1f98 <SERCOM0_Handler+0xc>)
    1f90:	681b      	ldr	r3, [r3, #0]
    1f92:	2000      	movs	r0, #0
    1f94:	4798      	blx	r3
    1f96:	bd10      	pop	{r4, pc}
    1f98:	20000138 	.word	0x20000138

00001f9c <SERCOM1_Handler>:
    1f9c:	b510      	push	{r4, lr}
    1f9e:	4b02      	ldr	r3, [pc, #8]	; (1fa8 <SERCOM1_Handler+0xc>)
    1fa0:	685b      	ldr	r3, [r3, #4]
    1fa2:	2001      	movs	r0, #1
    1fa4:	4798      	blx	r3
    1fa6:	bd10      	pop	{r4, pc}
    1fa8:	20000138 	.word	0x20000138

00001fac <SERCOM2_Handler>:
    1fac:	b510      	push	{r4, lr}
    1fae:	4b02      	ldr	r3, [pc, #8]	; (1fb8 <SERCOM2_Handler+0xc>)
    1fb0:	689b      	ldr	r3, [r3, #8]
    1fb2:	2002      	movs	r0, #2
    1fb4:	4798      	blx	r3
    1fb6:	bd10      	pop	{r4, pc}
    1fb8:	20000138 	.word	0x20000138

00001fbc <SERCOM3_Handler>:
    1fbc:	b510      	push	{r4, lr}
    1fbe:	4b02      	ldr	r3, [pc, #8]	; (1fc8 <SERCOM3_Handler+0xc>)
    1fc0:	68db      	ldr	r3, [r3, #12]
    1fc2:	2003      	movs	r0, #3
    1fc4:	4798      	blx	r3
    1fc6:	bd10      	pop	{r4, pc}
    1fc8:	20000138 	.word	0x20000138

00001fcc <SERCOM4_Handler>:
    1fcc:	b510      	push	{r4, lr}
    1fce:	4b02      	ldr	r3, [pc, #8]	; (1fd8 <SERCOM4_Handler+0xc>)
    1fd0:	691b      	ldr	r3, [r3, #16]
    1fd2:	2004      	movs	r0, #4
    1fd4:	4798      	blx	r3
    1fd6:	bd10      	pop	{r4, pc}
    1fd8:	20000138 	.word	0x20000138

00001fdc <SERCOM5_Handler>:
    1fdc:	b510      	push	{r4, lr}
    1fde:	4b02      	ldr	r3, [pc, #8]	; (1fe8 <SERCOM5_Handler+0xc>)
    1fe0:	695b      	ldr	r3, [r3, #20]
    1fe2:	2005      	movs	r0, #5
    1fe4:	4798      	blx	r3
    1fe6:	bd10      	pop	{r4, pc}
    1fe8:	20000138 	.word	0x20000138

00001fec <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    1fec:	b570      	push	{r4, r5, r6, lr}
    1fee:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ff0:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1ff2:	0020      	movs	r0, r4
    1ff4:	4b0e      	ldr	r3, [pc, #56]	; (2030 <STACK_SIZE+0x30>)
    1ff6:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1ff8:	231f      	movs	r3, #31
    1ffa:	4018      	ands	r0, r3
    1ffc:	3b1e      	subs	r3, #30
    1ffe:	4083      	lsls	r3, r0
    2000:	2280      	movs	r2, #128	; 0x80
    2002:	490c      	ldr	r1, [pc, #48]	; (2034 <STACK_SIZE+0x34>)
    2004:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2006:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2008:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    200a:	2b00      	cmp	r3, #0
    200c:	d1fc      	bne.n	2008 <STACK_SIZE+0x8>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    200e:	338f      	adds	r3, #143	; 0x8f
    2010:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2012:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2014:	6823      	ldr	r3, [r4, #0]
    2016:	2202      	movs	r2, #2
    2018:	4393      	bics	r3, r2
    201a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    201c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    201e:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    2020:	2b00      	cmp	r3, #0
    2022:	d1fc      	bne.n	201e <STACK_SIZE+0x1e>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    2024:	6823      	ldr	r3, [r4, #0]
    2026:	2201      	movs	r2, #1
    2028:	4313      	orrs	r3, r2
    202a:	6023      	str	r3, [r4, #0]
}
    202c:	bd70      	pop	{r4, r5, r6, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00001f5d 	.word	0x00001f5d
    2034:	e000e100 	.word	0xe000e100

00002038 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    2038:	b570      	push	{r4, r5, r6, lr}
    203a:	b082      	sub	sp, #8
    203c:	0005      	movs	r5, r0
    203e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    2040:	2200      	movs	r2, #0
    2042:	466b      	mov	r3, sp
    2044:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    2046:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2048:	0030      	movs	r0, r6
    204a:	4b24      	ldr	r3, [pc, #144]	; (20dc <spi_set_baudrate+0xa4>)
    204c:	4798      	blx	r3
    204e:	231f      	movs	r3, #31
    2050:	4018      	ands	r0, r3
    2052:	3b1e      	subs	r3, #30
    2054:	4083      	lsls	r3, r0
    2056:	2280      	movs	r2, #128	; 0x80
    2058:	4921      	ldr	r1, [pc, #132]	; (20e0 <spi_set_baudrate+0xa8>)
    205a:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    205c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    205e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2060:	2b00      	cmp	r3, #0
    2062:	d1fc      	bne.n	205e <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2064:	338f      	adds	r3, #143	; 0x8f
    2066:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2068:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    206a:	6833      	ldr	r3, [r6, #0]
    206c:	2202      	movs	r2, #2
    206e:	4393      	bics	r3, r2
    2070:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2072:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2074:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    2076:	2b00      	cmp	r3, #0
    2078:	d1fc      	bne.n	2074 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    207a:	4b1a      	ldr	r3, [pc, #104]	; (20e4 <spi_set_baudrate+0xac>)
    207c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    207e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2080:	b2c0      	uxtb	r0, r0
    2082:	4b19      	ldr	r3, [pc, #100]	; (20e8 <spi_set_baudrate+0xb0>)
    2084:	4798      	blx	r3
    2086:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    2088:	466b      	mov	r3, sp
    208a:	1d9a      	adds	r2, r3, #6
    208c:	0020      	movs	r0, r4
    208e:	4b17      	ldr	r3, [pc, #92]	; (20ec <spi_set_baudrate+0xb4>)
    2090:	4798      	blx	r3
    2092:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    2094:	d003      	beq.n	209e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    2096:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    2098:	0020      	movs	r0, r4
    209a:	b002      	add	sp, #8
    209c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    209e:	466b      	mov	r3, sp
    20a0:	3306      	adds	r3, #6
    20a2:	781b      	ldrb	r3, [r3, #0]
    20a4:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20a6:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20a8:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    20aa:	2b00      	cmp	r3, #0
    20ac:	d1fc      	bne.n	20a8 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    20ae:	0030      	movs	r0, r6
    20b0:	4b0a      	ldr	r3, [pc, #40]	; (20dc <spi_set_baudrate+0xa4>)
    20b2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    20b4:	231f      	movs	r3, #31
    20b6:	4018      	ands	r0, r3
    20b8:	3b1e      	subs	r3, #30
    20ba:	4083      	lsls	r3, r0
    20bc:	4a08      	ldr	r2, [pc, #32]	; (20e0 <spi_set_baudrate+0xa8>)
    20be:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20c0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20c2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    20c4:	2b00      	cmp	r3, #0
    20c6:	d1fc      	bne.n	20c2 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    20c8:	6833      	ldr	r3, [r6, #0]
    20ca:	2202      	movs	r2, #2
    20cc:	4313      	orrs	r3, r2
    20ce:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20d0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20d2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    20d4:	2b00      	cmp	r3, #0
    20d6:	d1fc      	bne.n	20d2 <spi_set_baudrate+0x9a>
    20d8:	e7de      	b.n	2098 <spi_set_baudrate+0x60>
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	00001f5d 	.word	0x00001f5d
    20e0:	e000e100 	.word	0xe000e100
    20e4:	00001ee5 	.word	0x00001ee5
    20e8:	0000335d 	.word	0x0000335d
    20ec:	00001c63 	.word	0x00001c63

000020f0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f2:	b08b      	sub	sp, #44	; 0x2c
    20f4:	0005      	movs	r5, r0
    20f6:	000c      	movs	r4, r1
    20f8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    20fa:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    20fc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    20fe:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2100:	079b      	lsls	r3, r3, #30
    2102:	d501      	bpl.n	2108 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2104:	b00b      	add	sp, #44	; 0x2c
    2106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2108:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    210a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    210c:	07db      	lsls	r3, r3, #31
    210e:	d4f9      	bmi.n	2104 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2110:	0008      	movs	r0, r1
    2112:	4b60      	ldr	r3, [pc, #384]	; (2294 <spi_init+0x1a4>)
    2114:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2116:	4a60      	ldr	r2, [pc, #384]	; (2298 <spi_init+0x1a8>)
    2118:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    211a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    211c:	2301      	movs	r3, #1
    211e:	40bb      	lsls	r3, r7
    2120:	430b      	orrs	r3, r1
    2122:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2124:	a909      	add	r1, sp, #36	; 0x24
    2126:	2724      	movs	r7, #36	; 0x24
    2128:	5df3      	ldrb	r3, [r6, r7]
    212a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    212c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    212e:	b2c3      	uxtb	r3, r0
    2130:	9301      	str	r3, [sp, #4]
    2132:	0018      	movs	r0, r3
    2134:	4b59      	ldr	r3, [pc, #356]	; (229c <spi_init+0x1ac>)
    2136:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2138:	9801      	ldr	r0, [sp, #4]
    213a:	4b59      	ldr	r3, [pc, #356]	; (22a0 <spi_init+0x1b0>)
    213c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    213e:	5df0      	ldrb	r0, [r6, r7]
    2140:	2100      	movs	r1, #0
    2142:	4b58      	ldr	r3, [pc, #352]	; (22a4 <spi_init+0x1b4>)
    2144:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2146:	7833      	ldrb	r3, [r6, #0]
    2148:	2b01      	cmp	r3, #1
    214a:	d038      	beq.n	21be <spi_init+0xce>
    214c:	002b      	movs	r3, r5
    214e:	330c      	adds	r3, #12
    2150:	0029      	movs	r1, r5
    2152:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    2154:	2200      	movs	r2, #0
    2156:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2158:	428b      	cmp	r3, r1
    215a:	d1fc      	bne.n	2156 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    215c:	2300      	movs	r3, #0
    215e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    2160:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    2162:	2400      	movs	r4, #0
    2164:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    2166:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    2168:	3336      	adds	r3, #54	; 0x36
    216a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    216c:	3301      	adds	r3, #1
    216e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    2170:	3301      	adds	r3, #1
    2172:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    2174:	3b35      	subs	r3, #53	; 0x35
    2176:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    2178:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    217a:	6828      	ldr	r0, [r5, #0]
    217c:	4b45      	ldr	r3, [pc, #276]	; (2294 <spi_init+0x1a4>)
    217e:	4798      	blx	r3
    2180:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2182:	4949      	ldr	r1, [pc, #292]	; (22a8 <spi_init+0x1b8>)
    2184:	4b49      	ldr	r3, [pc, #292]	; (22ac <spi_init+0x1bc>)
    2186:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2188:	00bf      	lsls	r7, r7, #2
    218a:	4b49      	ldr	r3, [pc, #292]	; (22b0 <spi_init+0x1c0>)
    218c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    218e:	682f      	ldr	r7, [r5, #0]
    2190:	ab04      	add	r3, sp, #16
    2192:	2280      	movs	r2, #128	; 0x80
    2194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2196:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2198:	3a7f      	subs	r2, #127	; 0x7f
    219a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    219c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    219e:	7833      	ldrb	r3, [r6, #0]
    21a0:	2b00      	cmp	r3, #0
    21a2:	d102      	bne.n	21aa <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    21a4:	2200      	movs	r2, #0
    21a6:	ab04      	add	r3, sp, #16
    21a8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    21aa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    21ac:	9305      	str	r3, [sp, #20]
    21ae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    21b0:	9306      	str	r3, [sp, #24]
    21b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    21b4:	9307      	str	r3, [sp, #28]
    21b6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    21b8:	9308      	str	r3, [sp, #32]
    21ba:	2400      	movs	r4, #0
    21bc:	e00b      	b.n	21d6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    21be:	6823      	ldr	r3, [r4, #0]
    21c0:	220c      	movs	r2, #12
    21c2:	4313      	orrs	r3, r2
    21c4:	6023      	str	r3, [r4, #0]
    21c6:	e7c1      	b.n	214c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    21c8:	0038      	movs	r0, r7
    21ca:	4b3a      	ldr	r3, [pc, #232]	; (22b4 <spi_init+0x1c4>)
    21cc:	4798      	blx	r3
    21ce:	e00a      	b.n	21e6 <spi_init+0xf6>
    21d0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    21d2:	2c04      	cmp	r4, #4
    21d4:	d010      	beq.n	21f8 <spi_init+0x108>
    21d6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    21d8:	00a3      	lsls	r3, r4, #2
    21da:	aa02      	add	r2, sp, #8
    21dc:	200c      	movs	r0, #12
    21de:	1812      	adds	r2, r2, r0
    21e0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    21e2:	2800      	cmp	r0, #0
    21e4:	d0f0      	beq.n	21c8 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    21e6:	1c43      	adds	r3, r0, #1
    21e8:	d0f2      	beq.n	21d0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    21ea:	a904      	add	r1, sp, #16
    21ec:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    21ee:	0c00      	lsrs	r0, r0, #16
    21f0:	b2c0      	uxtb	r0, r0
    21f2:	4b31      	ldr	r3, [pc, #196]	; (22b8 <spi_init+0x1c8>)
    21f4:	4798      	blx	r3
    21f6:	e7eb      	b.n	21d0 <spi_init+0xe0>
	module->mode             = config->mode;
    21f8:	7833      	ldrb	r3, [r6, #0]
    21fa:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    21fc:	7c33      	ldrb	r3, [r6, #16]
    21fe:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    2200:	7cb3      	ldrb	r3, [r6, #18]
    2202:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    2204:	7d33      	ldrb	r3, [r6, #20]
    2206:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    2208:	2200      	movs	r2, #0
    220a:	ab02      	add	r3, sp, #8
    220c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    220e:	7833      	ldrb	r3, [r6, #0]
    2210:	2b01      	cmp	r3, #1
    2212:	d028      	beq.n	2266 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    2214:	6873      	ldr	r3, [r6, #4]
    2216:	68b2      	ldr	r2, [r6, #8]
    2218:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    221a:	68f2      	ldr	r2, [r6, #12]
    221c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    221e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    2220:	7c72      	ldrb	r2, [r6, #17]
    2222:	2a00      	cmp	r2, #0
    2224:	d103      	bne.n	222e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2226:	4a25      	ldr	r2, [pc, #148]	; (22bc <spi_init+0x1cc>)
    2228:	7892      	ldrb	r2, [r2, #2]
    222a:	0792      	lsls	r2, r2, #30
    222c:	d501      	bpl.n	2232 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    222e:	2280      	movs	r2, #128	; 0x80
    2230:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    2232:	7cb2      	ldrb	r2, [r6, #18]
    2234:	2a00      	cmp	r2, #0
    2236:	d002      	beq.n	223e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2238:	2280      	movs	r2, #128	; 0x80
    223a:	0292      	lsls	r2, r2, #10
    223c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    223e:	7cf2      	ldrb	r2, [r6, #19]
    2240:	2a00      	cmp	r2, #0
    2242:	d002      	beq.n	224a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2244:	2280      	movs	r2, #128	; 0x80
    2246:	0092      	lsls	r2, r2, #2
    2248:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    224a:	7d32      	ldrb	r2, [r6, #20]
    224c:	2a00      	cmp	r2, #0
    224e:	d002      	beq.n	2256 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2250:	2280      	movs	r2, #128	; 0x80
    2252:	0192      	lsls	r2, r2, #6
    2254:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    2256:	683a      	ldr	r2, [r7, #0]
    2258:	4313      	orrs	r3, r2
    225a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    225c:	687b      	ldr	r3, [r7, #4]
    225e:	430b      	orrs	r3, r1
    2260:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    2262:	2000      	movs	r0, #0
    2264:	e74e      	b.n	2104 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2266:	6828      	ldr	r0, [r5, #0]
    2268:	4b0a      	ldr	r3, [pc, #40]	; (2294 <spi_init+0x1a4>)
    226a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    226c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    226e:	b2c0      	uxtb	r0, r0
    2270:	4b13      	ldr	r3, [pc, #76]	; (22c0 <spi_init+0x1d0>)
    2272:	4798      	blx	r3
    2274:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    2276:	ab02      	add	r3, sp, #8
    2278:	1d9a      	adds	r2, r3, #6
    227a:	69b0      	ldr	r0, [r6, #24]
    227c:	4b11      	ldr	r3, [pc, #68]	; (22c4 <spi_init+0x1d4>)
    227e:	4798      	blx	r3
    2280:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    2282:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2284:	2b00      	cmp	r3, #0
    2286:	d000      	beq.n	228a <spi_init+0x19a>
    2288:	e73c      	b.n	2104 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    228a:	ab02      	add	r3, sp, #8
    228c:	3306      	adds	r3, #6
    228e:	781b      	ldrb	r3, [r3, #0]
    2290:	733b      	strb	r3, [r7, #12]
    2292:	e7bf      	b.n	2214 <spi_init+0x124>
    2294:	00001ee5 	.word	0x00001ee5
    2298:	40000400 	.word	0x40000400
    229c:	00003341 	.word	0x00003341
    22a0:	000032b5 	.word	0x000032b5
    22a4:	00001d21 	.word	0x00001d21
    22a8:	0000255d 	.word	0x0000255d
    22ac:	00001f21 	.word	0x00001f21
    22b0:	200009e0 	.word	0x200009e0
    22b4:	00001d6d 	.word	0x00001d6d
    22b8:	00003439 	.word	0x00003439
    22bc:	41002000 	.word	0x41002000
    22c0:	0000335d 	.word	0x0000335d
    22c4:	00001c63 	.word	0x00001c63

000022c8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    22c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ca:	46d6      	mov	lr, sl
    22cc:	4647      	mov	r7, r8
    22ce:	b580      	push	{r7, lr}
    22d0:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    22d2:	2438      	movs	r4, #56	; 0x38
    22d4:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    22d6:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    22d8:	2d05      	cmp	r5, #5
    22da:	d002      	beq.n	22e2 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    22dc:	3412      	adds	r4, #18
	if (length == 0) {
    22de:	2a00      	cmp	r2, #0
    22e0:	d105      	bne.n	22ee <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    22e2:	0020      	movs	r0, r4
    22e4:	b003      	add	sp, #12
    22e6:	bc0c      	pop	{r2, r3}
    22e8:	4690      	mov	r8, r2
    22ea:	469a      	mov	sl, r3
    22ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    22ee:	79c4      	ldrb	r4, [r0, #7]
    22f0:	2c00      	cmp	r4, #0
    22f2:	d144      	bne.n	237e <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    22f4:	341c      	adds	r4, #28
    22f6:	e7f4      	b.n	22e2 <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22f8:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22fa:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    22fc:	423c      	tst	r4, r7
    22fe:	d0fc      	beq.n	22fa <spi_read_buffer_wait+0x32>
    2300:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2302:	423c      	tst	r4, r7
    2304:	d01a      	beq.n	233c <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2306:	4644      	mov	r4, r8
    2308:	62ac      	str	r4, [r5, #40]	; 0x28
    230a:	e017      	b.n	233c <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    230c:	7984      	ldrb	r4, [r0, #6]
    230e:	2c01      	cmp	r4, #1
    2310:	d026      	beq.n	2360 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2312:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2314:	b2ec      	uxtb	r4, r5
    2316:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    2318:	9c01      	ldr	r4, [sp, #4]
    231a:	2c00      	cmp	r4, #0
    231c:	d13a      	bne.n	2394 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    231e:	1c75      	adds	r5, r6, #1
    2320:	b2ad      	uxth	r5, r5
    2322:	4664      	mov	r4, ip
    2324:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2326:	7984      	ldrb	r4, [r0, #6]
    2328:	2c01      	cmp	r4, #1
    232a:	d01e      	beq.n	236a <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    232c:	002e      	movs	r6, r5
	while (length--) {
    232e:	3a01      	subs	r2, #1
    2330:	b292      	uxth	r2, r2
    2332:	4552      	cmp	r2, sl
    2334:	d01f      	beq.n	2376 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    2336:	7944      	ldrb	r4, [r0, #5]
    2338:	2c01      	cmp	r4, #1
    233a:	d0dd      	beq.n	22f8 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    233c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    233e:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    2340:	421c      	tst	r4, r3
    2342:	d0fc      	beq.n	233e <spi_read_buffer_wait+0x76>
    2344:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    2346:	421c      	tst	r4, r3
    2348:	d017      	beq.n	237a <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    234a:	8b6c      	ldrh	r4, [r5, #26]
    234c:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    234e:	2400      	movs	r4, #0
    2350:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2352:	4664      	mov	r4, ip
    2354:	421c      	tst	r4, r3
    2356:	d0d9      	beq.n	230c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2358:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    235a:	241e      	movs	r4, #30
    235c:	9401      	str	r4, [sp, #4]
    235e:	e7d5      	b.n	230c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2360:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2362:	05e4      	lsls	r4, r4, #23
    2364:	0de4      	lsrs	r4, r4, #23
    2366:	46a4      	mov	ip, r4
    2368:	e7d6      	b.n	2318 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    236a:	3602      	adds	r6, #2
    236c:	b2b6      	uxth	r6, r6
    236e:	4664      	mov	r4, ip
    2370:	0a24      	lsrs	r4, r4, #8
    2372:	554c      	strb	r4, [r1, r5]
    2374:	e7db      	b.n	232e <spi_read_buffer_wait+0x66>
    2376:	9c01      	ldr	r4, [sp, #4]
    2378:	e7b3      	b.n	22e2 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    237a:	2410      	movs	r4, #16
    237c:	e7b1      	b.n	22e2 <spi_read_buffer_wait+0x1a>
	while (length--) {
    237e:	3a01      	subs	r2, #1
    2380:	b292      	uxth	r2, r2
    2382:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    2384:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2386:	05db      	lsls	r3, r3, #23
    2388:	0ddb      	lsrs	r3, r3, #23
    238a:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    238c:	2304      	movs	r3, #4
	while (length--) {
    238e:	4c02      	ldr	r4, [pc, #8]	; (2398 <spi_read_buffer_wait+0xd0>)
    2390:	46a2      	mov	sl, r4
    2392:	e7d0      	b.n	2336 <spi_read_buffer_wait+0x6e>
    2394:	9c01      	ldr	r4, [sp, #4]
    2396:	e7a4      	b.n	22e2 <spi_read_buffer_wait+0x1a>
    2398:	0000ffff 	.word	0x0000ffff

0000239c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    239c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    239e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    23a0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    23a2:	2c01      	cmp	r4, #1
    23a4:	d001      	beq.n	23aa <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    23a6:	0018      	movs	r0, r3
    23a8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    23aa:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    23ac:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    23ae:	2c00      	cmp	r4, #0
    23b0:	d1f9      	bne.n	23a6 <spi_select_slave+0xa>
		if (select) {
    23b2:	2a00      	cmp	r2, #0
    23b4:	d058      	beq.n	2468 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    23b6:	784b      	ldrb	r3, [r1, #1]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d044      	beq.n	2446 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    23bc:	6803      	ldr	r3, [r0, #0]
    23be:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    23c0:	07db      	lsls	r3, r3, #31
    23c2:	d410      	bmi.n	23e6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    23c4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    23c6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    23c8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    23ca:	2900      	cmp	r1, #0
    23cc:	d104      	bne.n	23d8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    23ce:	0953      	lsrs	r3, r2, #5
    23d0:	01db      	lsls	r3, r3, #7
    23d2:	492e      	ldr	r1, [pc, #184]	; (248c <spi_select_slave+0xf0>)
    23d4:	468c      	mov	ip, r1
    23d6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    23d8:	211f      	movs	r1, #31
    23da:	4011      	ands	r1, r2
    23dc:	2201      	movs	r2, #1
    23de:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    23e0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    23e2:	2305      	movs	r3, #5
    23e4:	e7df      	b.n	23a6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    23e6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    23e8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    23ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    23ec:	2c00      	cmp	r4, #0
    23ee:	d104      	bne.n	23fa <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    23f0:	0953      	lsrs	r3, r2, #5
    23f2:	01db      	lsls	r3, r3, #7
    23f4:	4c25      	ldr	r4, [pc, #148]	; (248c <spi_select_slave+0xf0>)
    23f6:	46a4      	mov	ip, r4
    23f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    23fa:	241f      	movs	r4, #31
    23fc:	4014      	ands	r4, r2
    23fe:	2201      	movs	r2, #1
    2400:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2402:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2404:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2406:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2408:	07d2      	lsls	r2, r2, #31
    240a:	d501      	bpl.n	2410 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    240c:	788a      	ldrb	r2, [r1, #2]
    240e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2410:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    2412:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2414:	2a00      	cmp	r2, #0
    2416:	d1c6      	bne.n	23a6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2418:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    241a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    241c:	7e13      	ldrb	r3, [r2, #24]
    241e:	420b      	tst	r3, r1
    2420:	d0fc      	beq.n	241c <spi_select_slave+0x80>
    2422:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2424:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    2426:	0749      	lsls	r1, r1, #29
    2428:	d5bd      	bpl.n	23a6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    242a:	8b53      	ldrh	r3, [r2, #26]
    242c:	075b      	lsls	r3, r3, #29
    242e:	d501      	bpl.n	2434 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2430:	2304      	movs	r3, #4
    2432:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2434:	7983      	ldrb	r3, [r0, #6]
    2436:	2b01      	cmp	r3, #1
    2438:	d002      	beq.n	2440 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    243a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    243c:	2300      	movs	r3, #0
    243e:	e7b2      	b.n	23a6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2440:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2442:	2300      	movs	r3, #0
    2444:	e7af      	b.n	23a6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2446:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2448:	09d1      	lsrs	r1, r2, #7
		return NULL;
    244a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    244c:	2900      	cmp	r1, #0
    244e:	d104      	bne.n	245a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2450:	0953      	lsrs	r3, r2, #5
    2452:	01db      	lsls	r3, r3, #7
    2454:	490d      	ldr	r1, [pc, #52]	; (248c <spi_select_slave+0xf0>)
    2456:	468c      	mov	ip, r1
    2458:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    245a:	211f      	movs	r1, #31
    245c:	4011      	ands	r1, r2
    245e:	2201      	movs	r2, #1
    2460:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2462:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    2464:	2300      	movs	r3, #0
    2466:	e79e      	b.n	23a6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2468:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    246a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    246c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    246e:	2900      	cmp	r1, #0
    2470:	d104      	bne.n	247c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2472:	0953      	lsrs	r3, r2, #5
    2474:	01db      	lsls	r3, r3, #7
    2476:	4905      	ldr	r1, [pc, #20]	; (248c <spi_select_slave+0xf0>)
    2478:	468c      	mov	ip, r1
    247a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    247c:	211f      	movs	r1, #31
    247e:	4011      	ands	r1, r2
    2480:	2201      	movs	r2, #1
    2482:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2484:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2486:	2300      	movs	r3, #0
    2488:	e78d      	b.n	23a6 <spi_select_slave+0xa>
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	41004400 	.word	0x41004400

00002490 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2490:	b5f0      	push	{r4, r5, r6, r7, lr}
    2492:	46de      	mov	lr, fp
    2494:	4657      	mov	r7, sl
    2496:	464e      	mov	r6, r9
    2498:	4645      	mov	r5, r8
    249a:	b5e0      	push	{r5, r6, r7, lr}
    249c:	b083      	sub	sp, #12
    249e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    24a0:	2338      	movs	r3, #56	; 0x38
    24a2:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    24a4:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    24a6:	2c05      	cmp	r4, #5
    24a8:	d002      	beq.n	24b0 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    24aa:	3312      	adds	r3, #18
	if (length == 0) {
    24ac:	2a00      	cmp	r2, #0
    24ae:	d14b      	bne.n	2548 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    24b0:	0018      	movs	r0, r3
    24b2:	b003      	add	sp, #12
    24b4:	bc3c      	pop	{r2, r3, r4, r5}
    24b6:	4690      	mov	r8, r2
    24b8:	4699      	mov	r9, r3
    24ba:	46a2      	mov	sl, r4
    24bc:	46ab      	mov	fp, r5
    24be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    24c0:	3702      	adds	r7, #2
    24c2:	b2bf      	uxth	r7, r7
    24c4:	4641      	mov	r1, r8
    24c6:	4653      	mov	r3, sl
    24c8:	5c59      	ldrb	r1, [r3, r1]
    24ca:	0209      	lsls	r1, r1, #8
    24cc:	465b      	mov	r3, fp
    24ce:	430b      	orrs	r3, r1
    24d0:	e018      	b.n	2504 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24d2:	7983      	ldrb	r3, [r0, #6]
    24d4:	2b01      	cmp	r3, #1
    24d6:	d02a      	beq.n	252e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    24da:	3e01      	subs	r6, #1
    24dc:	b2b6      	uxth	r6, r6
    24de:	4566      	cmp	r6, ip
    24e0:	d027      	beq.n	2532 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    24e2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24e4:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    24e6:	4223      	tst	r3, r4
    24e8:	d0fc      	beq.n	24e4 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    24ea:	1c7b      	adds	r3, r7, #1
    24ec:	b29b      	uxth	r3, r3
    24ee:	4698      	mov	r8, r3
    24f0:	4653      	mov	r3, sl
    24f2:	5ddb      	ldrb	r3, [r3, r7]
    24f4:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24f6:	7981      	ldrb	r1, [r0, #6]
    24f8:	2901      	cmp	r1, #1
    24fa:	d0e1      	beq.n	24c0 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    24fc:	4669      	mov	r1, sp
    24fe:	80cb      	strh	r3, [r1, #6]
    2500:	88cb      	ldrh	r3, [r1, #6]
    2502:	4647      	mov	r7, r8
    2504:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    2506:	4221      	tst	r1, r4
    2508:	d002      	beq.n	2510 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    250a:	05db      	lsls	r3, r3, #23
    250c:	0ddb      	lsrs	r3, r3, #23
    250e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    2510:	79c3      	ldrb	r3, [r0, #7]
    2512:	2b00      	cmp	r3, #0
    2514:	d0e1      	beq.n	24da <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2516:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2518:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    251a:	422b      	tst	r3, r5
    251c:	d0fc      	beq.n	2518 <spi_write_buffer_wait+0x88>
    251e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    2520:	422b      	tst	r3, r5
    2522:	d0da      	beq.n	24da <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2524:	8b53      	ldrh	r3, [r2, #26]
    2526:	422b      	tst	r3, r5
    2528:	d0d3      	beq.n	24d2 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    252a:	8355      	strh	r5, [r2, #26]
    252c:	e7d1      	b.n	24d2 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    252e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2530:	e7d3      	b.n	24da <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    2532:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    2534:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    2536:	2a01      	cmp	r2, #1
    2538:	d1ba      	bne.n	24b0 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    253a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    253c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    253e:	7e0b      	ldrb	r3, [r1, #24]
    2540:	4213      	tst	r3, r2
    2542:	d0fc      	beq.n	253e <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    2544:	2300      	movs	r3, #0
    2546:	e7b3      	b.n	24b0 <spi_write_buffer_wait+0x20>
	while (length--) {
    2548:	3a01      	subs	r2, #1
    254a:	b296      	uxth	r6, r2
    254c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    254e:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    2550:	2504      	movs	r5, #4
	while (length--) {
    2552:	4b01      	ldr	r3, [pc, #4]	; (2558 <spi_write_buffer_wait+0xc8>)
    2554:	469c      	mov	ip, r3
    2556:	e7c4      	b.n	24e2 <spi_write_buffer_wait+0x52>
    2558:	0000ffff 	.word	0x0000ffff

0000255c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    255e:	0080      	lsls	r0, r0, #2
    2560:	4b70      	ldr	r3, [pc, #448]	; (2724 <_spi_interrupt_handler+0x1c8>)
    2562:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2564:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    2566:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    2568:	5ce7      	ldrb	r7, [r4, r3]
    256a:	2236      	movs	r2, #54	; 0x36
    256c:	5ca2      	ldrb	r2, [r4, r2]
    256e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2570:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    2572:	7db5      	ldrb	r5, [r6, #22]
    2574:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    2576:	07eb      	lsls	r3, r5, #31
    2578:	d502      	bpl.n	2580 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    257a:	7963      	ldrb	r3, [r4, #5]
    257c:	2b01      	cmp	r3, #1
    257e:	d01e      	beq.n	25be <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2580:	076b      	lsls	r3, r5, #29
    2582:	d511      	bpl.n	25a8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2584:	8b73      	ldrh	r3, [r6, #26]
    2586:	075b      	lsls	r3, r3, #29
    2588:	d55a      	bpl.n	2640 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    258a:	7a63      	ldrb	r3, [r4, #9]
    258c:	2b01      	cmp	r3, #1
    258e:	d008      	beq.n	25a2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2590:	221e      	movs	r2, #30
    2592:	2338      	movs	r3, #56	; 0x38
    2594:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2596:	3b35      	subs	r3, #53	; 0x35
    2598:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    259a:	3302      	adds	r3, #2
    259c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    259e:	073b      	lsls	r3, r7, #28
    25a0:	d44a      	bmi.n	2638 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    25a2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    25a4:	2304      	movs	r3, #4
    25a6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    25a8:	07ab      	lsls	r3, r5, #30
    25aa:	d503      	bpl.n	25b4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    25ac:	7963      	ldrb	r3, [r4, #5]
    25ae:	2b01      	cmp	r3, #1
    25b0:	d100      	bne.n	25b4 <_spi_interrupt_handler+0x58>
    25b2:	e097      	b.n	26e4 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    25b4:	b26d      	sxtb	r5, r5
    25b6:	2d00      	cmp	r5, #0
    25b8:	da00      	bge.n	25bc <_spi_interrupt_handler+0x60>
    25ba:	e0a9      	b.n	2710 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    25bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    25be:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    25c0:	2b00      	cmp	r3, #0
    25c2:	d022      	beq.n	260a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    25c4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    25c6:	2b00      	cmp	r3, #0
    25c8:	d0da      	beq.n	2580 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    25ca:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    25cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    25ce:	7813      	ldrb	r3, [r2, #0]
    25d0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    25d2:	1c50      	adds	r0, r2, #1
    25d4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    25d6:	79a0      	ldrb	r0, [r4, #6]
    25d8:	2801      	cmp	r0, #1
    25da:	d027      	beq.n	262c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    25dc:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    25de:	05db      	lsls	r3, r3, #23
    25e0:	0ddb      	lsrs	r3, r3, #23
    25e2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    25e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    25e6:	3b01      	subs	r3, #1
    25e8:	b29b      	uxth	r3, r3
    25ea:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    25ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    25ee:	b29b      	uxth	r3, r3
    25f0:	2b00      	cmp	r3, #0
    25f2:	d1c5      	bne.n	2580 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    25f4:	3301      	adds	r3, #1
    25f6:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    25f8:	7a63      	ldrb	r3, [r4, #9]
    25fa:	2b01      	cmp	r3, #1
    25fc:	d1c0      	bne.n	2580 <_spi_interrupt_handler+0x24>
    25fe:	79e3      	ldrb	r3, [r4, #7]
    2600:	2b00      	cmp	r3, #0
    2602:	d1bd      	bne.n	2580 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2604:	3302      	adds	r3, #2
    2606:	75b3      	strb	r3, [r6, #22]
    2608:	e7ba      	b.n	2580 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    260a:	4b47      	ldr	r3, [pc, #284]	; (2728 <_spi_interrupt_handler+0x1cc>)
    260c:	881b      	ldrh	r3, [r3, #0]
    260e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2610:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2612:	3b01      	subs	r3, #1
    2614:	b29b      	uxth	r3, r3
    2616:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    2618:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    261a:	b29b      	uxth	r3, r3
    261c:	2b00      	cmp	r3, #0
    261e:	d101      	bne.n	2624 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2620:	3301      	adds	r3, #1
    2622:	7533      	strb	r3, [r6, #20]
		if (0
    2624:	7963      	ldrb	r3, [r4, #5]
    2626:	2b01      	cmp	r3, #1
    2628:	d0cc      	beq.n	25c4 <_spi_interrupt_handler+0x68>
    262a:	e7a9      	b.n	2580 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    262c:	7850      	ldrb	r0, [r2, #1]
    262e:	0200      	lsls	r0, r0, #8
    2630:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    2632:	3202      	adds	r2, #2
    2634:	62e2      	str	r2, [r4, #44]	; 0x2c
    2636:	e7d2      	b.n	25de <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2638:	0020      	movs	r0, r4
    263a:	69a3      	ldr	r3, [r4, #24]
    263c:	4798      	blx	r3
    263e:	e7b0      	b.n	25a2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    2640:	7a63      	ldrb	r3, [r4, #9]
    2642:	2b01      	cmp	r3, #1
    2644:	d028      	beq.n	2698 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2646:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    264a:	05db      	lsls	r3, r3, #23
    264c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    264e:	b2da      	uxtb	r2, r3
    2650:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2652:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    2654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2656:	1c51      	adds	r1, r2, #1
    2658:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    265a:	79a1      	ldrb	r1, [r4, #6]
    265c:	2901      	cmp	r1, #1
    265e:	d034      	beq.n	26ca <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    2660:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2662:	3b01      	subs	r3, #1
    2664:	b29b      	uxth	r3, r3
    2666:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    2668:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    266a:	b29b      	uxth	r3, r3
    266c:	2b00      	cmp	r3, #0
    266e:	d000      	beq.n	2672 <_spi_interrupt_handler+0x116>
    2670:	e79a      	b.n	25a8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    2672:	2200      	movs	r2, #0
    2674:	3338      	adds	r3, #56	; 0x38
    2676:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2678:	3b34      	subs	r3, #52	; 0x34
    267a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    267c:	7a63      	ldrb	r3, [r4, #9]
    267e:	2b02      	cmp	r3, #2
    2680:	d029      	beq.n	26d6 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    2682:	7a63      	ldrb	r3, [r4, #9]
    2684:	2b00      	cmp	r3, #0
    2686:	d000      	beq.n	268a <_spi_interrupt_handler+0x12e>
    2688:	e78e      	b.n	25a8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    268a:	07bb      	lsls	r3, r7, #30
    268c:	d400      	bmi.n	2690 <_spi_interrupt_handler+0x134>
    268e:	e78b      	b.n	25a8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2690:	0020      	movs	r0, r4
    2692:	6923      	ldr	r3, [r4, #16]
    2694:	4798      	blx	r3
    2696:	e787      	b.n	25a8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2698:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    269c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    269e:	3b01      	subs	r3, #1
    26a0:	b29b      	uxth	r3, r3
    26a2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    26a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    26a6:	b29b      	uxth	r3, r3
    26a8:	2b00      	cmp	r3, #0
    26aa:	d000      	beq.n	26ae <_spi_interrupt_handler+0x152>
    26ac:	e77c      	b.n	25a8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    26ae:	3304      	adds	r3, #4
    26b0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    26b2:	2200      	movs	r2, #0
    26b4:	3334      	adds	r3, #52	; 0x34
    26b6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    26b8:	3b35      	subs	r3, #53	; 0x35
    26ba:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    26bc:	07fb      	lsls	r3, r7, #31
    26be:	d400      	bmi.n	26c2 <_spi_interrupt_handler+0x166>
    26c0:	e772      	b.n	25a8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    26c2:	0020      	movs	r0, r4
    26c4:	68e3      	ldr	r3, [r4, #12]
    26c6:	4798      	blx	r3
    26c8:	e76e      	b.n	25a8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    26ca:	0a1b      	lsrs	r3, r3, #8
    26cc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    26ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    26d0:	3301      	adds	r3, #1
    26d2:	62a3      	str	r3, [r4, #40]	; 0x28
    26d4:	e7c4      	b.n	2660 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    26d6:	077b      	lsls	r3, r7, #29
    26d8:	d400      	bmi.n	26dc <_spi_interrupt_handler+0x180>
    26da:	e765      	b.n	25a8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    26dc:	0020      	movs	r0, r4
    26de:	6963      	ldr	r3, [r4, #20]
    26e0:	4798      	blx	r3
    26e2:	e761      	b.n	25a8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    26e4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    26e6:	2b01      	cmp	r3, #1
    26e8:	d000      	beq.n	26ec <_spi_interrupt_handler+0x190>
    26ea:	e763      	b.n	25b4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    26ec:	79e3      	ldrb	r3, [r4, #7]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d000      	beq.n	26f4 <_spi_interrupt_handler+0x198>
    26f2:	e75f      	b.n	25b4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    26f4:	3302      	adds	r3, #2
    26f6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    26f8:	3301      	adds	r3, #1
    26fa:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    26fc:	2200      	movs	r2, #0
    26fe:	3335      	adds	r3, #53	; 0x35
    2700:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2702:	07fb      	lsls	r3, r7, #31
    2704:	d400      	bmi.n	2708 <_spi_interrupt_handler+0x1ac>
    2706:	e755      	b.n	25b4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2708:	0020      	movs	r0, r4
    270a:	68e3      	ldr	r3, [r4, #12]
    270c:	4798      	blx	r3
    270e:	e751      	b.n	25b4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2710:	2380      	movs	r3, #128	; 0x80
    2712:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2714:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2716:	067b      	lsls	r3, r7, #25
    2718:	d400      	bmi.n	271c <_spi_interrupt_handler+0x1c0>
    271a:	e74f      	b.n	25bc <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    271c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    271e:	0020      	movs	r0, r4
    2720:	4798      	blx	r3
}
    2722:	e74b      	b.n	25bc <_spi_interrupt_handler+0x60>
    2724:	200009e0 	.word	0x200009e0
    2728:	200009f8 	.word	0x200009f8

0000272c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    272c:	b5f0      	push	{r4, r5, r6, r7, lr}
    272e:	46de      	mov	lr, fp
    2730:	4657      	mov	r7, sl
    2732:	464e      	mov	r6, r9
    2734:	4645      	mov	r5, r8
    2736:	b5e0      	push	{r5, r6, r7, lr}
    2738:	b091      	sub	sp, #68	; 0x44
    273a:	0005      	movs	r5, r0
    273c:	000c      	movs	r4, r1
    273e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2740:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2742:	0008      	movs	r0, r1
    2744:	4bbc      	ldr	r3, [pc, #752]	; (2a38 <usart_init+0x30c>)
    2746:	4798      	blx	r3
    2748:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    274a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    274c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    274e:	07db      	lsls	r3, r3, #31
    2750:	d506      	bpl.n	2760 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2752:	b011      	add	sp, #68	; 0x44
    2754:	bc3c      	pop	{r2, r3, r4, r5}
    2756:	4690      	mov	r8, r2
    2758:	4699      	mov	r9, r3
    275a:	46a2      	mov	sl, r4
    275c:	46ab      	mov	fp, r5
    275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2760:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2762:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2764:	079b      	lsls	r3, r3, #30
    2766:	d4f4      	bmi.n	2752 <usart_init+0x26>
    2768:	49b4      	ldr	r1, [pc, #720]	; (2a3c <usart_init+0x310>)
    276a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    276c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    276e:	2301      	movs	r3, #1
    2770:	40bb      	lsls	r3, r7
    2772:	4303      	orrs	r3, r0
    2774:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2776:	a90f      	add	r1, sp, #60	; 0x3c
    2778:	272d      	movs	r7, #45	; 0x2d
    277a:	5df3      	ldrb	r3, [r6, r7]
    277c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    277e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2780:	b2d3      	uxtb	r3, r2
    2782:	9302      	str	r3, [sp, #8]
    2784:	0018      	movs	r0, r3
    2786:	4bae      	ldr	r3, [pc, #696]	; (2a40 <usart_init+0x314>)
    2788:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    278a:	9802      	ldr	r0, [sp, #8]
    278c:	4bad      	ldr	r3, [pc, #692]	; (2a44 <usart_init+0x318>)
    278e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2790:	5df0      	ldrb	r0, [r6, r7]
    2792:	2100      	movs	r1, #0
    2794:	4bac      	ldr	r3, [pc, #688]	; (2a48 <usart_init+0x31c>)
    2796:	4798      	blx	r3
	module->character_size = config->character_size;
    2798:	7af3      	ldrb	r3, [r6, #11]
    279a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    279c:	2324      	movs	r3, #36	; 0x24
    279e:	5cf3      	ldrb	r3, [r6, r3]
    27a0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    27a2:	2325      	movs	r3, #37	; 0x25
    27a4:	5cf3      	ldrb	r3, [r6, r3]
    27a6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    27a8:	7ef3      	ldrb	r3, [r6, #27]
    27aa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    27ac:	7f33      	ldrb	r3, [r6, #28]
    27ae:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    27b0:	682b      	ldr	r3, [r5, #0]
    27b2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    27b4:	0018      	movs	r0, r3
    27b6:	4ba0      	ldr	r3, [pc, #640]	; (2a38 <usart_init+0x30c>)
    27b8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    27ba:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    27bc:	2200      	movs	r2, #0
    27be:	230e      	movs	r3, #14
    27c0:	a906      	add	r1, sp, #24
    27c2:	468c      	mov	ip, r1
    27c4:	4463      	add	r3, ip
    27c6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    27c8:	8a32      	ldrh	r2, [r6, #16]
    27ca:	9202      	str	r2, [sp, #8]
    27cc:	2380      	movs	r3, #128	; 0x80
    27ce:	01db      	lsls	r3, r3, #7
    27d0:	429a      	cmp	r2, r3
    27d2:	d100      	bne.n	27d6 <usart_init+0xaa>
    27d4:	e09e      	b.n	2914 <usart_init+0x1e8>
    27d6:	d90f      	bls.n	27f8 <usart_init+0xcc>
    27d8:	23c0      	movs	r3, #192	; 0xc0
    27da:	01db      	lsls	r3, r3, #7
    27dc:	9a02      	ldr	r2, [sp, #8]
    27de:	429a      	cmp	r2, r3
    27e0:	d100      	bne.n	27e4 <usart_init+0xb8>
    27e2:	e092      	b.n	290a <usart_init+0x1de>
    27e4:	2380      	movs	r3, #128	; 0x80
    27e6:	021b      	lsls	r3, r3, #8
    27e8:	429a      	cmp	r2, r3
    27ea:	d000      	beq.n	27ee <usart_init+0xc2>
    27ec:	e11f      	b.n	2a2e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    27ee:	2303      	movs	r3, #3
    27f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27f2:	2300      	movs	r3, #0
    27f4:	9307      	str	r3, [sp, #28]
    27f6:	e008      	b.n	280a <usart_init+0xde>
	switch (config->sample_rate) {
    27f8:	2380      	movs	r3, #128	; 0x80
    27fa:	019b      	lsls	r3, r3, #6
    27fc:	429a      	cmp	r2, r3
    27fe:	d000      	beq.n	2802 <usart_init+0xd6>
    2800:	e115      	b.n	2a2e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2802:	2310      	movs	r3, #16
    2804:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2806:	3b0f      	subs	r3, #15
    2808:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    280a:	6833      	ldr	r3, [r6, #0]
    280c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    280e:	68f3      	ldr	r3, [r6, #12]
    2810:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2812:	6973      	ldr	r3, [r6, #20]
    2814:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2816:	7e33      	ldrb	r3, [r6, #24]
    2818:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    281a:	2326      	movs	r3, #38	; 0x26
    281c:	5cf3      	ldrb	r3, [r6, r3]
    281e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2820:	6873      	ldr	r3, [r6, #4]
    2822:	4699      	mov	r9, r3
	switch (transfer_mode)
    2824:	2b00      	cmp	r3, #0
    2826:	d100      	bne.n	282a <usart_init+0xfe>
    2828:	e0a0      	b.n	296c <usart_init+0x240>
    282a:	2380      	movs	r3, #128	; 0x80
    282c:	055b      	lsls	r3, r3, #21
    282e:	4599      	cmp	r9, r3
    2830:	d100      	bne.n	2834 <usart_init+0x108>
    2832:	e084      	b.n	293e <usart_init+0x212>
	if(config->encoding_format_enable) {
    2834:	7e73      	ldrb	r3, [r6, #25]
    2836:	2b00      	cmp	r3, #0
    2838:	d002      	beq.n	2840 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    283a:	7eb3      	ldrb	r3, [r6, #26]
    283c:	4642      	mov	r2, r8
    283e:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2840:	682a      	ldr	r2, [r5, #0]
    2842:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    2844:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2846:	2b00      	cmp	r3, #0
    2848:	d1fc      	bne.n	2844 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    284a:	330e      	adds	r3, #14
    284c:	aa06      	add	r2, sp, #24
    284e:	4694      	mov	ip, r2
    2850:	4463      	add	r3, ip
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	4642      	mov	r2, r8
    2856:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2858:	9b05      	ldr	r3, [sp, #20]
    285a:	9a03      	ldr	r2, [sp, #12]
    285c:	4313      	orrs	r3, r2
    285e:	9a04      	ldr	r2, [sp, #16]
    2860:	4313      	orrs	r3, r2
    2862:	464a      	mov	r2, r9
    2864:	4313      	orrs	r3, r2
    2866:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2868:	465b      	mov	r3, fp
    286a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    286c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    286e:	4653      	mov	r3, sl
    2870:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2872:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2874:	2327      	movs	r3, #39	; 0x27
    2876:	5cf3      	ldrb	r3, [r6, r3]
    2878:	2b00      	cmp	r3, #0
    287a:	d101      	bne.n	2880 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    287c:	3304      	adds	r3, #4
    287e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2880:	7e73      	ldrb	r3, [r6, #25]
    2882:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2884:	7f32      	ldrb	r2, [r6, #28]
    2886:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2888:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    288a:	7f72      	ldrb	r2, [r6, #29]
    288c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    288e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2890:	2224      	movs	r2, #36	; 0x24
    2892:	5cb2      	ldrb	r2, [r6, r2]
    2894:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2896:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2898:	2225      	movs	r2, #37	; 0x25
    289a:	5cb2      	ldrb	r2, [r6, r2]
    289c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    289e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    28a0:	7ab1      	ldrb	r1, [r6, #10]
    28a2:	7af2      	ldrb	r2, [r6, #11]
    28a4:	4311      	orrs	r1, r2
    28a6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    28a8:	8933      	ldrh	r3, [r6, #8]
    28aa:	2bff      	cmp	r3, #255	; 0xff
    28ac:	d100      	bne.n	28b0 <usart_init+0x184>
    28ae:	e081      	b.n	29b4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    28b0:	2280      	movs	r2, #128	; 0x80
    28b2:	0452      	lsls	r2, r2, #17
    28b4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    28b6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    28b8:	232c      	movs	r3, #44	; 0x2c
    28ba:	5cf3      	ldrb	r3, [r6, r3]
    28bc:	2b00      	cmp	r3, #0
    28be:	d103      	bne.n	28c8 <usart_init+0x19c>
    28c0:	4b62      	ldr	r3, [pc, #392]	; (2a4c <usart_init+0x320>)
    28c2:	789b      	ldrb	r3, [r3, #2]
    28c4:	079b      	lsls	r3, r3, #30
    28c6:	d501      	bpl.n	28cc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    28c8:	2380      	movs	r3, #128	; 0x80
    28ca:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    28cc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    28ce:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28d0:	2b00      	cmp	r3, #0
    28d2:	d1fc      	bne.n	28ce <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    28d4:	4643      	mov	r3, r8
    28d6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28d8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    28da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28dc:	2b00      	cmp	r3, #0
    28de:	d1fc      	bne.n	28da <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    28e0:	4643      	mov	r3, r8
    28e2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    28e4:	ab0e      	add	r3, sp, #56	; 0x38
    28e6:	2280      	movs	r2, #128	; 0x80
    28e8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    28ea:	2200      	movs	r2, #0
    28ec:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    28ee:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    28f0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    28f2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    28f4:	930a      	str	r3, [sp, #40]	; 0x28
    28f6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    28f8:	930b      	str	r3, [sp, #44]	; 0x2c
    28fa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    28fc:	930c      	str	r3, [sp, #48]	; 0x30
    28fe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2900:	9302      	str	r3, [sp, #8]
    2902:	930d      	str	r3, [sp, #52]	; 0x34
    2904:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2906:	ae0a      	add	r6, sp, #40	; 0x28
    2908:	e063      	b.n	29d2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    290a:	2308      	movs	r3, #8
    290c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    290e:	3b07      	subs	r3, #7
    2910:	9307      	str	r3, [sp, #28]
    2912:	e77a      	b.n	280a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2914:	6833      	ldr	r3, [r6, #0]
    2916:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2918:	68f3      	ldr	r3, [r6, #12]
    291a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    291c:	6973      	ldr	r3, [r6, #20]
    291e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2920:	7e33      	ldrb	r3, [r6, #24]
    2922:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2924:	2326      	movs	r3, #38	; 0x26
    2926:	5cf3      	ldrb	r3, [r6, r3]
    2928:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    292a:	6873      	ldr	r3, [r6, #4]
    292c:	4699      	mov	r9, r3
	switch (transfer_mode)
    292e:	2b00      	cmp	r3, #0
    2930:	d018      	beq.n	2964 <usart_init+0x238>
    2932:	2380      	movs	r3, #128	; 0x80
    2934:	055b      	lsls	r3, r3, #21
    2936:	4599      	cmp	r9, r3
    2938:	d001      	beq.n	293e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    293a:	2000      	movs	r0, #0
    293c:	e025      	b.n	298a <usart_init+0x25e>
			if (!config->use_external_clock) {
    293e:	2327      	movs	r3, #39	; 0x27
    2940:	5cf3      	ldrb	r3, [r6, r3]
    2942:	2b00      	cmp	r3, #0
    2944:	d000      	beq.n	2948 <usart_init+0x21c>
    2946:	e775      	b.n	2834 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2948:	6a33      	ldr	r3, [r6, #32]
    294a:	001f      	movs	r7, r3
    294c:	b2c0      	uxtb	r0, r0
    294e:	4b40      	ldr	r3, [pc, #256]	; (2a50 <usart_init+0x324>)
    2950:	4798      	blx	r3
    2952:	0001      	movs	r1, r0
    2954:	220e      	movs	r2, #14
    2956:	ab06      	add	r3, sp, #24
    2958:	469c      	mov	ip, r3
    295a:	4462      	add	r2, ip
    295c:	0038      	movs	r0, r7
    295e:	4b3d      	ldr	r3, [pc, #244]	; (2a54 <usart_init+0x328>)
    2960:	4798      	blx	r3
    2962:	e012      	b.n	298a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2964:	2308      	movs	r3, #8
    2966:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2968:	2300      	movs	r3, #0
    296a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    296c:	2327      	movs	r3, #39	; 0x27
    296e:	5cf3      	ldrb	r3, [r6, r3]
    2970:	2b00      	cmp	r3, #0
    2972:	d00e      	beq.n	2992 <usart_init+0x266>
				status_code =
    2974:	9b06      	ldr	r3, [sp, #24]
    2976:	9300      	str	r3, [sp, #0]
    2978:	9b07      	ldr	r3, [sp, #28]
    297a:	220e      	movs	r2, #14
    297c:	a906      	add	r1, sp, #24
    297e:	468c      	mov	ip, r1
    2980:	4462      	add	r2, ip
    2982:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2984:	6a30      	ldr	r0, [r6, #32]
    2986:	4f34      	ldr	r7, [pc, #208]	; (2a58 <usart_init+0x32c>)
    2988:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    298a:	2800      	cmp	r0, #0
    298c:	d000      	beq.n	2990 <usart_init+0x264>
    298e:	e6e0      	b.n	2752 <usart_init+0x26>
    2990:	e750      	b.n	2834 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2992:	6a33      	ldr	r3, [r6, #32]
    2994:	001f      	movs	r7, r3
    2996:	b2c0      	uxtb	r0, r0
    2998:	4b2d      	ldr	r3, [pc, #180]	; (2a50 <usart_init+0x324>)
    299a:	4798      	blx	r3
    299c:	0001      	movs	r1, r0
				status_code =
    299e:	9b06      	ldr	r3, [sp, #24]
    29a0:	9300      	str	r3, [sp, #0]
    29a2:	9b07      	ldr	r3, [sp, #28]
    29a4:	220e      	movs	r2, #14
    29a6:	a806      	add	r0, sp, #24
    29a8:	4684      	mov	ip, r0
    29aa:	4462      	add	r2, ip
    29ac:	0038      	movs	r0, r7
    29ae:	4f2a      	ldr	r7, [pc, #168]	; (2a58 <usart_init+0x32c>)
    29b0:	47b8      	blx	r7
    29b2:	e7ea      	b.n	298a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    29b4:	7ef3      	ldrb	r3, [r6, #27]
    29b6:	2b00      	cmp	r3, #0
    29b8:	d100      	bne.n	29bc <usart_init+0x290>
    29ba:	e77d      	b.n	28b8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    29bc:	2380      	movs	r3, #128	; 0x80
    29be:	04db      	lsls	r3, r3, #19
    29c0:	431f      	orrs	r7, r3
    29c2:	e779      	b.n	28b8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    29c4:	0020      	movs	r0, r4
    29c6:	4b25      	ldr	r3, [pc, #148]	; (2a5c <usart_init+0x330>)
    29c8:	4798      	blx	r3
    29ca:	e007      	b.n	29dc <usart_init+0x2b0>
    29cc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    29ce:	2f04      	cmp	r7, #4
    29d0:	d00d      	beq.n	29ee <usart_init+0x2c2>
    29d2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    29d4:	00bb      	lsls	r3, r7, #2
    29d6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    29d8:	2800      	cmp	r0, #0
    29da:	d0f3      	beq.n	29c4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    29dc:	1c43      	adds	r3, r0, #1
    29de:	d0f5      	beq.n	29cc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    29e0:	a90e      	add	r1, sp, #56	; 0x38
    29e2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    29e4:	0c00      	lsrs	r0, r0, #16
    29e6:	b2c0      	uxtb	r0, r0
    29e8:	4b1d      	ldr	r3, [pc, #116]	; (2a60 <usart_init+0x334>)
    29ea:	4798      	blx	r3
    29ec:	e7ee      	b.n	29cc <usart_init+0x2a0>
		module->callback[i]            = NULL;
    29ee:	2300      	movs	r3, #0
    29f0:	60eb      	str	r3, [r5, #12]
    29f2:	612b      	str	r3, [r5, #16]
    29f4:	616b      	str	r3, [r5, #20]
    29f6:	61ab      	str	r3, [r5, #24]
    29f8:	61eb      	str	r3, [r5, #28]
    29fa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    29fc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    29fe:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2a00:	2200      	movs	r2, #0
    2a02:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2a04:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2a06:	3330      	adds	r3, #48	; 0x30
    2a08:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2a0a:	3301      	adds	r3, #1
    2a0c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2a0e:	3301      	adds	r3, #1
    2a10:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2a12:	3301      	adds	r3, #1
    2a14:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2a16:	6828      	ldr	r0, [r5, #0]
    2a18:	4b07      	ldr	r3, [pc, #28]	; (2a38 <usart_init+0x30c>)
    2a1a:	4798      	blx	r3
    2a1c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2a1e:	4911      	ldr	r1, [pc, #68]	; (2a64 <usart_init+0x338>)
    2a20:	4b11      	ldr	r3, [pc, #68]	; (2a68 <usart_init+0x33c>)
    2a22:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2a24:	00a4      	lsls	r4, r4, #2
    2a26:	4b11      	ldr	r3, [pc, #68]	; (2a6c <usart_init+0x340>)
    2a28:	50e5      	str	r5, [r4, r3]
	return status_code;
    2a2a:	2000      	movs	r0, #0
    2a2c:	e691      	b.n	2752 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2a2e:	2310      	movs	r3, #16
    2a30:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2a32:	2300      	movs	r3, #0
    2a34:	9307      	str	r3, [sp, #28]
    2a36:	e6e8      	b.n	280a <usart_init+0xde>
    2a38:	00001ee5 	.word	0x00001ee5
    2a3c:	40000400 	.word	0x40000400
    2a40:	00003341 	.word	0x00003341
    2a44:	000032b5 	.word	0x000032b5
    2a48:	00001d21 	.word	0x00001d21
    2a4c:	41002000 	.word	0x41002000
    2a50:	0000335d 	.word	0x0000335d
    2a54:	00001c63 	.word	0x00001c63
    2a58:	00001c8d 	.word	0x00001c8d
    2a5c:	00001d6d 	.word	0x00001d6d
    2a60:	00003439 	.word	0x00003439
    2a64:	00002b71 	.word	0x00002b71
    2a68:	00001f21 	.word	0x00001f21
    2a6c:	200009e0 	.word	0x200009e0

00002a70 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a72:	0006      	movs	r6, r0
    2a74:	000c      	movs	r4, r1
    2a76:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a78:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2a7a:	4b0a      	ldr	r3, [pc, #40]	; (2aa4 <_usart_write_buffer+0x34>)
    2a7c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2a7e:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2a80:	b29b      	uxth	r3, r3
    2a82:	2b00      	cmp	r3, #0
    2a84:	d003      	beq.n	2a8e <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2a86:	4b08      	ldr	r3, [pc, #32]	; (2aa8 <_usart_write_buffer+0x38>)
    2a88:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2a8a:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2a8e:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2a90:	4b05      	ldr	r3, [pc, #20]	; (2aa8 <_usart_write_buffer+0x38>)
    2a92:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2a94:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2a96:	2205      	movs	r2, #5
    2a98:	2333      	movs	r3, #51	; 0x33
    2a9a:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2a9c:	3b32      	subs	r3, #50	; 0x32
    2a9e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2aa0:	2000      	movs	r0, #0
    2aa2:	e7f3      	b.n	2a8c <_usart_write_buffer+0x1c>
    2aa4:	0000193d 	.word	0x0000193d
    2aa8:	0000197d 	.word	0x0000197d

00002aac <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aae:	0004      	movs	r4, r0
    2ab0:	000d      	movs	r5, r1
    2ab2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ab4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2ab6:	4b0f      	ldr	r3, [pc, #60]	; (2af4 <_usart_read_buffer+0x48>)
    2ab8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2aba:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2abc:	b29b      	uxth	r3, r3
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d003      	beq.n	2aca <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2ac2:	4b0d      	ldr	r3, [pc, #52]	; (2af8 <_usart_read_buffer+0x4c>)
    2ac4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2ac6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2aca:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2acc:	4b0a      	ldr	r3, [pc, #40]	; (2af8 <_usart_read_buffer+0x4c>)
    2ace:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2ad0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2ad2:	2205      	movs	r2, #5
    2ad4:	2332      	movs	r3, #50	; 0x32
    2ad6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2ad8:	3b2e      	subs	r3, #46	; 0x2e
    2ada:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2adc:	7a23      	ldrb	r3, [r4, #8]
    2ade:	2b00      	cmp	r3, #0
    2ae0:	d001      	beq.n	2ae6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2ae2:	2320      	movs	r3, #32
    2ae4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2ae6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2ae8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2aea:	2b00      	cmp	r3, #0
    2aec:	d0ec      	beq.n	2ac8 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2aee:	2308      	movs	r3, #8
    2af0:	75bb      	strb	r3, [r7, #22]
    2af2:	e7e9      	b.n	2ac8 <_usart_read_buffer+0x1c>
    2af4:	0000193d 	.word	0x0000193d
    2af8:	0000197d 	.word	0x0000197d

00002afc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2afc:	1c93      	adds	r3, r2, #2
    2afe:	009b      	lsls	r3, r3, #2
    2b00:	18c3      	adds	r3, r0, r3
    2b02:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2b04:	2130      	movs	r1, #48	; 0x30
    2b06:	2301      	movs	r3, #1
    2b08:	4093      	lsls	r3, r2
    2b0a:	001a      	movs	r2, r3
    2b0c:	5c43      	ldrb	r3, [r0, r1]
    2b0e:	4313      	orrs	r3, r2
    2b10:	5443      	strb	r3, [r0, r1]
}
    2b12:	4770      	bx	lr

00002b14 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2b14:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2b16:	2317      	movs	r3, #23
	if (length == 0) {
    2b18:	2a00      	cmp	r2, #0
    2b1a:	d101      	bne.n	2b20 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2b1c:	0018      	movs	r0, r3
    2b1e:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2b20:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2b22:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2b24:	2c00      	cmp	r4, #0
    2b26:	d0f9      	beq.n	2b1c <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2b28:	4b01      	ldr	r3, [pc, #4]	; (2b30 <usart_write_buffer_job+0x1c>)
    2b2a:	4798      	blx	r3
    2b2c:	0003      	movs	r3, r0
    2b2e:	e7f5      	b.n	2b1c <usart_write_buffer_job+0x8>
    2b30:	00002a71 	.word	0x00002a71

00002b34 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2b34:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2b36:	2317      	movs	r3, #23
	if (length == 0) {
    2b38:	2a00      	cmp	r2, #0
    2b3a:	d101      	bne.n	2b40 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2b3c:	0018      	movs	r0, r3
    2b3e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2b40:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2b42:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2b44:	2c00      	cmp	r4, #0
    2b46:	d0f9      	beq.n	2b3c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2b48:	4b01      	ldr	r3, [pc, #4]	; (2b50 <usart_read_buffer_job+0x1c>)
    2b4a:	4798      	blx	r3
    2b4c:	0003      	movs	r3, r0
    2b4e:	e7f5      	b.n	2b3c <usart_read_buffer_job+0x8>
    2b50:	00002aad 	.word	0x00002aad

00002b54 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2b54:	2900      	cmp	r1, #0
    2b56:	d003      	beq.n	2b60 <usart_get_job_status+0xc>
    2b58:	2901      	cmp	r1, #1
    2b5a:	d005      	beq.n	2b68 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2b5c:	2017      	movs	r0, #23
    2b5e:	e002      	b.n	2b66 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2b60:	2332      	movs	r3, #50	; 0x32
    2b62:	5cc0      	ldrb	r0, [r0, r3]
    2b64:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2b66:	4770      	bx	lr
			status_code = module->tx_status;
    2b68:	2333      	movs	r3, #51	; 0x33
    2b6a:	5cc0      	ldrb	r0, [r0, r3]
    2b6c:	b2c0      	uxtb	r0, r0
			break;
    2b6e:	e7fa      	b.n	2b66 <usart_get_job_status+0x12>

00002b70 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2b72:	0080      	lsls	r0, r0, #2
    2b74:	4b62      	ldr	r3, [pc, #392]	; (2d00 <_usart_interrupt_handler+0x190>)
    2b76:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2b78:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b7a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2b7c:	2b00      	cmp	r3, #0
    2b7e:	d1fc      	bne.n	2b7a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2b80:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2b82:	7da6      	ldrb	r6, [r4, #22]
    2b84:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2b86:	2330      	movs	r3, #48	; 0x30
    2b88:	5ceb      	ldrb	r3, [r5, r3]
    2b8a:	2231      	movs	r2, #49	; 0x31
    2b8c:	5caf      	ldrb	r7, [r5, r2]
    2b8e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2b90:	07f3      	lsls	r3, r6, #31
    2b92:	d522      	bpl.n	2bda <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2b94:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2b96:	b29b      	uxth	r3, r3
    2b98:	2b00      	cmp	r3, #0
    2b9a:	d01c      	beq.n	2bd6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2b9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2b9e:	7813      	ldrb	r3, [r2, #0]
    2ba0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ba2:	1c51      	adds	r1, r2, #1
    2ba4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ba6:	7969      	ldrb	r1, [r5, #5]
    2ba8:	2901      	cmp	r1, #1
    2baa:	d00e      	beq.n	2bca <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2bac:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2bae:	05db      	lsls	r3, r3, #23
    2bb0:	0ddb      	lsrs	r3, r3, #23
    2bb2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2bb4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2bb6:	3b01      	subs	r3, #1
    2bb8:	b29b      	uxth	r3, r3
    2bba:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d10c      	bne.n	2bda <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2bc0:	3301      	adds	r3, #1
    2bc2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2bc4:	3301      	adds	r3, #1
    2bc6:	75a3      	strb	r3, [r4, #22]
    2bc8:	e007      	b.n	2bda <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2bca:	7851      	ldrb	r1, [r2, #1]
    2bcc:	0209      	lsls	r1, r1, #8
    2bce:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2bd0:	3202      	adds	r2, #2
    2bd2:	62aa      	str	r2, [r5, #40]	; 0x28
    2bd4:	e7eb      	b.n	2bae <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2bd6:	2301      	movs	r3, #1
    2bd8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2bda:	07b3      	lsls	r3, r6, #30
    2bdc:	d506      	bpl.n	2bec <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2bde:	2302      	movs	r3, #2
    2be0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2be2:	2200      	movs	r2, #0
    2be4:	3331      	adds	r3, #49	; 0x31
    2be6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2be8:	07fb      	lsls	r3, r7, #31
    2bea:	d41a      	bmi.n	2c22 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2bec:	0773      	lsls	r3, r6, #29
    2bee:	d565      	bpl.n	2cbc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2bf0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2bf2:	b29b      	uxth	r3, r3
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d05f      	beq.n	2cb8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2bf8:	8b63      	ldrh	r3, [r4, #26]
    2bfa:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2bfc:	071a      	lsls	r2, r3, #28
    2bfe:	d414      	bmi.n	2c2a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c00:	223f      	movs	r2, #63	; 0x3f
    2c02:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2c04:	2b00      	cmp	r3, #0
    2c06:	d034      	beq.n	2c72 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2c08:	079a      	lsls	r2, r3, #30
    2c0a:	d511      	bpl.n	2c30 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2c0c:	221a      	movs	r2, #26
    2c0e:	2332      	movs	r3, #50	; 0x32
    2c10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c12:	3b30      	subs	r3, #48	; 0x30
    2c14:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2c16:	077b      	lsls	r3, r7, #29
    2c18:	d550      	bpl.n	2cbc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2c1a:	0028      	movs	r0, r5
    2c1c:	696b      	ldr	r3, [r5, #20]
    2c1e:	4798      	blx	r3
    2c20:	e04c      	b.n	2cbc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2c22:	0028      	movs	r0, r5
    2c24:	68eb      	ldr	r3, [r5, #12]
    2c26:	4798      	blx	r3
    2c28:	e7e0      	b.n	2bec <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2c2a:	2237      	movs	r2, #55	; 0x37
    2c2c:	4013      	ands	r3, r2
    2c2e:	e7e9      	b.n	2c04 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2c30:	075a      	lsls	r2, r3, #29
    2c32:	d505      	bpl.n	2c40 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2c34:	221e      	movs	r2, #30
    2c36:	2332      	movs	r3, #50	; 0x32
    2c38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2c3a:	3b2e      	subs	r3, #46	; 0x2e
    2c3c:	8363      	strh	r3, [r4, #26]
    2c3e:	e7ea      	b.n	2c16 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2c40:	07da      	lsls	r2, r3, #31
    2c42:	d505      	bpl.n	2c50 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2c44:	2213      	movs	r2, #19
    2c46:	2332      	movs	r3, #50	; 0x32
    2c48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2c4a:	3b31      	subs	r3, #49	; 0x31
    2c4c:	8363      	strh	r3, [r4, #26]
    2c4e:	e7e2      	b.n	2c16 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2c50:	06da      	lsls	r2, r3, #27
    2c52:	d505      	bpl.n	2c60 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2c54:	2242      	movs	r2, #66	; 0x42
    2c56:	2332      	movs	r3, #50	; 0x32
    2c58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2c5a:	3b22      	subs	r3, #34	; 0x22
    2c5c:	8363      	strh	r3, [r4, #26]
    2c5e:	e7da      	b.n	2c16 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2c60:	2220      	movs	r2, #32
    2c62:	421a      	tst	r2, r3
    2c64:	d0d7      	beq.n	2c16 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2c66:	3221      	adds	r2, #33	; 0x21
    2c68:	2332      	movs	r3, #50	; 0x32
    2c6a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2c6c:	3b12      	subs	r3, #18
    2c6e:	8363      	strh	r3, [r4, #26]
    2c70:	e7d1      	b.n	2c16 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2c72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2c74:	05db      	lsls	r3, r3, #23
    2c76:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2c78:	b2da      	uxtb	r2, r3
    2c7a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2c7c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2c7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2c80:	1c51      	adds	r1, r2, #1
    2c82:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2c84:	7969      	ldrb	r1, [r5, #5]
    2c86:	2901      	cmp	r1, #1
    2c88:	d010      	beq.n	2cac <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2c8a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2c8c:	3b01      	subs	r3, #1
    2c8e:	b29b      	uxth	r3, r3
    2c90:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2c92:	2b00      	cmp	r3, #0
    2c94:	d112      	bne.n	2cbc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2c96:	3304      	adds	r3, #4
    2c98:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2c9a:	2200      	movs	r2, #0
    2c9c:	332e      	adds	r3, #46	; 0x2e
    2c9e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2ca0:	07bb      	lsls	r3, r7, #30
    2ca2:	d50b      	bpl.n	2cbc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2ca4:	0028      	movs	r0, r5
    2ca6:	692b      	ldr	r3, [r5, #16]
    2ca8:	4798      	blx	r3
    2caa:	e007      	b.n	2cbc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2cac:	0a1b      	lsrs	r3, r3, #8
    2cae:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2cb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2cb2:	3301      	adds	r3, #1
    2cb4:	626b      	str	r3, [r5, #36]	; 0x24
    2cb6:	e7e8      	b.n	2c8a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2cb8:	2304      	movs	r3, #4
    2cba:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2cbc:	06f3      	lsls	r3, r6, #27
    2cbe:	d504      	bpl.n	2cca <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2cc0:	2310      	movs	r3, #16
    2cc2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2cc4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2cc6:	06fb      	lsls	r3, r7, #27
    2cc8:	d40e      	bmi.n	2ce8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2cca:	06b3      	lsls	r3, r6, #26
    2ccc:	d504      	bpl.n	2cd8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2cce:	2320      	movs	r3, #32
    2cd0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2cd2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2cd4:	073b      	lsls	r3, r7, #28
    2cd6:	d40b      	bmi.n	2cf0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2cd8:	0733      	lsls	r3, r6, #28
    2cda:	d504      	bpl.n	2ce6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2cdc:	2308      	movs	r3, #8
    2cde:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2ce0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2ce2:	06bb      	lsls	r3, r7, #26
    2ce4:	d408      	bmi.n	2cf8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2ce8:	0028      	movs	r0, r5
    2cea:	69eb      	ldr	r3, [r5, #28]
    2cec:	4798      	blx	r3
    2cee:	e7ec      	b.n	2cca <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2cf0:	0028      	movs	r0, r5
    2cf2:	69ab      	ldr	r3, [r5, #24]
    2cf4:	4798      	blx	r3
    2cf6:	e7ef      	b.n	2cd8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2cf8:	6a2b      	ldr	r3, [r5, #32]
    2cfa:	0028      	movs	r0, r5
    2cfc:	4798      	blx	r3
}
    2cfe:	e7f2      	b.n	2ce6 <_usart_interrupt_handler+0x176>
    2d00:	200009e0 	.word	0x200009e0

00002d04 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2d04:	b510      	push	{r4, lr}
	switch (clock_source) {
    2d06:	2808      	cmp	r0, #8
    2d08:	d803      	bhi.n	2d12 <system_clock_source_get_hz+0xe>
    2d0a:	0080      	lsls	r0, r0, #2
    2d0c:	4b1c      	ldr	r3, [pc, #112]	; (2d80 <system_clock_source_get_hz+0x7c>)
    2d0e:	581b      	ldr	r3, [r3, r0]
    2d10:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2d12:	2000      	movs	r0, #0
    2d14:	e032      	b.n	2d7c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2d16:	4b1b      	ldr	r3, [pc, #108]	; (2d84 <system_clock_source_get_hz+0x80>)
    2d18:	6918      	ldr	r0, [r3, #16]
    2d1a:	e02f      	b.n	2d7c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2d1c:	4b1a      	ldr	r3, [pc, #104]	; (2d88 <system_clock_source_get_hz+0x84>)
    2d1e:	6a1b      	ldr	r3, [r3, #32]
    2d20:	059b      	lsls	r3, r3, #22
    2d22:	0f9b      	lsrs	r3, r3, #30
    2d24:	4819      	ldr	r0, [pc, #100]	; (2d8c <system_clock_source_get_hz+0x88>)
    2d26:	40d8      	lsrs	r0, r3
    2d28:	e028      	b.n	2d7c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2d2a:	4b16      	ldr	r3, [pc, #88]	; (2d84 <system_clock_source_get_hz+0x80>)
    2d2c:	6958      	ldr	r0, [r3, #20]
    2d2e:	e025      	b.n	2d7c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d30:	4b14      	ldr	r3, [pc, #80]	; (2d84 <system_clock_source_get_hz+0x80>)
    2d32:	681b      	ldr	r3, [r3, #0]
			return 0;
    2d34:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d36:	079b      	lsls	r3, r3, #30
    2d38:	d520      	bpl.n	2d7c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d3a:	4913      	ldr	r1, [pc, #76]	; (2d88 <system_clock_source_get_hz+0x84>)
    2d3c:	2210      	movs	r2, #16
    2d3e:	68cb      	ldr	r3, [r1, #12]
    2d40:	421a      	tst	r2, r3
    2d42:	d0fc      	beq.n	2d3e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2d44:	4b0f      	ldr	r3, [pc, #60]	; (2d84 <system_clock_source_get_hz+0x80>)
    2d46:	681a      	ldr	r2, [r3, #0]
    2d48:	2324      	movs	r3, #36	; 0x24
    2d4a:	4013      	ands	r3, r2
    2d4c:	2b04      	cmp	r3, #4
    2d4e:	d001      	beq.n	2d54 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2d50:	480f      	ldr	r0, [pc, #60]	; (2d90 <system_clock_source_get_hz+0x8c>)
    2d52:	e013      	b.n	2d7c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2d54:	2000      	movs	r0, #0
    2d56:	4b0f      	ldr	r3, [pc, #60]	; (2d94 <system_clock_source_get_hz+0x90>)
    2d58:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2d5a:	4b0a      	ldr	r3, [pc, #40]	; (2d84 <system_clock_source_get_hz+0x80>)
    2d5c:	689b      	ldr	r3, [r3, #8]
    2d5e:	041b      	lsls	r3, r3, #16
    2d60:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2d62:	4358      	muls	r0, r3
    2d64:	e00a      	b.n	2d7c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2d66:	2350      	movs	r3, #80	; 0x50
    2d68:	4a07      	ldr	r2, [pc, #28]	; (2d88 <system_clock_source_get_hz+0x84>)
    2d6a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2d6c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2d6e:	075b      	lsls	r3, r3, #29
    2d70:	d504      	bpl.n	2d7c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2d72:	4b04      	ldr	r3, [pc, #16]	; (2d84 <system_clock_source_get_hz+0x80>)
    2d74:	68d8      	ldr	r0, [r3, #12]
    2d76:	e001      	b.n	2d7c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2d78:	2080      	movs	r0, #128	; 0x80
    2d7a:	0200      	lsls	r0, r0, #8
	}
}
    2d7c:	bd10      	pop	{r4, pc}
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	0000672c 	.word	0x0000672c
    2d84:	20000150 	.word	0x20000150
    2d88:	40000800 	.word	0x40000800
    2d8c:	007a1200 	.word	0x007a1200
    2d90:	02dc6c00 	.word	0x02dc6c00
    2d94:	0000335d 	.word	0x0000335d

00002d98 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2d98:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2d9a:	490c      	ldr	r1, [pc, #48]	; (2dcc <system_clock_source_osc8m_set_config+0x34>)
    2d9c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2d9e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2da0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2da2:	7840      	ldrb	r0, [r0, #1]
    2da4:	2201      	movs	r2, #1
    2da6:	4010      	ands	r0, r2
    2da8:	0180      	lsls	r0, r0, #6
    2daa:	2640      	movs	r6, #64	; 0x40
    2dac:	43b3      	bics	r3, r6
    2dae:	4303      	orrs	r3, r0
    2db0:	402a      	ands	r2, r5
    2db2:	01d2      	lsls	r2, r2, #7
    2db4:	2080      	movs	r0, #128	; 0x80
    2db6:	4383      	bics	r3, r0
    2db8:	4313      	orrs	r3, r2
    2dba:	2203      	movs	r2, #3
    2dbc:	4022      	ands	r2, r4
    2dbe:	0212      	lsls	r2, r2, #8
    2dc0:	4803      	ldr	r0, [pc, #12]	; (2dd0 <system_clock_source_osc8m_set_config+0x38>)
    2dc2:	4003      	ands	r3, r0
    2dc4:	4313      	orrs	r3, r2
    2dc6:	620b      	str	r3, [r1, #32]
}
    2dc8:	bd70      	pop	{r4, r5, r6, pc}
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	40000800 	.word	0x40000800
    2dd0:	fffffcff 	.word	0xfffffcff

00002dd4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dd6:	46de      	mov	lr, fp
    2dd8:	4657      	mov	r7, sl
    2dda:	464e      	mov	r6, r9
    2ddc:	4645      	mov	r5, r8
    2dde:	b5e0      	push	{r5, r6, r7, lr}
    2de0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2de2:	4b26      	ldr	r3, [pc, #152]	; (2e7c <system_clock_source_xosc32k_set_config+0xa8>)
    2de4:	469b      	mov	fp, r3
    2de6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2de8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2dea:	7800      	ldrb	r0, [r0, #0]
    2dec:	4242      	negs	r2, r0
    2dee:	4142      	adcs	r2, r0
    2df0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2df2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2df4:	78ca      	ldrb	r2, [r1, #3]
    2df6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2df8:	790a      	ldrb	r2, [r1, #4]
    2dfa:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2dfc:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2dfe:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2e00:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2e02:	688a      	ldr	r2, [r1, #8]
    2e04:	491e      	ldr	r1, [pc, #120]	; (2e80 <system_clock_source_xosc32k_set_config+0xac>)
    2e06:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2e08:	2101      	movs	r1, #1
    2e0a:	464a      	mov	r2, r9
    2e0c:	0092      	lsls	r2, r2, #2
    2e0e:	4691      	mov	r9, r2
    2e10:	2204      	movs	r2, #4
    2e12:	4393      	bics	r3, r2
    2e14:	464a      	mov	r2, r9
    2e16:	4313      	orrs	r3, r2
    2e18:	4642      	mov	r2, r8
    2e1a:	400a      	ands	r2, r1
    2e1c:	00d2      	lsls	r2, r2, #3
    2e1e:	4690      	mov	r8, r2
    2e20:	2208      	movs	r2, #8
    2e22:	4393      	bics	r3, r2
    2e24:	4642      	mov	r2, r8
    2e26:	4313      	orrs	r3, r2
    2e28:	4662      	mov	r2, ip
    2e2a:	400a      	ands	r2, r1
    2e2c:	0112      	lsls	r2, r2, #4
    2e2e:	4694      	mov	ip, r2
    2e30:	2210      	movs	r2, #16
    2e32:	4393      	bics	r3, r2
    2e34:	4662      	mov	r2, ip
    2e36:	4313      	orrs	r3, r2
    2e38:	4008      	ands	r0, r1
    2e3a:	0140      	lsls	r0, r0, #5
    2e3c:	2220      	movs	r2, #32
    2e3e:	4393      	bics	r3, r2
    2e40:	4303      	orrs	r3, r0
    2e42:	400f      	ands	r7, r1
    2e44:	01bf      	lsls	r7, r7, #6
    2e46:	2040      	movs	r0, #64	; 0x40
    2e48:	4383      	bics	r3, r0
    2e4a:	433b      	orrs	r3, r7
    2e4c:	400e      	ands	r6, r1
    2e4e:	01f6      	lsls	r6, r6, #7
    2e50:	3040      	adds	r0, #64	; 0x40
    2e52:	4383      	bics	r3, r0
    2e54:	4333      	orrs	r3, r6
    2e56:	3879      	subs	r0, #121	; 0x79
    2e58:	4005      	ands	r5, r0
    2e5a:	022d      	lsls	r5, r5, #8
    2e5c:	4809      	ldr	r0, [pc, #36]	; (2e84 <system_clock_source_xosc32k_set_config+0xb0>)
    2e5e:	4003      	ands	r3, r0
    2e60:	432b      	orrs	r3, r5
    2e62:	4021      	ands	r1, r4
    2e64:	0309      	lsls	r1, r1, #12
    2e66:	4808      	ldr	r0, [pc, #32]	; (2e88 <system_clock_source_xosc32k_set_config+0xb4>)
    2e68:	4003      	ands	r3, r0
    2e6a:	430b      	orrs	r3, r1
    2e6c:	465a      	mov	r2, fp
    2e6e:	8293      	strh	r3, [r2, #20]
}
    2e70:	bc3c      	pop	{r2, r3, r4, r5}
    2e72:	4690      	mov	r8, r2
    2e74:	4699      	mov	r9, r3
    2e76:	46a2      	mov	sl, r4
    2e78:	46ab      	mov	fp, r5
    2e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e7c:	40000800 	.word	0x40000800
    2e80:	20000150 	.word	0x20000150
    2e84:	fffff8ff 	.word	0xfffff8ff
    2e88:	ffffefff 	.word	0xffffefff

00002e8c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2e8c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2e8e:	7a03      	ldrb	r3, [r0, #8]
    2e90:	069b      	lsls	r3, r3, #26
    2e92:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2e94:	8942      	ldrh	r2, [r0, #10]
    2e96:	0592      	lsls	r2, r2, #22
    2e98:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2e9a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2e9c:	4918      	ldr	r1, [pc, #96]	; (2f00 <system_clock_source_dfll_set_config+0x74>)
    2e9e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2ea0:	7983      	ldrb	r3, [r0, #6]
    2ea2:	79c2      	ldrb	r2, [r0, #7]
    2ea4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2ea6:	8842      	ldrh	r2, [r0, #2]
    2ea8:	8884      	ldrh	r4, [r0, #4]
    2eaa:	4322      	orrs	r2, r4
    2eac:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2eae:	7842      	ldrb	r2, [r0, #1]
    2eb0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2eb2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2eb4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2eb6:	7803      	ldrb	r3, [r0, #0]
    2eb8:	2b04      	cmp	r3, #4
    2eba:	d011      	beq.n	2ee0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2ebc:	2b20      	cmp	r3, #32
    2ebe:	d10e      	bne.n	2ede <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ec0:	7b03      	ldrb	r3, [r0, #12]
    2ec2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ec4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ec6:	4313      	orrs	r3, r2
    2ec8:	89c2      	ldrh	r2, [r0, #14]
    2eca:	0412      	lsls	r2, r2, #16
    2ecc:	490d      	ldr	r1, [pc, #52]	; (2f04 <system_clock_source_dfll_set_config+0x78>)
    2ece:	400a      	ands	r2, r1
    2ed0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ed2:	4a0b      	ldr	r2, [pc, #44]	; (2f00 <system_clock_source_dfll_set_config+0x74>)
    2ed4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2ed6:	6811      	ldr	r1, [r2, #0]
    2ed8:	4b0b      	ldr	r3, [pc, #44]	; (2f08 <system_clock_source_dfll_set_config+0x7c>)
    2eda:	430b      	orrs	r3, r1
    2edc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2ede:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ee0:	7b03      	ldrb	r3, [r0, #12]
    2ee2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ee4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ee6:	4313      	orrs	r3, r2
    2ee8:	89c2      	ldrh	r2, [r0, #14]
    2eea:	0412      	lsls	r2, r2, #16
    2eec:	4905      	ldr	r1, [pc, #20]	; (2f04 <system_clock_source_dfll_set_config+0x78>)
    2eee:	400a      	ands	r2, r1
    2ef0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ef2:	4a03      	ldr	r2, [pc, #12]	; (2f00 <system_clock_source_dfll_set_config+0x74>)
    2ef4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2ef6:	6813      	ldr	r3, [r2, #0]
    2ef8:	2104      	movs	r1, #4
    2efa:	430b      	orrs	r3, r1
    2efc:	6013      	str	r3, [r2, #0]
    2efe:	e7ee      	b.n	2ede <system_clock_source_dfll_set_config+0x52>
    2f00:	20000150 	.word	0x20000150
    2f04:	03ff0000 	.word	0x03ff0000
    2f08:	00000424 	.word	0x00000424

00002f0c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f0c:	2808      	cmp	r0, #8
    2f0e:	d803      	bhi.n	2f18 <system_clock_source_enable+0xc>
    2f10:	0080      	lsls	r0, r0, #2
    2f12:	4b25      	ldr	r3, [pc, #148]	; (2fa8 <system_clock_source_enable+0x9c>)
    2f14:	581b      	ldr	r3, [r3, r0]
    2f16:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f18:	2017      	movs	r0, #23
    2f1a:	e044      	b.n	2fa6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f1c:	4a23      	ldr	r2, [pc, #140]	; (2fac <system_clock_source_enable+0xa0>)
    2f1e:	6a13      	ldr	r3, [r2, #32]
    2f20:	2102      	movs	r1, #2
    2f22:	430b      	orrs	r3, r1
    2f24:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2f26:	2000      	movs	r0, #0
    2f28:	e03d      	b.n	2fa6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2f2a:	4a20      	ldr	r2, [pc, #128]	; (2fac <system_clock_source_enable+0xa0>)
    2f2c:	6993      	ldr	r3, [r2, #24]
    2f2e:	2102      	movs	r1, #2
    2f30:	430b      	orrs	r3, r1
    2f32:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2f34:	2000      	movs	r0, #0
		break;
    2f36:	e036      	b.n	2fa6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2f38:	4a1c      	ldr	r2, [pc, #112]	; (2fac <system_clock_source_enable+0xa0>)
    2f3a:	8a13      	ldrh	r3, [r2, #16]
    2f3c:	2102      	movs	r1, #2
    2f3e:	430b      	orrs	r3, r1
    2f40:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2f42:	2000      	movs	r0, #0
		break;
    2f44:	e02f      	b.n	2fa6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2f46:	4a19      	ldr	r2, [pc, #100]	; (2fac <system_clock_source_enable+0xa0>)
    2f48:	8a93      	ldrh	r3, [r2, #20]
    2f4a:	2102      	movs	r1, #2
    2f4c:	430b      	orrs	r3, r1
    2f4e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2f50:	2000      	movs	r0, #0
		break;
    2f52:	e028      	b.n	2fa6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2f54:	4916      	ldr	r1, [pc, #88]	; (2fb0 <system_clock_source_enable+0xa4>)
    2f56:	680b      	ldr	r3, [r1, #0]
    2f58:	2202      	movs	r2, #2
    2f5a:	4313      	orrs	r3, r2
    2f5c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2f5e:	4b13      	ldr	r3, [pc, #76]	; (2fac <system_clock_source_enable+0xa0>)
    2f60:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f62:	0019      	movs	r1, r3
    2f64:	320e      	adds	r2, #14
    2f66:	68cb      	ldr	r3, [r1, #12]
    2f68:	421a      	tst	r2, r3
    2f6a:	d0fc      	beq.n	2f66 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2f6c:	4a10      	ldr	r2, [pc, #64]	; (2fb0 <system_clock_source_enable+0xa4>)
    2f6e:	6891      	ldr	r1, [r2, #8]
    2f70:	4b0e      	ldr	r3, [pc, #56]	; (2fac <system_clock_source_enable+0xa0>)
    2f72:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2f74:	6852      	ldr	r2, [r2, #4]
    2f76:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2f78:	2200      	movs	r2, #0
    2f7a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f7c:	0019      	movs	r1, r3
    2f7e:	3210      	adds	r2, #16
    2f80:	68cb      	ldr	r3, [r1, #12]
    2f82:	421a      	tst	r2, r3
    2f84:	d0fc      	beq.n	2f80 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2f86:	4b0a      	ldr	r3, [pc, #40]	; (2fb0 <system_clock_source_enable+0xa4>)
    2f88:	681b      	ldr	r3, [r3, #0]
    2f8a:	b29b      	uxth	r3, r3
    2f8c:	4a07      	ldr	r2, [pc, #28]	; (2fac <system_clock_source_enable+0xa0>)
    2f8e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2f90:	2000      	movs	r0, #0
    2f92:	e008      	b.n	2fa6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2f94:	4905      	ldr	r1, [pc, #20]	; (2fac <system_clock_source_enable+0xa0>)
    2f96:	2244      	movs	r2, #68	; 0x44
    2f98:	5c8b      	ldrb	r3, [r1, r2]
    2f9a:	2002      	movs	r0, #2
    2f9c:	4303      	orrs	r3, r0
    2f9e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2fa0:	2000      	movs	r0, #0
		break;
    2fa2:	e000      	b.n	2fa6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2fa4:	2000      	movs	r0, #0
}
    2fa6:	4770      	bx	lr
    2fa8:	00006750 	.word	0x00006750
    2fac:	40000800 	.word	0x40000800
    2fb0:	20000150 	.word	0x20000150

00002fb4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fb6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2fb8:	22c2      	movs	r2, #194	; 0xc2
    2fba:	00d2      	lsls	r2, r2, #3
    2fbc:	4b45      	ldr	r3, [pc, #276]	; (30d4 <system_clock_init+0x120>)
    2fbe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2fc0:	4a45      	ldr	r2, [pc, #276]	; (30d8 <system_clock_init+0x124>)
    2fc2:	6853      	ldr	r3, [r2, #4]
    2fc4:	211e      	movs	r1, #30
    2fc6:	438b      	bics	r3, r1
    2fc8:	391a      	subs	r1, #26
    2fca:	430b      	orrs	r3, r1
    2fcc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2fce:	2202      	movs	r2, #2
    2fd0:	ab01      	add	r3, sp, #4
    2fd2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fd4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2fd6:	4d41      	ldr	r5, [pc, #260]	; (30dc <system_clock_init+0x128>)
    2fd8:	b2e0      	uxtb	r0, r4
    2fda:	a901      	add	r1, sp, #4
    2fdc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fde:	3401      	adds	r4, #1
    2fe0:	2c25      	cmp	r4, #37	; 0x25
    2fe2:	d1f9      	bne.n	2fd8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2fe4:	a80a      	add	r0, sp, #40	; 0x28
    2fe6:	2300      	movs	r3, #0
    2fe8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2fea:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2fec:	2280      	movs	r2, #128	; 0x80
    2fee:	0212      	lsls	r2, r2, #8
    2ff0:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2ff2:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2ff4:	2201      	movs	r2, #1
    2ff6:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    2ff8:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2ffa:	2106      	movs	r1, #6
    2ffc:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2ffe:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    3000:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3002:	4b37      	ldr	r3, [pc, #220]	; (30e0 <system_clock_init+0x12c>)
    3004:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3006:	2005      	movs	r0, #5
    3008:	4b36      	ldr	r3, [pc, #216]	; (30e4 <system_clock_init+0x130>)
    300a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    300c:	4931      	ldr	r1, [pc, #196]	; (30d4 <system_clock_init+0x120>)
    300e:	2202      	movs	r2, #2
    3010:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3012:	421a      	tst	r2, r3
    3014:	d0fc      	beq.n	3010 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3016:	ab05      	add	r3, sp, #20
    3018:	2100      	movs	r1, #0
    301a:	2200      	movs	r2, #0
    301c:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    301e:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3020:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3022:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3024:	313f      	adds	r1, #63	; 0x3f
    3026:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3028:	393b      	subs	r1, #59	; 0x3b
    302a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    302c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    302e:	4b2e      	ldr	r3, [pc, #184]	; (30e8 <system_clock_init+0x134>)
    3030:	681b      	ldr	r3, [r3, #0]
    3032:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3034:	2b3f      	cmp	r3, #63	; 0x3f
    3036:	d04b      	beq.n	30d0 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3038:	a805      	add	r0, sp, #20
    303a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    303c:	23b7      	movs	r3, #183	; 0xb7
    303e:	00db      	lsls	r3, r3, #3
    3040:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3042:	2303      	movs	r3, #3
    3044:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3046:	331c      	adds	r3, #28
    3048:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    304a:	4b28      	ldr	r3, [pc, #160]	; (30ec <system_clock_init+0x138>)
    304c:	4798      	blx	r3
	config->on_demand       = true;
    304e:	a804      	add	r0, sp, #16
    3050:	2501      	movs	r5, #1
    3052:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3054:	2600      	movs	r6, #0
    3056:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3058:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    305a:	4b25      	ldr	r3, [pc, #148]	; (30f0 <system_clock_init+0x13c>)
    305c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    305e:	2006      	movs	r0, #6
    3060:	4f20      	ldr	r7, [pc, #128]	; (30e4 <system_clock_init+0x130>)
    3062:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3064:	4b23      	ldr	r3, [pc, #140]	; (30f4 <system_clock_init+0x140>)
    3066:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3068:	ac01      	add	r4, sp, #4
    306a:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    306c:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    306e:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    3070:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3072:	2305      	movs	r3, #5
    3074:	7023      	strb	r3, [r4, #0]
    3076:	0021      	movs	r1, r4
    3078:	2001      	movs	r0, #1
    307a:	4b1f      	ldr	r3, [pc, #124]	; (30f8 <system_clock_init+0x144>)
    307c:	4798      	blx	r3
    307e:	2001      	movs	r0, #1
    3080:	4b1e      	ldr	r3, [pc, #120]	; (30fc <system_clock_init+0x148>)
    3082:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3084:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    3086:	0021      	movs	r1, r4
    3088:	2000      	movs	r0, #0
    308a:	4b14      	ldr	r3, [pc, #80]	; (30dc <system_clock_init+0x128>)
    308c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    308e:	2000      	movs	r0, #0
    3090:	4b1b      	ldr	r3, [pc, #108]	; (3100 <system_clock_init+0x14c>)
    3092:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3094:	2007      	movs	r0, #7
    3096:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3098:	490e      	ldr	r1, [pc, #56]	; (30d4 <system_clock_init+0x120>)
    309a:	22d0      	movs	r2, #208	; 0xd0
    309c:	68cb      	ldr	r3, [r1, #12]
    309e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    30a0:	2bd0      	cmp	r3, #208	; 0xd0
    30a2:	d1fb      	bne.n	309c <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    30a4:	4a17      	ldr	r2, [pc, #92]	; (3104 <system_clock_init+0x150>)
    30a6:	2300      	movs	r3, #0
    30a8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    30aa:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    30ac:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    30ae:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    30b0:	a901      	add	r1, sp, #4
    30b2:	2201      	movs	r2, #1
    30b4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    30b6:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    30b8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    30ba:	3307      	adds	r3, #7
    30bc:	700b      	strb	r3, [r1, #0]
    30be:	720a      	strb	r2, [r1, #8]
    30c0:	2000      	movs	r0, #0
    30c2:	4b0d      	ldr	r3, [pc, #52]	; (30f8 <system_clock_init+0x144>)
    30c4:	4798      	blx	r3
    30c6:	2000      	movs	r0, #0
    30c8:	4b0c      	ldr	r3, [pc, #48]	; (30fc <system_clock_init+0x148>)
    30ca:	4798      	blx	r3
#endif
}
    30cc:	b00f      	add	sp, #60	; 0x3c
    30ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    30d0:	3b20      	subs	r3, #32
    30d2:	e7b1      	b.n	3038 <system_clock_init+0x84>
    30d4:	40000800 	.word	0x40000800
    30d8:	41004000 	.word	0x41004000
    30dc:	00003341 	.word	0x00003341
    30e0:	00002dd5 	.word	0x00002dd5
    30e4:	00002f0d 	.word	0x00002f0d
    30e8:	00806024 	.word	0x00806024
    30ec:	00002e8d 	.word	0x00002e8d
    30f0:	00002d99 	.word	0x00002d99
    30f4:	00003109 	.word	0x00003109
    30f8:	0000312d 	.word	0x0000312d
    30fc:	000031e5 	.word	0x000031e5
    3100:	000032b5 	.word	0x000032b5
    3104:	40000400 	.word	0x40000400

00003108 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3108:	4a06      	ldr	r2, [pc, #24]	; (3124 <system_gclk_init+0x1c>)
    310a:	6993      	ldr	r3, [r2, #24]
    310c:	2108      	movs	r1, #8
    310e:	430b      	orrs	r3, r1
    3110:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3112:	2201      	movs	r2, #1
    3114:	4b04      	ldr	r3, [pc, #16]	; (3128 <system_gclk_init+0x20>)
    3116:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3118:	0019      	movs	r1, r3
    311a:	780b      	ldrb	r3, [r1, #0]
    311c:	4213      	tst	r3, r2
    311e:	d1fc      	bne.n	311a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3120:	4770      	bx	lr
    3122:	46c0      	nop			; (mov r8, r8)
    3124:	40000400 	.word	0x40000400
    3128:	40000c00 	.word	0x40000c00

0000312c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    312c:	b570      	push	{r4, r5, r6, lr}
    312e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3130:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3132:	780d      	ldrb	r5, [r1, #0]
    3134:	022d      	lsls	r5, r5, #8
    3136:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3138:	784b      	ldrb	r3, [r1, #1]
    313a:	2b00      	cmp	r3, #0
    313c:	d002      	beq.n	3144 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    313e:	2380      	movs	r3, #128	; 0x80
    3140:	02db      	lsls	r3, r3, #11
    3142:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3144:	7a4b      	ldrb	r3, [r1, #9]
    3146:	2b00      	cmp	r3, #0
    3148:	d002      	beq.n	3150 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    314a:	2380      	movs	r3, #128	; 0x80
    314c:	031b      	lsls	r3, r3, #12
    314e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3150:	6848      	ldr	r0, [r1, #4]
    3152:	2801      	cmp	r0, #1
    3154:	d910      	bls.n	3178 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3156:	1e43      	subs	r3, r0, #1
    3158:	4218      	tst	r0, r3
    315a:	d134      	bne.n	31c6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    315c:	2802      	cmp	r0, #2
    315e:	d930      	bls.n	31c2 <system_gclk_gen_set_config+0x96>
    3160:	2302      	movs	r3, #2
    3162:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3164:	3201      	adds	r2, #1
						mask <<= 1) {
    3166:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3168:	4298      	cmp	r0, r3
    316a:	d8fb      	bhi.n	3164 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    316c:	0212      	lsls	r2, r2, #8
    316e:	4332      	orrs	r2, r6
    3170:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3172:	2380      	movs	r3, #128	; 0x80
    3174:	035b      	lsls	r3, r3, #13
    3176:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3178:	7a0b      	ldrb	r3, [r1, #8]
    317a:	2b00      	cmp	r3, #0
    317c:	d002      	beq.n	3184 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    317e:	2380      	movs	r3, #128	; 0x80
    3180:	039b      	lsls	r3, r3, #14
    3182:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3184:	4a13      	ldr	r2, [pc, #76]	; (31d4 <system_gclk_gen_set_config+0xa8>)
    3186:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3188:	b25b      	sxtb	r3, r3
    318a:	2b00      	cmp	r3, #0
    318c:	dbfb      	blt.n	3186 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    318e:	4b12      	ldr	r3, [pc, #72]	; (31d8 <system_gclk_gen_set_config+0xac>)
    3190:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3192:	4b12      	ldr	r3, [pc, #72]	; (31dc <system_gclk_gen_set_config+0xb0>)
    3194:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3196:	4a0f      	ldr	r2, [pc, #60]	; (31d4 <system_gclk_gen_set_config+0xa8>)
    3198:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    319a:	b25b      	sxtb	r3, r3
    319c:	2b00      	cmp	r3, #0
    319e:	dbfb      	blt.n	3198 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    31a0:	4b0c      	ldr	r3, [pc, #48]	; (31d4 <system_gclk_gen_set_config+0xa8>)
    31a2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31a4:	001a      	movs	r2, r3
    31a6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    31a8:	b25b      	sxtb	r3, r3
    31aa:	2b00      	cmp	r3, #0
    31ac:	dbfb      	blt.n	31a6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    31ae:	4a09      	ldr	r2, [pc, #36]	; (31d4 <system_gclk_gen_set_config+0xa8>)
    31b0:	6853      	ldr	r3, [r2, #4]
    31b2:	2180      	movs	r1, #128	; 0x80
    31b4:	0249      	lsls	r1, r1, #9
    31b6:	400b      	ands	r3, r1
    31b8:	431d      	orrs	r5, r3
    31ba:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    31bc:	4b08      	ldr	r3, [pc, #32]	; (31e0 <system_gclk_gen_set_config+0xb4>)
    31be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31c0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    31c2:	2200      	movs	r2, #0
    31c4:	e7d2      	b.n	316c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    31c6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    31c8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    31ca:	2380      	movs	r3, #128	; 0x80
    31cc:	029b      	lsls	r3, r3, #10
    31ce:	431d      	orrs	r5, r3
    31d0:	e7d2      	b.n	3178 <system_gclk_gen_set_config+0x4c>
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	40000c00 	.word	0x40000c00
    31d8:	0000193d 	.word	0x0000193d
    31dc:	40000c08 	.word	0x40000c08
    31e0:	0000197d 	.word	0x0000197d

000031e4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    31e4:	b510      	push	{r4, lr}
    31e6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31e8:	4a0b      	ldr	r2, [pc, #44]	; (3218 <system_gclk_gen_enable+0x34>)
    31ea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31ec:	b25b      	sxtb	r3, r3
    31ee:	2b00      	cmp	r3, #0
    31f0:	dbfb      	blt.n	31ea <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    31f2:	4b0a      	ldr	r3, [pc, #40]	; (321c <system_gclk_gen_enable+0x38>)
    31f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    31f6:	4b0a      	ldr	r3, [pc, #40]	; (3220 <system_gclk_gen_enable+0x3c>)
    31f8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31fa:	4a07      	ldr	r2, [pc, #28]	; (3218 <system_gclk_gen_enable+0x34>)
    31fc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31fe:	b25b      	sxtb	r3, r3
    3200:	2b00      	cmp	r3, #0
    3202:	dbfb      	blt.n	31fc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3204:	4a04      	ldr	r2, [pc, #16]	; (3218 <system_gclk_gen_enable+0x34>)
    3206:	6851      	ldr	r1, [r2, #4]
    3208:	2380      	movs	r3, #128	; 0x80
    320a:	025b      	lsls	r3, r3, #9
    320c:	430b      	orrs	r3, r1
    320e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3210:	4b04      	ldr	r3, [pc, #16]	; (3224 <system_gclk_gen_enable+0x40>)
    3212:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3214:	bd10      	pop	{r4, pc}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	40000c00 	.word	0x40000c00
    321c:	0000193d 	.word	0x0000193d
    3220:	40000c04 	.word	0x40000c04
    3224:	0000197d 	.word	0x0000197d

00003228 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3228:	b570      	push	{r4, r5, r6, lr}
    322a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    322c:	4a1a      	ldr	r2, [pc, #104]	; (3298 <system_gclk_gen_get_hz+0x70>)
    322e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3230:	b25b      	sxtb	r3, r3
    3232:	2b00      	cmp	r3, #0
    3234:	dbfb      	blt.n	322e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3236:	4b19      	ldr	r3, [pc, #100]	; (329c <system_gclk_gen_get_hz+0x74>)
    3238:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    323a:	4b19      	ldr	r3, [pc, #100]	; (32a0 <system_gclk_gen_get_hz+0x78>)
    323c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    323e:	4a16      	ldr	r2, [pc, #88]	; (3298 <system_gclk_gen_get_hz+0x70>)
    3240:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3242:	b25b      	sxtb	r3, r3
    3244:	2b00      	cmp	r3, #0
    3246:	dbfb      	blt.n	3240 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3248:	4e13      	ldr	r6, [pc, #76]	; (3298 <system_gclk_gen_get_hz+0x70>)
    324a:	6870      	ldr	r0, [r6, #4]
    324c:	04c0      	lsls	r0, r0, #19
    324e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3250:	4b14      	ldr	r3, [pc, #80]	; (32a4 <system_gclk_gen_get_hz+0x7c>)
    3252:	4798      	blx	r3
    3254:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3256:	4b12      	ldr	r3, [pc, #72]	; (32a0 <system_gclk_gen_get_hz+0x78>)
    3258:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    325a:	6876      	ldr	r6, [r6, #4]
    325c:	02f6      	lsls	r6, r6, #11
    325e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3260:	4b11      	ldr	r3, [pc, #68]	; (32a8 <system_gclk_gen_get_hz+0x80>)
    3262:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3264:	4a0c      	ldr	r2, [pc, #48]	; (3298 <system_gclk_gen_get_hz+0x70>)
    3266:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3268:	b25b      	sxtb	r3, r3
    326a:	2b00      	cmp	r3, #0
    326c:	dbfb      	blt.n	3266 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    326e:	4b0a      	ldr	r3, [pc, #40]	; (3298 <system_gclk_gen_get_hz+0x70>)
    3270:	689c      	ldr	r4, [r3, #8]
    3272:	0224      	lsls	r4, r4, #8
    3274:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3276:	4b0d      	ldr	r3, [pc, #52]	; (32ac <system_gclk_gen_get_hz+0x84>)
    3278:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    327a:	2e00      	cmp	r6, #0
    327c:	d107      	bne.n	328e <system_gclk_gen_get_hz+0x66>
    327e:	2c01      	cmp	r4, #1
    3280:	d907      	bls.n	3292 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3282:	0021      	movs	r1, r4
    3284:	0028      	movs	r0, r5
    3286:	4b0a      	ldr	r3, [pc, #40]	; (32b0 <system_gclk_gen_get_hz+0x88>)
    3288:	4798      	blx	r3
    328a:	0005      	movs	r5, r0
    328c:	e001      	b.n	3292 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    328e:	3401      	adds	r4, #1
    3290:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3292:	0028      	movs	r0, r5
    3294:	bd70      	pop	{r4, r5, r6, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	40000c00 	.word	0x40000c00
    329c:	0000193d 	.word	0x0000193d
    32a0:	40000c04 	.word	0x40000c04
    32a4:	00002d05 	.word	0x00002d05
    32a8:	40000c08 	.word	0x40000c08
    32ac:	0000197d 	.word	0x0000197d
    32b0:	00005739 	.word	0x00005739

000032b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    32b4:	b510      	push	{r4, lr}
    32b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32b8:	4b06      	ldr	r3, [pc, #24]	; (32d4 <system_gclk_chan_enable+0x20>)
    32ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32bc:	4b06      	ldr	r3, [pc, #24]	; (32d8 <system_gclk_chan_enable+0x24>)
    32be:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    32c0:	4a06      	ldr	r2, [pc, #24]	; (32dc <system_gclk_chan_enable+0x28>)
    32c2:	8853      	ldrh	r3, [r2, #2]
    32c4:	2180      	movs	r1, #128	; 0x80
    32c6:	01c9      	lsls	r1, r1, #7
    32c8:	430b      	orrs	r3, r1
    32ca:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    32cc:	4b04      	ldr	r3, [pc, #16]	; (32e0 <system_gclk_chan_enable+0x2c>)
    32ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    32d0:	bd10      	pop	{r4, pc}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	0000193d 	.word	0x0000193d
    32d8:	40000c02 	.word	0x40000c02
    32dc:	40000c00 	.word	0x40000c00
    32e0:	0000197d 	.word	0x0000197d

000032e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    32e4:	b510      	push	{r4, lr}
    32e6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32e8:	4b0f      	ldr	r3, [pc, #60]	; (3328 <system_gclk_chan_disable+0x44>)
    32ea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32ec:	4b0f      	ldr	r3, [pc, #60]	; (332c <system_gclk_chan_disable+0x48>)
    32ee:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    32f0:	4a0f      	ldr	r2, [pc, #60]	; (3330 <system_gclk_chan_disable+0x4c>)
    32f2:	8853      	ldrh	r3, [r2, #2]
    32f4:	051b      	lsls	r3, r3, #20
    32f6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    32f8:	8853      	ldrh	r3, [r2, #2]
    32fa:	490e      	ldr	r1, [pc, #56]	; (3334 <system_gclk_chan_disable+0x50>)
    32fc:	400b      	ands	r3, r1
    32fe:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3300:	8853      	ldrh	r3, [r2, #2]
    3302:	490d      	ldr	r1, [pc, #52]	; (3338 <system_gclk_chan_disable+0x54>)
    3304:	400b      	ands	r3, r1
    3306:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3308:	0011      	movs	r1, r2
    330a:	2280      	movs	r2, #128	; 0x80
    330c:	01d2      	lsls	r2, r2, #7
    330e:	884b      	ldrh	r3, [r1, #2]
    3310:	4213      	tst	r3, r2
    3312:	d1fc      	bne.n	330e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3314:	4906      	ldr	r1, [pc, #24]	; (3330 <system_gclk_chan_disable+0x4c>)
    3316:	884a      	ldrh	r2, [r1, #2]
    3318:	0203      	lsls	r3, r0, #8
    331a:	4806      	ldr	r0, [pc, #24]	; (3334 <system_gclk_chan_disable+0x50>)
    331c:	4002      	ands	r2, r0
    331e:	4313      	orrs	r3, r2
    3320:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3322:	4b06      	ldr	r3, [pc, #24]	; (333c <system_gclk_chan_disable+0x58>)
    3324:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3326:	bd10      	pop	{r4, pc}
    3328:	0000193d 	.word	0x0000193d
    332c:	40000c02 	.word	0x40000c02
    3330:	40000c00 	.word	0x40000c00
    3334:	fffff0ff 	.word	0xfffff0ff
    3338:	ffffbfff 	.word	0xffffbfff
    333c:	0000197d 	.word	0x0000197d

00003340 <system_gclk_chan_set_config>:
{
    3340:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3342:	780c      	ldrb	r4, [r1, #0]
    3344:	0224      	lsls	r4, r4, #8
    3346:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3348:	4b02      	ldr	r3, [pc, #8]	; (3354 <system_gclk_chan_set_config+0x14>)
    334a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    334c:	b2a4      	uxth	r4, r4
    334e:	4b02      	ldr	r3, [pc, #8]	; (3358 <system_gclk_chan_set_config+0x18>)
    3350:	805c      	strh	r4, [r3, #2]
}
    3352:	bd10      	pop	{r4, pc}
    3354:	000032e5 	.word	0x000032e5
    3358:	40000c00 	.word	0x40000c00

0000335c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    335c:	b510      	push	{r4, lr}
    335e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3360:	4b06      	ldr	r3, [pc, #24]	; (337c <system_gclk_chan_get_hz+0x20>)
    3362:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3364:	4b06      	ldr	r3, [pc, #24]	; (3380 <system_gclk_chan_get_hz+0x24>)
    3366:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3368:	4b06      	ldr	r3, [pc, #24]	; (3384 <system_gclk_chan_get_hz+0x28>)
    336a:	885c      	ldrh	r4, [r3, #2]
    336c:	0524      	lsls	r4, r4, #20
    336e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3370:	4b05      	ldr	r3, [pc, #20]	; (3388 <system_gclk_chan_get_hz+0x2c>)
    3372:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3374:	0020      	movs	r0, r4
    3376:	4b05      	ldr	r3, [pc, #20]	; (338c <system_gclk_chan_get_hz+0x30>)
    3378:	4798      	blx	r3
}
    337a:	bd10      	pop	{r4, pc}
    337c:	0000193d 	.word	0x0000193d
    3380:	40000c02 	.word	0x40000c02
    3384:	40000c00 	.word	0x40000c00
    3388:	0000197d 	.word	0x0000197d
    338c:	00003229 	.word	0x00003229

00003390 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3390:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3392:	78d3      	ldrb	r3, [r2, #3]
    3394:	2b00      	cmp	r3, #0
    3396:	d135      	bne.n	3404 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3398:	7813      	ldrb	r3, [r2, #0]
    339a:	2b80      	cmp	r3, #128	; 0x80
    339c:	d029      	beq.n	33f2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    339e:	061b      	lsls	r3, r3, #24
    33a0:	2480      	movs	r4, #128	; 0x80
    33a2:	0264      	lsls	r4, r4, #9
    33a4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    33a6:	7854      	ldrb	r4, [r2, #1]
    33a8:	2502      	movs	r5, #2
    33aa:	43ac      	bics	r4, r5
    33ac:	d106      	bne.n	33bc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    33ae:	7894      	ldrb	r4, [r2, #2]
    33b0:	2c00      	cmp	r4, #0
    33b2:	d120      	bne.n	33f6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    33b4:	2480      	movs	r4, #128	; 0x80
    33b6:	02a4      	lsls	r4, r4, #10
    33b8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    33ba:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33bc:	7854      	ldrb	r4, [r2, #1]
    33be:	3c01      	subs	r4, #1
    33c0:	2c01      	cmp	r4, #1
    33c2:	d91c      	bls.n	33fe <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    33c4:	040d      	lsls	r5, r1, #16
    33c6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    33c8:	24a0      	movs	r4, #160	; 0xa0
    33ca:	05e4      	lsls	r4, r4, #23
    33cc:	432c      	orrs	r4, r5
    33ce:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33d0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    33d2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    33d4:	24d0      	movs	r4, #208	; 0xd0
    33d6:	0624      	lsls	r4, r4, #24
    33d8:	432c      	orrs	r4, r5
    33da:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33dc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    33de:	78d4      	ldrb	r4, [r2, #3]
    33e0:	2c00      	cmp	r4, #0
    33e2:	d122      	bne.n	342a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    33e4:	035b      	lsls	r3, r3, #13
    33e6:	d51c      	bpl.n	3422 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    33e8:	7893      	ldrb	r3, [r2, #2]
    33ea:	2b01      	cmp	r3, #1
    33ec:	d01e      	beq.n	342c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    33ee:	6141      	str	r1, [r0, #20]
    33f0:	e017      	b.n	3422 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    33f2:	2300      	movs	r3, #0
    33f4:	e7d7      	b.n	33a6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    33f6:	24c0      	movs	r4, #192	; 0xc0
    33f8:	02e4      	lsls	r4, r4, #11
    33fa:	4323      	orrs	r3, r4
    33fc:	e7dd      	b.n	33ba <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    33fe:	4c0d      	ldr	r4, [pc, #52]	; (3434 <_system_pinmux_config+0xa4>)
    3400:	4023      	ands	r3, r4
    3402:	e7df      	b.n	33c4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3404:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3406:	040c      	lsls	r4, r1, #16
    3408:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    340a:	23a0      	movs	r3, #160	; 0xa0
    340c:	05db      	lsls	r3, r3, #23
    340e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3410:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3412:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3414:	23d0      	movs	r3, #208	; 0xd0
    3416:	061b      	lsls	r3, r3, #24
    3418:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    341a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    341c:	78d3      	ldrb	r3, [r2, #3]
    341e:	2b00      	cmp	r3, #0
    3420:	d103      	bne.n	342a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3422:	7853      	ldrb	r3, [r2, #1]
    3424:	3b01      	subs	r3, #1
    3426:	2b01      	cmp	r3, #1
    3428:	d902      	bls.n	3430 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    342a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    342c:	6181      	str	r1, [r0, #24]
    342e:	e7f8      	b.n	3422 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3430:	6081      	str	r1, [r0, #8]
}
    3432:	e7fa      	b.n	342a <_system_pinmux_config+0x9a>
    3434:	fffbffff 	.word	0xfffbffff

00003438 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3438:	b510      	push	{r4, lr}
    343a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    343c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    343e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3440:	2900      	cmp	r1, #0
    3442:	d104      	bne.n	344e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3444:	0943      	lsrs	r3, r0, #5
    3446:	01db      	lsls	r3, r3, #7
    3448:	4905      	ldr	r1, [pc, #20]	; (3460 <system_pinmux_pin_set_config+0x28>)
    344a:	468c      	mov	ip, r1
    344c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    344e:	241f      	movs	r4, #31
    3450:	4020      	ands	r0, r4
    3452:	2101      	movs	r1, #1
    3454:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3456:	0018      	movs	r0, r3
    3458:	4b02      	ldr	r3, [pc, #8]	; (3464 <system_pinmux_pin_set_config+0x2c>)
    345a:	4798      	blx	r3
}
    345c:	bd10      	pop	{r4, pc}
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	41004400 	.word	0x41004400
    3464:	00003391 	.word	0x00003391

00003468 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3468:	4770      	bx	lr
	...

0000346c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    346c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    346e:	4b05      	ldr	r3, [pc, #20]	; (3484 <system_init+0x18>)
    3470:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3472:	4b05      	ldr	r3, [pc, #20]	; (3488 <system_init+0x1c>)
    3474:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3476:	4b05      	ldr	r3, [pc, #20]	; (348c <system_init+0x20>)
    3478:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    347a:	4b05      	ldr	r3, [pc, #20]	; (3490 <system_init+0x24>)
    347c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    347e:	4b05      	ldr	r3, [pc, #20]	; (3494 <system_init+0x28>)
    3480:	4798      	blx	r3
}
    3482:	bd10      	pop	{r4, pc}
    3484:	00002fb5 	.word	0x00002fb5
    3488:	000001ed 	.word	0x000001ed
    348c:	00003469 	.word	0x00003469
    3490:	00003469 	.word	0x00003469
    3494:	00003469 	.word	0x00003469

00003498 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3498:	e7fe      	b.n	3498 <Dummy_Handler>
	...

0000349c <Reset_Handler>:
{
    349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    349e:	4a2a      	ldr	r2, [pc, #168]	; (3548 <Reset_Handler+0xac>)
    34a0:	4b2a      	ldr	r3, [pc, #168]	; (354c <Reset_Handler+0xb0>)
    34a2:	429a      	cmp	r2, r3
    34a4:	d011      	beq.n	34ca <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    34a6:	001a      	movs	r2, r3
    34a8:	4b29      	ldr	r3, [pc, #164]	; (3550 <Reset_Handler+0xb4>)
    34aa:	429a      	cmp	r2, r3
    34ac:	d20d      	bcs.n	34ca <Reset_Handler+0x2e>
    34ae:	4a29      	ldr	r2, [pc, #164]	; (3554 <Reset_Handler+0xb8>)
    34b0:	3303      	adds	r3, #3
    34b2:	1a9b      	subs	r3, r3, r2
    34b4:	089b      	lsrs	r3, r3, #2
    34b6:	3301      	adds	r3, #1
    34b8:	009b      	lsls	r3, r3, #2
    34ba:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    34bc:	4823      	ldr	r0, [pc, #140]	; (354c <Reset_Handler+0xb0>)
    34be:	4922      	ldr	r1, [pc, #136]	; (3548 <Reset_Handler+0xac>)
    34c0:	588c      	ldr	r4, [r1, r2]
    34c2:	5084      	str	r4, [r0, r2]
    34c4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    34c6:	429a      	cmp	r2, r3
    34c8:	d1fa      	bne.n	34c0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    34ca:	4a23      	ldr	r2, [pc, #140]	; (3558 <Reset_Handler+0xbc>)
    34cc:	4b23      	ldr	r3, [pc, #140]	; (355c <Reset_Handler+0xc0>)
    34ce:	429a      	cmp	r2, r3
    34d0:	d20a      	bcs.n	34e8 <Reset_Handler+0x4c>
    34d2:	43d3      	mvns	r3, r2
    34d4:	4921      	ldr	r1, [pc, #132]	; (355c <Reset_Handler+0xc0>)
    34d6:	185b      	adds	r3, r3, r1
    34d8:	2103      	movs	r1, #3
    34da:	438b      	bics	r3, r1
    34dc:	3304      	adds	r3, #4
    34de:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    34e0:	2100      	movs	r1, #0
    34e2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    34e4:	4293      	cmp	r3, r2
    34e6:	d1fc      	bne.n	34e2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    34e8:	4a1d      	ldr	r2, [pc, #116]	; (3560 <Reset_Handler+0xc4>)
    34ea:	21ff      	movs	r1, #255	; 0xff
    34ec:	4b1d      	ldr	r3, [pc, #116]	; (3564 <Reset_Handler+0xc8>)
    34ee:	438b      	bics	r3, r1
    34f0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    34f2:	39fd      	subs	r1, #253	; 0xfd
    34f4:	2390      	movs	r3, #144	; 0x90
    34f6:	005b      	lsls	r3, r3, #1
    34f8:	4a1b      	ldr	r2, [pc, #108]	; (3568 <Reset_Handler+0xcc>)
    34fa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    34fc:	4a1b      	ldr	r2, [pc, #108]	; (356c <Reset_Handler+0xd0>)
    34fe:	78d3      	ldrb	r3, [r2, #3]
    3500:	2503      	movs	r5, #3
    3502:	43ab      	bics	r3, r5
    3504:	2402      	movs	r4, #2
    3506:	4323      	orrs	r3, r4
    3508:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    350a:	78d3      	ldrb	r3, [r2, #3]
    350c:	270c      	movs	r7, #12
    350e:	43bb      	bics	r3, r7
    3510:	2608      	movs	r6, #8
    3512:	4333      	orrs	r3, r6
    3514:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3516:	4b16      	ldr	r3, [pc, #88]	; (3570 <Reset_Handler+0xd4>)
    3518:	7b98      	ldrb	r0, [r3, #14]
    351a:	2230      	movs	r2, #48	; 0x30
    351c:	4390      	bics	r0, r2
    351e:	2220      	movs	r2, #32
    3520:	4310      	orrs	r0, r2
    3522:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3524:	7b99      	ldrb	r1, [r3, #14]
    3526:	43b9      	bics	r1, r7
    3528:	4331      	orrs	r1, r6
    352a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    352c:	7b9a      	ldrb	r2, [r3, #14]
    352e:	43aa      	bics	r2, r5
    3530:	4322      	orrs	r2, r4
    3532:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3534:	4a0f      	ldr	r2, [pc, #60]	; (3574 <Reset_Handler+0xd8>)
    3536:	6853      	ldr	r3, [r2, #4]
    3538:	2180      	movs	r1, #128	; 0x80
    353a:	430b      	orrs	r3, r1
    353c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    353e:	4b0e      	ldr	r3, [pc, #56]	; (3578 <Reset_Handler+0xdc>)
    3540:	4798      	blx	r3
        main();
    3542:	4b0e      	ldr	r3, [pc, #56]	; (357c <Reset_Handler+0xe0>)
    3544:	4798      	blx	r3
    3546:	e7fe      	b.n	3546 <Reset_Handler+0xaa>
    3548:	00006f3c 	.word	0x00006f3c
    354c:	20000000 	.word	0x20000000
    3550:	20000084 	.word	0x20000084
    3554:	20000004 	.word	0x20000004
    3558:	20000084 	.word	0x20000084
    355c:	20000c9c 	.word	0x20000c9c
    3560:	e000ed00 	.word	0xe000ed00
    3564:	00000000 	.word	0x00000000
    3568:	41007000 	.word	0x41007000
    356c:	41005000 	.word	0x41005000
    3570:	41004800 	.word	0x41004800
    3574:	41004000 	.word	0x41004000
    3578:	00005c8d 	.word	0x00005c8d
    357c:	00005551 	.word	0x00005551

00003580 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3580:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3582:	4a06      	ldr	r2, [pc, #24]	; (359c <_sbrk+0x1c>)
    3584:	6812      	ldr	r2, [r2, #0]
    3586:	2a00      	cmp	r2, #0
    3588:	d004      	beq.n	3594 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    358a:	4a04      	ldr	r2, [pc, #16]	; (359c <_sbrk+0x1c>)
    358c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    358e:	18c3      	adds	r3, r0, r3
    3590:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3592:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3594:	4902      	ldr	r1, [pc, #8]	; (35a0 <_sbrk+0x20>)
    3596:	4a01      	ldr	r2, [pc, #4]	; (359c <_sbrk+0x1c>)
    3598:	6011      	str	r1, [r2, #0]
    359a:	e7f6      	b.n	358a <_sbrk+0xa>
    359c:	20000168 	.word	0x20000168
    35a0:	20002ca0 	.word	0x20002ca0

000035a4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    35a4:	b530      	push	{r4, r5, lr}
    35a6:	b087      	sub	sp, #28
    35a8:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    35aa:	aa01      	add	r2, sp, #4
    35ac:	23a0      	movs	r3, #160	; 0xa0
    35ae:	011b      	lsls	r3, r3, #4
    35b0:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    35b2:	2300      	movs	r3, #0
    35b4:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    35b6:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    35b8:	21fa      	movs	r1, #250	; 0xfa
    35ba:	00c9      	lsls	r1, r1, #3
    35bc:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    35be:	2101      	movs	r1, #1
    35c0:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    35c2:	2004      	movs	r0, #4
    35c4:	7210      	strb	r0, [r2, #8]
    35c6:	7253      	strb	r3, [r2, #9]
    35c8:	7293      	strb	r3, [r2, #10]
    35ca:	72d3      	strb	r3, [r2, #11]
    35cc:	7311      	strb	r1, [r2, #12]
    35ce:	7351      	strb	r1, [r2, #13]
    35d0:	4b14      	ldr	r3, [pc, #80]	; (3624 <disk_initialize+0x80>)
    35d2:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    35d4:	2306      	movs	r3, #6
    35d6:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    35d8:	4d13      	ldr	r5, [pc, #76]	; (3628 <disk_initialize+0x84>)
    35da:	4914      	ldr	r1, [pc, #80]	; (362c <disk_initialize+0x88>)
    35dc:	0028      	movs	r0, r5
    35de:	4b14      	ldr	r3, [pc, #80]	; (3630 <disk_initialize+0x8c>)
    35e0:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    35e2:	0028      	movs	r0, r5
    35e4:	4b13      	ldr	r3, [pc, #76]	; (3634 <disk_initialize+0x90>)
    35e6:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    35e8:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    35ea:	2c01      	cmp	r4, #1
    35ec:	d901      	bls.n	35f2 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    35ee:	b007      	add	sp, #28
    35f0:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    35f2:	0020      	movs	r0, r4
    35f4:	4b10      	ldr	r3, [pc, #64]	; (3638 <disk_initialize+0x94>)
    35f6:	4798      	blx	r3
    35f8:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    35fa:	2803      	cmp	r0, #3
    35fc:	d106      	bne.n	360c <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    35fe:	0020      	movs	r0, r4
    3600:	4b0d      	ldr	r3, [pc, #52]	; (3638 <disk_initialize+0x94>)
    3602:	4798      	blx	r3
    3604:	0003      	movs	r3, r0
		return STA_NOINIT;
    3606:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3608:	2b03      	cmp	r3, #3
    360a:	d0f0      	beq.n	35ee <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    360c:	2b00      	cmp	r3, #0
    360e:	d106      	bne.n	361e <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    3610:	0020      	movs	r0, r4
    3612:	4b0a      	ldr	r3, [pc, #40]	; (363c <disk_initialize+0x98>)
    3614:	4798      	blx	r3
	return 0;
    3616:	1e43      	subs	r3, r0, #1
    3618:	4198      	sbcs	r0, r3
    361a:	0080      	lsls	r0, r0, #2
    361c:	e7e7      	b.n	35ee <disk_initialize+0x4a>
		return STA_NOINIT;
    361e:	2001      	movs	r0, #1
    3620:	e7e5      	b.n	35ee <disk_initialize+0x4a>
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	000007de 	.word	0x000007de
    3628:	200009fc 	.word	0x200009fc
    362c:	40001400 	.word	0x40001400
    3630:	00001b15 	.word	0x00001b15
    3634:	000019d1 	.word	0x000019d1
    3638:	000018a9 	.word	0x000018a9
    363c:	000018e5 	.word	0x000018e5

00003640 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3640:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3642:	4b05      	ldr	r3, [pc, #20]	; (3658 <disk_status+0x18>)
    3644:	4798      	blx	r3
    3646:	1e03      	subs	r3, r0, #0
    3648:	d004      	beq.n	3654 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    364a:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    364c:	2b02      	cmp	r3, #2
    364e:	d000      	beq.n	3652 <disk_status+0x12>
	default:
		return STA_NOINIT;
    3650:	3802      	subs	r0, #2
	}
}
    3652:	bd10      	pop	{r4, pc}
		return 0;
    3654:	2000      	movs	r0, #0
    3656:	e7fc      	b.n	3652 <disk_status+0x12>
    3658:	000018a9 	.word	0x000018a9

0000365c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    365c:	b5f0      	push	{r4, r5, r6, r7, lr}
    365e:	46de      	mov	lr, fp
    3660:	464f      	mov	r7, r9
    3662:	4646      	mov	r6, r8
    3664:	b5c0      	push	{r6, r7, lr}
    3666:	b084      	sub	sp, #16
    3668:	9001      	str	r0, [sp, #4]
    366a:	000d      	movs	r5, r1
    366c:	0014      	movs	r4, r2
    366e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3670:	4b18      	ldr	r3, [pc, #96]	; (36d4 <disk_read+0x78>)
    3672:	4798      	blx	r3
    3674:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3676:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3678:	2e00      	cmp	r6, #0
    367a:	d105      	bne.n	3688 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    367c:	b004      	add	sp, #16
    367e:	bc1c      	pop	{r2, r3, r4}
    3680:	4690      	mov	r8, r2
    3682:	4699      	mov	r9, r3
    3684:	46a3      	mov	fp, r4
    3686:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3688:	a903      	add	r1, sp, #12
    368a:	9801      	ldr	r0, [sp, #4]
    368c:	4b12      	ldr	r3, [pc, #72]	; (36d8 <disk_read+0x7c>)
    368e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3690:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3692:	0032      	movs	r2, r6
    3694:	437a      	muls	r2, r7
    3696:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3698:	9b03      	ldr	r3, [sp, #12]
    369a:	3301      	adds	r3, #1
    369c:	4373      	muls	r3, r6
		return RES_PARERR;
    369e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    36a0:	429a      	cmp	r2, r3
    36a2:	d8eb      	bhi.n	367c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    36a4:	2f00      	cmp	r7, #0
    36a6:	d011      	beq.n	36cc <disk_read+0x70>
    36a8:	0273      	lsls	r3, r6, #9
    36aa:	4698      	mov	r8, r3
    36ac:	1c7b      	adds	r3, r7, #1
    36ae:	469b      	mov	fp, r3
    36b0:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    36b2:	4e0a      	ldr	r6, [pc, #40]	; (36dc <disk_read+0x80>)
    36b4:	002a      	movs	r2, r5
    36b6:	0021      	movs	r1, r4
    36b8:	9801      	ldr	r0, [sp, #4]
    36ba:	47b0      	blx	r6
    36bc:	2800      	cmp	r0, #0
    36be:	d107      	bne.n	36d0 <disk_read+0x74>
    36c0:	3701      	adds	r7, #1
    36c2:	444c      	add	r4, r9
    36c4:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    36c6:	455f      	cmp	r7, fp
    36c8:	d1f4      	bne.n	36b4 <disk_read+0x58>
    36ca:	e7d7      	b.n	367c <disk_read+0x20>
	return RES_OK;
    36cc:	2000      	movs	r0, #0
    36ce:	e7d5      	b.n	367c <disk_read+0x20>
			return RES_ERROR;
    36d0:	2001      	movs	r0, #1
    36d2:	e7d3      	b.n	367c <disk_read+0x20>
    36d4:	000018dd 	.word	0x000018dd
    36d8:	000018c1 	.word	0x000018c1
    36dc:	000018fd 	.word	0x000018fd

000036e0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    36e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36e2:	46de      	mov	lr, fp
    36e4:	464f      	mov	r7, r9
    36e6:	4646      	mov	r6, r8
    36e8:	b5c0      	push	{r6, r7, lr}
    36ea:	b084      	sub	sp, #16
    36ec:	9001      	str	r0, [sp, #4]
    36ee:	000d      	movs	r5, r1
    36f0:	0014      	movs	r4, r2
    36f2:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    36f4:	4b18      	ldr	r3, [pc, #96]	; (3758 <disk_write+0x78>)
    36f6:	4798      	blx	r3
    36f8:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    36fa:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    36fc:	2e00      	cmp	r6, #0
    36fe:	d105      	bne.n	370c <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3700:	b004      	add	sp, #16
    3702:	bc1c      	pop	{r2, r3, r4}
    3704:	4690      	mov	r8, r2
    3706:	4699      	mov	r9, r3
    3708:	46a3      	mov	fp, r4
    370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    370c:	a903      	add	r1, sp, #12
    370e:	9801      	ldr	r0, [sp, #4]
    3710:	4b12      	ldr	r3, [pc, #72]	; (375c <disk_write+0x7c>)
    3712:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3714:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3716:	0032      	movs	r2, r6
    3718:	437a      	muls	r2, r7
    371a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    371c:	9b03      	ldr	r3, [sp, #12]
    371e:	3301      	adds	r3, #1
    3720:	4373      	muls	r3, r6
		return RES_PARERR;
    3722:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3724:	429a      	cmp	r2, r3
    3726:	d8eb      	bhi.n	3700 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3728:	2f00      	cmp	r7, #0
    372a:	d011      	beq.n	3750 <disk_write+0x70>
    372c:	0273      	lsls	r3, r6, #9
    372e:	4698      	mov	r8, r3
    3730:	1c7b      	adds	r3, r7, #1
    3732:	469b      	mov	fp, r3
    3734:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3736:	4e0a      	ldr	r6, [pc, #40]	; (3760 <disk_write+0x80>)
    3738:	002a      	movs	r2, r5
    373a:	0021      	movs	r1, r4
    373c:	9801      	ldr	r0, [sp, #4]
    373e:	47b0      	blx	r6
    3740:	2800      	cmp	r0, #0
    3742:	d107      	bne.n	3754 <disk_write+0x74>
    3744:	3701      	adds	r7, #1
    3746:	444c      	add	r4, r9
    3748:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    374a:	455f      	cmp	r7, fp
    374c:	d1f4      	bne.n	3738 <disk_write+0x58>
    374e:	e7d7      	b.n	3700 <disk_write+0x20>
	return RES_OK;
    3750:	2000      	movs	r0, #0
    3752:	e7d5      	b.n	3700 <disk_write+0x20>
			return RES_ERROR;
    3754:	2001      	movs	r0, #1
    3756:	e7d3      	b.n	3700 <disk_write+0x20>
    3758:	000018dd 	.word	0x000018dd
    375c:	000018c1 	.word	0x000018c1
    3760:	0000191d 	.word	0x0000191d

00003764 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3764:	b510      	push	{r4, lr}
    3766:	b082      	sub	sp, #8
    3768:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    376a:	2901      	cmp	r1, #1
    376c:	d00b      	beq.n	3786 <disk_ioctl+0x22>
    376e:	2900      	cmp	r1, #0
    3770:	d020      	beq.n	37b4 <disk_ioctl+0x50>
    3772:	2902      	cmp	r1, #2
    3774:	d00f      	beq.n	3796 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3776:	2004      	movs	r0, #4
	switch (ctrl) {
    3778:	2903      	cmp	r1, #3
    377a:	d102      	bne.n	3782 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    377c:	2301      	movs	r3, #1
    377e:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3780:	2000      	movs	r0, #0
	}

	return res;
}
    3782:	b002      	add	sp, #8
    3784:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    3786:	a901      	add	r1, sp, #4
    3788:	4b0e      	ldr	r3, [pc, #56]	; (37c4 <disk_ioctl+0x60>)
    378a:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    378c:	9b01      	ldr	r3, [sp, #4]
    378e:	3301      	adds	r3, #1
    3790:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3792:	2000      	movs	r0, #0
	break;
    3794:	e7f5      	b.n	3782 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    3796:	4b0c      	ldr	r3, [pc, #48]	; (37c8 <disk_ioctl+0x64>)
    3798:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    379a:	1e43      	subs	r3, r0, #1
    379c:	b2db      	uxtb	r3, r3
    379e:	2b01      	cmp	r3, #1
    37a0:	d904      	bls.n	37ac <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    37a2:	1f03      	subs	r3, r0, #4
    37a4:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    37a6:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    37a8:	4213      	tst	r3, r2
    37aa:	d1ea      	bne.n	3782 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    37ac:	2300      	movs	r3, #0
    37ae:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    37b0:	2000      	movs	r0, #0
	break;
    37b2:	e7e6      	b.n	3782 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    37b4:	4b05      	ldr	r3, [pc, #20]	; (37cc <disk_ioctl+0x68>)
    37b6:	4798      	blx	r3
    37b8:	2800      	cmp	r0, #0
    37ba:	d001      	beq.n	37c0 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    37bc:	2003      	movs	r0, #3
    37be:	e7e0      	b.n	3782 <disk_ioctl+0x1e>
			res = RES_OK;
    37c0:	2000      	movs	r0, #0
    37c2:	e7de      	b.n	3782 <disk_ioctl+0x1e>
    37c4:	000018c1 	.word	0x000018c1
    37c8:	000018dd 	.word	0x000018dd
    37cc:	000018a9 	.word	0x000018a9

000037d0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    37d0:	b500      	push	{lr}
    37d2:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    37d4:	4669      	mov	r1, sp
    37d6:	480f      	ldr	r0, [pc, #60]	; (3814 <get_fattime+0x44>)
    37d8:	4b0f      	ldr	r3, [pc, #60]	; (3818 <get_fattime+0x48>)
    37da:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    37dc:	466b      	mov	r3, sp
    37de:	7958      	ldrb	r0, [r3, #5]
    37e0:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    37e2:	791b      	ldrb	r3, [r3, #4]
    37e4:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    37e6:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    37e8:	466b      	mov	r3, sp
    37ea:	789b      	ldrb	r3, [r3, #2]
    37ec:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    37ee:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    37f0:	466b      	mov	r3, sp
    37f2:	785b      	ldrb	r3, [r3, #1]
    37f4:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    37f6:	4318      	orrs	r0, r3
    37f8:	466b      	mov	r3, sp
    37fa:	781b      	ldrb	r3, [r3, #0]
    37fc:	085b      	lsrs	r3, r3, #1
    37fe:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    3800:	466b      	mov	r3, sp
    3802:	88db      	ldrh	r3, [r3, #6]
    3804:	4a05      	ldr	r2, [pc, #20]	; (381c <get_fattime+0x4c>)
    3806:	4694      	mov	ip, r2
    3808:	4463      	add	r3, ip
    380a:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    380c:	4318      	orrs	r0, r3

	return ul_time;
}
    380e:	b003      	add	sp, #12
    3810:	bd00      	pop	{pc}
    3812:	46c0      	nop			; (mov r8, r8)
    3814:	200009fc 	.word	0x200009fc
    3818:	00001a9d 	.word	0x00001a9d
    381c:	fffff844 	.word	0xfffff844

00003820 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3820:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3822:	2a00      	cmp	r2, #0
    3824:	d005      	beq.n	3832 <mem_cpy+0x12>
    3826:	2300      	movs	r3, #0
		*d++ = *s++;
    3828:	5ccc      	ldrb	r4, [r1, r3]
    382a:	54c4      	strb	r4, [r0, r3]
    382c:	3301      	adds	r3, #1
	while (cnt--)
    382e:	4293      	cmp	r3, r2
    3830:	d1fa      	bne.n	3828 <mem_cpy+0x8>
}
    3832:	bd10      	pop	{r4, pc}

00003834 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3834:	2a00      	cmp	r2, #0
    3836:	d005      	beq.n	3844 <mem_set+0x10>
    3838:	0003      	movs	r3, r0
    383a:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    383c:	7019      	strb	r1, [r3, #0]
    383e:	3301      	adds	r3, #1
	while (cnt--)
    3840:	4293      	cmp	r3, r2
    3842:	d1fb      	bne.n	383c <mem_set+0x8>
}
    3844:	4770      	bx	lr

00003846 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    3846:	0002      	movs	r2, r0
	clst -= 2;
    3848:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    384a:	6983      	ldr	r3, [r0, #24]
    384c:	3b02      	subs	r3, #2
    384e:	2000      	movs	r0, #0
    3850:	4299      	cmp	r1, r3
    3852:	d203      	bcs.n	385c <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3854:	7890      	ldrb	r0, [r2, #2]
    3856:	4341      	muls	r1, r0
    3858:	6a90      	ldr	r0, [r2, #40]	; 0x28
    385a:	1808      	adds	r0, r1, r0
}
    385c:	4770      	bx	lr

0000385e <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    385e:	0002      	movs	r2, r0
    3860:	0001      	movs	r1, r0
    3862:	310b      	adds	r1, #11
	BYTE sum = 0;
    3864:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3866:	0843      	lsrs	r3, r0, #1
    3868:	01c0      	lsls	r0, r0, #7
    386a:	4303      	orrs	r3, r0
    386c:	7810      	ldrb	r0, [r2, #0]
    386e:	1818      	adds	r0, r3, r0
    3870:	b2c0      	uxtb	r0, r0
    3872:	3201      	adds	r2, #1
    3874:	428a      	cmp	r2, r1
    3876:	d1f6      	bne.n	3866 <sum_sfn+0x8>
	return sum;
}
    3878:	4770      	bx	lr
	...

0000387c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    387c:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    387e:	2800      	cmp	r0, #0
    3880:	d010      	beq.n	38a4 <validate+0x28>
    3882:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3884:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3886:	2a00      	cmp	r2, #0
    3888:	d101      	bne.n	388e <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    388a:	0018      	movs	r0, r3
    388c:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    388e:	88c2      	ldrh	r2, [r0, #6]
    3890:	428a      	cmp	r2, r1
    3892:	d1fa      	bne.n	388a <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3894:	7840      	ldrb	r0, [r0, #1]
    3896:	4b04      	ldr	r3, [pc, #16]	; (38a8 <validate+0x2c>)
    3898:	4798      	blx	r3
		return FR_NOT_READY;
    389a:	2303      	movs	r3, #3
	return FR_OK;
    389c:	07c0      	lsls	r0, r0, #31
    389e:	17c0      	asrs	r0, r0, #31
    38a0:	4003      	ands	r3, r0
    38a2:	e7f2      	b.n	388a <validate+0xe>
		return FR_INVALID_OBJECT;
    38a4:	2309      	movs	r3, #9
    38a6:	e7f0      	b.n	388a <validate+0xe>
    38a8:	00003641 	.word	0x00003641

000038ac <check_fs>:
{
    38ac:	b570      	push	{r4, r5, r6, lr}
    38ae:	0004      	movs	r4, r0
    38b0:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    38b2:	0001      	movs	r1, r0
    38b4:	3130      	adds	r1, #48	; 0x30
    38b6:	7840      	ldrb	r0, [r0, #1]
    38b8:	2301      	movs	r3, #1
    38ba:	4d1f      	ldr	r5, [pc, #124]	; (3938 <check_fs+0x8c>)
    38bc:	47a8      	blx	r5
		return 3;
    38be:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    38c0:	2800      	cmp	r0, #0
    38c2:	d001      	beq.n	38c8 <check_fs+0x1c>
}
    38c4:	0018      	movs	r0, r3
    38c6:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    38c8:	4b1c      	ldr	r3, [pc, #112]	; (393c <check_fs+0x90>)
    38ca:	5ce3      	ldrb	r3, [r4, r3]
    38cc:	021b      	lsls	r3, r3, #8
    38ce:	4a1c      	ldr	r2, [pc, #112]	; (3940 <check_fs+0x94>)
    38d0:	5ca2      	ldrb	r2, [r4, r2]
    38d2:	431a      	orrs	r2, r3
    38d4:	491b      	ldr	r1, [pc, #108]	; (3944 <check_fs+0x98>)
    38d6:	b212      	sxth	r2, r2
		return 2;
    38d8:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    38da:	428a      	cmp	r2, r1
    38dc:	d1f2      	bne.n	38c4 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    38de:	3367      	adds	r3, #103	; 0x67
    38e0:	5ce3      	ldrb	r3, [r4, r3]
    38e2:	061b      	lsls	r3, r3, #24
    38e4:	2268      	movs	r2, #104	; 0x68
    38e6:	5ca2      	ldrb	r2, [r4, r2]
    38e8:	0412      	lsls	r2, r2, #16
    38ea:	4313      	orrs	r3, r2
    38ec:	2266      	movs	r2, #102	; 0x66
    38ee:	5ca2      	ldrb	r2, [r4, r2]
    38f0:	4313      	orrs	r3, r2
    38f2:	2267      	movs	r2, #103	; 0x67
    38f4:	5ca2      	ldrb	r2, [r4, r2]
    38f6:	0212      	lsls	r2, r2, #8
    38f8:	4313      	orrs	r3, r2
    38fa:	021b      	lsls	r3, r3, #8
    38fc:	0a1b      	lsrs	r3, r3, #8
    38fe:	4a12      	ldr	r2, [pc, #72]	; (3948 <check_fs+0x9c>)
    3900:	4293      	cmp	r3, r2
    3902:	d016      	beq.n	3932 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3904:	2385      	movs	r3, #133	; 0x85
    3906:	5ce3      	ldrb	r3, [r4, r3]
    3908:	061b      	lsls	r3, r3, #24
    390a:	2284      	movs	r2, #132	; 0x84
    390c:	5ca2      	ldrb	r2, [r4, r2]
    390e:	0412      	lsls	r2, r2, #16
    3910:	4313      	orrs	r3, r2
    3912:	2282      	movs	r2, #130	; 0x82
    3914:	5ca2      	ldrb	r2, [r4, r2]
    3916:	4313      	orrs	r3, r2
    3918:	2283      	movs	r2, #131	; 0x83
    391a:	5ca2      	ldrb	r2, [r4, r2]
    391c:	0212      	lsls	r2, r2, #8
    391e:	4313      	orrs	r3, r2
    3920:	021b      	lsls	r3, r3, #8
    3922:	0a1b      	lsrs	r3, r3, #8
    3924:	4a09      	ldr	r2, [pc, #36]	; (394c <check_fs+0xa0>)
    3926:	4694      	mov	ip, r2
    3928:	4463      	add	r3, ip
    392a:	1e58      	subs	r0, r3, #1
    392c:	4183      	sbcs	r3, r0
		return 3;
    392e:	b2db      	uxtb	r3, r3
    3930:	e7c8      	b.n	38c4 <check_fs+0x18>
		return 0;
    3932:	2300      	movs	r3, #0
    3934:	e7c6      	b.n	38c4 <check_fs+0x18>
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	0000365d 	.word	0x0000365d
    393c:	0000022f 	.word	0x0000022f
    3940:	0000022e 	.word	0x0000022e
    3944:	ffffaa55 	.word	0xffffaa55
    3948:	00544146 	.word	0x00544146
    394c:	ffabbeba 	.word	0xffabbeba

00003950 <chk_mounted>:
{
    3950:	b5f0      	push	{r4, r5, r6, r7, lr}
    3952:	46d6      	mov	lr, sl
    3954:	464f      	mov	r7, r9
    3956:	4646      	mov	r6, r8
    3958:	b5c0      	push	{r6, r7, lr}
    395a:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    395c:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    395e:	781c      	ldrb	r4, [r3, #0]
    3960:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3962:	2c09      	cmp	r4, #9
    3964:	d80e      	bhi.n	3984 <chk_mounted+0x34>
    3966:	785a      	ldrb	r2, [r3, #1]
    3968:	2a3a      	cmp	r2, #58	; 0x3a
    396a:	d001      	beq.n	3970 <chk_mounted+0x20>
    396c:	2400      	movs	r4, #0
    396e:	e00a      	b.n	3986 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3970:	3302      	adds	r3, #2
    3972:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    3974:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3976:	2c07      	cmp	r4, #7
    3978:	d905      	bls.n	3986 <chk_mounted+0x36>
}
    397a:	bc1c      	pop	{r2, r3, r4}
    397c:	4690      	mov	r8, r2
    397e:	4699      	mov	r9, r3
    3980:	46a2      	mov	sl, r4
    3982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3984:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3986:	00a3      	lsls	r3, r4, #2
    3988:	4ac5      	ldr	r2, [pc, #788]	; (3ca0 <chk_mounted+0x350>)
    398a:	589e      	ldr	r6, [r3, r2]
    398c:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    398e:	2e00      	cmp	r6, #0
    3990:	d100      	bne.n	3994 <chk_mounted+0x44>
    3992:	e0e8      	b.n	3b66 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3994:	7833      	ldrb	r3, [r6, #0]
    3996:	2b00      	cmp	r3, #0
    3998:	d00d      	beq.n	39b6 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    399a:	7870      	ldrb	r0, [r6, #1]
    399c:	4bc1      	ldr	r3, [pc, #772]	; (3ca4 <chk_mounted+0x354>)
    399e:	4798      	blx	r3
    39a0:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    39a2:	07c2      	lsls	r2, r0, #31
    39a4:	d407      	bmi.n	39b6 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    39a6:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    39a8:	2d00      	cmp	r5, #0
    39aa:	d0e6      	beq.n	397a <chk_mounted+0x2a>
    39ac:	075b      	lsls	r3, r3, #29
    39ae:	d400      	bmi.n	39b2 <chk_mounted+0x62>
    39b0:	e0db      	b.n	3b6a <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    39b2:	300a      	adds	r0, #10
    39b4:	e7e1      	b.n	397a <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    39b6:	2300      	movs	r3, #0
    39b8:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    39ba:	b2e0      	uxtb	r0, r4
    39bc:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    39be:	4bba      	ldr	r3, [pc, #744]	; (3ca8 <chk_mounted+0x358>)
    39c0:	4798      	blx	r3
    39c2:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    39c4:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    39c6:	07da      	lsls	r2, r3, #31
    39c8:	d4d7      	bmi.n	397a <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    39ca:	2d00      	cmp	r5, #0
    39cc:	d002      	beq.n	39d4 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    39ce:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    39d0:	075b      	lsls	r3, r3, #29
    39d2:	d4d2      	bmi.n	397a <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    39d4:	2100      	movs	r1, #0
    39d6:	0030      	movs	r0, r6
    39d8:	4bb4      	ldr	r3, [pc, #720]	; (3cac <chk_mounted+0x35c>)
    39da:	4798      	blx	r3
    39dc:	0003      	movs	r3, r0
    39de:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    39e0:	2801      	cmp	r0, #1
    39e2:	d100      	bne.n	39e6 <chk_mounted+0x96>
    39e4:	e09a      	b.n	3b1c <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    39e6:	2b03      	cmp	r3, #3
    39e8:	d100      	bne.n	39ec <chk_mounted+0x9c>
    39ea:	e0c0      	b.n	3b6e <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    39ec:	200d      	movs	r0, #13
    39ee:	2b00      	cmp	r3, #0
    39f0:	d1c3      	bne.n	397a <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    39f2:	333c      	adds	r3, #60	; 0x3c
    39f4:	5cf2      	ldrb	r2, [r6, r3]
    39f6:	0212      	lsls	r2, r2, #8
    39f8:	3b01      	subs	r3, #1
    39fa:	5cf3      	ldrb	r3, [r6, r3]
    39fc:	4313      	orrs	r3, r2
    39fe:	2280      	movs	r2, #128	; 0x80
    3a00:	0092      	lsls	r2, r2, #2
    3a02:	b21b      	sxth	r3, r3
    3a04:	4293      	cmp	r3, r2
    3a06:	d1b8      	bne.n	397a <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3a08:	2347      	movs	r3, #71	; 0x47
    3a0a:	5cf3      	ldrb	r3, [r6, r3]
    3a0c:	021b      	lsls	r3, r3, #8
    3a0e:	3abb      	subs	r2, #187	; 0xbb
    3a10:	3aff      	subs	r2, #255	; 0xff
    3a12:	5cb5      	ldrb	r5, [r6, r2]
    3a14:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3a16:	d10d      	bne.n	3a34 <chk_mounted+0xe4>
    3a18:	2357      	movs	r3, #87	; 0x57
    3a1a:	5cf5      	ldrb	r5, [r6, r3]
    3a1c:	062d      	lsls	r5, r5, #24
    3a1e:	3b01      	subs	r3, #1
    3a20:	5cf3      	ldrb	r3, [r6, r3]
    3a22:	041b      	lsls	r3, r3, #16
    3a24:	431d      	orrs	r5, r3
    3a26:	2354      	movs	r3, #84	; 0x54
    3a28:	5cf3      	ldrb	r3, [r6, r3]
    3a2a:	431d      	orrs	r5, r3
    3a2c:	2355      	movs	r3, #85	; 0x55
    3a2e:	5cf3      	ldrb	r3, [r6, r3]
    3a30:	021b      	lsls	r3, r3, #8
    3a32:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    3a34:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3a36:	2340      	movs	r3, #64	; 0x40
    3a38:	5cf2      	ldrb	r2, [r6, r3]
    3a3a:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3a3c:	1e53      	subs	r3, r2, #1
    3a3e:	200d      	movs	r0, #13
    3a40:	2b01      	cmp	r3, #1
    3a42:	d89a      	bhi.n	397a <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3a44:	233d      	movs	r3, #61	; 0x3d
    3a46:	5cf1      	ldrb	r1, [r6, r3]
    3a48:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3a4a:	2900      	cmp	r1, #0
    3a4c:	d095      	beq.n	397a <chk_mounted+0x2a>
    3a4e:	1e4b      	subs	r3, r1, #1
    3a50:	4219      	tst	r1, r3
    3a52:	d192      	bne.n	397a <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3a54:	2342      	movs	r3, #66	; 0x42
    3a56:	5cf3      	ldrb	r3, [r6, r3]
    3a58:	021b      	lsls	r3, r3, #8
    3a5a:	3034      	adds	r0, #52	; 0x34
    3a5c:	5c30      	ldrb	r0, [r6, r0]
    3a5e:	4318      	orrs	r0, r3
    3a60:	4680      	mov	r8, r0
    3a62:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3a64:	200d      	movs	r0, #13
    3a66:	4643      	mov	r3, r8
    3a68:	071b      	lsls	r3, r3, #28
    3a6a:	d000      	beq.n	3a6e <chk_mounted+0x11e>
    3a6c:	e785      	b.n	397a <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3a6e:	2344      	movs	r3, #68	; 0x44
    3a70:	5cf3      	ldrb	r3, [r6, r3]
    3a72:	021b      	lsls	r3, r3, #8
    3a74:	3036      	adds	r0, #54	; 0x36
    3a76:	5c30      	ldrb	r0, [r6, r0]
    3a78:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3a7a:	d10d      	bne.n	3a98 <chk_mounted+0x148>
    3a7c:	3353      	adds	r3, #83	; 0x53
    3a7e:	5cf3      	ldrb	r3, [r6, r3]
    3a80:	061b      	lsls	r3, r3, #24
    3a82:	2052      	movs	r0, #82	; 0x52
    3a84:	5c30      	ldrb	r0, [r6, r0]
    3a86:	0400      	lsls	r0, r0, #16
    3a88:	4303      	orrs	r3, r0
    3a8a:	2050      	movs	r0, #80	; 0x50
    3a8c:	5c30      	ldrb	r0, [r6, r0]
    3a8e:	4303      	orrs	r3, r0
    3a90:	2051      	movs	r0, #81	; 0x51
    3a92:	5c30      	ldrb	r0, [r6, r0]
    3a94:	0200      	lsls	r0, r0, #8
    3a96:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3a98:	203f      	movs	r0, #63	; 0x3f
    3a9a:	5c30      	ldrb	r0, [r6, r0]
    3a9c:	0200      	lsls	r0, r0, #8
    3a9e:	273e      	movs	r7, #62	; 0x3e
    3aa0:	5df7      	ldrb	r7, [r6, r7]
    3aa2:	4307      	orrs	r7, r0
    3aa4:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3aa6:	200d      	movs	r0, #13
    3aa8:	2f00      	cmp	r7, #0
    3aaa:	d100      	bne.n	3aae <chk_mounted+0x15e>
    3aac:	e765      	b.n	397a <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    3aae:	436a      	muls	r2, r5
    3ab0:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3ab2:	4642      	mov	r2, r8
    3ab4:	0917      	lsrs	r7, r2, #4
    3ab6:	4457      	add	r7, sl
    3ab8:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3aba:	42bb      	cmp	r3, r7
    3abc:	d200      	bcs.n	3ac0 <chk_mounted+0x170>
    3abe:	e75c      	b.n	397a <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3ac0:	1bd8      	subs	r0, r3, r7
    3ac2:	4b7b      	ldr	r3, [pc, #492]	; (3cb0 <chk_mounted+0x360>)
    3ac4:	4798      	blx	r3
    3ac6:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3ac8:	200d      	movs	r0, #13
    3aca:	2b00      	cmp	r3, #0
    3acc:	d100      	bne.n	3ad0 <chk_mounted+0x180>
    3ace:	e754      	b.n	397a <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3ad0:	4a78      	ldr	r2, [pc, #480]	; (3cb4 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3ad2:	429a      	cmp	r2, r3
    3ad4:	4192      	sbcs	r2, r2
    3ad6:	4252      	negs	r2, r2
    3ad8:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3ada:	4977      	ldr	r1, [pc, #476]	; (3cb8 <chk_mounted+0x368>)
    3adc:	428b      	cmp	r3, r1
    3ade:	d848      	bhi.n	3b72 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3ae0:	3302      	adds	r3, #2
    3ae2:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3ae4:	19e7      	adds	r7, r4, r7
    3ae6:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3ae8:	4454      	add	r4, sl
    3aea:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3aec:	200d      	movs	r0, #13
    3aee:	4641      	mov	r1, r8
    3af0:	2900      	cmp	r1, #0
    3af2:	d100      	bne.n	3af6 <chk_mounted+0x1a6>
    3af4:	e741      	b.n	397a <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3af6:	444c      	add	r4, r9
    3af8:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3afa:	2a02      	cmp	r2, #2
    3afc:	d12c      	bne.n	3b58 <chk_mounted+0x208>
    3afe:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3b00:	496e      	ldr	r1, [pc, #440]	; (3cbc <chk_mounted+0x36c>)
    3b02:	468c      	mov	ip, r1
    3b04:	4463      	add	r3, ip
    3b06:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3b08:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3b0a:	429d      	cmp	r5, r3
    3b0c:	d200      	bcs.n	3b10 <chk_mounted+0x1c0>
    3b0e:	e734      	b.n	397a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3b10:	2301      	movs	r3, #1
    3b12:	425b      	negs	r3, r3
    3b14:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3b16:	2300      	movs	r3, #0
    3b18:	60f3      	str	r3, [r6, #12]
    3b1a:	e0b6      	b.n	3c8a <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3b1c:	33f2      	adds	r3, #242	; 0xf2
    3b1e:	33ff      	adds	r3, #255	; 0xff
    3b20:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3b22:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    3b24:	2b00      	cmp	r3, #0
    3b26:	d100      	bne.n	3b2a <chk_mounted+0x1da>
    3b28:	e727      	b.n	397a <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3b2a:	23fa      	movs	r3, #250	; 0xfa
    3b2c:	33ff      	adds	r3, #255	; 0xff
    3b2e:	5cf4      	ldrb	r4, [r6, r3]
    3b30:	0624      	lsls	r4, r4, #24
    3b32:	3b01      	subs	r3, #1
    3b34:	5cf3      	ldrb	r3, [r6, r3]
    3b36:	041b      	lsls	r3, r3, #16
    3b38:	431c      	orrs	r4, r3
    3b3a:	23fb      	movs	r3, #251	; 0xfb
    3b3c:	005b      	lsls	r3, r3, #1
    3b3e:	5cf3      	ldrb	r3, [r6, r3]
    3b40:	431c      	orrs	r4, r3
    3b42:	23f8      	movs	r3, #248	; 0xf8
    3b44:	33ff      	adds	r3, #255	; 0xff
    3b46:	5cf2      	ldrb	r2, [r6, r3]
    3b48:	0212      	lsls	r2, r2, #8
    3b4a:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3b4c:	0021      	movs	r1, r4
    3b4e:	0030      	movs	r0, r6
    3b50:	4b56      	ldr	r3, [pc, #344]	; (3cac <chk_mounted+0x35c>)
    3b52:	4798      	blx	r3
    3b54:	0003      	movs	r3, r0
    3b56:	e746      	b.n	39e6 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3b58:	2103      	movs	r1, #3
    3b5a:	4359      	muls	r1, r3
    3b5c:	0849      	lsrs	r1, r1, #1
    3b5e:	2001      	movs	r0, #1
    3b60:	4003      	ands	r3, r0
    3b62:	18cb      	adds	r3, r1, r3
    3b64:	e7cc      	b.n	3b00 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3b66:	200c      	movs	r0, #12
    3b68:	e707      	b.n	397a <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3b6a:	2000      	movs	r0, #0
    3b6c:	e705      	b.n	397a <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3b6e:	2001      	movs	r0, #1
    3b70:	e703      	b.n	397a <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3b72:	3302      	adds	r3, #2
    3b74:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3b76:	19e7      	adds	r7, r4, r7
    3b78:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3b7a:	4652      	mov	r2, sl
    3b7c:	18a2      	adds	r2, r4, r2
    3b7e:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3b80:	200d      	movs	r0, #13
    3b82:	4642      	mov	r2, r8
    3b84:	2a00      	cmp	r2, #0
    3b86:	d000      	beq.n	3b8a <chk_mounted+0x23a>
    3b88:	e6f7      	b.n	397a <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3b8a:	225f      	movs	r2, #95	; 0x5f
    3b8c:	5cb2      	ldrb	r2, [r6, r2]
    3b8e:	0612      	lsls	r2, r2, #24
    3b90:	215e      	movs	r1, #94	; 0x5e
    3b92:	5c71      	ldrb	r1, [r6, r1]
    3b94:	0409      	lsls	r1, r1, #16
    3b96:	430a      	orrs	r2, r1
    3b98:	215c      	movs	r1, #92	; 0x5c
    3b9a:	5c71      	ldrb	r1, [r6, r1]
    3b9c:	430a      	orrs	r2, r1
    3b9e:	215d      	movs	r1, #93	; 0x5d
    3ba0:	5c71      	ldrb	r1, [r6, r1]
    3ba2:	0209      	lsls	r1, r1, #8
    3ba4:	430a      	orrs	r2, r1
    3ba6:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3ba8:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3baa:	4a44      	ldr	r2, [pc, #272]	; (3cbc <chk_mounted+0x36c>)
    3bac:	4694      	mov	ip, r2
    3bae:	4463      	add	r3, ip
    3bb0:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3bb2:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3bb4:	429d      	cmp	r5, r3
    3bb6:	d200      	bcs.n	3bba <chk_mounted+0x26a>
    3bb8:	e6df      	b.n	397a <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3bba:	2301      	movs	r3, #1
    3bbc:	425b      	negs	r3, r3
    3bbe:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3bc0:	2300      	movs	r3, #0
    3bc2:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3bc4:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3bc6:	3361      	adds	r3, #97	; 0x61
    3bc8:	5cf3      	ldrb	r3, [r6, r3]
    3bca:	021b      	lsls	r3, r3, #8
    3bcc:	2260      	movs	r2, #96	; 0x60
    3bce:	5cb2      	ldrb	r2, [r6, r2]
    3bd0:	431a      	orrs	r2, r3
    3bd2:	1912      	adds	r2, r2, r4
    3bd4:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3bd6:	0031      	movs	r1, r6
    3bd8:	3130      	adds	r1, #48	; 0x30
    3bda:	7870      	ldrb	r0, [r6, #1]
    3bdc:	2301      	movs	r3, #1
    3bde:	4c38      	ldr	r4, [pc, #224]	; (3cc0 <chk_mounted+0x370>)
    3be0:	47a0      	blx	r4
    3be2:	2203      	movs	r2, #3
    3be4:	2800      	cmp	r0, #0
    3be6:	d150      	bne.n	3c8a <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3be8:	4b36      	ldr	r3, [pc, #216]	; (3cc4 <chk_mounted+0x374>)
    3bea:	5cf2      	ldrb	r2, [r6, r3]
    3bec:	0212      	lsls	r2, r2, #8
    3bee:	4b36      	ldr	r3, [pc, #216]	; (3cc8 <chk_mounted+0x378>)
    3bf0:	5cf3      	ldrb	r3, [r6, r3]
    3bf2:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3bf4:	4935      	ldr	r1, [pc, #212]	; (3ccc <chk_mounted+0x37c>)
    3bf6:	b21b      	sxth	r3, r3
    3bf8:	2203      	movs	r2, #3
    3bfa:	428b      	cmp	r3, r1
    3bfc:	d145      	bne.n	3c8a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3bfe:	2333      	movs	r3, #51	; 0x33
    3c00:	5cf3      	ldrb	r3, [r6, r3]
    3c02:	061b      	lsls	r3, r3, #24
    3c04:	322f      	adds	r2, #47	; 0x2f
    3c06:	5cb2      	ldrb	r2, [r6, r2]
    3c08:	0412      	lsls	r2, r2, #16
    3c0a:	4313      	orrs	r3, r2
    3c0c:	2230      	movs	r2, #48	; 0x30
    3c0e:	5cb2      	ldrb	r2, [r6, r2]
    3c10:	4313      	orrs	r3, r2
    3c12:	2231      	movs	r2, #49	; 0x31
    3c14:	5cb2      	ldrb	r2, [r6, r2]
    3c16:	0212      	lsls	r2, r2, #8
    3c18:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3c1a:	492d      	ldr	r1, [pc, #180]	; (3cd0 <chk_mounted+0x380>)
    3c1c:	2203      	movs	r2, #3
    3c1e:	428b      	cmp	r3, r1
    3c20:	d133      	bne.n	3c8a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3c22:	4b2c      	ldr	r3, [pc, #176]	; (3cd4 <chk_mounted+0x384>)
    3c24:	5cf3      	ldrb	r3, [r6, r3]
    3c26:	061b      	lsls	r3, r3, #24
    3c28:	4a2b      	ldr	r2, [pc, #172]	; (3cd8 <chk_mounted+0x388>)
    3c2a:	5cb2      	ldrb	r2, [r6, r2]
    3c2c:	0412      	lsls	r2, r2, #16
    3c2e:	4313      	orrs	r3, r2
    3c30:	2285      	movs	r2, #133	; 0x85
    3c32:	0092      	lsls	r2, r2, #2
    3c34:	5cb2      	ldrb	r2, [r6, r2]
    3c36:	4313      	orrs	r3, r2
    3c38:	4a28      	ldr	r2, [pc, #160]	; (3cdc <chk_mounted+0x38c>)
    3c3a:	5cb2      	ldrb	r2, [r6, r2]
    3c3c:	0212      	lsls	r2, r2, #8
    3c3e:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3c40:	4927      	ldr	r1, [pc, #156]	; (3ce0 <chk_mounted+0x390>)
    3c42:	2203      	movs	r2, #3
    3c44:	428b      	cmp	r3, r1
    3c46:	d120      	bne.n	3c8a <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3c48:	4b26      	ldr	r3, [pc, #152]	; (3ce4 <chk_mounted+0x394>)
    3c4a:	5cf3      	ldrb	r3, [r6, r3]
    3c4c:	061b      	lsls	r3, r3, #24
    3c4e:	4a26      	ldr	r2, [pc, #152]	; (3ce8 <chk_mounted+0x398>)
    3c50:	5cb2      	ldrb	r2, [r6, r2]
    3c52:	0412      	lsls	r2, r2, #16
    3c54:	4313      	orrs	r3, r2
    3c56:	2287      	movs	r2, #135	; 0x87
    3c58:	0092      	lsls	r2, r2, #2
    3c5a:	5cb2      	ldrb	r2, [r6, r2]
    3c5c:	4313      	orrs	r3, r2
    3c5e:	4a23      	ldr	r2, [pc, #140]	; (3cec <chk_mounted+0x39c>)
    3c60:	5cb2      	ldrb	r2, [r6, r2]
    3c62:	0212      	lsls	r2, r2, #8
    3c64:	4313      	orrs	r3, r2
    3c66:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3c68:	4b21      	ldr	r3, [pc, #132]	; (3cf0 <chk_mounted+0x3a0>)
    3c6a:	5cf3      	ldrb	r3, [r6, r3]
    3c6c:	061b      	lsls	r3, r3, #24
    3c6e:	4a21      	ldr	r2, [pc, #132]	; (3cf4 <chk_mounted+0x3a4>)
    3c70:	5cb2      	ldrb	r2, [r6, r2]
    3c72:	0412      	lsls	r2, r2, #16
    3c74:	4313      	orrs	r3, r2
    3c76:	2286      	movs	r2, #134	; 0x86
    3c78:	0092      	lsls	r2, r2, #2
    3c7a:	5cb2      	ldrb	r2, [r6, r2]
    3c7c:	4313      	orrs	r3, r2
    3c7e:	4a1e      	ldr	r2, [pc, #120]	; (3cf8 <chk_mounted+0x3a8>)
    3c80:	5cb2      	ldrb	r2, [r6, r2]
    3c82:	0212      	lsls	r2, r2, #8
    3c84:	4313      	orrs	r3, r2
    3c86:	6133      	str	r3, [r6, #16]
    3c88:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3c8a:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3c8c:	4a1b      	ldr	r2, [pc, #108]	; (3cfc <chk_mounted+0x3ac>)
    3c8e:	8813      	ldrh	r3, [r2, #0]
    3c90:	3301      	adds	r3, #1
    3c92:	b29b      	uxth	r3, r3
    3c94:	8013      	strh	r3, [r2, #0]
    3c96:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3c98:	2000      	movs	r0, #0
    3c9a:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3c9c:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3c9e:	e66c      	b.n	397a <chk_mounted+0x2a>
    3ca0:	2000016c 	.word	0x2000016c
    3ca4:	00003641 	.word	0x00003641
    3ca8:	000035a5 	.word	0x000035a5
    3cac:	000038ad 	.word	0x000038ad
    3cb0:	00005739 	.word	0x00005739
    3cb4:	00000ff5 	.word	0x00000ff5
    3cb8:	0000fff5 	.word	0x0000fff5
    3cbc:	000001ff 	.word	0x000001ff
    3cc0:	0000365d 	.word	0x0000365d
    3cc4:	0000022f 	.word	0x0000022f
    3cc8:	0000022e 	.word	0x0000022e
    3ccc:	ffffaa55 	.word	0xffffaa55
    3cd0:	41615252 	.word	0x41615252
    3cd4:	00000217 	.word	0x00000217
    3cd8:	00000216 	.word	0x00000216
    3cdc:	00000215 	.word	0x00000215
    3ce0:	61417272 	.word	0x61417272
    3ce4:	0000021f 	.word	0x0000021f
    3ce8:	0000021e 	.word	0x0000021e
    3cec:	0000021d 	.word	0x0000021d
    3cf0:	0000021b 	.word	0x0000021b
    3cf4:	0000021a 	.word	0x0000021a
    3cf8:	00000219 	.word	0x00000219
    3cfc:	2000018c 	.word	0x2000018c

00003d00 <move_window>:
{
    3d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d02:	46ce      	mov	lr, r9
    3d04:	b500      	push	{lr}
    3d06:	b082      	sub	sp, #8
    3d08:	0004      	movs	r4, r0
    3d0a:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3d0c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3d0e:	428d      	cmp	r5, r1
    3d10:	d03f      	beq.n	3d92 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3d12:	7903      	ldrb	r3, [r0, #4]
    3d14:	2b00      	cmp	r3, #0
    3d16:	d107      	bne.n	3d28 <move_window+0x28>
	return FR_OK;
    3d18:	2300      	movs	r3, #0
		if (sector) {
    3d1a:	2f00      	cmp	r7, #0
    3d1c:	d12c      	bne.n	3d78 <move_window+0x78>
}
    3d1e:	0018      	movs	r0, r3
    3d20:	b002      	add	sp, #8
    3d22:	bc04      	pop	{r2}
    3d24:	4691      	mov	r9, r2
    3d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3d28:	2330      	movs	r3, #48	; 0x30
    3d2a:	469c      	mov	ip, r3
    3d2c:	4484      	add	ip, r0
    3d2e:	4663      	mov	r3, ip
    3d30:	4661      	mov	r1, ip
    3d32:	9301      	str	r3, [sp, #4]
    3d34:	7840      	ldrb	r0, [r0, #1]
    3d36:	2301      	movs	r3, #1
    3d38:	002a      	movs	r2, r5
    3d3a:	4e17      	ldr	r6, [pc, #92]	; (3d98 <move_window+0x98>)
    3d3c:	47b0      	blx	r6
				return FR_DISK_ERR;
    3d3e:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3d40:	2800      	cmp	r0, #0
    3d42:	d1ec      	bne.n	3d1e <move_window+0x1e>
			fs->wflag = 0;
    3d44:	2300      	movs	r3, #0
    3d46:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3d48:	6a23      	ldr	r3, [r4, #32]
    3d4a:	69e2      	ldr	r2, [r4, #28]
    3d4c:	4694      	mov	ip, r2
    3d4e:	4463      	add	r3, ip
    3d50:	429d      	cmp	r5, r3
    3d52:	d2e1      	bcs.n	3d18 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3d54:	78e6      	ldrb	r6, [r4, #3]
    3d56:	2e01      	cmp	r6, #1
    3d58:	d9de      	bls.n	3d18 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3d5a:	4b0f      	ldr	r3, [pc, #60]	; (3d98 <move_window+0x98>)
    3d5c:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3d5e:	69e3      	ldr	r3, [r4, #28]
    3d60:	469c      	mov	ip, r3
    3d62:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    3d64:	7860      	ldrb	r0, [r4, #1]
    3d66:	2301      	movs	r3, #1
    3d68:	002a      	movs	r2, r5
    3d6a:	9901      	ldr	r1, [sp, #4]
    3d6c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3d6e:	3e01      	subs	r6, #1
    3d70:	b2f6      	uxtb	r6, r6
    3d72:	2e01      	cmp	r6, #1
    3d74:	d1f3      	bne.n	3d5e <move_window+0x5e>
    3d76:	e7cf      	b.n	3d18 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3d78:	0021      	movs	r1, r4
    3d7a:	3130      	adds	r1, #48	; 0x30
    3d7c:	7860      	ldrb	r0, [r4, #1]
    3d7e:	3301      	adds	r3, #1
    3d80:	003a      	movs	r2, r7
    3d82:	4d06      	ldr	r5, [pc, #24]	; (3d9c <move_window+0x9c>)
    3d84:	47a8      	blx	r5
				return FR_DISK_ERR;
    3d86:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3d88:	2800      	cmp	r0, #0
    3d8a:	d1c8      	bne.n	3d1e <move_window+0x1e>
			fs->winsect = sector;
    3d8c:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3d8e:	2300      	movs	r3, #0
    3d90:	e7c5      	b.n	3d1e <move_window+0x1e>
    3d92:	2300      	movs	r3, #0
    3d94:	e7c3      	b.n	3d1e <move_window+0x1e>
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	000036e1 	.word	0x000036e1
    3d9c:	0000365d 	.word	0x0000365d

00003da0 <get_fat>:
{
    3da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3da2:	0005      	movs	r5, r0
    3da4:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3da6:	2901      	cmp	r1, #1
    3da8:	d974      	bls.n	3e94 <get_fat+0xf4>
		return 1;
    3daa:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3dac:	69ab      	ldr	r3, [r5, #24]
    3dae:	4299      	cmp	r1, r3
    3db0:	d271      	bcs.n	3e96 <get_fat+0xf6>
	switch (fs->fs_type) {
    3db2:	782b      	ldrb	r3, [r5, #0]
    3db4:	2b02      	cmp	r3, #2
    3db6:	d034      	beq.n	3e22 <get_fat+0x82>
    3db8:	2b03      	cmp	r3, #3
    3dba:	d049      	beq.n	3e50 <get_fat+0xb0>
    3dbc:	2b01      	cmp	r3, #1
    3dbe:	d002      	beq.n	3dc6 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3dc0:	2001      	movs	r0, #1
    3dc2:	4240      	negs	r0, r0
    3dc4:	e067      	b.n	3e96 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    3dc6:	084e      	lsrs	r6, r1, #1
    3dc8:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3dca:	0a71      	lsrs	r1, r6, #9
    3dcc:	6a2b      	ldr	r3, [r5, #32]
    3dce:	469c      	mov	ip, r3
    3dd0:	4461      	add	r1, ip
    3dd2:	0028      	movs	r0, r5
    3dd4:	4b30      	ldr	r3, [pc, #192]	; (3e98 <get_fat+0xf8>)
    3dd6:	4798      	blx	r3
    3dd8:	2800      	cmp	r0, #0
    3dda:	d002      	beq.n	3de2 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3ddc:	2001      	movs	r0, #1
    3dde:	4240      	negs	r0, r0
    3de0:	e059      	b.n	3e96 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    3de2:	05f3      	lsls	r3, r6, #23
    3de4:	0ddb      	lsrs	r3, r3, #23
    3de6:	18eb      	adds	r3, r5, r3
    3de8:	3330      	adds	r3, #48	; 0x30
    3dea:	781f      	ldrb	r7, [r3, #0]
    3dec:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3dee:	0a71      	lsrs	r1, r6, #9
    3df0:	6a2b      	ldr	r3, [r5, #32]
    3df2:	469c      	mov	ip, r3
    3df4:	4461      	add	r1, ip
    3df6:	0028      	movs	r0, r5
    3df8:	4b27      	ldr	r3, [pc, #156]	; (3e98 <get_fat+0xf8>)
    3dfa:	4798      	blx	r3
    3dfc:	2800      	cmp	r0, #0
    3dfe:	d002      	beq.n	3e06 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3e00:	2001      	movs	r0, #1
    3e02:	4240      	negs	r0, r0
    3e04:	e047      	b.n	3e96 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    3e06:	05f6      	lsls	r6, r6, #23
    3e08:	0df6      	lsrs	r6, r6, #23
    3e0a:	19ad      	adds	r5, r5, r6
    3e0c:	3530      	adds	r5, #48	; 0x30
    3e0e:	7828      	ldrb	r0, [r5, #0]
    3e10:	0200      	lsls	r0, r0, #8
    3e12:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    3e14:	07e3      	lsls	r3, r4, #31
    3e16:	d501      	bpl.n	3e1c <get_fat+0x7c>
    3e18:	0900      	lsrs	r0, r0, #4
    3e1a:	e03c      	b.n	3e96 <get_fat+0xf6>
    3e1c:	0500      	lsls	r0, r0, #20
    3e1e:	0d00      	lsrs	r0, r0, #20
    3e20:	e039      	b.n	3e96 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    3e22:	0a09      	lsrs	r1, r1, #8
    3e24:	6a2b      	ldr	r3, [r5, #32]
    3e26:	469c      	mov	ip, r3
    3e28:	4461      	add	r1, ip
    3e2a:	0028      	movs	r0, r5
    3e2c:	4b1a      	ldr	r3, [pc, #104]	; (3e98 <get_fat+0xf8>)
    3e2e:	4798      	blx	r3
    3e30:	2800      	cmp	r0, #0
    3e32:	d002      	beq.n	3e3a <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3e34:	2001      	movs	r0, #1
    3e36:	4240      	negs	r0, r0
    3e38:	e02d      	b.n	3e96 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    3e3a:	0064      	lsls	r4, r4, #1
    3e3c:	23ff      	movs	r3, #255	; 0xff
    3e3e:	005b      	lsls	r3, r3, #1
    3e40:	401c      	ands	r4, r3
		return LD_WORD(p);
    3e42:	192d      	adds	r5, r5, r4
    3e44:	3530      	adds	r5, #48	; 0x30
    3e46:	786b      	ldrb	r3, [r5, #1]
    3e48:	021b      	lsls	r3, r3, #8
    3e4a:	7828      	ldrb	r0, [r5, #0]
    3e4c:	4318      	orrs	r0, r3
    3e4e:	e022      	b.n	3e96 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    3e50:	09c9      	lsrs	r1, r1, #7
    3e52:	6a2b      	ldr	r3, [r5, #32]
    3e54:	469c      	mov	ip, r3
    3e56:	4461      	add	r1, ip
    3e58:	0028      	movs	r0, r5
    3e5a:	4b0f      	ldr	r3, [pc, #60]	; (3e98 <get_fat+0xf8>)
    3e5c:	4798      	blx	r3
    3e5e:	2800      	cmp	r0, #0
    3e60:	d002      	beq.n	3e68 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3e62:	2001      	movs	r0, #1
    3e64:	4240      	negs	r0, r0
    3e66:	e016      	b.n	3e96 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    3e68:	00a4      	lsls	r4, r4, #2
    3e6a:	23fe      	movs	r3, #254	; 0xfe
    3e6c:	005b      	lsls	r3, r3, #1
    3e6e:	401c      	ands	r4, r3
    3e70:	0023      	movs	r3, r4
    3e72:	3330      	adds	r3, #48	; 0x30
    3e74:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    3e76:	78d8      	ldrb	r0, [r3, #3]
    3e78:	0600      	lsls	r0, r0, #24
    3e7a:	789a      	ldrb	r2, [r3, #2]
    3e7c:	0412      	lsls	r2, r2, #16
    3e7e:	4310      	orrs	r0, r2
    3e80:	192c      	adds	r4, r5, r4
    3e82:	3430      	adds	r4, #48	; 0x30
    3e84:	7822      	ldrb	r2, [r4, #0]
    3e86:	4310      	orrs	r0, r2
    3e88:	785b      	ldrb	r3, [r3, #1]
    3e8a:	021b      	lsls	r3, r3, #8
    3e8c:	4318      	orrs	r0, r3
    3e8e:	0100      	lsls	r0, r0, #4
    3e90:	0900      	lsrs	r0, r0, #4
    3e92:	e000      	b.n	3e96 <get_fat+0xf6>
		return 1;
    3e94:	2001      	movs	r0, #1
}
    3e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e98:	00003d01 	.word	0x00003d01

00003e9c <dir_sdi>:
{
    3e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e9e:	0004      	movs	r4, r0
    3ea0:	000d      	movs	r5, r1
	dj->index = idx;
    3ea2:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    3ea4:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    3ea6:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    3ea8:	2901      	cmp	r1, #1
    3eaa:	d003      	beq.n	3eb4 <dir_sdi+0x18>
    3eac:	6823      	ldr	r3, [r4, #0]
    3eae:	699a      	ldr	r2, [r3, #24]
    3eb0:	4291      	cmp	r1, r2
    3eb2:	d300      	bcc.n	3eb6 <dir_sdi+0x1a>
}
    3eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    3eb6:	2900      	cmp	r1, #0
    3eb8:	d119      	bne.n	3eee <dir_sdi+0x52>
    3eba:	781a      	ldrb	r2, [r3, #0]
    3ebc:	2a03      	cmp	r2, #3
    3ebe:	d013      	beq.n	3ee8 <dir_sdi+0x4c>
		dj->clust = clst;
    3ec0:	2200      	movs	r2, #0
    3ec2:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3ec4:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    3ec6:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3ec8:	42aa      	cmp	r2, r5
    3eca:	d9f3      	bls.n	3eb4 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3ecc:	092a      	lsrs	r2, r5, #4
    3ece:	b292      	uxth	r2, r2
    3ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ed2:	189b      	adds	r3, r3, r2
    3ed4:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    3ed6:	6823      	ldr	r3, [r4, #0]
    3ed8:	3330      	adds	r3, #48	; 0x30
    3eda:	220f      	movs	r2, #15
    3edc:	4015      	ands	r5, r2
    3ede:	016d      	lsls	r5, r5, #5
    3ee0:	195d      	adds	r5, r3, r5
    3ee2:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    3ee4:	2000      	movs	r0, #0
    3ee6:	e7e5      	b.n	3eb4 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    3ee8:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    3eea:	2900      	cmp	r1, #0
    3eec:	d0e8      	beq.n	3ec0 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    3eee:	789e      	ldrb	r6, [r3, #2]
    3ef0:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    3ef2:	42b5      	cmp	r5, r6
    3ef4:	d313      	bcc.n	3f1e <dir_sdi+0x82>
    3ef6:	1bad      	subs	r5, r5, r6
    3ef8:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    3efa:	4f10      	ldr	r7, [pc, #64]	; (3f3c <dir_sdi+0xa0>)
    3efc:	e000      	b.n	3f00 <dir_sdi+0x64>
    3efe:	001d      	movs	r5, r3
    3f00:	6820      	ldr	r0, [r4, #0]
    3f02:	47b8      	blx	r7
    3f04:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3f06:	1c43      	adds	r3, r0, #1
    3f08:	d012      	beq.n	3f30 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    3f0a:	2801      	cmp	r0, #1
    3f0c:	d912      	bls.n	3f34 <dir_sdi+0x98>
    3f0e:	6823      	ldr	r3, [r4, #0]
    3f10:	699b      	ldr	r3, [r3, #24]
    3f12:	4298      	cmp	r0, r3
    3f14:	d210      	bcs.n	3f38 <dir_sdi+0x9c>
    3f16:	1bab      	subs	r3, r5, r6
    3f18:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    3f1a:	42b5      	cmp	r5, r6
    3f1c:	d2ef      	bcs.n	3efe <dir_sdi+0x62>
		dj->clust = clst;
    3f1e:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3f20:	6820      	ldr	r0, [r4, #0]
    3f22:	4b07      	ldr	r3, [pc, #28]	; (3f40 <dir_sdi+0xa4>)
    3f24:	4798      	blx	r3
    3f26:	092b      	lsrs	r3, r5, #4
    3f28:	b29b      	uxth	r3, r3
    3f2a:	1818      	adds	r0, r3, r0
    3f2c:	6120      	str	r0, [r4, #16]
    3f2e:	e7d2      	b.n	3ed6 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3f30:	2001      	movs	r0, #1
    3f32:	e7bf      	b.n	3eb4 <dir_sdi+0x18>
				return FR_INT_ERR;
    3f34:	2002      	movs	r0, #2
    3f36:	e7bd      	b.n	3eb4 <dir_sdi+0x18>
    3f38:	2002      	movs	r0, #2
    3f3a:	e7bb      	b.n	3eb4 <dir_sdi+0x18>
    3f3c:	00003da1 	.word	0x00003da1
    3f40:	00003847 	.word	0x00003847

00003f44 <put_fat>:
{
    3f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f46:	46c6      	mov	lr, r8
    3f48:	b500      	push	{lr}
    3f4a:	0007      	movs	r7, r0
    3f4c:	000c      	movs	r4, r1
    3f4e:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    3f50:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3f52:	2901      	cmp	r1, #1
    3f54:	d902      	bls.n	3f5c <put_fat+0x18>
    3f56:	6983      	ldr	r3, [r0, #24]
    3f58:	4299      	cmp	r1, r3
    3f5a:	d303      	bcc.n	3f64 <put_fat+0x20>
}
    3f5c:	0028      	movs	r0, r5
    3f5e:	bc04      	pop	{r2}
    3f60:	4690      	mov	r8, r2
    3f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    3f64:	7803      	ldrb	r3, [r0, #0]
    3f66:	2b02      	cmp	r3, #2
    3f68:	d053      	beq.n	4012 <put_fat+0xce>
    3f6a:	2b03      	cmp	r3, #3
    3f6c:	d063      	beq.n	4036 <put_fat+0xf2>
			res = FR_INT_ERR;
    3f6e:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    3f70:	2b01      	cmp	r3, #1
    3f72:	d002      	beq.n	3f7a <put_fat+0x36>
		fs->wflag = 1;
    3f74:	2301      	movs	r3, #1
    3f76:	713b      	strb	r3, [r7, #4]
    3f78:	e7f0      	b.n	3f5c <put_fat+0x18>
			bc = clst; bc += bc / 2;
    3f7a:	084b      	lsrs	r3, r1, #1
    3f7c:	4698      	mov	r8, r3
    3f7e:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3f80:	4643      	mov	r3, r8
    3f82:	0a59      	lsrs	r1, r3, #9
    3f84:	6a03      	ldr	r3, [r0, #32]
    3f86:	469c      	mov	ip, r3
    3f88:	4461      	add	r1, ip
    3f8a:	4b3b      	ldr	r3, [pc, #236]	; (4078 <put_fat+0x134>)
    3f8c:	4798      	blx	r3
    3f8e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3f90:	d1f0      	bne.n	3f74 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    3f92:	4643      	mov	r3, r8
    3f94:	05db      	lsls	r3, r3, #23
    3f96:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    3f98:	07e2      	lsls	r2, r4, #31
    3f9a:	d51f      	bpl.n	3fdc <put_fat+0x98>
    3f9c:	18fb      	adds	r3, r7, r3
    3f9e:	3330      	adds	r3, #48	; 0x30
    3fa0:	7819      	ldrb	r1, [r3, #0]
    3fa2:	220f      	movs	r2, #15
    3fa4:	400a      	ands	r2, r1
    3fa6:	0131      	lsls	r1, r6, #4
    3fa8:	20ff      	movs	r0, #255	; 0xff
    3faa:	0100      	lsls	r0, r0, #4
    3fac:	4001      	ands	r1, r0
    3fae:	430a      	orrs	r2, r1
    3fb0:	701a      	strb	r2, [r3, #0]
			bc++;
    3fb2:	4644      	mov	r4, r8
    3fb4:	3401      	adds	r4, #1
			fs->wflag = 1;
    3fb6:	2301      	movs	r3, #1
    3fb8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3fba:	0a61      	lsrs	r1, r4, #9
    3fbc:	6a3b      	ldr	r3, [r7, #32]
    3fbe:	469c      	mov	ip, r3
    3fc0:	4461      	add	r1, ip
    3fc2:	0038      	movs	r0, r7
    3fc4:	4b2c      	ldr	r3, [pc, #176]	; (4078 <put_fat+0x134>)
    3fc6:	4798      	blx	r3
			if (res != FR_OK) break;
    3fc8:	2800      	cmp	r0, #0
    3fca:	d151      	bne.n	4070 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    3fcc:	05e4      	lsls	r4, r4, #23
    3fce:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    3fd0:	0936      	lsrs	r6, r6, #4
    3fd2:	b2f6      	uxtb	r6, r6
    3fd4:	193c      	adds	r4, r7, r4
    3fd6:	3430      	adds	r4, #48	; 0x30
    3fd8:	7026      	strb	r6, [r4, #0]
			break;
    3fda:	e7cb      	b.n	3f74 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    3fdc:	18fb      	adds	r3, r7, r3
    3fde:	3330      	adds	r3, #48	; 0x30
    3fe0:	701e      	strb	r6, [r3, #0]
			bc++;
    3fe2:	4644      	mov	r4, r8
    3fe4:	3401      	adds	r4, #1
			fs->wflag = 1;
    3fe6:	2301      	movs	r3, #1
    3fe8:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3fea:	0a61      	lsrs	r1, r4, #9
    3fec:	6a3b      	ldr	r3, [r7, #32]
    3fee:	469c      	mov	ip, r3
    3ff0:	4461      	add	r1, ip
    3ff2:	0038      	movs	r0, r7
    3ff4:	4b20      	ldr	r3, [pc, #128]	; (4078 <put_fat+0x134>)
    3ff6:	4798      	blx	r3
			if (res != FR_OK) break;
    3ff8:	2800      	cmp	r0, #0
    3ffa:	d13b      	bne.n	4074 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    3ffc:	05e4      	lsls	r4, r4, #23
    3ffe:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4000:	193b      	adds	r3, r7, r4
    4002:	3330      	adds	r3, #48	; 0x30
    4004:	781b      	ldrb	r3, [r3, #0]
    4006:	220f      	movs	r2, #15
    4008:	4393      	bics	r3, r2
    400a:	0536      	lsls	r6, r6, #20
    400c:	0f36      	lsrs	r6, r6, #28
    400e:	431e      	orrs	r6, r3
    4010:	e7e0      	b.n	3fd4 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4012:	0a09      	lsrs	r1, r1, #8
    4014:	6a03      	ldr	r3, [r0, #32]
    4016:	469c      	mov	ip, r3
    4018:	4461      	add	r1, ip
    401a:	4b17      	ldr	r3, [pc, #92]	; (4078 <put_fat+0x134>)
    401c:	4798      	blx	r3
    401e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4020:	d1a8      	bne.n	3f74 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    4022:	0063      	lsls	r3, r4, #1
    4024:	24ff      	movs	r4, #255	; 0xff
    4026:	0064      	lsls	r4, r4, #1
    4028:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    402a:	18fb      	adds	r3, r7, r3
    402c:	3330      	adds	r3, #48	; 0x30
    402e:	701e      	strb	r6, [r3, #0]
    4030:	0a36      	lsrs	r6, r6, #8
    4032:	705e      	strb	r6, [r3, #1]
			break;
    4034:	e79e      	b.n	3f74 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    4036:	09c9      	lsrs	r1, r1, #7
    4038:	6a03      	ldr	r3, [r0, #32]
    403a:	469c      	mov	ip, r3
    403c:	4461      	add	r1, ip
    403e:	4b0e      	ldr	r3, [pc, #56]	; (4078 <put_fat+0x134>)
    4040:	4798      	blx	r3
    4042:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4044:	d196      	bne.n	3f74 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    4046:	00a4      	lsls	r4, r4, #2
    4048:	23fe      	movs	r3, #254	; 0xfe
    404a:	005b      	lsls	r3, r3, #1
    404c:	401c      	ands	r4, r3
    404e:	0022      	movs	r2, r4
    4050:	3230      	adds	r2, #48	; 0x30
    4052:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4054:	78d3      	ldrb	r3, [r2, #3]
    4056:	193c      	adds	r4, r7, r4
    4058:	3430      	adds	r4, #48	; 0x30
    405a:	091b      	lsrs	r3, r3, #4
    405c:	071b      	lsls	r3, r3, #28
    405e:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4060:	7026      	strb	r6, [r4, #0]
    4062:	0a33      	lsrs	r3, r6, #8
    4064:	7053      	strb	r3, [r2, #1]
    4066:	0c33      	lsrs	r3, r6, #16
    4068:	7093      	strb	r3, [r2, #2]
    406a:	0e36      	lsrs	r6, r6, #24
    406c:	70d6      	strb	r6, [r2, #3]
			break;
    406e:	e781      	b.n	3f74 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4070:	0005      	movs	r5, r0
    4072:	e77f      	b.n	3f74 <put_fat+0x30>
    4074:	0005      	movs	r5, r0
    4076:	e77d      	b.n	3f74 <put_fat+0x30>
    4078:	00003d01 	.word	0x00003d01

0000407c <create_chain>:
{
    407c:	b5f0      	push	{r4, r5, r6, r7, lr}
    407e:	46c6      	mov	lr, r8
    4080:	b500      	push	{lr}
    4082:	0005      	movs	r5, r0
    4084:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    4086:	2900      	cmp	r1, #0
    4088:	d107      	bne.n	409a <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    408a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    408c:	2e00      	cmp	r6, #0
    408e:	d00d      	beq.n	40ac <create_chain+0x30>
    4090:	6983      	ldr	r3, [r0, #24]
    4092:	429e      	cmp	r6, r3
    4094:	d30b      	bcc.n	40ae <create_chain+0x32>
    4096:	2601      	movs	r6, #1
    4098:	e009      	b.n	40ae <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    409a:	4b26      	ldr	r3, [pc, #152]	; (4134 <create_chain+0xb8>)
    409c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    409e:	2801      	cmp	r0, #1
    40a0:	d93d      	bls.n	411e <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    40a2:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    40a4:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    40a6:	4298      	cmp	r0, r3
    40a8:	d201      	bcs.n	40ae <create_chain+0x32>
    40aa:	e03d      	b.n	4128 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    40ac:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    40ae:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    40b0:	4f20      	ldr	r7, [pc, #128]	; (4134 <create_chain+0xb8>)
    40b2:	e00a      	b.n	40ca <create_chain+0x4e>
    40b4:	0021      	movs	r1, r4
    40b6:	0028      	movs	r0, r5
    40b8:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    40ba:	2800      	cmp	r0, #0
    40bc:	d00d      	beq.n	40da <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    40be:	1c43      	adds	r3, r0, #1
    40c0:	d032      	beq.n	4128 <create_chain+0xac>
    40c2:	2801      	cmp	r0, #1
    40c4:	d030      	beq.n	4128 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    40c6:	42b4      	cmp	r4, r6
    40c8:	d02d      	beq.n	4126 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    40ca:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    40cc:	69ab      	ldr	r3, [r5, #24]
    40ce:	429c      	cmp	r4, r3
    40d0:	d3f0      	bcc.n	40b4 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    40d2:	2e01      	cmp	r6, #1
    40d4:	d925      	bls.n	4122 <create_chain+0xa6>
			ncl = 2;
    40d6:	2402      	movs	r4, #2
    40d8:	e7ec      	b.n	40b4 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    40da:	4a17      	ldr	r2, [pc, #92]	; (4138 <create_chain+0xbc>)
    40dc:	0021      	movs	r1, r4
    40de:	0028      	movs	r0, r5
    40e0:	4b16      	ldr	r3, [pc, #88]	; (413c <create_chain+0xc0>)
    40e2:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    40e4:	2800      	cmp	r0, #0
    40e6:	d113      	bne.n	4110 <create_chain+0x94>
    40e8:	4643      	mov	r3, r8
    40ea:	2b00      	cmp	r3, #0
    40ec:	d109      	bne.n	4102 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    40ee:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    40f0:	692b      	ldr	r3, [r5, #16]
    40f2:	1c5a      	adds	r2, r3, #1
    40f4:	d01b      	beq.n	412e <create_chain+0xb2>
			fs->free_clust--;
    40f6:	3b01      	subs	r3, #1
    40f8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    40fa:	2301      	movs	r3, #1
    40fc:	716b      	strb	r3, [r5, #5]
    40fe:	0020      	movs	r0, r4
    4100:	e012      	b.n	4128 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4102:	0022      	movs	r2, r4
    4104:	4641      	mov	r1, r8
    4106:	0028      	movs	r0, r5
    4108:	4b0c      	ldr	r3, [pc, #48]	; (413c <create_chain+0xc0>)
    410a:	4798      	blx	r3
	if (res == FR_OK) {
    410c:	2800      	cmp	r0, #0
    410e:	d0ee      	beq.n	40ee <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4110:	3801      	subs	r0, #1
    4112:	4242      	negs	r2, r0
    4114:	4142      	adcs	r2, r0
    4116:	4250      	negs	r0, r2
    4118:	2301      	movs	r3, #1
    411a:	4318      	orrs	r0, r3
    411c:	e004      	b.n	4128 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    411e:	2001      	movs	r0, #1
    4120:	e002      	b.n	4128 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    4122:	2000      	movs	r0, #0
    4124:	e000      	b.n	4128 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4126:	2000      	movs	r0, #0
}
    4128:	bc04      	pop	{r2}
    412a:	4690      	mov	r8, r2
    412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    412e:	0020      	movs	r0, r4
    4130:	e7fa      	b.n	4128 <create_chain+0xac>
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	00003da1 	.word	0x00003da1
    4138:	0fffffff 	.word	0x0fffffff
    413c:	00003f45 	.word	0x00003f45

00004140 <remove_chain>:
{
    4140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4142:	46ce      	mov	lr, r9
    4144:	4647      	mov	r7, r8
    4146:	b580      	push	{r7, lr}
    4148:	0004      	movs	r4, r0
    414a:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    414c:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    414e:	2901      	cmp	r1, #1
    4150:	d902      	bls.n	4158 <remove_chain+0x18>
    4152:	69a3      	ldr	r3, [r4, #24]
    4154:	4299      	cmp	r1, r3
    4156:	d303      	bcc.n	4160 <remove_chain+0x20>
}
    4158:	bc0c      	pop	{r2, r3}
    415a:	4690      	mov	r8, r2
    415c:	4699      	mov	r9, r3
    415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4160:	4f13      	ldr	r7, [pc, #76]	; (41b0 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4162:	4b14      	ldr	r3, [pc, #80]	; (41b4 <remove_chain+0x74>)
    4164:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    4166:	2301      	movs	r3, #1
    4168:	4699      	mov	r9, r3
    416a:	e003      	b.n	4174 <remove_chain+0x34>
    416c:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    416e:	69a3      	ldr	r3, [r4, #24]
    4170:	42b3      	cmp	r3, r6
    4172:	d9f1      	bls.n	4158 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4174:	0029      	movs	r1, r5
    4176:	0020      	movs	r0, r4
    4178:	47b8      	blx	r7
    417a:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    417c:	d011      	beq.n	41a2 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    417e:	2801      	cmp	r0, #1
    4180:	d011      	beq.n	41a6 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4182:	1c43      	adds	r3, r0, #1
    4184:	d011      	beq.n	41aa <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4186:	2200      	movs	r2, #0
    4188:	0029      	movs	r1, r5
    418a:	0020      	movs	r0, r4
    418c:	47c0      	blx	r8
			if (res != FR_OK) break;
    418e:	2800      	cmp	r0, #0
    4190:	d1e2      	bne.n	4158 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4192:	6923      	ldr	r3, [r4, #16]
    4194:	1c5a      	adds	r2, r3, #1
    4196:	d0e9      	beq.n	416c <remove_chain+0x2c>
				fs->free_clust++;
    4198:	3301      	adds	r3, #1
    419a:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    419c:	464b      	mov	r3, r9
    419e:	7163      	strb	r3, [r4, #5]
    41a0:	e7e4      	b.n	416c <remove_chain+0x2c>
    41a2:	2000      	movs	r0, #0
    41a4:	e7d8      	b.n	4158 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    41a6:	2002      	movs	r0, #2
    41a8:	e7d6      	b.n	4158 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    41aa:	2001      	movs	r0, #1
    41ac:	e7d4      	b.n	4158 <remove_chain+0x18>
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	00003da1 	.word	0x00003da1
    41b4:	00003f45 	.word	0x00003f45

000041b8 <dir_next>:
{
    41b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ba:	46d6      	mov	lr, sl
    41bc:	4647      	mov	r7, r8
    41be:	b580      	push	{r7, lr}
    41c0:	0006      	movs	r6, r0
    41c2:	000d      	movs	r5, r1
	i = dj->index + 1;
    41c4:	88c4      	ldrh	r4, [r0, #6]
    41c6:	3401      	adds	r4, #1
    41c8:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    41ca:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    41cc:	2c00      	cmp	r4, #0
    41ce:	d103      	bne.n	41d8 <dir_next+0x20>
}
    41d0:	bc0c      	pop	{r2, r3}
    41d2:	4690      	mov	r8, r2
    41d4:	469a      	mov	sl, r3
    41d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    41d8:	6933      	ldr	r3, [r6, #16]
    41da:	2b00      	cmp	r3, #0
    41dc:	d0f8      	beq.n	41d0 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    41de:	270f      	movs	r7, #15
    41e0:	4027      	ands	r7, r4
    41e2:	d10f      	bne.n	4204 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    41e4:	3301      	adds	r3, #1
    41e6:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    41e8:	68f1      	ldr	r1, [r6, #12]
    41ea:	2900      	cmp	r1, #0
    41ec:	d104      	bne.n	41f8 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    41ee:	6833      	ldr	r3, [r6, #0]
    41f0:	891b      	ldrh	r3, [r3, #8]
    41f2:	42a3      	cmp	r3, r4
    41f4:	d9ec      	bls.n	41d0 <dir_next+0x18>
    41f6:	e005      	b.n	4204 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    41f8:	6830      	ldr	r0, [r6, #0]
    41fa:	7883      	ldrb	r3, [r0, #2]
    41fc:	3b01      	subs	r3, #1
    41fe:	0922      	lsrs	r2, r4, #4
    4200:	421a      	tst	r2, r3
    4202:	d007      	beq.n	4214 <dir_next+0x5c>
	dj->index = i;
    4204:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4206:	6833      	ldr	r3, [r6, #0]
    4208:	3330      	adds	r3, #48	; 0x30
    420a:	017f      	lsls	r7, r7, #5
    420c:	19df      	adds	r7, r3, r7
    420e:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4210:	2000      	movs	r0, #0
    4212:	e7dd      	b.n	41d0 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4214:	4b2c      	ldr	r3, [pc, #176]	; (42c8 <dir_next+0x110>)
    4216:	4798      	blx	r3
    4218:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    421a:	2002      	movs	r0, #2
    421c:	4643      	mov	r3, r8
    421e:	2b01      	cmp	r3, #1
    4220:	d9d6      	bls.n	41d0 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4222:	3301      	adds	r3, #1
    4224:	d04b      	beq.n	42be <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4226:	6833      	ldr	r3, [r6, #0]
    4228:	699a      	ldr	r2, [r3, #24]
    422a:	4590      	cmp	r8, r2
    422c:	d33f      	bcc.n	42ae <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    422e:	3002      	adds	r0, #2
    4230:	2d00      	cmp	r5, #0
    4232:	d0cd      	beq.n	41d0 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4234:	68f1      	ldr	r1, [r6, #12]
    4236:	0018      	movs	r0, r3
    4238:	4b24      	ldr	r3, [pc, #144]	; (42cc <dir_next+0x114>)
    423a:	4798      	blx	r3
    423c:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    423e:	2007      	movs	r0, #7
    4240:	4643      	mov	r3, r8
    4242:	2b00      	cmp	r3, #0
    4244:	d0c4      	beq.n	41d0 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    4246:	3805      	subs	r0, #5
    4248:	2b01      	cmp	r3, #1
    424a:	d0c1      	beq.n	41d0 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    424c:	3801      	subs	r0, #1
    424e:	3301      	adds	r3, #1
    4250:	d0be      	beq.n	41d0 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4252:	2100      	movs	r1, #0
    4254:	6830      	ldr	r0, [r6, #0]
    4256:	4b1e      	ldr	r3, [pc, #120]	; (42d0 <dir_next+0x118>)
    4258:	4798      	blx	r3
    425a:	0003      	movs	r3, r0
    425c:	2001      	movs	r0, #1
    425e:	2b00      	cmp	r3, #0
    4260:	d1b6      	bne.n	41d0 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4262:	6830      	ldr	r0, [r6, #0]
    4264:	3030      	adds	r0, #48	; 0x30
    4266:	2280      	movs	r2, #128	; 0x80
    4268:	0092      	lsls	r2, r2, #2
    426a:	2100      	movs	r1, #0
    426c:	4b19      	ldr	r3, [pc, #100]	; (42d4 <dir_next+0x11c>)
    426e:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4270:	6835      	ldr	r5, [r6, #0]
    4272:	4641      	mov	r1, r8
    4274:	0028      	movs	r0, r5
    4276:	4b18      	ldr	r3, [pc, #96]	; (42d8 <dir_next+0x120>)
    4278:	4798      	blx	r3
    427a:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    427c:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    427e:	2301      	movs	r3, #1
    4280:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4282:	6833      	ldr	r3, [r6, #0]
    4284:	789a      	ldrb	r2, [r3, #2]
    4286:	42aa      	cmp	r2, r5
    4288:	d90e      	bls.n	42a8 <dir_next+0xf0>
						dj->fs->wflag = 1;
    428a:	4652      	mov	r2, sl
    428c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    428e:	2100      	movs	r1, #0
    4290:	6830      	ldr	r0, [r6, #0]
    4292:	4b0f      	ldr	r3, [pc, #60]	; (42d0 <dir_next+0x118>)
    4294:	4798      	blx	r3
    4296:	2800      	cmp	r0, #0
    4298:	d113      	bne.n	42c2 <dir_next+0x10a>
						dj->fs->winsect++;
    429a:	6832      	ldr	r2, [r6, #0]
    429c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    429e:	3301      	adds	r3, #1
    42a0:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    42a2:	3501      	adds	r5, #1
    42a4:	b2ed      	uxtb	r5, r5
    42a6:	e7ec      	b.n	4282 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    42a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42aa:	1b52      	subs	r2, r2, r5
    42ac:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    42ae:	4643      	mov	r3, r8
    42b0:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    42b2:	4641      	mov	r1, r8
    42b4:	6830      	ldr	r0, [r6, #0]
    42b6:	4b08      	ldr	r3, [pc, #32]	; (42d8 <dir_next+0x120>)
    42b8:	4798      	blx	r3
    42ba:	6130      	str	r0, [r6, #16]
    42bc:	e7a2      	b.n	4204 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    42be:	2001      	movs	r0, #1
    42c0:	e786      	b.n	41d0 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    42c2:	2001      	movs	r0, #1
    42c4:	e784      	b.n	41d0 <dir_next+0x18>
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	00003da1 	.word	0x00003da1
    42cc:	0000407d 	.word	0x0000407d
    42d0:	00003d01 	.word	0x00003d01
    42d4:	00003835 	.word	0x00003835
    42d8:	00003847 	.word	0x00003847

000042dc <dir_find>:
{
    42dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42de:	46de      	mov	lr, fp
    42e0:	4657      	mov	r7, sl
    42e2:	464e      	mov	r6, r9
    42e4:	4645      	mov	r5, r8
    42e6:	b5e0      	push	{r5, r6, r7, lr}
    42e8:	b083      	sub	sp, #12
    42ea:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    42ec:	2100      	movs	r1, #0
    42ee:	4b5a      	ldr	r3, [pc, #360]	; (4458 <dir_find+0x17c>)
    42f0:	4798      	blx	r3
    42f2:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    42f4:	d000      	beq.n	42f8 <dir_find+0x1c>
    42f6:	e09e      	b.n	4436 <dir_find+0x15a>
    42f8:	23ff      	movs	r3, #255	; 0xff
    42fa:	4699      	mov	r9, r3
    42fc:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    42fe:	4b57      	ldr	r3, [pc, #348]	; (445c <dir_find+0x180>)
    4300:	469b      	mov	fp, r3
    4302:	e01b      	b.n	433c <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4304:	2b0f      	cmp	r3, #15
    4306:	d030      	beq.n	436a <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4308:	4653      	mov	r3, sl
    430a:	2b00      	cmp	r3, #0
    430c:	d105      	bne.n	431a <dir_find+0x3e>
    430e:	0020      	movs	r0, r4
    4310:	4b53      	ldr	r3, [pc, #332]	; (4460 <dir_find+0x184>)
    4312:	4798      	blx	r3
    4314:	4581      	cmp	r9, r0
    4316:	d100      	bne.n	431a <dir_find+0x3e>
    4318:	e08d      	b.n	4436 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    431a:	2301      	movs	r3, #1
    431c:	425b      	negs	r3, r3
    431e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4320:	69a8      	ldr	r0, [r5, #24]
    4322:	7ac3      	ldrb	r3, [r0, #11]
    4324:	07db      	lsls	r3, r3, #31
    4326:	d400      	bmi.n	432a <dir_find+0x4e>
    4328:	e07d      	b.n	4426 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    432a:	23ff      	movs	r3, #255	; 0xff
    432c:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    432e:	2100      	movs	r1, #0
    4330:	0028      	movs	r0, r5
    4332:	4b4c      	ldr	r3, [pc, #304]	; (4464 <dir_find+0x188>)
    4334:	4798      	blx	r3
    4336:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    4338:	d000      	beq.n	433c <dir_find+0x60>
    433a:	e07c      	b.n	4436 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    433c:	6929      	ldr	r1, [r5, #16]
    433e:	6828      	ldr	r0, [r5, #0]
    4340:	47d8      	blx	fp
    4342:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4344:	d177      	bne.n	4436 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4346:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4348:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    434a:	2e00      	cmp	r6, #0
    434c:	d100      	bne.n	4350 <dir_find+0x74>
    434e:	e080      	b.n	4452 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4350:	7ae2      	ldrb	r2, [r4, #11]
    4352:	233f      	movs	r3, #63	; 0x3f
    4354:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4356:	2ee5      	cmp	r6, #229	; 0xe5
    4358:	d100      	bne.n	435c <dir_find+0x80>
    435a:	e077      	b.n	444c <dir_find+0x170>
    435c:	0712      	lsls	r2, r2, #28
    435e:	d5d1      	bpl.n	4304 <dir_find+0x28>
    4360:	2b0f      	cmp	r3, #15
    4362:	d002      	beq.n	436a <dir_find+0x8e>
			ord = 0xFF;
    4364:	23ff      	movs	r3, #255	; 0xff
    4366:	469a      	mov	sl, r3
    4368:	e7e1      	b.n	432e <dir_find+0x52>
				if (dj->lfn) {
    436a:	69ef      	ldr	r7, [r5, #28]
    436c:	2f00      	cmp	r7, #0
    436e:	d0de      	beq.n	432e <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4370:	0673      	lsls	r3, r6, #25
    4372:	d518      	bpl.n	43a6 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4374:	7b63      	ldrb	r3, [r4, #13]
    4376:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4378:	2340      	movs	r3, #64	; 0x40
    437a:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    437c:	88eb      	ldrh	r3, [r5, #6]
    437e:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4380:	7b63      	ldrb	r3, [r4, #13]
    4382:	9300      	str	r3, [sp, #0]
    4384:	22ff      	movs	r2, #255	; 0xff
    4386:	4692      	mov	sl, r2
    4388:	454b      	cmp	r3, r9
    438a:	d1d0      	bne.n	432e <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    438c:	7823      	ldrb	r3, [r4, #0]
    438e:	3abf      	subs	r2, #191	; 0xbf
    4390:	4393      	bics	r3, r2
    4392:	3b01      	subs	r3, #1
    4394:	005a      	lsls	r2, r3, #1
    4396:	18d2      	adds	r2, r2, r3
    4398:	0092      	lsls	r2, r2, #2
    439a:	4692      	mov	sl, r2
    439c:	449a      	add	sl, r3
	s = 0; wc = 1;
    439e:	2201      	movs	r2, #1
    43a0:	2300      	movs	r3, #0
    43a2:	4699      	mov	r9, r3
    43a4:	e01d      	b.n	43e2 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    43a6:	45b2      	cmp	sl, r6
    43a8:	d0ea      	beq.n	4380 <dir_find+0xa4>
    43aa:	23ff      	movs	r3, #255	; 0xff
    43ac:	469a      	mov	sl, r3
    43ae:	e7be      	b.n	432e <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    43b0:	4b2d      	ldr	r3, [pc, #180]	; (4468 <dir_find+0x18c>)
    43b2:	4798      	blx	r3
    43b4:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    43b6:	4653      	mov	r3, sl
    43b8:	2bfe      	cmp	r3, #254	; 0xfe
    43ba:	d81f      	bhi.n	43fc <dir_find+0x120>
    43bc:	2301      	movs	r3, #1
    43be:	4453      	add	r3, sl
    43c0:	4698      	mov	r8, r3
    43c2:	4653      	mov	r3, sl
    43c4:	005b      	lsls	r3, r3, #1
    43c6:	5bd8      	ldrh	r0, [r3, r7]
    43c8:	4b27      	ldr	r3, [pc, #156]	; (4468 <dir_find+0x18c>)
    43ca:	4798      	blx	r3
    43cc:	0002      	movs	r2, r0
    43ce:	9b01      	ldr	r3, [sp, #4]
    43d0:	4283      	cmp	r3, r0
    43d2:	d113      	bne.n	43fc <dir_find+0x120>
    43d4:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    43d6:	2301      	movs	r3, #1
    43d8:	469c      	mov	ip, r3
    43da:	44e1      	add	r9, ip
    43dc:	464b      	mov	r3, r9
    43de:	2b0d      	cmp	r3, #13
    43e0:	d011      	beq.n	4406 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    43e2:	4b22      	ldr	r3, [pc, #136]	; (446c <dir_find+0x190>)
    43e4:	4649      	mov	r1, r9
    43e6:	5cc9      	ldrb	r1, [r1, r3]
    43e8:	1863      	adds	r3, r4, r1
    43ea:	785b      	ldrb	r3, [r3, #1]
    43ec:	021b      	lsls	r3, r3, #8
    43ee:	5c60      	ldrb	r0, [r4, r1]
    43f0:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    43f2:	2a00      	cmp	r2, #0
    43f4:	d1dc      	bne.n	43b0 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    43f6:	4b1e      	ldr	r3, [pc, #120]	; (4470 <dir_find+0x194>)
    43f8:	4298      	cmp	r0, r3
    43fa:	d0ec      	beq.n	43d6 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    43fc:	9b00      	ldr	r3, [sp, #0]
    43fe:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4400:	23ff      	movs	r3, #255	; 0xff
    4402:	469a      	mov	sl, r3
    4404:	e793      	b.n	432e <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4406:	7823      	ldrb	r3, [r4, #0]
    4408:	065b      	lsls	r3, r3, #25
    440a:	d506      	bpl.n	441a <dir_find+0x13e>
    440c:	2a00      	cmp	r2, #0
    440e:	d004      	beq.n	441a <dir_find+0x13e>
    4410:	4653      	mov	r3, sl
    4412:	005b      	lsls	r3, r3, #1
    4414:	5bdb      	ldrh	r3, [r3, r7]
    4416:	2b00      	cmp	r3, #0
    4418:	d1f0      	bne.n	43fc <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    441a:	3e01      	subs	r6, #1
    441c:	b2f3      	uxtb	r3, r6
    441e:	469a      	mov	sl, r3
    4420:	9b00      	ldr	r3, [sp, #0]
    4422:	4699      	mov	r9, r3
    4424:	e783      	b.n	432e <dir_find+0x52>
    4426:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4428:	5ce1      	ldrb	r1, [r4, r3]
    442a:	5cc2      	ldrb	r2, [r0, r3]
    442c:	4291      	cmp	r1, r2
    442e:	d10a      	bne.n	4446 <dir_find+0x16a>
    4430:	3301      	adds	r3, #1
    4432:	2b0b      	cmp	r3, #11
    4434:	d1f8      	bne.n	4428 <dir_find+0x14c>
}
    4436:	0038      	movs	r0, r7
    4438:	b003      	add	sp, #12
    443a:	bc3c      	pop	{r2, r3, r4, r5}
    443c:	4690      	mov	r8, r2
    443e:	4699      	mov	r9, r3
    4440:	46a2      	mov	sl, r4
    4442:	46ab      	mov	fp, r5
    4444:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4446:	23ff      	movs	r3, #255	; 0xff
    4448:	469a      	mov	sl, r3
    444a:	e770      	b.n	432e <dir_find+0x52>
			ord = 0xFF;
    444c:	23ff      	movs	r3, #255	; 0xff
    444e:	469a      	mov	sl, r3
    4450:	e76d      	b.n	432e <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4452:	2704      	movs	r7, #4
    4454:	e7ef      	b.n	4436 <dir_find+0x15a>
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	00003e9d 	.word	0x00003e9d
    445c:	00003d01 	.word	0x00003d01
    4460:	0000385f 	.word	0x0000385f
    4464:	000041b9 	.word	0x000041b9
    4468:	0000503d 	.word	0x0000503d
    446c:	00006774 	.word	0x00006774
    4470:	0000ffff 	.word	0x0000ffff

00004474 <dir_register>:
{
    4474:	b5f0      	push	{r4, r5, r6, r7, lr}
    4476:	46de      	mov	lr, fp
    4478:	4657      	mov	r7, sl
    447a:	464e      	mov	r6, r9
    447c:	4645      	mov	r5, r8
    447e:	b5e0      	push	{r5, r6, r7, lr}
    4480:	b089      	sub	sp, #36	; 0x24
    4482:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4484:	6987      	ldr	r7, [r0, #24]
    4486:	69c3      	ldr	r3, [r0, #28]
    4488:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    448a:	ad05      	add	r5, sp, #20
    448c:	220c      	movs	r2, #12
    448e:	0039      	movs	r1, r7
    4490:	0028      	movs	r0, r5
    4492:	4ba7      	ldr	r3, [pc, #668]	; (4730 <dir_register+0x2bc>)
    4494:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4496:	7aeb      	ldrb	r3, [r5, #11]
    4498:	07db      	lsls	r3, r3, #31
    449a:	d400      	bmi.n	449e <dir_register+0x2a>
    449c:	e070      	b.n	4580 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    449e:	2300      	movs	r3, #0
    44a0:	72fb      	strb	r3, [r7, #11]
    44a2:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    44a4:	220b      	movs	r2, #11
    44a6:	a905      	add	r1, sp, #20
    44a8:	0038      	movs	r0, r7
    44aa:	4ba1      	ldr	r3, [pc, #644]	; (4730 <dir_register+0x2bc>)
    44ac:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    44ae:	2301      	movs	r3, #1
		ns[i--] = c;
    44b0:	ad03      	add	r5, sp, #12
    44b2:	001e      	movs	r6, r3
    44b4:	46a0      	mov	r8, r4
    44b6:	e049      	b.n	454c <dir_register+0xd8>
    44b8:	3801      	subs	r0, #1
    44ba:	1829      	adds	r1, r5, r0
    44bc:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    44be:	091b      	lsrs	r3, r3, #4
    44c0:	b29b      	uxth	r3, r3
	} while (seq);
    44c2:	2b00      	cmp	r3, #0
    44c4:	d007      	beq.n	44d6 <dir_register+0x62>
		c = (seq % 16) + '0';
    44c6:	0021      	movs	r1, r4
    44c8:	4019      	ands	r1, r3
    44ca:	000a      	movs	r2, r1
    44cc:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    44ce:	2a39      	cmp	r2, #57	; 0x39
    44d0:	d9f2      	bls.n	44b8 <dir_register+0x44>
    44d2:	3207      	adds	r2, #7
    44d4:	e7f0      	b.n	44b8 <dir_register+0x44>
	ns[i] = '~';
    44d6:	337e      	adds	r3, #126	; 0x7e
    44d8:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    44da:	2800      	cmp	r0, #0
    44dc:	d00a      	beq.n	44f4 <dir_register+0x80>
    44de:	783b      	ldrb	r3, [r7, #0]
    44e0:	2b20      	cmp	r3, #32
    44e2:	d009      	beq.n	44f8 <dir_register+0x84>
    44e4:	2300      	movs	r3, #0
    44e6:	3301      	adds	r3, #1
    44e8:	4298      	cmp	r0, r3
    44ea:	d007      	beq.n	44fc <dir_register+0x88>
    44ec:	5cfa      	ldrb	r2, [r7, r3]
    44ee:	2a20      	cmp	r2, #32
    44f0:	d1f9      	bne.n	44e6 <dir_register+0x72>
    44f2:	e009      	b.n	4508 <dir_register+0x94>
    44f4:	0003      	movs	r3, r0
    44f6:	e007      	b.n	4508 <dir_register+0x94>
    44f8:	2300      	movs	r3, #0
    44fa:	e005      	b.n	4508 <dir_register+0x94>
    44fc:	0003      	movs	r3, r0
    44fe:	e003      	b.n	4508 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4500:	54fa      	strb	r2, [r7, r3]
    4502:	3301      	adds	r3, #1
	} while (j < 8);
    4504:	2b07      	cmp	r3, #7
    4506:	d805      	bhi.n	4514 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4508:	2220      	movs	r2, #32
    450a:	2807      	cmp	r0, #7
    450c:	d8f8      	bhi.n	4500 <dir_register+0x8c>
    450e:	5c2a      	ldrb	r2, [r5, r0]
    4510:	3001      	adds	r0, #1
    4512:	e7f5      	b.n	4500 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4514:	4640      	mov	r0, r8
    4516:	4b87      	ldr	r3, [pc, #540]	; (4734 <dir_register+0x2c0>)
    4518:	4798      	blx	r3
			if (res != FR_OK) break;
    451a:	2800      	cmp	r0, #0
    451c:	d11c      	bne.n	4558 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    451e:	3601      	adds	r6, #1
    4520:	b2b6      	uxth	r6, r6
    4522:	2e64      	cmp	r6, #100	; 0x64
    4524:	d015      	beq.n	4552 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    4526:	220b      	movs	r2, #11
    4528:	a905      	add	r1, sp, #20
    452a:	0038      	movs	r0, r7
    452c:	4b80      	ldr	r3, [pc, #512]	; (4730 <dir_register+0x2bc>)
    452e:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4530:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    4532:	2e05      	cmp	r6, #5
    4534:	d90a      	bls.n	454c <dir_register+0xd8>
    4536:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4538:	085a      	lsrs	r2, r3, #1
    453a:	03db      	lsls	r3, r3, #15
    453c:	4313      	orrs	r3, r2
    453e:	880a      	ldrh	r2, [r1, #0]
    4540:	189b      	adds	r3, r3, r2
    4542:	b29b      	uxth	r3, r3
    4544:	3102      	adds	r1, #2
    4546:	880a      	ldrh	r2, [r1, #0]
    4548:	2a00      	cmp	r2, #0
    454a:	d1f5      	bne.n	4538 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    454c:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    454e:	240f      	movs	r4, #15
    4550:	e7b9      	b.n	44c6 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4552:	2307      	movs	r3, #7
    4554:	4698      	mov	r8, r3
    4556:	e006      	b.n	4566 <dir_register+0xf2>
    4558:	4644      	mov	r4, r8
    455a:	4680      	mov	r8, r0
    455c:	2e64      	cmp	r6, #100	; 0x64
    455e:	d100      	bne.n	4562 <dir_register+0xee>
    4560:	e0a5      	b.n	46ae <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4562:	2804      	cmp	r0, #4
    4564:	d007      	beq.n	4576 <dir_register+0x102>
}
    4566:	4640      	mov	r0, r8
    4568:	b009      	add	sp, #36	; 0x24
    456a:	bc3c      	pop	{r2, r3, r4, r5}
    456c:	4690      	mov	r8, r2
    456e:	4699      	mov	r9, r3
    4570:	46a2      	mov	sl, r4
    4572:	46ab      	mov	fp, r5
    4574:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    4576:	ab05      	add	r3, sp, #20
    4578:	7adb      	ldrb	r3, [r3, #11]
    457a:	72fb      	strb	r3, [r7, #11]
    457c:	4653      	mov	r3, sl
    457e:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4580:	ab05      	add	r3, sp, #20
    4582:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4584:	2201      	movs	r2, #1
    4586:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4588:	079b      	lsls	r3, r3, #30
    458a:	d511      	bpl.n	45b0 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    458c:	4653      	mov	r3, sl
    458e:	881b      	ldrh	r3, [r3, #0]
    4590:	2b00      	cmp	r3, #0
    4592:	d01b      	beq.n	45cc <dir_register+0x158>
    4594:	2000      	movs	r0, #0
    4596:	4652      	mov	r2, sl
    4598:	3001      	adds	r0, #1
    459a:	b280      	uxth	r0, r0
    459c:	0043      	lsls	r3, r0, #1
    459e:	5a9b      	ldrh	r3, [r3, r2]
    45a0:	2b00      	cmp	r3, #0
    45a2:	d1f9      	bne.n	4598 <dir_register+0x124>
		ne = (ne + 25) / 13;
    45a4:	3019      	adds	r0, #25
    45a6:	210d      	movs	r1, #13
    45a8:	4b63      	ldr	r3, [pc, #396]	; (4738 <dir_register+0x2c4>)
    45aa:	4798      	blx	r3
    45ac:	b283      	uxth	r3, r0
    45ae:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    45b0:	2100      	movs	r1, #0
    45b2:	0020      	movs	r0, r4
    45b4:	4b61      	ldr	r3, [pc, #388]	; (473c <dir_register+0x2c8>)
    45b6:	4798      	blx	r3
    45b8:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    45ba:	2800      	cmp	r0, #0
    45bc:	d1d3      	bne.n	4566 <dir_register+0xf2>
    45be:	4682      	mov	sl, r0
    45c0:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    45c2:	4f5f      	ldr	r7, [pc, #380]	; (4740 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    45c4:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    45c6:	4b5f      	ldr	r3, [pc, #380]	; (4744 <dir_register+0x2d0>)
    45c8:	4699      	mov	r9, r3
    45ca:	e00b      	b.n	45e4 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    45cc:	2000      	movs	r0, #0
    45ce:	e7e9      	b.n	45a4 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    45d0:	1c6b      	adds	r3, r5, #1
    45d2:	b29b      	uxth	r3, r3
    45d4:	459b      	cmp	fp, r3
    45d6:	d06d      	beq.n	46b4 <dir_register+0x240>
    45d8:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    45da:	2101      	movs	r1, #1
    45dc:	0020      	movs	r0, r4
    45de:	47c8      	blx	r9
	} while (res == FR_OK);
    45e0:	2800      	cmp	r0, #0
    45e2:	d112      	bne.n	460a <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    45e4:	6921      	ldr	r1, [r4, #16]
    45e6:	6820      	ldr	r0, [r4, #0]
    45e8:	47b8      	blx	r7
		if (res != FR_OK) break;
    45ea:	2800      	cmp	r0, #0
    45ec:	d000      	beq.n	45f0 <dir_register+0x17c>
    45ee:	e098      	b.n	4722 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    45f0:	6963      	ldr	r3, [r4, #20]
    45f2:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    45f4:	2be5      	cmp	r3, #229	; 0xe5
    45f6:	d001      	beq.n	45fc <dir_register+0x188>
    45f8:	2b00      	cmp	r3, #0
    45fa:	d104      	bne.n	4606 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    45fc:	2d00      	cmp	r5, #0
    45fe:	d1e7      	bne.n	45d0 <dir_register+0x15c>
    4600:	88e3      	ldrh	r3, [r4, #6]
    4602:	469a      	mov	sl, r3
    4604:	e7e4      	b.n	45d0 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    4606:	0035      	movs	r5, r6
    4608:	e7e7      	b.n	45da <dir_register+0x166>
    460a:	4680      	mov	r8, r0
    460c:	e7ab      	b.n	4566 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    460e:	4651      	mov	r1, sl
    4610:	0020      	movs	r0, r4
    4612:	4b4a      	ldr	r3, [pc, #296]	; (473c <dir_register+0x2c8>)
    4614:	4798      	blx	r3
    4616:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4618:	2800      	cmp	r0, #0
    461a:	d1a4      	bne.n	4566 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    461c:	69a0      	ldr	r0, [r4, #24]
    461e:	4b4a      	ldr	r3, [pc, #296]	; (4748 <dir_register+0x2d4>)
    4620:	4798      	blx	r3
    4622:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4624:	46a8      	mov	r8, r5
    4626:	e01f      	b.n	4668 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4628:	0022      	movs	r2, r4
    462a:	e067      	b.n	46fc <dir_register+0x288>
    462c:	465e      	mov	r6, fp
    462e:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4630:	4946      	ldr	r1, [pc, #280]	; (474c <dir_register+0x2d8>)
    4632:	428b      	cmp	r3, r1
    4634:	d003      	beq.n	463e <dir_register+0x1ca>
    4636:	0052      	lsls	r2, r2, #1
    4638:	5b93      	ldrh	r3, [r2, r6]
    463a:	2b00      	cmp	r3, #0
    463c:	d103      	bne.n	4646 <dir_register+0x1d2>
    463e:	2340      	movs	r3, #64	; 0x40
    4640:	464a      	mov	r2, r9
    4642:	431a      	orrs	r2, r3
    4644:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    4646:	464b      	mov	r3, r9
    4648:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    464a:	2301      	movs	r3, #1
    464c:	6822      	ldr	r2, [r4, #0]
    464e:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4650:	2100      	movs	r1, #0
    4652:	0020      	movs	r0, r4
    4654:	4b3b      	ldr	r3, [pc, #236]	; (4744 <dir_register+0x2d0>)
    4656:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    4658:	2800      	cmp	r0, #0
    465a:	d166      	bne.n	472a <dir_register+0x2b6>
    465c:	4645      	mov	r5, r8
    465e:	3d01      	subs	r5, #1
    4660:	b2ab      	uxth	r3, r5
    4662:	4698      	mov	r8, r3
    4664:	2b00      	cmp	r3, #0
    4666:	d027      	beq.n	46b8 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    4668:	6921      	ldr	r1, [r4, #16]
    466a:	6820      	ldr	r0, [r4, #0]
    466c:	4b34      	ldr	r3, [pc, #208]	; (4740 <dir_register+0x2cc>)
    466e:	4798      	blx	r3
				if (res != FR_OK) break;
    4670:	2800      	cmp	r0, #0
    4672:	d158      	bne.n	4726 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    4674:	69e6      	ldr	r6, [r4, #28]
    4676:	6960      	ldr	r0, [r4, #20]
    4678:	4643      	mov	r3, r8
    467a:	466a      	mov	r2, sp
    467c:	70d3      	strb	r3, [r2, #3]
    467e:	78d3      	ldrb	r3, [r2, #3]
    4680:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4682:	7913      	ldrb	r3, [r2, #4]
    4684:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4686:	230f      	movs	r3, #15
    4688:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    468a:	2300      	movs	r3, #0
    468c:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    468e:	7683      	strb	r3, [r0, #26]
    4690:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4692:	464b      	mov	r3, r9
    4694:	3b01      	subs	r3, #1
    4696:	005a      	lsls	r2, r3, #1
    4698:	18d2      	adds	r2, r2, r3
    469a:	0092      	lsls	r2, r2, #2
    469c:	18d2      	adds	r2, r2, r3
    469e:	492c      	ldr	r1, [pc, #176]	; (4750 <dir_register+0x2dc>)
    46a0:	000d      	movs	r5, r1
    46a2:	350d      	adds	r5, #13
	s = wc = 0;
    46a4:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    46a6:	4f29      	ldr	r7, [pc, #164]	; (474c <dir_register+0x2d8>)
    46a8:	46b3      	mov	fp, r6
    46aa:	46a4      	mov	ip, r4
    46ac:	e029      	b.n	4702 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    46ae:	2307      	movs	r3, #7
    46b0:	4698      	mov	r8, r3
    46b2:	e758      	b.n	4566 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    46b4:	2b01      	cmp	r3, #1
    46b6:	d8aa      	bhi.n	460e <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    46b8:	6921      	ldr	r1, [r4, #16]
    46ba:	6820      	ldr	r0, [r4, #0]
    46bc:	4b20      	ldr	r3, [pc, #128]	; (4740 <dir_register+0x2cc>)
    46be:	4798      	blx	r3
    46c0:	4680      	mov	r8, r0
		if (res == FR_OK) {
    46c2:	2800      	cmp	r0, #0
    46c4:	d000      	beq.n	46c8 <dir_register+0x254>
    46c6:	e74e      	b.n	4566 <dir_register+0xf2>
			dir = dj->dir;
    46c8:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    46ca:	2220      	movs	r2, #32
    46cc:	2100      	movs	r1, #0
    46ce:	0028      	movs	r0, r5
    46d0:	4b20      	ldr	r3, [pc, #128]	; (4754 <dir_register+0x2e0>)
    46d2:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    46d4:	220b      	movs	r2, #11
    46d6:	69a1      	ldr	r1, [r4, #24]
    46d8:	0028      	movs	r0, r5
    46da:	4b15      	ldr	r3, [pc, #84]	; (4730 <dir_register+0x2bc>)
    46dc:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    46de:	69a3      	ldr	r3, [r4, #24]
    46e0:	7ada      	ldrb	r2, [r3, #11]
    46e2:	2318      	movs	r3, #24
    46e4:	4013      	ands	r3, r2
    46e6:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    46e8:	6823      	ldr	r3, [r4, #0]
    46ea:	2201      	movs	r2, #1
    46ec:	711a      	strb	r2, [r3, #4]
    46ee:	e73a      	b.n	4566 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    46f0:	780c      	ldrb	r4, [r1, #0]
    46f2:	26ff      	movs	r6, #255	; 0xff
    46f4:	5506      	strb	r6, [r0, r4]
    46f6:	1904      	adds	r4, r0, r4
    46f8:	26ff      	movs	r6, #255	; 0xff
    46fa:	7066      	strb	r6, [r4, #1]
    46fc:	3101      	adds	r1, #1
	} while (++s < 13);
    46fe:	42a9      	cmp	r1, r5
    4700:	d094      	beq.n	462c <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4702:	42bb      	cmp	r3, r7
    4704:	d0f4      	beq.n	46f0 <dir_register+0x27c>
    4706:	1c54      	adds	r4, r2, #1
    4708:	0052      	lsls	r2, r2, #1
    470a:	465b      	mov	r3, fp
    470c:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    470e:	780a      	ldrb	r2, [r1, #0]
    4710:	5483      	strb	r3, [r0, r2]
    4712:	1882      	adds	r2, r0, r2
    4714:	0a1e      	lsrs	r6, r3, #8
    4716:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4718:	2b00      	cmp	r3, #0
    471a:	d185      	bne.n	4628 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    471c:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    471e:	003b      	movs	r3, r7
    4720:	e7ec      	b.n	46fc <dir_register+0x288>
    4722:	4680      	mov	r8, r0
    4724:	e71f      	b.n	4566 <dir_register+0xf2>
    4726:	4680      	mov	r8, r0
    4728:	e71d      	b.n	4566 <dir_register+0xf2>
    472a:	4680      	mov	r8, r0
    472c:	e71b      	b.n	4566 <dir_register+0xf2>
    472e:	46c0      	nop			; (mov r8, r8)
    4730:	00003821 	.word	0x00003821
    4734:	000042dd 	.word	0x000042dd
    4738:	0000584d 	.word	0x0000584d
    473c:	00003e9d 	.word	0x00003e9d
    4740:	00003d01 	.word	0x00003d01
    4744:	000041b9 	.word	0x000041b9
    4748:	0000385f 	.word	0x0000385f
    474c:	0000ffff 	.word	0x0000ffff
    4750:	00006774 	.word	0x00006774
    4754:	00003835 	.word	0x00003835

00004758 <sync>:
{
    4758:	b570      	push	{r4, r5, r6, lr}
    475a:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    475c:	2100      	movs	r1, #0
    475e:	4b2c      	ldr	r3, [pc, #176]	; (4810 <sync+0xb8>)
    4760:	4798      	blx	r3
	if (res == FR_OK) {
    4762:	2800      	cmp	r0, #0
    4764:	d10a      	bne.n	477c <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4766:	7823      	ldrb	r3, [r4, #0]
    4768:	2b03      	cmp	r3, #3
    476a:	d008      	beq.n	477e <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    476c:	7860      	ldrb	r0, [r4, #1]
    476e:	2200      	movs	r2, #0
    4770:	2100      	movs	r1, #0
    4772:	4b28      	ldr	r3, [pc, #160]	; (4814 <sync+0xbc>)
    4774:	4798      	blx	r3
    4776:	1e43      	subs	r3, r0, #1
    4778:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    477a:	b2c0      	uxtb	r0, r0
}
    477c:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    477e:	7963      	ldrb	r3, [r4, #5]
    4780:	2b00      	cmp	r3, #0
    4782:	d0f3      	beq.n	476c <sync+0x14>
			fs->winsect = 0;
    4784:	2600      	movs	r6, #0
    4786:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4788:	0025      	movs	r5, r4
    478a:	3530      	adds	r5, #48	; 0x30
    478c:	2280      	movs	r2, #128	; 0x80
    478e:	0092      	lsls	r2, r2, #2
    4790:	2100      	movs	r1, #0
    4792:	0028      	movs	r0, r5
    4794:	4b20      	ldr	r3, [pc, #128]	; (4818 <sync+0xc0>)
    4796:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4798:	2255      	movs	r2, #85	; 0x55
    479a:	4b20      	ldr	r3, [pc, #128]	; (481c <sync+0xc4>)
    479c:	54e2      	strb	r2, [r4, r3]
    479e:	3255      	adds	r2, #85	; 0x55
    47a0:	4b1f      	ldr	r3, [pc, #124]	; (4820 <sync+0xc8>)
    47a2:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    47a4:	3bde      	subs	r3, #222	; 0xde
    47a6:	3bff      	subs	r3, #255	; 0xff
    47a8:	3a7a      	subs	r2, #122	; 0x7a
    47aa:	54a3      	strb	r3, [r4, r2]
    47ac:	3201      	adds	r2, #1
    47ae:	54a3      	strb	r3, [r4, r2]
    47b0:	330f      	adds	r3, #15
    47b2:	3201      	adds	r2, #1
    47b4:	54a3      	strb	r3, [r4, r2]
    47b6:	320f      	adds	r2, #15
    47b8:	2133      	movs	r1, #51	; 0x33
    47ba:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    47bc:	313f      	adds	r1, #63	; 0x3f
    47be:	2085      	movs	r0, #133	; 0x85
    47c0:	0080      	lsls	r0, r0, #2
    47c2:	5421      	strb	r1, [r4, r0]
    47c4:	4817      	ldr	r0, [pc, #92]	; (4824 <sync+0xcc>)
    47c6:	5421      	strb	r1, [r4, r0]
    47c8:	4917      	ldr	r1, [pc, #92]	; (4828 <sync+0xd0>)
    47ca:	5462      	strb	r2, [r4, r1]
    47cc:	4a17      	ldr	r2, [pc, #92]	; (482c <sync+0xd4>)
    47ce:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    47d0:	6923      	ldr	r3, [r4, #16]
    47d2:	3201      	adds	r2, #1
    47d4:	54a3      	strb	r3, [r4, r2]
    47d6:	0a19      	lsrs	r1, r3, #8
    47d8:	4a15      	ldr	r2, [pc, #84]	; (4830 <sync+0xd8>)
    47da:	54a1      	strb	r1, [r4, r2]
    47dc:	0c19      	lsrs	r1, r3, #16
    47de:	4a15      	ldr	r2, [pc, #84]	; (4834 <sync+0xdc>)
    47e0:	54a1      	strb	r1, [r4, r2]
    47e2:	0e1b      	lsrs	r3, r3, #24
    47e4:	4a14      	ldr	r2, [pc, #80]	; (4838 <sync+0xe0>)
    47e6:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    47e8:	68e3      	ldr	r3, [r4, #12]
    47ea:	3201      	adds	r2, #1
    47ec:	54a3      	strb	r3, [r4, r2]
    47ee:	0a19      	lsrs	r1, r3, #8
    47f0:	4a12      	ldr	r2, [pc, #72]	; (483c <sync+0xe4>)
    47f2:	54a1      	strb	r1, [r4, r2]
    47f4:	0c19      	lsrs	r1, r3, #16
    47f6:	4a12      	ldr	r2, [pc, #72]	; (4840 <sync+0xe8>)
    47f8:	54a1      	strb	r1, [r4, r2]
    47fa:	0e1b      	lsrs	r3, r3, #24
    47fc:	4a11      	ldr	r2, [pc, #68]	; (4844 <sync+0xec>)
    47fe:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4800:	7860      	ldrb	r0, [r4, #1]
    4802:	2301      	movs	r3, #1
    4804:	6962      	ldr	r2, [r4, #20]
    4806:	0029      	movs	r1, r5
    4808:	4d0f      	ldr	r5, [pc, #60]	; (4848 <sync+0xf0>)
    480a:	47a8      	blx	r5
			fs->fsi_flag = 0;
    480c:	7166      	strb	r6, [r4, #5]
    480e:	e7ad      	b.n	476c <sync+0x14>
    4810:	00003d01 	.word	0x00003d01
    4814:	00003765 	.word	0x00003765
    4818:	00003835 	.word	0x00003835
    481c:	0000022e 	.word	0x0000022e
    4820:	0000022f 	.word	0x0000022f
    4824:	00000215 	.word	0x00000215
    4828:	00000216 	.word	0x00000216
    482c:	00000217 	.word	0x00000217
    4830:	00000219 	.word	0x00000219
    4834:	0000021a 	.word	0x0000021a
    4838:	0000021b 	.word	0x0000021b
    483c:	0000021d 	.word	0x0000021d
    4840:	0000021e 	.word	0x0000021e
    4844:	0000021f 	.word	0x0000021f
    4848:	000036e1 	.word	0x000036e1

0000484c <follow_path>:
{
    484c:	b5f0      	push	{r4, r5, r6, r7, lr}
    484e:	46de      	mov	lr, fp
    4850:	4657      	mov	r7, sl
    4852:	464e      	mov	r6, r9
    4854:	4645      	mov	r5, r8
    4856:	b5e0      	push	{r5, r6, r7, lr}
    4858:	b083      	sub	sp, #12
    485a:	4682      	mov	sl, r0
    485c:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    485e:	780b      	ldrb	r3, [r1, #0]
    4860:	2b2f      	cmp	r3, #47	; 0x2f
    4862:	d00f      	beq.n	4884 <follow_path+0x38>
    4864:	2b5c      	cmp	r3, #92	; 0x5c
    4866:	d00d      	beq.n	4884 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4868:	2300      	movs	r3, #0
    486a:	4652      	mov	r2, sl
    486c:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    486e:	782b      	ldrb	r3, [r5, #0]
    4870:	4657      	mov	r7, sl
    4872:	2b1f      	cmp	r3, #31
    4874:	d809      	bhi.n	488a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4876:	2100      	movs	r1, #0
    4878:	4650      	mov	r0, sl
    487a:	4bb2      	ldr	r3, [pc, #712]	; (4b44 <follow_path+0x2f8>)
    487c:	4798      	blx	r3
		dj->dir = 0;
    487e:	2300      	movs	r3, #0
    4880:	617b      	str	r3, [r7, #20]
    4882:	e13a      	b.n	4afa <follow_path+0x2ae>
		path++;
    4884:	3501      	adds	r5, #1
    4886:	e7ef      	b.n	4868 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4888:	3501      	adds	r5, #1
    488a:	7828      	ldrb	r0, [r5, #0]
    488c:	282f      	cmp	r0, #47	; 0x2f
    488e:	d0fb      	beq.n	4888 <follow_path+0x3c>
    4890:	285c      	cmp	r0, #92	; 0x5c
    4892:	d0f9      	beq.n	4888 <follow_path+0x3c>
	lfn = dj->lfn;
    4894:	69fb      	ldr	r3, [r7, #28]
    4896:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4898:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    489a:	281f      	cmp	r0, #31
    489c:	d800      	bhi.n	48a0 <follow_path+0x54>
    489e:	e13b      	b.n	4b18 <follow_path+0x2cc>
    48a0:	282f      	cmp	r0, #47	; 0x2f
    48a2:	d100      	bne.n	48a6 <follow_path+0x5a>
    48a4:	e13b      	b.n	4b1e <follow_path+0x2d2>
    48a6:	285c      	cmp	r0, #92	; 0x5c
    48a8:	d100      	bne.n	48ac <follow_path+0x60>
    48aa:	e13b      	b.n	4b24 <follow_path+0x2d8>
    48ac:	1c6e      	adds	r6, r5, #1
    48ae:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    48b0:	2380      	movs	r3, #128	; 0x80
    48b2:	005b      	lsls	r3, r3, #1
    48b4:	4698      	mov	r8, r3
    48b6:	46bb      	mov	fp, r7
    48b8:	002b      	movs	r3, r5
    48ba:	0025      	movs	r5, r4
    48bc:	0034      	movs	r4, r6
    48be:	4656      	mov	r6, sl
    48c0:	4699      	mov	r9, r3
    48c2:	e011      	b.n	48e8 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    48c4:	2b00      	cmp	r3, #0
    48c6:	d135      	bne.n	4934 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    48c8:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    48ca:	1c6b      	adds	r3, r5, #1
    48cc:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    48ce:	281f      	cmp	r0, #31
    48d0:	d91e      	bls.n	4910 <follow_path+0xc4>
    48d2:	282f      	cmp	r0, #47	; 0x2f
    48d4:	d100      	bne.n	48d8 <follow_path+0x8c>
    48d6:	e128      	b.n	4b2a <follow_path+0x2de>
    48d8:	285c      	cmp	r0, #92	; 0x5c
    48da:	d100      	bne.n	48de <follow_path+0x92>
    48dc:	e142      	b.n	4b64 <follow_path+0x318>
    48de:	3602      	adds	r6, #2
    48e0:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    48e2:	4543      	cmp	r3, r8
    48e4:	d026      	beq.n	4934 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    48e6:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    48e8:	2101      	movs	r1, #1
    48ea:	4b97      	ldr	r3, [pc, #604]	; (4b48 <follow_path+0x2fc>)
    48ec:	4798      	blx	r3
    48ee:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    48f0:	d020      	beq.n	4934 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    48f2:	287f      	cmp	r0, #127	; 0x7f
    48f4:	d8e8      	bhi.n	48c8 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    48f6:	2822      	cmp	r0, #34	; 0x22
    48f8:	d100      	bne.n	48fc <follow_path+0xb0>
    48fa:	e0fd      	b.n	4af8 <follow_path+0x2ac>
    48fc:	232a      	movs	r3, #42	; 0x2a
    48fe:	4a93      	ldr	r2, [pc, #588]	; (4b4c <follow_path+0x300>)
    4900:	b29f      	uxth	r7, r3
    4902:	428f      	cmp	r7, r1
    4904:	d0de      	beq.n	48c4 <follow_path+0x78>
    4906:	3201      	adds	r2, #1
    4908:	7813      	ldrb	r3, [r2, #0]
    490a:	2b00      	cmp	r3, #0
    490c:	d1f8      	bne.n	4900 <follow_path+0xb4>
    490e:	e7db      	b.n	48c8 <follow_path+0x7c>
    4910:	002c      	movs	r4, r5
    4912:	465f      	mov	r7, fp
    4914:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4916:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4918:	2604      	movs	r6, #4
    491a:	e10b      	b.n	4b34 <follow_path+0x2e8>
		di--;
    491c:	3c01      	subs	r4, #1
    491e:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4920:	2c00      	cmp	r4, #0
    4922:	d100      	bne.n	4926 <follow_path+0xda>
    4924:	e0e8      	b.n	4af8 <follow_path+0x2ac>
		w = lfn[di-1];
    4926:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4928:	2a20      	cmp	r2, #32
    492a:	d0f7      	beq.n	491c <follow_path+0xd0>
    492c:	2a2e      	cmp	r2, #46	; 0x2e
    492e:	d0f5      	beq.n	491c <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4930:	2c00      	cmp	r4, #0
    4932:	d101      	bne.n	4938 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4934:	2006      	movs	r0, #6
	return res;
    4936:	e0e0      	b.n	4afa <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    4938:	0063      	lsls	r3, r4, #1
    493a:	4698      	mov	r8, r3
    493c:	2300      	movs	r3, #0
    493e:	4652      	mov	r2, sl
    4940:	4641      	mov	r1, r8
    4942:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    4944:	220b      	movs	r2, #11
    4946:	2120      	movs	r1, #32
    4948:	69b8      	ldr	r0, [r7, #24]
    494a:	4b81      	ldr	r3, [pc, #516]	; (4b50 <follow_path+0x304>)
    494c:	4798      	blx	r3
    494e:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4950:	2300      	movs	r3, #0
    4952:	e001      	b.n	4958 <follow_path+0x10c>
    4954:	3301      	adds	r3, #1
    4956:	3202      	adds	r2, #2
    4958:	8811      	ldrh	r1, [r2, #0]
    495a:	2920      	cmp	r1, #32
    495c:	d0fa      	beq.n	4954 <follow_path+0x108>
    495e:	292e      	cmp	r1, #46	; 0x2e
    4960:	d0f8      	beq.n	4954 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    4962:	2b00      	cmp	r3, #0
    4964:	d001      	beq.n	496a <follow_path+0x11e>
    4966:	2203      	movs	r2, #3
    4968:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    496a:	4652      	mov	r2, sl
    496c:	4442      	add	r2, r8
    496e:	3a02      	subs	r2, #2
    4970:	8812      	ldrh	r2, [r2, #0]
    4972:	2a2e      	cmp	r2, #46	; 0x2e
    4974:	d009      	beq.n	498a <follow_path+0x13e>
    4976:	4642      	mov	r2, r8
    4978:	3a04      	subs	r2, #4
    497a:	4452      	add	r2, sl
    497c:	3c01      	subs	r4, #1
    497e:	2c00      	cmp	r4, #0
    4980:	d003      	beq.n	498a <follow_path+0x13e>
    4982:	3a02      	subs	r2, #2
    4984:	8851      	ldrh	r1, [r2, #2]
    4986:	292e      	cmp	r1, #46	; 0x2e
    4988:	d1f8      	bne.n	497c <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    498a:	2208      	movs	r2, #8
    498c:	9201      	str	r2, [sp, #4]
    498e:	2200      	movs	r2, #0
    4990:	4693      	mov	fp, r2
    4992:	4691      	mov	r9, r2
    4994:	46a0      	mov	r8, r4
    4996:	e006      	b.n	49a6 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4998:	4544      	cmp	r4, r8
    499a:	d100      	bne.n	499e <follow_path+0x152>
    499c:	e0e6      	b.n	4b6c <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    499e:	2303      	movs	r3, #3
    49a0:	431e      	orrs	r6, r3
    49a2:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    49a4:	0023      	movs	r3, r4
    49a6:	1c5c      	adds	r4, r3, #1
    49a8:	005b      	lsls	r3, r3, #1
    49aa:	4652      	mov	r2, sl
    49ac:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    49ae:	2800      	cmp	r0, #0
    49b0:	d02c      	beq.n	4a0c <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    49b2:	2820      	cmp	r0, #32
    49b4:	d0f3      	beq.n	499e <follow_path+0x152>
    49b6:	282e      	cmp	r0, #46	; 0x2e
    49b8:	d0ee      	beq.n	4998 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    49ba:	9b01      	ldr	r3, [sp, #4]
    49bc:	459b      	cmp	fp, r3
    49be:	d219      	bcs.n	49f4 <follow_path+0x1a8>
    49c0:	4544      	cmp	r4, r8
    49c2:	d100      	bne.n	49c6 <follow_path+0x17a>
    49c4:	e0d2      	b.n	4b6c <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    49c6:	287f      	cmp	r0, #127	; 0x7f
    49c8:	d85e      	bhi.n	4a88 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    49ca:	282b      	cmp	r0, #43	; 0x2b
    49cc:	d06e      	beq.n	4aac <follow_path+0x260>
    49ce:	232c      	movs	r3, #44	; 0x2c
    49d0:	4a60      	ldr	r2, [pc, #384]	; (4b54 <follow_path+0x308>)
    49d2:	b299      	uxth	r1, r3
    49d4:	4281      	cmp	r1, r0
    49d6:	d067      	beq.n	4aa8 <follow_path+0x25c>
    49d8:	3201      	adds	r2, #1
    49da:	7813      	ldrb	r3, [r2, #0]
    49dc:	2b00      	cmp	r3, #0
    49de:	d1f8      	bne.n	49d2 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    49e0:	0003      	movs	r3, r0
    49e2:	3b41      	subs	r3, #65	; 0x41
    49e4:	b29b      	uxth	r3, r3
    49e6:	2b19      	cmp	r3, #25
    49e8:	d86c      	bhi.n	4ac4 <follow_path+0x278>
					b |= 2;
    49ea:	2302      	movs	r3, #2
    49ec:	464a      	mov	r2, r9
    49ee:	431a      	orrs	r2, r3
    49f0:	4691      	mov	r9, r2
    49f2:	e05f      	b.n	4ab4 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    49f4:	9b01      	ldr	r3, [sp, #4]
    49f6:	2b0b      	cmp	r3, #11
    49f8:	d03b      	beq.n	4a72 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    49fa:	4544      	cmp	r4, r8
    49fc:	d100      	bne.n	4a00 <follow_path+0x1b4>
    49fe:	e0b9      	b.n	4b74 <follow_path+0x328>
    4a00:	2303      	movs	r3, #3
    4a02:	431e      	orrs	r6, r3
    4a04:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    4a06:	4544      	cmp	r4, r8
    4a08:	d800      	bhi.n	4a0c <follow_path+0x1c0>
    4a0a:	e0b3      	b.n	4b74 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4a0c:	69bb      	ldr	r3, [r7, #24]
    4a0e:	781a      	ldrb	r2, [r3, #0]
    4a10:	2ae5      	cmp	r2, #229	; 0xe5
    4a12:	d036      	beq.n	4a82 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    4a14:	9b01      	ldr	r3, [sp, #4]
    4a16:	2b08      	cmp	r3, #8
    4a18:	d060      	beq.n	4adc <follow_path+0x290>
    4a1a:	230c      	movs	r3, #12
    4a1c:	464a      	mov	r2, r9
    4a1e:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    4a20:	2b0c      	cmp	r3, #12
    4a22:	d060      	beq.n	4ae6 <follow_path+0x29a>
    4a24:	43d2      	mvns	r2, r2
    4a26:	0792      	lsls	r2, r2, #30
    4a28:	d05d      	beq.n	4ae6 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    4a2a:	07b2      	lsls	r2, r6, #30
    4a2c:	d406      	bmi.n	4a3c <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4a2e:	2203      	movs	r2, #3
    4a30:	4649      	mov	r1, r9
    4a32:	400a      	ands	r2, r1
    4a34:	2a01      	cmp	r2, #1
    4a36:	d059      	beq.n	4aec <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4a38:	2b04      	cmp	r3, #4
    4a3a:	d05a      	beq.n	4af2 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    4a3c:	69bb      	ldr	r3, [r7, #24]
    4a3e:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    4a40:	0038      	movs	r0, r7
    4a42:	4b45      	ldr	r3, [pc, #276]	; (4b58 <follow_path+0x30c>)
    4a44:	4798      	blx	r3
			ns = *(dj->fn+NS);
    4a46:	69bb      	ldr	r3, [r7, #24]
    4a48:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    4a4a:	2800      	cmp	r0, #0
    4a4c:	d15c      	bne.n	4b08 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4a4e:	075b      	lsls	r3, r3, #29
    4a50:	d453      	bmi.n	4afa <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    4a52:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4a54:	7ad3      	ldrb	r3, [r2, #11]
    4a56:	06db      	lsls	r3, r3, #27
    4a58:	d55c      	bpl.n	4b14 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    4a5a:	7d51      	ldrb	r1, [r2, #21]
    4a5c:	0209      	lsls	r1, r1, #8
    4a5e:	7d13      	ldrb	r3, [r2, #20]
    4a60:	430b      	orrs	r3, r1
    4a62:	041b      	lsls	r3, r3, #16
    4a64:	7ed1      	ldrb	r1, [r2, #27]
    4a66:	0209      	lsls	r1, r1, #8
    4a68:	7e92      	ldrb	r2, [r2, #26]
    4a6a:	430a      	orrs	r2, r1
    4a6c:	4313      	orrs	r3, r2
    4a6e:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4a70:	e70b      	b.n	488a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    4a72:	2303      	movs	r3, #3
    4a74:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4a76:	69bb      	ldr	r3, [r7, #24]
    4a78:	781a      	ldrb	r2, [r3, #0]
    4a7a:	2ae5      	cmp	r2, #229	; 0xe5
    4a7c:	d1cd      	bne.n	4a1a <follow_path+0x1ce>
    4a7e:	220b      	movs	r2, #11
    4a80:	9201      	str	r2, [sp, #4]
    4a82:	2205      	movs	r2, #5
    4a84:	701a      	strb	r2, [r3, #0]
    4a86:	e7c5      	b.n	4a14 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4a88:	2100      	movs	r1, #0
    4a8a:	4b2f      	ldr	r3, [pc, #188]	; (4b48 <follow_path+0x2fc>)
    4a8c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4a8e:	2800      	cmp	r0, #0
    4a90:	d100      	bne.n	4a94 <follow_path+0x248>
    4a92:	e079      	b.n	4b88 <follow_path+0x33c>
    4a94:	4b31      	ldr	r3, [pc, #196]	; (4b5c <follow_path+0x310>)
    4a96:	469c      	mov	ip, r3
    4a98:	4460      	add	r0, ip
    4a9a:	3880      	subs	r0, #128	; 0x80
    4a9c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4a9e:	2302      	movs	r3, #2
    4aa0:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4aa2:	2800      	cmp	r0, #0
    4aa4:	d002      	beq.n	4aac <follow_path+0x260>
    4aa6:	e790      	b.n	49ca <follow_path+0x17e>
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d099      	beq.n	49e0 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4aac:	2303      	movs	r3, #3
    4aae:	431e      	orrs	r6, r3
    4ab0:	b2f6      	uxtb	r6, r6
    4ab2:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4ab4:	69bb      	ldr	r3, [r7, #24]
    4ab6:	465a      	mov	r2, fp
    4ab8:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    4aba:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    4abc:	2201      	movs	r2, #1
    4abe:	4694      	mov	ip, r2
    4ac0:	44e3      	add	fp, ip
    4ac2:	e770      	b.n	49a6 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    4ac4:	0003      	movs	r3, r0
    4ac6:	3b61      	subs	r3, #97	; 0x61
    4ac8:	b29b      	uxth	r3, r3
    4aca:	2b19      	cmp	r3, #25
    4acc:	d8f2      	bhi.n	4ab4 <follow_path+0x268>
						b |= 1; w -= 0x20;
    4ace:	2301      	movs	r3, #1
    4ad0:	464a      	mov	r2, r9
    4ad2:	431a      	orrs	r2, r3
    4ad4:	4691      	mov	r9, r2
    4ad6:	3820      	subs	r0, #32
    4ad8:	b280      	uxth	r0, r0
    4ada:	e7eb      	b.n	4ab4 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    4adc:	464b      	mov	r3, r9
    4ade:	009b      	lsls	r3, r3, #2
    4ae0:	b2db      	uxtb	r3, r3
    4ae2:	4699      	mov	r9, r3
    4ae4:	e799      	b.n	4a1a <follow_path+0x1ce>
		cf |= NS_LFN;
    4ae6:	2202      	movs	r2, #2
    4ae8:	4316      	orrs	r6, r2
    4aea:	e79e      	b.n	4a2a <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4aec:	320f      	adds	r2, #15
    4aee:	4316      	orrs	r6, r2
    4af0:	e7a2      	b.n	4a38 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4af2:	3304      	adds	r3, #4
    4af4:	431e      	orrs	r6, r3
    4af6:	e7a1      	b.n	4a3c <follow_path+0x1f0>
    4af8:	2006      	movs	r0, #6
}
    4afa:	b003      	add	sp, #12
    4afc:	bc3c      	pop	{r2, r3, r4, r5}
    4afe:	4690      	mov	r8, r2
    4b00:	4699      	mov	r9, r3
    4b02:	46a2      	mov	sl, r4
    4b04:	46ab      	mov	fp, r5
    4b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    4b08:	2804      	cmp	r0, #4
    4b0a:	d1f6      	bne.n	4afa <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4b0c:	075b      	lsls	r3, r3, #29
    4b0e:	d4f4      	bmi.n	4afa <follow_path+0x2ae>
    4b10:	3001      	adds	r0, #1
    4b12:	e7f2      	b.n	4afa <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    4b14:	2005      	movs	r0, #5
    4b16:	e7f0      	b.n	4afa <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    4b18:	2301      	movs	r3, #1
	si = di = 0;
    4b1a:	2400      	movs	r4, #0
    4b1c:	e6fb      	b.n	4916 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    4b1e:	2301      	movs	r3, #1
	si = di = 0;
    4b20:	2400      	movs	r4, #0
    4b22:	e005      	b.n	4b30 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    4b24:	2301      	movs	r3, #1
	si = di = 0;
    4b26:	2400      	movs	r4, #0
    4b28:	e002      	b.n	4b30 <follow_path+0x2e4>
    4b2a:	002c      	movs	r4, r5
    4b2c:	465f      	mov	r7, fp
    4b2e:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4b30:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4b32:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    4b34:	2c00      	cmp	r4, #0
    4b36:	d0df      	beq.n	4af8 <follow_path+0x2ac>
    4b38:	4b09      	ldr	r3, [pc, #36]	; (4b60 <follow_path+0x314>)
    4b3a:	18e3      	adds	r3, r4, r3
    4b3c:	005b      	lsls	r3, r3, #1
    4b3e:	4453      	add	r3, sl
    4b40:	e6f1      	b.n	4926 <follow_path+0xda>
    4b42:	46c0      	nop			; (mov r8, r8)
    4b44:	00003e9d 	.word	0x00003e9d
    4b48:	00004ff5 	.word	0x00004ff5
    4b4c:	00006805 	.word	0x00006805
    4b50:	00003835 	.word	0x00003835
    4b54:	00006811 	.word	0x00006811
    4b58:	000042dd 	.word	0x000042dd
    4b5c:	00006784 	.word	0x00006784
    4b60:	7fffffff 	.word	0x7fffffff
    4b64:	002c      	movs	r4, r5
    4b66:	465f      	mov	r7, fp
    4b68:	464d      	mov	r5, r9
    4b6a:	e7e1      	b.n	4b30 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4b6c:	9b01      	ldr	r3, [sp, #4]
    4b6e:	2b0b      	cmp	r3, #11
    4b70:	d100      	bne.n	4b74 <follow_path+0x328>
    4b72:	e77e      	b.n	4a72 <follow_path+0x226>
			b <<= 2; continue;
    4b74:	464b      	mov	r3, r9
    4b76:	009b      	lsls	r3, r3, #2
    4b78:	b2db      	uxtb	r3, r3
    4b7a:	4699      	mov	r9, r3
    4b7c:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4b7e:	220b      	movs	r2, #11
    4b80:	9201      	str	r2, [sp, #4]
    4b82:	3a03      	subs	r2, #3
    4b84:	4693      	mov	fp, r2
    4b86:	e70e      	b.n	49a6 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4b88:	2302      	movs	r3, #2
    4b8a:	431e      	orrs	r6, r3
    4b8c:	e78e      	b.n	4aac <follow_path+0x260>
    4b8e:	46c0      	nop			; (mov r8, r8)

00004b90 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4b90:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4b92:	2807      	cmp	r0, #7
    4b94:	d901      	bls.n	4b9a <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    4b96:	0018      	movs	r0, r3
    4b98:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4b9a:	0083      	lsls	r3, r0, #2
    4b9c:	4a07      	ldr	r2, [pc, #28]	; (4bbc <f_mount+0x2c>)
    4b9e:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	d001      	beq.n	4ba8 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    4ba4:	2200      	movs	r2, #0
    4ba6:	701a      	strb	r2, [r3, #0]
	if (fs) {
    4ba8:	2900      	cmp	r1, #0
    4baa:	d001      	beq.n	4bb0 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    4bac:	2300      	movs	r3, #0
    4bae:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    4bb0:	0080      	lsls	r0, r0, #2
    4bb2:	4b02      	ldr	r3, [pc, #8]	; (4bbc <f_mount+0x2c>)
    4bb4:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    4bb6:	2300      	movs	r3, #0
    4bb8:	e7ed      	b.n	4b96 <f_mount+0x6>
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	2000016c 	.word	0x2000016c

00004bc0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bc2:	46c6      	mov	lr, r8
    4bc4:	b500      	push	{lr}
    4bc6:	4c59      	ldr	r4, [pc, #356]	; (4d2c <f_open+0x16c>)
    4bc8:	44a5      	add	sp, r4
    4bca:	0005      	movs	r5, r0
    4bcc:	9101      	str	r1, [sp, #4]
    4bce:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4bd0:	2300      	movs	r3, #0
    4bd2:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4bd4:	261f      	movs	r6, #31
    4bd6:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4bd8:	221e      	movs	r2, #30
    4bda:	403a      	ands	r2, r7
    4bdc:	a985      	add	r1, sp, #532	; 0x214
    4bde:	a801      	add	r0, sp, #4
    4be0:	4b53      	ldr	r3, [pc, #332]	; (4d30 <f_open+0x170>)
    4be2:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4be4:	ab82      	add	r3, sp, #520	; 0x208
    4be6:	938b      	str	r3, [sp, #556]	; 0x22c
    4be8:	ab02      	add	r3, sp, #8
    4bea:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    4bec:	2800      	cmp	r0, #0
    4bee:	d006      	beq.n	4bfe <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    4bf0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4bf2:	231c      	movs	r3, #28
    4bf4:	423b      	tst	r3, r7
    4bf6:	d145      	bne.n	4c84 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4bf8:	2800      	cmp	r0, #0
    4bfa:	d13d      	bne.n	4c78 <f_open+0xb8>
    4bfc:	e00c      	b.n	4c18 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    4bfe:	9901      	ldr	r1, [sp, #4]
    4c00:	a885      	add	r0, sp, #532	; 0x214
    4c02:	4b4c      	ldr	r3, [pc, #304]	; (4d34 <f_open+0x174>)
    4c04:	4798      	blx	r3
	dir = dj.dir;
    4c06:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4c08:	2800      	cmp	r0, #0
    4c0a:	d1f2      	bne.n	4bf2 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4c0c:	2c00      	cmp	r4, #0
    4c0e:	d100      	bne.n	4c12 <f_open+0x52>
    4c10:	e086      	b.n	4d20 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4c12:	231c      	movs	r3, #28
    4c14:	423b      	tst	r3, r7
    4c16:	d146      	bne.n	4ca6 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4c18:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4c1a:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4c1c:	06da      	lsls	r2, r3, #27
    4c1e:	d42b      	bmi.n	4c78 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4c20:	07ba      	lsls	r2, r7, #30
    4c22:	d502      	bpl.n	4c2a <f_open+0x6a>
					res = FR_DENIED;
    4c24:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4c26:	07db      	lsls	r3, r3, #31
    4c28:	d426      	bmi.n	4c78 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4c2a:	073b      	lsls	r3, r7, #28
    4c2c:	d501      	bpl.n	4c32 <f_open+0x72>
			mode |= FA__WRITTEN;
    4c2e:	2320      	movs	r3, #32
    4c30:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4c32:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c36:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4c38:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4c3a:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4c3c:	7d62      	ldrb	r2, [r4, #21]
    4c3e:	0212      	lsls	r2, r2, #8
    4c40:	7d23      	ldrb	r3, [r4, #20]
    4c42:	4313      	orrs	r3, r2
    4c44:	041b      	lsls	r3, r3, #16
    4c46:	7ee1      	ldrb	r1, [r4, #27]
    4c48:	0209      	lsls	r1, r1, #8
    4c4a:	7ea2      	ldrb	r2, [r4, #26]
    4c4c:	430a      	orrs	r2, r1
    4c4e:	4313      	orrs	r3, r2
    4c50:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4c52:	7fe3      	ldrb	r3, [r4, #31]
    4c54:	061b      	lsls	r3, r3, #24
    4c56:	7fa2      	ldrb	r2, [r4, #30]
    4c58:	0412      	lsls	r2, r2, #16
    4c5a:	4313      	orrs	r3, r2
    4c5c:	7f22      	ldrb	r2, [r4, #28]
    4c5e:	4313      	orrs	r3, r2
    4c60:	7f62      	ldrb	r2, [r4, #29]
    4c62:	0212      	lsls	r2, r2, #8
    4c64:	4313      	orrs	r3, r2
    4c66:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4c68:	2300      	movs	r3, #0
    4c6a:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4c6c:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4c6e:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4c70:	602b      	str	r3, [r5, #0]
    4c72:	88db      	ldrh	r3, [r3, #6]
    4c74:	80ab      	strh	r3, [r5, #4]
    4c76:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4c78:	238e      	movs	r3, #142	; 0x8e
    4c7a:	009b      	lsls	r3, r3, #2
    4c7c:	449d      	add	sp, r3
    4c7e:	bc04      	pop	{r2}
    4c80:	4690      	mov	r8, r2
    4c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4c84:	2804      	cmp	r0, #4
    4c86:	d005      	beq.n	4c94 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4c88:	2308      	movs	r3, #8
    4c8a:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4c8c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4c8e:	2800      	cmp	r0, #0
    4c90:	d0d3      	beq.n	4c3a <f_open+0x7a>
    4c92:	e7f1      	b.n	4c78 <f_open+0xb8>
				res = dir_register(&dj);
    4c94:	a885      	add	r0, sp, #532	; 0x214
    4c96:	4b28      	ldr	r3, [pc, #160]	; (4d38 <f_open+0x178>)
    4c98:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4c9a:	2308      	movs	r3, #8
    4c9c:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4c9e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4ca0:	2800      	cmp	r0, #0
    4ca2:	d008      	beq.n	4cb6 <f_open+0xf6>
    4ca4:	e7e8      	b.n	4c78 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4ca6:	7ae3      	ldrb	r3, [r4, #11]
    4ca8:	2211      	movs	r2, #17
				res = FR_DENIED;
    4caa:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4cac:	421a      	tst	r2, r3
    4cae:	d1e3      	bne.n	4c78 <f_open+0xb8>
					res = FR_EXIST;
    4cb0:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4cb2:	077b      	lsls	r3, r7, #29
    4cb4:	d4e0      	bmi.n	4c78 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4cb6:	0733      	lsls	r3, r6, #28
    4cb8:	d5bb      	bpl.n	4c32 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    4cba:	4b20      	ldr	r3, [pc, #128]	; (4d3c <f_open+0x17c>)
    4cbc:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    4cbe:	73a0      	strb	r0, [r4, #14]
    4cc0:	0a03      	lsrs	r3, r0, #8
    4cc2:	73e3      	strb	r3, [r4, #15]
    4cc4:	0c03      	lsrs	r3, r0, #16
    4cc6:	7423      	strb	r3, [r4, #16]
    4cc8:	0e00      	lsrs	r0, r0, #24
    4cca:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    4ccc:	2300      	movs	r3, #0
    4cce:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    4cd0:	7723      	strb	r3, [r4, #28]
    4cd2:	7763      	strb	r3, [r4, #29]
    4cd4:	77a3      	strb	r3, [r4, #30]
    4cd6:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    4cd8:	7d62      	ldrb	r2, [r4, #21]
    4cda:	0212      	lsls	r2, r2, #8
    4cdc:	7d27      	ldrb	r7, [r4, #20]
    4cde:	4317      	orrs	r7, r2
    4ce0:	043f      	lsls	r7, r7, #16
    4ce2:	7ee1      	ldrb	r1, [r4, #27]
    4ce4:	0209      	lsls	r1, r1, #8
    4ce6:	7ea2      	ldrb	r2, [r4, #26]
    4ce8:	430a      	orrs	r2, r1
    4cea:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4cec:	76a3      	strb	r3, [r4, #26]
    4cee:	76e3      	strb	r3, [r4, #27]
    4cf0:	7523      	strb	r3, [r4, #20]
    4cf2:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    4cf4:	9885      	ldr	r0, [sp, #532]	; 0x214
    4cf6:	3301      	adds	r3, #1
    4cf8:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    4cfa:	2f00      	cmp	r7, #0
    4cfc:	d097      	beq.n	4c2e <f_open+0x6e>
				dw = dj.fs->winsect;
    4cfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4d00:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    4d02:	0039      	movs	r1, r7
    4d04:	4b0e      	ldr	r3, [pc, #56]	; (4d40 <f_open+0x180>)
    4d06:	4798      	blx	r3
				if (res == FR_OK) {
    4d08:	2800      	cmp	r0, #0
    4d0a:	d1b5      	bne.n	4c78 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4d0c:	9885      	ldr	r0, [sp, #532]	; 0x214
    4d0e:	3f01      	subs	r7, #1
    4d10:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    4d12:	4641      	mov	r1, r8
    4d14:	4b0b      	ldr	r3, [pc, #44]	; (4d44 <f_open+0x184>)
    4d16:	4798      	blx	r3
	if (res == FR_OK) {
    4d18:	2800      	cmp	r0, #0
    4d1a:	d100      	bne.n	4d1e <f_open+0x15e>
    4d1c:	e787      	b.n	4c2e <f_open+0x6e>
    4d1e:	e7ab      	b.n	4c78 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4d20:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    4d22:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4d24:	423b      	tst	r3, r7
    4d26:	d0b2      	beq.n	4c8e <f_open+0xce>
			res = FR_INVALID_NAME;
    4d28:	2006      	movs	r0, #6
    4d2a:	e7ad      	b.n	4c88 <f_open+0xc8>
    4d2c:	fffffdc8 	.word	0xfffffdc8
    4d30:	00003951 	.word	0x00003951
    4d34:	0000484d 	.word	0x0000484d
    4d38:	00004475 	.word	0x00004475
    4d3c:	000037d1 	.word	0x000037d1
    4d40:	00004141 	.word	0x00004141
    4d44:	00003d01 	.word	0x00003d01

00004d48 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    4d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d4a:	46de      	mov	lr, fp
    4d4c:	4657      	mov	r7, sl
    4d4e:	464e      	mov	r6, r9
    4d50:	4645      	mov	r5, r8
    4d52:	b5e0      	push	{r5, r6, r7, lr}
    4d54:	b083      	sub	sp, #12
    4d56:	0004      	movs	r4, r0
    4d58:	000f      	movs	r7, r1
    4d5a:	0015      	movs	r5, r2
    4d5c:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    4d5e:	2300      	movs	r3, #0
    4d60:	464a      	mov	r2, r9
    4d62:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    4d64:	8881      	ldrh	r1, [r0, #4]
    4d66:	6800      	ldr	r0, [r0, #0]
    4d68:	4b5e      	ldr	r3, [pc, #376]	; (4ee4 <f_read+0x19c>)
    4d6a:	4798      	blx	r3
    4d6c:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4d6e:	2800      	cmp	r0, #0
    4d70:	d000      	beq.n	4d74 <f_read+0x2c>
    4d72:	e0af      	b.n	4ed4 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    4d74:	79a3      	ldrb	r3, [r4, #6]
    4d76:	b25a      	sxtb	r2, r3
    4d78:	2a00      	cmp	r2, #0
    4d7a:	da00      	bge.n	4d7e <f_read+0x36>
    4d7c:	e0a8      	b.n	4ed0 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    4d7e:	07db      	lsls	r3, r3, #31
    4d80:	d402      	bmi.n	4d88 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    4d82:	2307      	movs	r3, #7
    4d84:	9300      	str	r3, [sp, #0]
    4d86:	e0a5      	b.n	4ed4 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    4d88:	68e3      	ldr	r3, [r4, #12]
    4d8a:	68a2      	ldr	r2, [r4, #8]
    4d8c:	1a9e      	subs	r6, r3, r2
    4d8e:	42ae      	cmp	r6, r5
    4d90:	d900      	bls.n	4d94 <f_read+0x4c>
    4d92:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    4d94:	2e00      	cmp	r6, #0
    4d96:	d153      	bne.n	4e40 <f_read+0xf8>
    4d98:	e09c      	b.n	4ed4 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    4d9a:	6961      	ldr	r1, [r4, #20]
    4d9c:	4b52      	ldr	r3, [pc, #328]	; (4ee8 <f_read+0x1a0>)
    4d9e:	4798      	blx	r3
    4da0:	e05c      	b.n	4e5c <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4da2:	79a2      	ldrb	r2, [r4, #6]
    4da4:	2380      	movs	r3, #128	; 0x80
    4da6:	425b      	negs	r3, r3
    4da8:	4313      	orrs	r3, r2
    4daa:	71a3      	strb	r3, [r4, #6]
    4dac:	2302      	movs	r3, #2
    4dae:	9300      	str	r3, [sp, #0]
    4db0:	e090      	b.n	4ed4 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4db2:	79a2      	ldrb	r2, [r4, #6]
    4db4:	2380      	movs	r3, #128	; 0x80
    4db6:	425b      	negs	r3, r3
    4db8:	4313      	orrs	r3, r2
    4dba:	71a3      	strb	r3, [r4, #6]
    4dbc:	2301      	movs	r3, #1
    4dbe:	9300      	str	r3, [sp, #0]
    4dc0:	e088      	b.n	4ed4 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4dc2:	79a2      	ldrb	r2, [r4, #6]
    4dc4:	2380      	movs	r3, #128	; 0x80
    4dc6:	425b      	negs	r3, r3
    4dc8:	4313      	orrs	r3, r2
    4dca:	71a3      	strb	r3, [r4, #6]
    4dcc:	2302      	movs	r3, #2
    4dce:	9300      	str	r3, [sp, #0]
    4dd0:	e080      	b.n	4ed4 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    4dd2:	79a2      	ldrb	r2, [r4, #6]
    4dd4:	2380      	movs	r3, #128	; 0x80
    4dd6:	425b      	negs	r3, r3
    4dd8:	4313      	orrs	r3, r2
    4dda:	71a3      	strb	r3, [r4, #6]
    4ddc:	2301      	movs	r3, #1
    4dde:	9300      	str	r3, [sp, #0]
    4de0:	e078      	b.n	4ed4 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    4de2:	3130      	adds	r1, #48	; 0x30
    4de4:	0240      	lsls	r0, r0, #9
    4de6:	1838      	adds	r0, r7, r0
    4de8:	2280      	movs	r2, #128	; 0x80
    4dea:	0092      	lsls	r2, r2, #2
    4dec:	4b3f      	ldr	r3, [pc, #252]	; (4eec <f_read+0x1a4>)
    4dee:	4798      	blx	r3
    4df0:	e063      	b.n	4eba <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    4df2:	4643      	mov	r3, r8
    4df4:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    4df6:	68a3      	ldr	r3, [r4, #8]
    4df8:	05dd      	lsls	r5, r3, #23
    4dfa:	0ded      	lsrs	r5, r5, #23
    4dfc:	2380      	movs	r3, #128	; 0x80
    4dfe:	009b      	lsls	r3, r3, #2
    4e00:	1b5d      	subs	r5, r3, r5
    4e02:	42b5      	cmp	r5, r6
    4e04:	d900      	bls.n	4e08 <f_read+0xc0>
    4e06:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    4e08:	69a1      	ldr	r1, [r4, #24]
    4e0a:	6820      	ldr	r0, [r4, #0]
    4e0c:	4b38      	ldr	r3, [pc, #224]	; (4ef0 <f_read+0x1a8>)
    4e0e:	4798      	blx	r3
    4e10:	2800      	cmp	r0, #0
    4e12:	d155      	bne.n	4ec0 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    4e14:	68a3      	ldr	r3, [r4, #8]
    4e16:	05d9      	lsls	r1, r3, #23
    4e18:	0dc9      	lsrs	r1, r1, #23
    4e1a:	3130      	adds	r1, #48	; 0x30
    4e1c:	6823      	ldr	r3, [r4, #0]
    4e1e:	469c      	mov	ip, r3
    4e20:	4461      	add	r1, ip
    4e22:	002a      	movs	r2, r5
    4e24:	0038      	movs	r0, r7
    4e26:	4b31      	ldr	r3, [pc, #196]	; (4eec <f_read+0x1a4>)
    4e28:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    4e2a:	197f      	adds	r7, r7, r5
    4e2c:	68a3      	ldr	r3, [r4, #8]
    4e2e:	195b      	adds	r3, r3, r5
    4e30:	60a3      	str	r3, [r4, #8]
    4e32:	464b      	mov	r3, r9
    4e34:	681b      	ldr	r3, [r3, #0]
    4e36:	195b      	adds	r3, r3, r5
    4e38:	464a      	mov	r2, r9
    4e3a:	6013      	str	r3, [r2, #0]
    4e3c:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    4e3e:	d049      	beq.n	4ed4 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    4e40:	68a3      	ldr	r3, [r4, #8]
    4e42:	05da      	lsls	r2, r3, #23
    4e44:	d1d7      	bne.n	4df6 <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    4e46:	6820      	ldr	r0, [r4, #0]
    4e48:	7882      	ldrb	r2, [r0, #2]
    4e4a:	3a01      	subs	r2, #1
    4e4c:	0a5d      	lsrs	r5, r3, #9
    4e4e:	4015      	ands	r5, r2
    4e50:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    4e52:	2d00      	cmp	r5, #0
    4e54:	d107      	bne.n	4e66 <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    4e56:	2b00      	cmp	r3, #0
    4e58:	d19f      	bne.n	4d9a <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    4e5a:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4e5c:	2801      	cmp	r0, #1
    4e5e:	d9a0      	bls.n	4da2 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4e60:	1c43      	adds	r3, r0, #1
    4e62:	d0a6      	beq.n	4db2 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    4e64:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4e66:	6823      	ldr	r3, [r4, #0]
    4e68:	469a      	mov	sl, r3
    4e6a:	6961      	ldr	r1, [r4, #20]
    4e6c:	0018      	movs	r0, r3
    4e6e:	4b21      	ldr	r3, [pc, #132]	; (4ef4 <f_read+0x1ac>)
    4e70:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4e72:	2800      	cmp	r0, #0
    4e74:	d0a5      	beq.n	4dc2 <f_read+0x7a>
			sect += csect;
    4e76:	4680      	mov	r8, r0
    4e78:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    4e7a:	0a73      	lsrs	r3, r6, #9
    4e7c:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    4e7e:	d0b8      	beq.n	4df2 <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    4e80:	4653      	mov	r3, sl
    4e82:	789b      	ldrb	r3, [r3, #2]
    4e84:	465a      	mov	r2, fp
    4e86:	18aa      	adds	r2, r5, r2
    4e88:	429a      	cmp	r2, r3
    4e8a:	d901      	bls.n	4e90 <f_read+0x148>
					cc = fp->fs->csize - csect;
    4e8c:	1b5b      	subs	r3, r3, r5
    4e8e:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    4e90:	465b      	mov	r3, fp
    4e92:	466a      	mov	r2, sp
    4e94:	71d3      	strb	r3, [r2, #7]
    4e96:	79d3      	ldrb	r3, [r2, #7]
    4e98:	4652      	mov	r2, sl
    4e9a:	7850      	ldrb	r0, [r2, #1]
    4e9c:	4642      	mov	r2, r8
    4e9e:	0039      	movs	r1, r7
    4ea0:	4d15      	ldr	r5, [pc, #84]	; (4ef8 <f_read+0x1b0>)
    4ea2:	47a8      	blx	r5
    4ea4:	2800      	cmp	r0, #0
    4ea6:	d194      	bne.n	4dd2 <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    4ea8:	6821      	ldr	r1, [r4, #0]
    4eaa:	790b      	ldrb	r3, [r1, #4]
    4eac:	2b00      	cmp	r3, #0
    4eae:	d004      	beq.n	4eba <f_read+0x172>
    4eb0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    4eb2:	4642      	mov	r2, r8
    4eb4:	1a98      	subs	r0, r3, r2
    4eb6:	4583      	cmp	fp, r0
    4eb8:	d893      	bhi.n	4de2 <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    4eba:	465b      	mov	r3, fp
    4ebc:	025d      	lsls	r5, r3, #9
				continue;
    4ebe:	e7b4      	b.n	4e2a <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    4ec0:	79a2      	ldrb	r2, [r4, #6]
    4ec2:	2380      	movs	r3, #128	; 0x80
    4ec4:	425b      	negs	r3, r3
    4ec6:	4313      	orrs	r3, r2
    4ec8:	71a3      	strb	r3, [r4, #6]
    4eca:	2301      	movs	r3, #1
    4ecc:	9300      	str	r3, [sp, #0]
    4ece:	e001      	b.n	4ed4 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    4ed0:	2302      	movs	r3, #2
    4ed2:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    4ed4:	9800      	ldr	r0, [sp, #0]
    4ed6:	b003      	add	sp, #12
    4ed8:	bc3c      	pop	{r2, r3, r4, r5}
    4eda:	4690      	mov	r8, r2
    4edc:	4699      	mov	r9, r3
    4ede:	46a2      	mov	sl, r4
    4ee0:	46ab      	mov	fp, r5
    4ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ee4:	0000387d 	.word	0x0000387d
    4ee8:	00003da1 	.word	0x00003da1
    4eec:	00003821 	.word	0x00003821
    4ef0:	00003d01 	.word	0x00003d01
    4ef4:	00003847 	.word	0x00003847
    4ef8:	0000365d 	.word	0x0000365d

00004efc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    4efc:	b570      	push	{r4, r5, r6, lr}
    4efe:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4f00:	8881      	ldrh	r1, [r0, #4]
    4f02:	6800      	ldr	r0, [r0, #0]
    4f04:	4b1c      	ldr	r3, [pc, #112]	; (4f78 <f_sync+0x7c>)
    4f06:	4798      	blx	r3
	if (res == FR_OK) {
    4f08:	2800      	cmp	r0, #0
    4f0a:	d102      	bne.n	4f12 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    4f0c:	79a3      	ldrb	r3, [r4, #6]
    4f0e:	069b      	lsls	r3, r3, #26
    4f10:	d400      	bmi.n	4f14 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    4f12:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    4f14:	69e1      	ldr	r1, [r4, #28]
    4f16:	6820      	ldr	r0, [r4, #0]
    4f18:	4b18      	ldr	r3, [pc, #96]	; (4f7c <f_sync+0x80>)
    4f1a:	4798      	blx	r3
			if (res == FR_OK) {
    4f1c:	2800      	cmp	r0, #0
    4f1e:	d1f8      	bne.n	4f12 <f_sync+0x16>
				dir = fp->dir_ptr;
    4f20:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    4f22:	7aeb      	ldrb	r3, [r5, #11]
    4f24:	2220      	movs	r2, #32
    4f26:	4313      	orrs	r3, r2
    4f28:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    4f2a:	7b23      	ldrb	r3, [r4, #12]
    4f2c:	772b      	strb	r3, [r5, #28]
    4f2e:	89a3      	ldrh	r3, [r4, #12]
    4f30:	0a1b      	lsrs	r3, r3, #8
    4f32:	776b      	strb	r3, [r5, #29]
    4f34:	89e3      	ldrh	r3, [r4, #14]
    4f36:	77ab      	strb	r3, [r5, #30]
    4f38:	7be3      	ldrb	r3, [r4, #15]
    4f3a:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    4f3c:	7c23      	ldrb	r3, [r4, #16]
    4f3e:	76ab      	strb	r3, [r5, #26]
    4f40:	8a23      	ldrh	r3, [r4, #16]
    4f42:	0a1b      	lsrs	r3, r3, #8
    4f44:	76eb      	strb	r3, [r5, #27]
    4f46:	8a63      	ldrh	r3, [r4, #18]
    4f48:	752b      	strb	r3, [r5, #20]
    4f4a:	8a63      	ldrh	r3, [r4, #18]
    4f4c:	0a1b      	lsrs	r3, r3, #8
    4f4e:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    4f50:	4b0b      	ldr	r3, [pc, #44]	; (4f80 <f_sync+0x84>)
    4f52:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    4f54:	75a8      	strb	r0, [r5, #22]
    4f56:	0a03      	lsrs	r3, r0, #8
    4f58:	75eb      	strb	r3, [r5, #23]
    4f5a:	0c03      	lsrs	r3, r0, #16
    4f5c:	762b      	strb	r3, [r5, #24]
    4f5e:	0e00      	lsrs	r0, r0, #24
    4f60:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    4f62:	79a3      	ldrb	r3, [r4, #6]
    4f64:	2220      	movs	r2, #32
    4f66:	4393      	bics	r3, r2
    4f68:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    4f6a:	2301      	movs	r3, #1
    4f6c:	6822      	ldr	r2, [r4, #0]
    4f6e:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    4f70:	6820      	ldr	r0, [r4, #0]
    4f72:	4b04      	ldr	r3, [pc, #16]	; (4f84 <f_sync+0x88>)
    4f74:	4798      	blx	r3
    4f76:	e7cc      	b.n	4f12 <f_sync+0x16>
    4f78:	0000387d 	.word	0x0000387d
    4f7c:	00003d01 	.word	0x00003d01
    4f80:	000037d1 	.word	0x000037d1
    4f84:	00004759 	.word	0x00004759

00004f88 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    4f88:	b510      	push	{r4, lr}
    4f8a:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    4f8c:	4b03      	ldr	r3, [pc, #12]	; (4f9c <f_close+0x14>)
    4f8e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    4f90:	2800      	cmp	r0, #0
    4f92:	d101      	bne.n	4f98 <f_close+0x10>
    4f94:	2300      	movs	r3, #0
    4f96:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    4f98:	bd10      	pop	{r4, pc}
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	00004efd 	.word	0x00004efd

00004fa0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    4fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fa2:	46c6      	mov	lr, r8
    4fa4:	b500      	push	{lr}
    4fa6:	b084      	sub	sp, #16
    4fa8:	0007      	movs	r7, r0
    4faa:	9201      	str	r2, [sp, #4]
	int n = 0;
	TCHAR c, *p = buff;
    4fac:	0005      	movs	r5, r0
	int n = 0;
    4fae:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    4fb0:	1e4b      	subs	r3, r1, #1
    4fb2:	4698      	mov	r8, r3
		f_read(fil, s, 1, &rc);
    4fb4:	4e0e      	ldr	r6, [pc, #56]	; (4ff0 <f_gets+0x50>)
	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    4fb6:	4544      	cmp	r4, r8
    4fb8:	da0e      	bge.n	4fd8 <f_gets+0x38>
		f_read(fil, s, 1, &rc);
    4fba:	ab02      	add	r3, sp, #8
    4fbc:	2201      	movs	r2, #1
    4fbe:	a903      	add	r1, sp, #12
    4fc0:	9801      	ldr	r0, [sp, #4]
    4fc2:	47b0      	blx	r6
		if (rc != 1) break;			/* Break on EOF or error */
    4fc4:	9b02      	ldr	r3, [sp, #8]
    4fc6:	2b01      	cmp	r3, #1
    4fc8:	d106      	bne.n	4fd8 <f_gets+0x38>
		c = s[0];
    4fca:	ab03      	add	r3, sp, #12
    4fcc:	781b      	ldrb	r3, [r3, #0]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
    4fce:	3501      	adds	r5, #1
    4fd0:	553b      	strb	r3, [r7, r4]
		n++;
    4fd2:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
    4fd4:	2b0a      	cmp	r3, #10
    4fd6:	d1ee      	bne.n	4fb6 <f_gets+0x16>
	}
	*p = 0;
    4fd8:	2300      	movs	r3, #0
    4fda:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    4fdc:	1e63      	subs	r3, r4, #1
    4fde:	419c      	sbcs	r4, r3
    4fe0:	4264      	negs	r4, r4
    4fe2:	4027      	ands	r7, r4
}
    4fe4:	0038      	movs	r0, r7
    4fe6:	b004      	add	sp, #16
    4fe8:	bc04      	pop	{r2}
    4fea:	4690      	mov	r8, r2
    4fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fee:	46c0      	nop			; (mov r8, r8)
    4ff0:	00004d49 	.word	0x00004d49

00004ff4 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    4ff4:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    4ff6:	287f      	cmp	r0, #127	; 0x7f
    4ff8:	d911      	bls.n	501e <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    4ffa:	2900      	cmp	r1, #0
    4ffc:	d111      	bne.n	5022 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    4ffe:	28c7      	cmp	r0, #199	; 0xc7
    5000:	d017      	beq.n	5032 <ff_convert+0x3e>
    5002:	4a0d      	ldr	r2, [pc, #52]	; (5038 <ff_convert+0x44>)
    5004:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    5006:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5008:	8811      	ldrh	r1, [r2, #0]
    500a:	4281      	cmp	r1, r0
    500c:	d004      	beq.n	5018 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    500e:	3301      	adds	r3, #1
    5010:	b29b      	uxth	r3, r3
    5012:	3202      	adds	r2, #2
    5014:	2b80      	cmp	r3, #128	; 0x80
    5016:	d1f7      	bne.n	5008 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5018:	3380      	adds	r3, #128	; 0x80
    501a:	20ff      	movs	r0, #255	; 0xff
    501c:	4003      	ands	r3, r0
		}
	}

	return c;
}
    501e:	0018      	movs	r0, r3
    5020:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    5022:	2300      	movs	r3, #0
    5024:	28ff      	cmp	r0, #255	; 0xff
    5026:	d8fa      	bhi.n	501e <ff_convert+0x2a>
    5028:	3880      	subs	r0, #128	; 0x80
    502a:	0040      	lsls	r0, r0, #1
    502c:	4b02      	ldr	r3, [pc, #8]	; (5038 <ff_convert+0x44>)
    502e:	5ac3      	ldrh	r3, [r0, r3]
    5030:	e7f5      	b.n	501e <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    5032:	2300      	movs	r3, #0
    5034:	e7f0      	b.n	5018 <ff_convert+0x24>
    5036:	46c0      	nop			; (mov r8, r8)
    5038:	00006818 	.word	0x00006818

0000503c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    503c:	2861      	cmp	r0, #97	; 0x61
    503e:	d014      	beq.n	506a <ff_wtoupper+0x2e>
    5040:	4b0b      	ldr	r3, [pc, #44]	; (5070 <ff_wtoupper+0x34>)
    5042:	3304      	adds	r3, #4
    5044:	2101      	movs	r1, #1
    5046:	2262      	movs	r2, #98	; 0x62
    5048:	4290      	cmp	r0, r2
    504a:	d007      	beq.n	505c <ff_wtoupper+0x20>
    504c:	3101      	adds	r1, #1
    504e:	3302      	adds	r3, #2
    5050:	1e9a      	subs	r2, r3, #2
    5052:	8812      	ldrh	r2, [r2, #0]
    5054:	2a00      	cmp	r2, #0
    5056:	d1f7      	bne.n	5048 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5058:	0003      	movs	r3, r0
    505a:	e004      	b.n	5066 <ff_wtoupper+0x2a>
    505c:	1e03      	subs	r3, r0, #0
    505e:	d002      	beq.n	5066 <ff_wtoupper+0x2a>
    5060:	0049      	lsls	r1, r1, #1
    5062:	4b04      	ldr	r3, [pc, #16]	; (5074 <ff_wtoupper+0x38>)
    5064:	5acb      	ldrh	r3, [r1, r3]
}
    5066:	0018      	movs	r0, r3
    5068:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    506a:	2100      	movs	r1, #0
    506c:	e7f8      	b.n	5060 <ff_wtoupper+0x24>
    506e:	46c0      	nop			; (mov r8, r8)
    5070:	00006918 	.word	0x00006918
    5074:	00006af8 	.word	0x00006af8

00005078 <readFlags>:
}



//To read firmware flags from NVM
Status * readFlags(){
    5078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t * bytesRead = (uint16_t *)malloc(sizeof(uint16_t));
    507a:	2002      	movs	r0, #2
    507c:	4c08      	ldr	r4, [pc, #32]	; (50a0 <readFlags+0x28>)
    507e:	47a0      	blx	r4
    5080:	0005      	movs	r5, r0
	Status * currentStatus = malloc(sizeof(Status));
    5082:	2041      	movs	r0, #65	; 0x41
    5084:	47a0      	blx	r4
    5086:	0004      	movs	r4, r0
	do{
		error_code = nvm_read_buffer(STRUCT_START_ADDRESS, currentStatus, (* bytesRead));
    5088:	4f06      	ldr	r7, [pc, #24]	; (50a4 <readFlags+0x2c>)
    508a:	4e07      	ldr	r6, [pc, #28]	; (50a8 <readFlags+0x30>)
    508c:	882a      	ldrh	r2, [r5, #0]
    508e:	0021      	movs	r1, r4
    5090:	20ad      	movs	r0, #173	; 0xad
    5092:	0200      	lsls	r0, r0, #8
    5094:	47b8      	blx	r7
    5096:	7030      	strb	r0, [r6, #0]
	} while (error_code == STATUS_BUSY);
    5098:	2805      	cmp	r0, #5
    509a:	d0f7      	beq.n	508c <readFlags+0x14>
	return currentStatus;
}
    509c:	0020      	movs	r0, r4
    509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50a0:	00005cd5 	.word	0x00005cd5
    50a4:	000003f5 	.word	0x000003f5
    50a8:	20000c95 	.word	0x20000c95

000050ac <readMetadata>:

//Read metadata.txt (Version name and Precomputed CRC from SD card)
bool readMetadata(Status * currentStatus){
    50ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ae:	b08b      	sub	sp, #44	; 0x2c
    50b0:	9001      	str	r0, [sp, #4]
	
	FIL fileobject;
	
	SerialConsoleWriteString("Open metadata file (f_open)\r\n");
    50b2:	482b      	ldr	r0, [pc, #172]	; (5160 <readMetadata+0xb4>)
    50b4:	4b2b      	ldr	r3, [pc, #172]	; (5164 <readMetadata+0xb8>)
    50b6:	4798      	blx	r3
	metadata_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    50b8:	492b      	ldr	r1, [pc, #172]	; (5168 <readMetadata+0xbc>)
    50ba:	2330      	movs	r3, #48	; 0x30
    50bc:	700b      	strb	r3, [r1, #0]
	res = f_open(&file_object, (char const *)metadata_file_name,
    50be:	2213      	movs	r2, #19
    50c0:	482a      	ldr	r0, [pc, #168]	; (516c <readMetadata+0xc0>)
    50c2:	4b2b      	ldr	r3, [pc, #172]	; (5170 <readMetadata+0xc4>)
    50c4:	4798      	blx	r3
    50c6:	4b2b      	ldr	r3, [pc, #172]	; (5174 <readMetadata+0xc8>)
    50c8:	7018      	strb	r0, [r3, #0]
	FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
	if (res != FR_OK) {
    50ca:	2800      	cmp	r0, #0
    50cc:	d111      	bne.n	50f2 <readMetadata+0x46>
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
	}
	
	char file_contents[32];
	volatile char *ver_capture = malloc(sizeof(file_contents));
    50ce:	2020      	movs	r0, #32
    50d0:	4c29      	ldr	r4, [pc, #164]	; (5178 <readMetadata+0xcc>)
    50d2:	47a0      	blx	r4
    50d4:	9000      	str	r0, [sp, #0]
	volatile char *cr_capture = malloc(sizeof(file_contents));
    50d6:	2020      	movs	r0, #32
    50d8:	47a0      	blx	r4
    50da:	0005      	movs	r5, r0
	memset(cr_capture, 0x00, sizeof(cr_capture));
    50dc:	2300      	movs	r3, #0
    50de:	6003      	str	r3, [r0, #0]
	
	uint8_t i=0x00;
	memset(file_contents,  0x00, sizeof(file_contents));
    50e0:	2220      	movs	r2, #32
    50e2:	2100      	movs	r1, #0
    50e4:	a802      	add	r0, sp, #8
    50e6:	4b25      	ldr	r3, [pc, #148]	; (517c <readMetadata+0xd0>)
    50e8:	4798      	blx	r3
	uint8_t i=0x00;
    50ea:	2400      	movs	r4, #0
	while (f_gets(file_contents, 32, &file_object))
    50ec:	4e24      	ldr	r6, [pc, #144]	; (5180 <readMetadata+0xd4>)
		if (i==0x00){
			memcpy(ver_capture,file_contents, sizeof(file_contents));
			i++;
		}
		else{
			memcpy(cr_capture,file_contents, sizeof(file_contents));
    50ee:	4f25      	ldr	r7, [pc, #148]	; (5184 <readMetadata+0xd8>)
	while (f_gets(file_contents, 32, &file_object))
    50f0:	e00a      	b.n	5108 <readMetadata+0x5c>
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    50f2:	0002      	movs	r2, r0
    50f4:	4924      	ldr	r1, [pc, #144]	; (5188 <readMetadata+0xdc>)
    50f6:	2000      	movs	r0, #0
    50f8:	4b24      	ldr	r3, [pc, #144]	; (518c <readMetadata+0xe0>)
    50fa:	4798      	blx	r3
    50fc:	e7e7      	b.n	50ce <readMetadata+0x22>
			memcpy(cr_capture,file_contents, sizeof(file_contents));
    50fe:	2220      	movs	r2, #32
    5100:	a902      	add	r1, sp, #8
    5102:	0028      	movs	r0, r5
    5104:	47b8      	blx	r7
    5106:	2401      	movs	r4, #1
	while (f_gets(file_contents, 32, &file_object))
    5108:	4a18      	ldr	r2, [pc, #96]	; (516c <readMetadata+0xc0>)
    510a:	2120      	movs	r1, #32
    510c:	a802      	add	r0, sp, #8
    510e:	47b0      	blx	r6
    5110:	2800      	cmp	r0, #0
    5112:	d007      	beq.n	5124 <readMetadata+0x78>
		if (i==0x00){
    5114:	2c00      	cmp	r4, #0
    5116:	d1f2      	bne.n	50fe <readMetadata+0x52>
			memcpy(ver_capture,file_contents, sizeof(file_contents));
    5118:	2220      	movs	r2, #32
    511a:	a902      	add	r1, sp, #8
    511c:	9800      	ldr	r0, [sp, #0]
    511e:	4b19      	ldr	r3, [pc, #100]	; (5184 <readMetadata+0xd8>)
    5120:	4798      	blx	r3
    5122:	e7f0      	b.n	5106 <readMetadata+0x5a>
		}
	}
	f_close(&file_object);
    5124:	4811      	ldr	r0, [pc, #68]	; (516c <readMetadata+0xc0>)
    5126:	4b1a      	ldr	r3, [pc, #104]	; (5190 <readMetadata+0xe4>)
    5128:	4798      	blx	r3

// 	SerialConsoleWriteString(ver_capture);
// 	SerialConsoleWriteString(cr_capture);
// 	SerialConsoleWriteString("\r\n");
	SerialConsoleWriteString("Read in Metadata [OK]\r\n");
    512a:	481a      	ldr	r0, [pc, #104]	; (5194 <readMetadata+0xe8>)
    512c:	4b0d      	ldr	r3, [pc, #52]	; (5164 <readMetadata+0xb8>)
    512e:	4798      	blx	r3
 	
	bool updateRequired = (strcmp(ver_capture,currentStatus->fw_version) != 0)
    5130:	9c01      	ldr	r4, [sp, #4]
    5132:	0021      	movs	r1, r4
    5134:	9800      	ldr	r0, [sp, #0]
    5136:	4b18      	ldr	r3, [pc, #96]	; (5198 <readMetadata+0xec>)
    5138:	4798      	blx	r3
    513a:	0003      	movs	r3, r0
    513c:	2001      	movs	r0, #1
	|| (strcmp(cr_capture,currentStatus->crc32) != 0);
    513e:	2b00      	cmp	r3, #0
    5140:	d107      	bne.n	5152 <readMetadata+0xa6>
    5142:	0021      	movs	r1, r4
    5144:	3120      	adds	r1, #32
    5146:	0028      	movs	r0, r5
    5148:	4b13      	ldr	r3, [pc, #76]	; (5198 <readMetadata+0xec>)
    514a:	4798      	blx	r3
    514c:	1e43      	subs	r3, r0, #1
    514e:	4198      	sbcs	r0, r3
    5150:	b2c0      	uxtb	r0, r0
	
	meta_ver = ver_capture;
    5152:	4b12      	ldr	r3, [pc, #72]	; (519c <readMetadata+0xf0>)
    5154:	9a00      	ldr	r2, [sp, #0]
    5156:	601a      	str	r2, [r3, #0]
	meta_crc = cr_capture;
    5158:	4b11      	ldr	r3, [pc, #68]	; (51a0 <readMetadata+0xf4>)
    515a:	601d      	str	r5, [r3, #0]

	return updateRequired;
}
    515c:	b00b      	add	sp, #44	; 0x2c
    515e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5160:	00006e98 	.word	0x00006e98
    5164:	00000705 	.word	0x00000705
    5168:	20000010 	.word	0x20000010
    516c:	20000c34 	.word	0x20000c34
    5170:	00004bc1 	.word	0x00004bc1
    5174:	20000c94 	.word	0x20000c94
    5178:	00005cd5 	.word	0x00005cd5
    517c:	00005cfb 	.word	0x00005cfb
    5180:	00004fa1 	.word	0x00004fa1
    5184:	00005ce9 	.word	0x00005ce9
    5188:	00006eb8 	.word	0x00006eb8
    518c:	000007cd 	.word	0x000007cd
    5190:	00004f89 	.word	0x00004f89
    5194:	00006ec8 	.word	0x00006ec8
    5198:	00005ec5 	.word	0x00005ec5
    519c:	20000c90 	.word	0x20000c90
    51a0:	20000c8c 	.word	0x20000c8c

000051a4 <updateFlags>:

void updateFlags(Status * currentStatus){
    51a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51a6:	b08b      	sub	sp, #44	; 0x2c
    51a8:	9000      	str	r0, [sp, #0]
	
	FIL fileobject;
	
	SerialConsoleWriteString("Open metadata file (f_open)\r\n");
    51aa:	482f      	ldr	r0, [pc, #188]	; (5268 <updateFlags+0xc4>)
    51ac:	4b2f      	ldr	r3, [pc, #188]	; (526c <updateFlags+0xc8>)
    51ae:	4798      	blx	r3
	metadata_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    51b0:	492f      	ldr	r1, [pc, #188]	; (5270 <updateFlags+0xcc>)
    51b2:	2330      	movs	r3, #48	; 0x30
    51b4:	700b      	strb	r3, [r1, #0]
	res = f_open(&file_object, (char const *)metadata_file_name,
    51b6:	2213      	movs	r2, #19
    51b8:	482e      	ldr	r0, [pc, #184]	; (5274 <updateFlags+0xd0>)
    51ba:	4b2f      	ldr	r3, [pc, #188]	; (5278 <updateFlags+0xd4>)
    51bc:	4798      	blx	r3
    51be:	4b2f      	ldr	r3, [pc, #188]	; (527c <updateFlags+0xd8>)
    51c0:	7018      	strb	r0, [r3, #0]
	FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
	if (res != FR_OK) {
    51c2:	2800      	cmp	r0, #0
    51c4:	d111      	bne.n	51ea <updateFlags+0x46>
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
	}
	
	char file_contents[32];
	volatile char *ver_capture = malloc(sizeof(file_contents));
    51c6:	2020      	movs	r0, #32
    51c8:	4d2d      	ldr	r5, [pc, #180]	; (5280 <updateFlags+0xdc>)
    51ca:	47a8      	blx	r5
    51cc:	9001      	str	r0, [sp, #4]
	volatile char *cr_capture = malloc(sizeof(file_contents));
    51ce:	2020      	movs	r0, #32
    51d0:	47a8      	blx	r5
    51d2:	0006      	movs	r6, r0
	memset(cr_capture, 0x00, sizeof(cr_capture));
    51d4:	2300      	movs	r3, #0
    51d6:	6003      	str	r3, [r0, #0]
	
	uint8_t i=0x00;
	memset(file_contents,  0x00, sizeof(file_contents));
    51d8:	2220      	movs	r2, #32
    51da:	2100      	movs	r1, #0
    51dc:	a802      	add	r0, sp, #8
    51de:	4b29      	ldr	r3, [pc, #164]	; (5284 <updateFlags+0xe0>)
    51e0:	4798      	blx	r3
	uint8_t i=0x00;
    51e2:	2400      	movs	r4, #0
	while (f_gets(file_contents, 32, &file_object))
    51e4:	4d28      	ldr	r5, [pc, #160]	; (5288 <updateFlags+0xe4>)
		if (i==0x00){
			memcpy(ver_capture,file_contents, sizeof(file_contents));
			i++;
		}
		else{
			memcpy(cr_capture,file_contents, sizeof(file_contents));
    51e6:	4f29      	ldr	r7, [pc, #164]	; (528c <updateFlags+0xe8>)
	while (f_gets(file_contents, 32, &file_object))
    51e8:	e00a      	b.n	5200 <updateFlags+0x5c>
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    51ea:	0002      	movs	r2, r0
    51ec:	4928      	ldr	r1, [pc, #160]	; (5290 <updateFlags+0xec>)
    51ee:	2000      	movs	r0, #0
    51f0:	4b28      	ldr	r3, [pc, #160]	; (5294 <updateFlags+0xf0>)
    51f2:	4798      	blx	r3
    51f4:	e7e7      	b.n	51c6 <updateFlags+0x22>
			memcpy(cr_capture,file_contents, sizeof(file_contents));
    51f6:	2220      	movs	r2, #32
    51f8:	a902      	add	r1, sp, #8
    51fa:	0030      	movs	r0, r6
    51fc:	47b8      	blx	r7
    51fe:	2401      	movs	r4, #1
	while (f_gets(file_contents, 32, &file_object))
    5200:	4a1c      	ldr	r2, [pc, #112]	; (5274 <updateFlags+0xd0>)
    5202:	2120      	movs	r1, #32
    5204:	a802      	add	r0, sp, #8
    5206:	47a8      	blx	r5
    5208:	2800      	cmp	r0, #0
    520a:	d007      	beq.n	521c <updateFlags+0x78>
		if (i==0x00){
    520c:	2c00      	cmp	r4, #0
    520e:	d1f2      	bne.n	51f6 <updateFlags+0x52>
			memcpy(ver_capture,file_contents, sizeof(file_contents));
    5210:	2220      	movs	r2, #32
    5212:	a902      	add	r1, sp, #8
    5214:	9801      	ldr	r0, [sp, #4]
    5216:	4b1d      	ldr	r3, [pc, #116]	; (528c <updateFlags+0xe8>)
    5218:	4798      	blx	r3
    521a:	e7f0      	b.n	51fe <updateFlags+0x5a>
		}
	}
	f_close(&file_object);
    521c:	4815      	ldr	r0, [pc, #84]	; (5274 <updateFlags+0xd0>)
    521e:	4b1e      	ldr	r3, [pc, #120]	; (5298 <updateFlags+0xf4>)
    5220:	4798      	blx	r3
		
	memcpy(currentStatus->crc32, cr_capture, sizeof(char) * 32);
    5222:	9c00      	ldr	r4, [sp, #0]
    5224:	0023      	movs	r3, r4
    5226:	3320      	adds	r3, #32
    5228:	0018      	movs	r0, r3
    522a:	2220      	movs	r2, #32
    522c:	0031      	movs	r1, r6
    522e:	4d17      	ldr	r5, [pc, #92]	; (528c <updateFlags+0xe8>)
    5230:	47a8      	blx	r5
	memcpy(currentStatus->fw_version, ver_capture, sizeof(char) * 32);
    5232:	2220      	movs	r2, #32
    5234:	9901      	ldr	r1, [sp, #4]
    5236:	0020      	movs	r0, r4
    5238:	47a8      	blx	r5
	int structSize = sizeof(Status);
	
	//Erase the old struct
	do{
		error_code = nvm_erase_row(STRUCT_START_ADDRESS);
    523a:	26ad      	movs	r6, #173	; 0xad
    523c:	0236      	lsls	r6, r6, #8
    523e:	4f17      	ldr	r7, [pc, #92]	; (529c <updateFlags+0xf8>)
    5240:	4d17      	ldr	r5, [pc, #92]	; (52a0 <updateFlags+0xfc>)
    5242:	0030      	movs	r0, r6
    5244:	47b8      	blx	r7
    5246:	7028      	strb	r0, [r5, #0]
	} while (error_code == STATUS_BUSY);
    5248:	2805      	cmp	r0, #5
    524a:	d0fa      	beq.n	5242 <updateFlags+0x9e>

	do{
		error_code = nvm_write_buffer(STRUCT_START_ADDRESS, currentStatus,  sizeof(Status));
    524c:	26ad      	movs	r6, #173	; 0xad
    524e:	0236      	lsls	r6, r6, #8
    5250:	4f14      	ldr	r7, [pc, #80]	; (52a4 <updateFlags+0x100>)
    5252:	4d13      	ldr	r5, [pc, #76]	; (52a0 <updateFlags+0xfc>)
    5254:	2241      	movs	r2, #65	; 0x41
    5256:	9900      	ldr	r1, [sp, #0]
    5258:	0030      	movs	r0, r6
    525a:	47b8      	blx	r7
    525c:	7028      	strb	r0, [r5, #0]
	} while (error_code == STATUS_BUSY);
    525e:	2805      	cmp	r0, #5
    5260:	d0f8      	beq.n	5254 <updateFlags+0xb0>

}
    5262:	b00b      	add	sp, #44	; 0x2c
    5264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5266:	46c0      	nop			; (mov r8, r8)
    5268:	00006e98 	.word	0x00006e98
    526c:	00000705 	.word	0x00000705
    5270:	20000010 	.word	0x20000010
    5274:	20000c34 	.word	0x20000c34
    5278:	00004bc1 	.word	0x00004bc1
    527c:	20000c94 	.word	0x20000c94
    5280:	00005cd5 	.word	0x00005cd5
    5284:	00005cfb 	.word	0x00005cfb
    5288:	00004fa1 	.word	0x00004fa1
    528c:	00005ce9 	.word	0x00005ce9
    5290:	00006eb8 	.word	0x00006eb8
    5294:	000007cd 	.word	0x000007cd
    5298:	00004f89 	.word	0x00004f89
    529c:	00000461 	.word	0x00000461
    52a0:	20000c95 	.word	0x20000c95
    52a4:	0000034d 	.word	0x0000034d

000052a8 <fw_update>:
	nvm_set_config(&config_nvm);
}


// Firmware update
bool fw_update(Status * currentStatus){
    52a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52aa:	46de      	mov	lr, fp
    52ac:	4657      	mov	r7, sl
    52ae:	464e      	mov	r6, r9
    52b0:	4645      	mov	r5, r8
    52b2:	b5e0      	push	{r5, r6, r7, lr}
    52b4:	b0b1      	sub	sp, #196	; 0xc4
	volatile crc32_t sd_crc32  = 0;
    52b6:	2300      	movs	r3, #0
    52b8:	932f      	str	r3, [sp, #188]	; 0xbc
	volatile crc32_t nvm_crc32 = 0;
    52ba:	932e      	str	r3, [sp, #184]	; 0xb8

	char app_file_name[] = "0:ApplicationCode.bin";
    52bc:	a928      	add	r1, sp, #160	; 0xa0
    52be:	4b88      	ldr	r3, [pc, #544]	; (54e0 <fw_update+0x238>)
    52c0:	000a      	movs	r2, r1
    52c2:	cb31      	ldmia	r3!, {r0, r4, r5}
    52c4:	c231      	stmia	r2!, {r0, r4, r5}
    52c6:	cb11      	ldmia	r3!, {r0, r4}
    52c8:	c211      	stmia	r2!, {r0, r4}
    52ca:	881b      	ldrh	r3, [r3, #0]
    52cc:	8013      	strh	r3, [r2, #0]

	app_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
	res = f_open(&file_object, (char const *)app_file_name,
    52ce:	4c85      	ldr	r4, [pc, #532]	; (54e4 <fw_update+0x23c>)
    52d0:	2213      	movs	r2, #19
    52d2:	0020      	movs	r0, r4
    52d4:	4b84      	ldr	r3, [pc, #528]	; (54e8 <fw_update+0x240>)
    52d6:	4798      	blx	r3
    52d8:	4b84      	ldr	r3, [pc, #528]	; (54ec <fw_update+0x244>)
    52da:	7018      	strb	r0, [r3, #0]
	FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
	
	int fileSize = f_size(&file_object);
    52dc:	68e4      	ldr	r4, [r4, #12]
	
	char out3[32];
	sprintf(out3, "The size of the firmware file is %d bytes.\r\n", fileSize);
    52de:	0022      	movs	r2, r4
    52e0:	4983      	ldr	r1, [pc, #524]	; (54f0 <fw_update+0x248>)
    52e2:	a820      	add	r0, sp, #128	; 0x80
    52e4:	4b83      	ldr	r3, [pc, #524]	; (54f4 <fw_update+0x24c>)
    52e6:	4798      	blx	r3
	SerialConsoleWriteString(out3);
    52e8:	a820      	add	r0, sp, #128	; 0x80
    52ea:	4b83      	ldr	r3, [pc, #524]	; (54f8 <fw_update+0x250>)
    52ec:	4798      	blx	r3
	int max_erased_row = 0;
	int max_read_page = 0;
	max_erased_row = (fileSize / NVMCTRL_ROW_SIZE) + 1;
    52ee:	17e2      	asrs	r2, r4, #31
    52f0:	23ff      	movs	r3, #255	; 0xff
    52f2:	4013      	ands	r3, r2
    52f4:	191b      	adds	r3, r3, r4
    52f6:	121b      	asrs	r3, r3, #8
	max_read_page = (fileSize / NVMCTRL_PAGE_SIZE) + 1;
    52f8:	273f      	movs	r7, #63	; 0x3f
    52fa:	4017      	ands	r7, r2
    52fc:	193f      	adds	r7, r7, r4
    52fe:	11ba      	asrs	r2, r7, #6
    5300:	4690      	mov	r8, r2
    5302:	2201      	movs	r2, #1
    5304:	4442      	add	r2, r8
    5306:	4691      	mov	r9, r2
	max_erased_row = (fileSize / NVMCTRL_ROW_SIZE) + 1;
    5308:	1c5a      	adds	r2, r3, #1
	
	//Erase the old firmware
	for (int eraseCounter = 0; eraseCounter < max_erased_row; eraseCounter++){
    530a:	2a00      	cmp	r2, #0
    530c:	dd0f      	ble.n	532e <fw_update+0x86>
    530e:	4692      	mov	sl, r2
    5310:	24b0      	movs	r4, #176	; 0xb0
    5312:	0224      	lsls	r4, r4, #8
    5314:	2700      	movs	r7, #0
		do{
			error_code = nvm_erase_row(APP_START_ADDRESS + ( (NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE * eraseCounter)));
    5316:	4e79      	ldr	r6, [pc, #484]	; (54fc <fw_update+0x254>)
    5318:	4d79      	ldr	r5, [pc, #484]	; (5500 <fw_update+0x258>)
    531a:	0020      	movs	r0, r4
    531c:	47b0      	blx	r6
    531e:	7028      	strb	r0, [r5, #0]
		} while (error_code == STATUS_BUSY);
    5320:	2805      	cmp	r0, #5
    5322:	d0fa      	beq.n	531a <fw_update+0x72>
	for (int eraseCounter = 0; eraseCounter < max_erased_row; eraseCounter++){
    5324:	3701      	adds	r7, #1
    5326:	3401      	adds	r4, #1
    5328:	34ff      	adds	r4, #255	; 0xff
    532a:	4557      	cmp	r7, sl
    532c:	d1f5      	bne.n	531a <fw_update+0x72>
	}
	
	
	// write and read function
	uint16_t * bytesRead = (uint16_t *)malloc(sizeof(uint16_t));
    532e:	2002      	movs	r0, #2
    5330:	4b74      	ldr	r3, [pc, #464]	; (5504 <fw_update+0x25c>)
    5332:	4798      	blx	r3
    5334:	0005      	movs	r5, r0
	
	char NVM_read_buffer[NVMCTRL_PAGE_SIZE];
	char transferBuffer[NVMCTRL_PAGE_SIZE];
	
	for (int read_counter = 0; read_counter < max_read_page; read_counter++){
    5336:	464b      	mov	r3, r9
    5338:	2b00      	cmp	r3, #0
    533a:	dd61      	ble.n	5400 <fw_update+0x158>
    533c:	2301      	movs	r3, #1
    533e:	4443      	add	r3, r8
    5340:	469b      	mov	fp, r3
    5342:	24b0      	movs	r4, #176	; 0xb0
    5344:	0224      	lsls	r4, r4, #8
    5346:	2600      	movs	r6, #0

		res = f_read(&file_object, transferBuffer, sizeof(transferBuffer), bytesRead);
    5348:	4b6f      	ldr	r3, [pc, #444]	; (5508 <fw_update+0x260>)
    534a:	4698      	mov	r8, r3
    534c:	e028      	b.n	53a0 <fw_update+0xf8>
		if (res == 0){
			if (sd_crc32 == 0)
			{
				crc32_calculate(transferBuffer, (* bytesRead), &sd_crc32);
				}  else {
				crc32_recalculate(transferBuffer, (* bytesRead), &sd_crc32);
    534e:	8829      	ldrh	r1, [r5, #0]
    5350:	aa2f      	add	r2, sp, #188	; 0xbc
    5352:	4668      	mov	r0, sp
    5354:	4b6d      	ldr	r3, [pc, #436]	; (550c <fw_update+0x264>)
    5356:	4798      	blx	r3
    5358:	e034      	b.n	53c4 <fw_update+0x11c>

			if (nvm_crc32 == 0)
			{
				crc32_calculate(transferBuffer,  (* bytesRead), &nvm_crc32);
				} else {
				crc32_recalculate(transferBuffer,  (* bytesRead), &nvm_crc32);
    535a:	8829      	ldrh	r1, [r5, #0]
    535c:	aa2e      	add	r2, sp, #184	; 0xb8
    535e:	4668      	mov	r0, sp
    5360:	4b6a      	ldr	r3, [pc, #424]	; (550c <fw_update+0x264>)
    5362:	4798      	blx	r3
			}
			if(nvm_crc32 != sd_crc32){
    5364:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    5366:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    5368:	429a      	cmp	r2, r3
    536a:	d015      	beq.n	5398 <fw_update+0xf0>
				SerialConsoleWriteString("CRC32 are not equal. \r\n");
    536c:	4868      	ldr	r0, [pc, #416]	; (5510 <fw_update+0x268>)
    536e:	4b62      	ldr	r3, [pc, #392]	; (54f8 <fw_update+0x250>)
    5370:	4798      	blx	r3
				delay_s(1);
    5372:	2000      	movs	r0, #0
    5374:	4b67      	ldr	r3, [pc, #412]	; (5514 <fw_update+0x26c>)
    5376:	4798      	blx	r3
    5378:	22fa      	movs	r2, #250	; 0xfa
    537a:	0092      	lsls	r2, r2, #2
    537c:	2300      	movs	r3, #0
    537e:	2100      	movs	r1, #0
    5380:	4f65      	ldr	r7, [pc, #404]	; (5518 <fw_update+0x270>)
    5382:	47b8      	blx	r7
    5384:	4a65      	ldr	r2, [pc, #404]	; (551c <fw_update+0x274>)
    5386:	2300      	movs	r3, #0
    5388:	1880      	adds	r0, r0, r2
    538a:	4159      	adcs	r1, r3
    538c:	4a64      	ldr	r2, [pc, #400]	; (5520 <fw_update+0x278>)
    538e:	2300      	movs	r3, #0
    5390:	4f64      	ldr	r7, [pc, #400]	; (5524 <fw_update+0x27c>)
    5392:	47b8      	blx	r7
    5394:	4b64      	ldr	r3, [pc, #400]	; (5528 <fw_update+0x280>)
    5396:	4798      	blx	r3
	for (int read_counter = 0; read_counter < max_read_page; read_counter++){
    5398:	3601      	adds	r6, #1
    539a:	3440      	adds	r4, #64	; 0x40
    539c:	45b3      	cmp	fp, r6
    539e:	d02f      	beq.n	5400 <fw_update+0x158>
		res = f_read(&file_object, transferBuffer, sizeof(transferBuffer), bytesRead);
    53a0:	002b      	movs	r3, r5
    53a2:	2240      	movs	r2, #64	; 0x40
    53a4:	4669      	mov	r1, sp
    53a6:	484f      	ldr	r0, [pc, #316]	; (54e4 <fw_update+0x23c>)
    53a8:	47c0      	blx	r8
    53aa:	4b50      	ldr	r3, [pc, #320]	; (54ec <fw_update+0x244>)
    53ac:	7018      	strb	r0, [r3, #0]
		if (res == 0){
    53ae:	2800      	cmp	r0, #0
    53b0:	d1f2      	bne.n	5398 <fw_update+0xf0>
			if (sd_crc32 == 0)
    53b2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    53b4:	2b00      	cmp	r3, #0
    53b6:	d1ca      	bne.n	534e <fw_update+0xa6>
				crc32_calculate(transferBuffer, (* bytesRead), &sd_crc32);
    53b8:	8829      	ldrh	r1, [r5, #0]
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
    53ba:	932f      	str	r3, [sp, #188]	; 0xbc

	return crc32_recalculate(data, length, crc);
    53bc:	aa2f      	add	r2, sp, #188	; 0xbc
    53be:	4668      	mov	r0, sp
    53c0:	4b52      	ldr	r3, [pc, #328]	; (550c <fw_update+0x264>)
    53c2:	4798      	blx	r3
				error_code = nvm_write_buffer(APP_START_ADDRESS + NVMCTRL_PAGE_SIZE*read_counter, transferBuffer, (* bytesRead));
    53c4:	4b59      	ldr	r3, [pc, #356]	; (552c <fw_update+0x284>)
    53c6:	469a      	mov	sl, r3
    53c8:	4f4d      	ldr	r7, [pc, #308]	; (5500 <fw_update+0x258>)
    53ca:	882a      	ldrh	r2, [r5, #0]
    53cc:	4669      	mov	r1, sp
    53ce:	0020      	movs	r0, r4
    53d0:	47d0      	blx	sl
    53d2:	7038      	strb	r0, [r7, #0]
			} while (error_code == STATUS_BUSY);
    53d4:	2805      	cmp	r0, #5
    53d6:	d0f8      	beq.n	53ca <fw_update+0x122>
				error_code = nvm_read_buffer(APP_START_ADDRESS + NVMCTRL_PAGE_SIZE*read_counter, NVM_read_buffer, (* bytesRead));
    53d8:	4b55      	ldr	r3, [pc, #340]	; (5530 <fw_update+0x288>)
    53da:	469a      	mov	sl, r3
    53dc:	4f48      	ldr	r7, [pc, #288]	; (5500 <fw_update+0x258>)
    53de:	882a      	ldrh	r2, [r5, #0]
    53e0:	a910      	add	r1, sp, #64	; 0x40
    53e2:	0020      	movs	r0, r4
    53e4:	47d0      	blx	sl
    53e6:	7038      	strb	r0, [r7, #0]
			} while (error_code == STATUS_BUSY);
    53e8:	2805      	cmp	r0, #5
    53ea:	d0f8      	beq.n	53de <fw_update+0x136>
			if (nvm_crc32 == 0)
    53ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    53ee:	2b00      	cmp	r3, #0
    53f0:	d1b3      	bne.n	535a <fw_update+0xb2>
				crc32_calculate(transferBuffer,  (* bytesRead), &nvm_crc32);
    53f2:	8829      	ldrh	r1, [r5, #0]
	*crc = 0;
    53f4:	932e      	str	r3, [sp, #184]	; 0xb8
	return crc32_recalculate(data, length, crc);
    53f6:	aa2e      	add	r2, sp, #184	; 0xb8
    53f8:	4668      	mov	r0, sp
    53fa:	4b44      	ldr	r3, [pc, #272]	; (550c <fw_update+0x264>)
    53fc:	4798      	blx	r3
    53fe:	e7b1      	b.n	5364 <fw_update+0xbc>
			}

		}
	}
	f_close(&file_object);
    5400:	4838      	ldr	r0, [pc, #224]	; (54e4 <fw_update+0x23c>)
    5402:	4b4c      	ldr	r3, [pc, #304]	; (5534 <fw_update+0x28c>)
    5404:	4798      	blx	r3

	char * nvm_crc32_text = malloc(sizeof(char) * 32);
    5406:	2020      	movs	r0, #32
    5408:	4b3e      	ldr	r3, [pc, #248]	; (5504 <fw_update+0x25c>)
    540a:	4798      	blx	r3
    540c:	0004      	movs	r4, r0
	memset(nvm_crc32_text,  0x00, sizeof(nvm_crc32_text));
    540e:	2300      	movs	r3, #0
    5410:	6003      	str	r3, [r0, #0]
	sprintf(nvm_crc32_text, "%x", nvm_crc32);
    5412:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    5414:	4948      	ldr	r1, [pc, #288]	; (5538 <fw_update+0x290>)
    5416:	4b37      	ldr	r3, [pc, #220]	; (54f4 <fw_update+0x24c>)
    5418:	4798      	blx	r3

	bool success = true;

	success &= (strcmp(nvm_crc32_text, meta_crc) == 0);
    541a:	4b48      	ldr	r3, [pc, #288]	; (553c <fw_update+0x294>)
    541c:	6819      	ldr	r1, [r3, #0]
    541e:	0020      	movs	r0, r4
    5420:	4b47      	ldr	r3, [pc, #284]	; (5540 <fw_update+0x298>)
    5422:	4798      	blx	r3
    5424:	4245      	negs	r5, r0
    5426:	4145      	adcs	r5, r0
    5428:	b2ed      	uxtb	r5, r5
	if(!success){SerialConsoleWriteString("Meta data & NVM Read CRC DO NOT MATCH \r\n");		delay_s(1);}
    542a:	2800      	cmp	r0, #0
    542c:	d129      	bne.n	5482 <fw_update+0x1da>
	
	success &= (nvm_crc32 == sd_crc32);
    542e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    5430:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    5432:	1ae4      	subs	r4, r4, r3
    5434:	4263      	negs	r3, r4
    5436:	415c      	adcs	r4, r3
    5438:	402c      	ands	r4, r5
	if(nvm_crc32 != sd_crc32){SerialConsoleWriteString("SD Card & NVM CRC32 DO NOT MATCH\r\n");		delay_s(1);}
    543a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    543c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    543e:	429a      	cmp	r2, r3
    5440:	d015      	beq.n	546e <fw_update+0x1c6>
    5442:	4840      	ldr	r0, [pc, #256]	; (5544 <fw_update+0x29c>)
    5444:	4b2c      	ldr	r3, [pc, #176]	; (54f8 <fw_update+0x250>)
    5446:	4798      	blx	r3
    5448:	2000      	movs	r0, #0
    544a:	4b32      	ldr	r3, [pc, #200]	; (5514 <fw_update+0x26c>)
    544c:	4798      	blx	r3
    544e:	22fa      	movs	r2, #250	; 0xfa
    5450:	0092      	lsls	r2, r2, #2
    5452:	2300      	movs	r3, #0
    5454:	2100      	movs	r1, #0
    5456:	4d30      	ldr	r5, [pc, #192]	; (5518 <fw_update+0x270>)
    5458:	47a8      	blx	r5
    545a:	4a30      	ldr	r2, [pc, #192]	; (551c <fw_update+0x274>)
    545c:	2300      	movs	r3, #0
    545e:	1880      	adds	r0, r0, r2
    5460:	4159      	adcs	r1, r3
    5462:	4a2f      	ldr	r2, [pc, #188]	; (5520 <fw_update+0x278>)
    5464:	2300      	movs	r3, #0
    5466:	4d2f      	ldr	r5, [pc, #188]	; (5524 <fw_update+0x27c>)
    5468:	47a8      	blx	r5
    546a:	4b2f      	ldr	r3, [pc, #188]	; (5528 <fw_update+0x280>)
    546c:	4798      	blx	r3
	
	if (success)
    546e:	2c00      	cmp	r4, #0
    5470:	d11e      	bne.n	54b0 <fw_update+0x208>
		SerialConsoleWriteString("3-way CRC check passed.(Meta Data = SD Card = NVM CRC) \r\n");
		delay_s(1);
		return true;
	}
	return false;
}
    5472:	0020      	movs	r0, r4
    5474:	b031      	add	sp, #196	; 0xc4
    5476:	bc3c      	pop	{r2, r3, r4, r5}
    5478:	4690      	mov	r8, r2
    547a:	4699      	mov	r9, r3
    547c:	46a2      	mov	sl, r4
    547e:	46ab      	mov	fp, r5
    5480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(!success){SerialConsoleWriteString("Meta data & NVM Read CRC DO NOT MATCH \r\n");		delay_s(1);}
    5482:	4831      	ldr	r0, [pc, #196]	; (5548 <fw_update+0x2a0>)
    5484:	4b1c      	ldr	r3, [pc, #112]	; (54f8 <fw_update+0x250>)
    5486:	4798      	blx	r3
    5488:	2000      	movs	r0, #0
    548a:	4b22      	ldr	r3, [pc, #136]	; (5514 <fw_update+0x26c>)
    548c:	4798      	blx	r3
    548e:	22fa      	movs	r2, #250	; 0xfa
    5490:	0092      	lsls	r2, r2, #2
    5492:	2300      	movs	r3, #0
    5494:	2100      	movs	r1, #0
    5496:	4c20      	ldr	r4, [pc, #128]	; (5518 <fw_update+0x270>)
    5498:	47a0      	blx	r4
    549a:	4a20      	ldr	r2, [pc, #128]	; (551c <fw_update+0x274>)
    549c:	2300      	movs	r3, #0
    549e:	1880      	adds	r0, r0, r2
    54a0:	4159      	adcs	r1, r3
    54a2:	4a1f      	ldr	r2, [pc, #124]	; (5520 <fw_update+0x278>)
    54a4:	2300      	movs	r3, #0
    54a6:	4c1f      	ldr	r4, [pc, #124]	; (5524 <fw_update+0x27c>)
    54a8:	47a0      	blx	r4
    54aa:	4b1f      	ldr	r3, [pc, #124]	; (5528 <fw_update+0x280>)
    54ac:	4798      	blx	r3
    54ae:	e7be      	b.n	542e <fw_update+0x186>
		SerialConsoleWriteString("3-way CRC check passed.(Meta Data = SD Card = NVM CRC) \r\n");
    54b0:	4826      	ldr	r0, [pc, #152]	; (554c <fw_update+0x2a4>)
    54b2:	4b11      	ldr	r3, [pc, #68]	; (54f8 <fw_update+0x250>)
    54b4:	4798      	blx	r3
		delay_s(1);
    54b6:	2000      	movs	r0, #0
    54b8:	4b16      	ldr	r3, [pc, #88]	; (5514 <fw_update+0x26c>)
    54ba:	4798      	blx	r3
    54bc:	22fa      	movs	r2, #250	; 0xfa
    54be:	0092      	lsls	r2, r2, #2
    54c0:	2300      	movs	r3, #0
    54c2:	2100      	movs	r1, #0
    54c4:	4d14      	ldr	r5, [pc, #80]	; (5518 <fw_update+0x270>)
    54c6:	47a8      	blx	r5
    54c8:	4a14      	ldr	r2, [pc, #80]	; (551c <fw_update+0x274>)
    54ca:	2300      	movs	r3, #0
    54cc:	1880      	adds	r0, r0, r2
    54ce:	4159      	adcs	r1, r3
    54d0:	4a13      	ldr	r2, [pc, #76]	; (5520 <fw_update+0x278>)
    54d2:	2300      	movs	r3, #0
    54d4:	4d13      	ldr	r5, [pc, #76]	; (5524 <fw_update+0x27c>)
    54d6:	47a8      	blx	r5
    54d8:	4b13      	ldr	r3, [pc, #76]	; (5528 <fw_update+0x280>)
    54da:	4798      	blx	r3
		return true;
    54dc:	e7c9      	b.n	5472 <fw_update+0x1ca>
    54de:	46c0      	nop			; (mov r8, r8)
    54e0:	00006db0 	.word	0x00006db0
    54e4:	20000c34 	.word	0x20000c34
    54e8:	00004bc1 	.word	0x00004bc1
    54ec:	20000c94 	.word	0x20000c94
    54f0:	00006cd8 	.word	0x00006cd8
    54f4:	00005e81 	.word	0x00005e81
    54f8:	00000705 	.word	0x00000705
    54fc:	00000461 	.word	0x00000461
    5500:	20000c95 	.word	0x20000c95
    5504:	00005cd5 	.word	0x00005cd5
    5508:	00004d49 	.word	0x00004d49
    550c:	00000115 	.word	0x00000115
    5510:	00006d08 	.word	0x00006d08
    5514:	00003229 	.word	0x00003229
    5518:	00005a65 	.word	0x00005a65
    551c:	00001b57 	.word	0x00001b57
    5520:	00001b58 	.word	0x00001b58
    5524:	00005a25 	.word	0x00005a25
    5528:	20000001 	.word	0x20000001
    552c:	0000034d 	.word	0x0000034d
    5530:	000003f5 	.word	0x000003f5
    5534:	00004f89 	.word	0x00004f89
    5538:	00006d20 	.word	0x00006d20
    553c:	20000c8c 	.word	0x20000c8c
    5540:	00005ec5 	.word	0x00005ec5
    5544:	00006d50 	.word	0x00006d50
    5548:	00006d24 	.word	0x00006d24
    554c:	00006d74 	.word	0x00006d74

00005550 <main>:
{
    5550:	b5f0      	push	{r4, r5, r6, r7, lr}
    5552:	b083      	sub	sp, #12
    5554:	af00      	add	r7, sp, #0
	system_init();
    5556:	4b51      	ldr	r3, [pc, #324]	; (569c <main+0x14c>)
    5558:	4798      	blx	r3
	delay_init();
    555a:	4b51      	ldr	r3, [pc, #324]	; (56a0 <main+0x150>)
    555c:	4798      	blx	r3
	InitializeSerialConsole();
    555e:	4b51      	ldr	r3, [pc, #324]	; (56a4 <main+0x154>)
    5560:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    5562:	4c51      	ldr	r4, [pc, #324]	; (56a8 <main+0x158>)
    5564:	2501      	movs	r5, #1
    5566:	7025      	strb	r5, [r4, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    5568:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    556c:	b662      	cpsie	i
	sd_mmc_init();
    556e:	4b4f      	ldr	r3, [pc, #316]	; (56ac <main+0x15c>)
    5570:	4798      	blx	r3
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    5572:	2200      	movs	r2, #0
    5574:	703a      	strb	r2, [r7, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    5576:	4b4e      	ldr	r3, [pc, #312]	; (56b0 <main+0x160>)
    5578:	685b      	ldr	r3, [r3, #4]
    557a:	06db      	lsls	r3, r3, #27
    557c:	0f1b      	lsrs	r3, r3, #28
    557e:	70bb      	strb	r3, [r7, #2]
	config->disable_cache     = false;
    5580:	70fa      	strb	r2, [r7, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    5582:	713a      	strb	r2, [r7, #4]
	config_nvm.manual_page_write = false;
    5584:	707a      	strb	r2, [r7, #1]
	nvm_set_config(&config_nvm);
    5586:	0038      	movs	r0, r7
    5588:	4b4a      	ldr	r3, [pc, #296]	; (56b4 <main+0x164>)
    558a:	4798      	blx	r3
	cpu_irq_enable();
    558c:	7025      	strb	r5, [r4, #0]
    558e:	f3bf 8f5f 	dmb	sy
    5592:	b662      	cpsie	i
	SerialConsoleWriteString("\n\rRadiance_T BOOTLOADER\n\r");	//Order to add string to TX Buffer
    5594:	4848      	ldr	r0, [pc, #288]	; (56b8 <main+0x168>)
    5596:	4b49      	ldr	r3, [pc, #292]	; (56bc <main+0x16c>)
    5598:	4798      	blx	r3
	currentStatus = readFlags();
    559a:	4b49      	ldr	r3, [pc, #292]	; (56c0 <main+0x170>)
    559c:	4798      	blx	r3
						SerialConsoleWriteString("Card install FAIL\n\r");
    559e:	4c49      	ldr	r4, [pc, #292]	; (56c4 <main+0x174>)
    55a0:	e069      	b.n	5676 <main+0x126>
				} while (CTRL_GOOD != status);
    55a2:	4b49      	ldr	r3, [pc, #292]	; (56c8 <main+0x178>)
    55a4:	781b      	ldrb	r3, [r3, #0]
    55a6:	2b00      	cmp	r3, #0
    55a8:	d010      	beq.n	55cc <main+0x7c>
					status = sd_mmc_test_unit_ready(0);
    55aa:	2000      	movs	r0, #0
    55ac:	4b47      	ldr	r3, [pc, #284]	; (56cc <main+0x17c>)
    55ae:	4798      	blx	r3
    55b0:	7030      	strb	r0, [r6, #0]
					if (CTRL_FAIL == status) {
    55b2:	2801      	cmp	r0, #1
    55b4:	d1f5      	bne.n	55a2 <main+0x52>
						SerialConsoleWriteString("Card install FAIL\n\r");
    55b6:	0020      	movs	r0, r4
    55b8:	4d40      	ldr	r5, [pc, #256]	; (56bc <main+0x16c>)
    55ba:	47a8      	blx	r5
						SerialConsoleWriteString("Please unplug and re-plug the card.\n\r");
    55bc:	4844      	ldr	r0, [pc, #272]	; (56d0 <main+0x180>)
    55be:	47a8      	blx	r5
						while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    55c0:	4d44      	ldr	r5, [pc, #272]	; (56d4 <main+0x184>)
    55c2:	2000      	movs	r0, #0
    55c4:	47a8      	blx	r5
    55c6:	2802      	cmp	r0, #2
    55c8:	d1fb      	bne.n	55c2 <main+0x72>
    55ca:	e7ea      	b.n	55a2 <main+0x52>
				SerialConsoleWriteString("Mount disk (f_mount)\r\n");
    55cc:	4842      	ldr	r0, [pc, #264]	; (56d8 <main+0x188>)
    55ce:	4b3b      	ldr	r3, [pc, #236]	; (56bc <main+0x16c>)
    55d0:	4798      	blx	r3
				memset(&fs, 0, sizeof(FATFS));
    55d2:	4d42      	ldr	r5, [pc, #264]	; (56dc <main+0x18c>)
    55d4:	228c      	movs	r2, #140	; 0x8c
    55d6:	0092      	lsls	r2, r2, #2
    55d8:	2100      	movs	r1, #0
    55da:	0028      	movs	r0, r5
    55dc:	4b40      	ldr	r3, [pc, #256]	; (56e0 <main+0x190>)
    55de:	4798      	blx	r3
				res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    55e0:	0029      	movs	r1, r5
    55e2:	2000      	movs	r0, #0
    55e4:	4b3f      	ldr	r3, [pc, #252]	; (56e4 <main+0x194>)
    55e6:	4798      	blx	r3
    55e8:	4b3f      	ldr	r3, [pc, #252]	; (56e8 <main+0x198>)
    55ea:	7018      	strb	r0, [r3, #0]
				if (FR_INVALID_DRIVE == res) {
    55ec:	280b      	cmp	r0, #11
    55ee:	d047      	beq.n	5680 <main+0x130>
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    55f0:	4b3e      	ldr	r3, [pc, #248]	; (56ec <main+0x19c>)
    55f2:	6a1b      	ldr	r3, [r3, #32]
				if(port_pin_get_input_level(SW0_PIN) == SW0_ACTIVE){
    55f4:	021b      	lsls	r3, r3, #8
    55f6:	d449      	bmi.n	568c <main+0x13c>
					SerialConsoleWriteString("DETECTED PRESS.\r\n");
    55f8:	483d      	ldr	r0, [pc, #244]	; (56f0 <main+0x1a0>)
    55fa:	4b30      	ldr	r3, [pc, #192]	; (56bc <main+0x16c>)
    55fc:	4798      	blx	r3
					currentStatus = readFlags(); // reading struct Flags stored on NVM
    55fe:	4b30      	ldr	r3, [pc, #192]	; (56c0 <main+0x170>)
    5600:	4798      	blx	r3
    5602:	0005      	movs	r5, r0
					readMetadata(currentStatus);
    5604:	4b3b      	ldr	r3, [pc, #236]	; (56f4 <main+0x1a4>)
    5606:	4798      	blx	r3
					success = fw_update(currentStatus);
    5608:	4e3b      	ldr	r6, [pc, #236]	; (56f8 <main+0x1a8>)
    560a:	0028      	movs	r0, r5
    560c:	47b0      	blx	r6
				} while(!success);
    560e:	2800      	cmp	r0, #0
    5610:	d0fb      	beq.n	560a <main+0xba>
				updateFlags(currentStatus);
    5612:	0028      	movs	r0, r5
    5614:	4b39      	ldr	r3, [pc, #228]	; (56fc <main+0x1ac>)
    5616:	4798      	blx	r3
		SerialConsoleWriteString("\r\nProceeding to Application Code\r\n");
    5618:	4839      	ldr	r0, [pc, #228]	; (5700 <main+0x1b0>)
    561a:	4b28      	ldr	r3, [pc, #160]	; (56bc <main+0x16c>)
    561c:	4798      	blx	r3
		delay_s(1); //Delay to allow text to print
    561e:	2000      	movs	r0, #0
    5620:	4b38      	ldr	r3, [pc, #224]	; (5704 <main+0x1b4>)
    5622:	4798      	blx	r3
    5624:	22fa      	movs	r2, #250	; 0xfa
    5626:	0092      	lsls	r2, r2, #2
    5628:	2300      	movs	r3, #0
    562a:	2100      	movs	r1, #0
    562c:	4d36      	ldr	r5, [pc, #216]	; (5708 <main+0x1b8>)
    562e:	47a8      	blx	r5
    5630:	4a36      	ldr	r2, [pc, #216]	; (570c <main+0x1bc>)
    5632:	2300      	movs	r3, #0
    5634:	1880      	adds	r0, r0, r2
    5636:	4159      	adcs	r1, r3
    5638:	4a35      	ldr	r2, [pc, #212]	; (5710 <main+0x1c0>)
    563a:	2300      	movs	r3, #0
    563c:	4d35      	ldr	r5, [pc, #212]	; (5714 <main+0x1c4>)
    563e:	47a8      	blx	r5
    5640:	4b35      	ldr	r3, [pc, #212]	; (5718 <main+0x1c8>)
    5642:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5644:	b672      	cpsid	i
    5646:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
    564a:	4b17      	ldr	r3, [pc, #92]	; (56a8 <main+0x158>)
    564c:	2200      	movs	r2, #0
    564e:	701a      	strb	r2, [r3, #0]
		DeinitializeSerialConsole();
    5650:	4b32      	ldr	r3, [pc, #200]	; (571c <main+0x1cc>)
    5652:	4798      	blx	r3
		sd_mmc_deinit();
    5654:	4b32      	ldr	r3, [pc, #200]	; (5720 <main+0x1d0>)
    5656:	4798      	blx	r3
static void jumpToApplication(void){
	/// Function pointer to application section
	void (*applicationCodeEntry)(void);

	/// Rebase stack pointer
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    5658:	23b0      	movs	r3, #176	; 0xb0
    565a:	021b      	lsls	r3, r3, #8

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    565c:	681a      	ldr	r2, [r3, #0]
    565e:	f382 8808 	msr	MSP, r2

	/// Rebase vector table
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    5662:	4a30      	ldr	r2, [pc, #192]	; (5724 <main+0x1d4>)
    5664:	6093      	str	r3, [r2, #8]

	/// Set pointer to application section
	applicationCodeEntry =
	(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    5666:	4b30      	ldr	r3, [pc, #192]	; (5728 <main+0x1d8>)

	/// Jump to application
	applicationCodeEntry();
    5668:	681b      	ldr	r3, [r3, #0]
    566a:	4798      	blx	r3
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    566c:	4d19      	ldr	r5, [pc, #100]	; (56d4 <main+0x184>)
    566e:	2000      	movs	r0, #0
    5670:	47a8      	blx	r5
    5672:	2802      	cmp	r0, #2
    5674:	d1fb      	bne.n	566e <main+0x11e>
				SerialConsoleWriteString("Please plug an SD/MMC card in slot.\n\r");
    5676:	482d      	ldr	r0, [pc, #180]	; (572c <main+0x1dc>)
    5678:	4b10      	ldr	r3, [pc, #64]	; (56bc <main+0x16c>)
    567a:	4798      	blx	r3
					status = sd_mmc_test_unit_ready(0);
    567c:	4e12      	ldr	r6, [pc, #72]	; (56c8 <main+0x178>)
    567e:	e794      	b.n	55aa <main+0x5a>
					LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    5680:	220b      	movs	r2, #11
    5682:	492b      	ldr	r1, [pc, #172]	; (5730 <main+0x1e0>)
    5684:	2000      	movs	r0, #0
    5686:	4b2b      	ldr	r3, [pc, #172]	; (5734 <main+0x1e4>)
    5688:	4798      	blx	r3
					goto main_end_of_test;
    568a:	e7c5      	b.n	5618 <main+0xc8>
					currentStatus = readFlags(); // reading struct Flags stored on NVM
    568c:	4b0c      	ldr	r3, [pc, #48]	; (56c0 <main+0x170>)
    568e:	4798      	blx	r3
    5690:	0005      	movs	r5, r0
					bool updateRequired = readMetadata(currentStatus);
    5692:	4b18      	ldr	r3, [pc, #96]	; (56f4 <main+0x1a4>)
    5694:	4798      	blx	r3
					if(!updateRequired){
    5696:	2800      	cmp	r0, #0
    5698:	d0be      	beq.n	5618 <main+0xc8>
    569a:	e7b5      	b.n	5608 <main+0xb8>
    569c:	0000346d 	.word	0x0000346d
    56a0:	000018a5 	.word	0x000018a5
    56a4:	000005a5 	.word	0x000005a5
    56a8:	2000000d 	.word	0x2000000d
    56ac:	000008f9 	.word	0x000008f9
    56b0:	41004000 	.word	0x41004000
    56b4:	00000225 	.word	0x00000225
    56b8:	00006dc8 	.word	0x00006dc8
    56bc:	00000705 	.word	0x00000705
    56c0:	00005079 	.word	0x00005079
    56c4:	00006e0c 	.word	0x00006e0c
    56c8:	20000c96 	.word	0x20000c96
    56cc:	0000102d 	.word	0x0000102d
    56d0:	00006e20 	.word	0x00006e20
    56d4:	00000919 	.word	0x00000919
    56d8:	00006e48 	.word	0x00006e48
    56dc:	20000a04 	.word	0x20000a04
    56e0:	00005cfb 	.word	0x00005cfb
    56e4:	00004b91 	.word	0x00004b91
    56e8:	20000c94 	.word	0x20000c94
    56ec:	41004480 	.word	0x41004480
    56f0:	00006e60 	.word	0x00006e60
    56f4:	000050ad 	.word	0x000050ad
    56f8:	000052a9 	.word	0x000052a9
    56fc:	000051a5 	.word	0x000051a5
    5700:	00006e74 	.word	0x00006e74
    5704:	00003229 	.word	0x00003229
    5708:	00005a65 	.word	0x00005a65
    570c:	00001b57 	.word	0x00001b57
    5710:	00001b58 	.word	0x00001b58
    5714:	00005a25 	.word	0x00005a25
    5718:	20000001 	.word	0x20000001
    571c:	000006cd 	.word	0x000006cd
    5720:	0000137d 	.word	0x0000137d
    5724:	e000ed00 	.word	0xe000ed00
    5728:	0000b004 	.word	0x0000b004
    572c:	00006de4 	.word	0x00006de4
    5730:	00006eb8 	.word	0x00006eb8
    5734:	000007cd 	.word	0x000007cd

00005738 <__udivsi3>:
    5738:	2200      	movs	r2, #0
    573a:	0843      	lsrs	r3, r0, #1
    573c:	428b      	cmp	r3, r1
    573e:	d374      	bcc.n	582a <__udivsi3+0xf2>
    5740:	0903      	lsrs	r3, r0, #4
    5742:	428b      	cmp	r3, r1
    5744:	d35f      	bcc.n	5806 <__udivsi3+0xce>
    5746:	0a03      	lsrs	r3, r0, #8
    5748:	428b      	cmp	r3, r1
    574a:	d344      	bcc.n	57d6 <__udivsi3+0x9e>
    574c:	0b03      	lsrs	r3, r0, #12
    574e:	428b      	cmp	r3, r1
    5750:	d328      	bcc.n	57a4 <__udivsi3+0x6c>
    5752:	0c03      	lsrs	r3, r0, #16
    5754:	428b      	cmp	r3, r1
    5756:	d30d      	bcc.n	5774 <__udivsi3+0x3c>
    5758:	22ff      	movs	r2, #255	; 0xff
    575a:	0209      	lsls	r1, r1, #8
    575c:	ba12      	rev	r2, r2
    575e:	0c03      	lsrs	r3, r0, #16
    5760:	428b      	cmp	r3, r1
    5762:	d302      	bcc.n	576a <__udivsi3+0x32>
    5764:	1212      	asrs	r2, r2, #8
    5766:	0209      	lsls	r1, r1, #8
    5768:	d065      	beq.n	5836 <__udivsi3+0xfe>
    576a:	0b03      	lsrs	r3, r0, #12
    576c:	428b      	cmp	r3, r1
    576e:	d319      	bcc.n	57a4 <__udivsi3+0x6c>
    5770:	e000      	b.n	5774 <__udivsi3+0x3c>
    5772:	0a09      	lsrs	r1, r1, #8
    5774:	0bc3      	lsrs	r3, r0, #15
    5776:	428b      	cmp	r3, r1
    5778:	d301      	bcc.n	577e <__udivsi3+0x46>
    577a:	03cb      	lsls	r3, r1, #15
    577c:	1ac0      	subs	r0, r0, r3
    577e:	4152      	adcs	r2, r2
    5780:	0b83      	lsrs	r3, r0, #14
    5782:	428b      	cmp	r3, r1
    5784:	d301      	bcc.n	578a <__udivsi3+0x52>
    5786:	038b      	lsls	r3, r1, #14
    5788:	1ac0      	subs	r0, r0, r3
    578a:	4152      	adcs	r2, r2
    578c:	0b43      	lsrs	r3, r0, #13
    578e:	428b      	cmp	r3, r1
    5790:	d301      	bcc.n	5796 <__udivsi3+0x5e>
    5792:	034b      	lsls	r3, r1, #13
    5794:	1ac0      	subs	r0, r0, r3
    5796:	4152      	adcs	r2, r2
    5798:	0b03      	lsrs	r3, r0, #12
    579a:	428b      	cmp	r3, r1
    579c:	d301      	bcc.n	57a2 <__udivsi3+0x6a>
    579e:	030b      	lsls	r3, r1, #12
    57a0:	1ac0      	subs	r0, r0, r3
    57a2:	4152      	adcs	r2, r2
    57a4:	0ac3      	lsrs	r3, r0, #11
    57a6:	428b      	cmp	r3, r1
    57a8:	d301      	bcc.n	57ae <__udivsi3+0x76>
    57aa:	02cb      	lsls	r3, r1, #11
    57ac:	1ac0      	subs	r0, r0, r3
    57ae:	4152      	adcs	r2, r2
    57b0:	0a83      	lsrs	r3, r0, #10
    57b2:	428b      	cmp	r3, r1
    57b4:	d301      	bcc.n	57ba <__udivsi3+0x82>
    57b6:	028b      	lsls	r3, r1, #10
    57b8:	1ac0      	subs	r0, r0, r3
    57ba:	4152      	adcs	r2, r2
    57bc:	0a43      	lsrs	r3, r0, #9
    57be:	428b      	cmp	r3, r1
    57c0:	d301      	bcc.n	57c6 <__udivsi3+0x8e>
    57c2:	024b      	lsls	r3, r1, #9
    57c4:	1ac0      	subs	r0, r0, r3
    57c6:	4152      	adcs	r2, r2
    57c8:	0a03      	lsrs	r3, r0, #8
    57ca:	428b      	cmp	r3, r1
    57cc:	d301      	bcc.n	57d2 <__udivsi3+0x9a>
    57ce:	020b      	lsls	r3, r1, #8
    57d0:	1ac0      	subs	r0, r0, r3
    57d2:	4152      	adcs	r2, r2
    57d4:	d2cd      	bcs.n	5772 <__udivsi3+0x3a>
    57d6:	09c3      	lsrs	r3, r0, #7
    57d8:	428b      	cmp	r3, r1
    57da:	d301      	bcc.n	57e0 <__udivsi3+0xa8>
    57dc:	01cb      	lsls	r3, r1, #7
    57de:	1ac0      	subs	r0, r0, r3
    57e0:	4152      	adcs	r2, r2
    57e2:	0983      	lsrs	r3, r0, #6
    57e4:	428b      	cmp	r3, r1
    57e6:	d301      	bcc.n	57ec <__udivsi3+0xb4>
    57e8:	018b      	lsls	r3, r1, #6
    57ea:	1ac0      	subs	r0, r0, r3
    57ec:	4152      	adcs	r2, r2
    57ee:	0943      	lsrs	r3, r0, #5
    57f0:	428b      	cmp	r3, r1
    57f2:	d301      	bcc.n	57f8 <__udivsi3+0xc0>
    57f4:	014b      	lsls	r3, r1, #5
    57f6:	1ac0      	subs	r0, r0, r3
    57f8:	4152      	adcs	r2, r2
    57fa:	0903      	lsrs	r3, r0, #4
    57fc:	428b      	cmp	r3, r1
    57fe:	d301      	bcc.n	5804 <__udivsi3+0xcc>
    5800:	010b      	lsls	r3, r1, #4
    5802:	1ac0      	subs	r0, r0, r3
    5804:	4152      	adcs	r2, r2
    5806:	08c3      	lsrs	r3, r0, #3
    5808:	428b      	cmp	r3, r1
    580a:	d301      	bcc.n	5810 <__udivsi3+0xd8>
    580c:	00cb      	lsls	r3, r1, #3
    580e:	1ac0      	subs	r0, r0, r3
    5810:	4152      	adcs	r2, r2
    5812:	0883      	lsrs	r3, r0, #2
    5814:	428b      	cmp	r3, r1
    5816:	d301      	bcc.n	581c <__udivsi3+0xe4>
    5818:	008b      	lsls	r3, r1, #2
    581a:	1ac0      	subs	r0, r0, r3
    581c:	4152      	adcs	r2, r2
    581e:	0843      	lsrs	r3, r0, #1
    5820:	428b      	cmp	r3, r1
    5822:	d301      	bcc.n	5828 <__udivsi3+0xf0>
    5824:	004b      	lsls	r3, r1, #1
    5826:	1ac0      	subs	r0, r0, r3
    5828:	4152      	adcs	r2, r2
    582a:	1a41      	subs	r1, r0, r1
    582c:	d200      	bcs.n	5830 <__udivsi3+0xf8>
    582e:	4601      	mov	r1, r0
    5830:	4152      	adcs	r2, r2
    5832:	4610      	mov	r0, r2
    5834:	4770      	bx	lr
    5836:	e7ff      	b.n	5838 <__udivsi3+0x100>
    5838:	b501      	push	{r0, lr}
    583a:	2000      	movs	r0, #0
    583c:	f000 f8f0 	bl	5a20 <__aeabi_idiv0>
    5840:	bd02      	pop	{r1, pc}
    5842:	46c0      	nop			; (mov r8, r8)

00005844 <__aeabi_uidivmod>:
    5844:	2900      	cmp	r1, #0
    5846:	d0f7      	beq.n	5838 <__udivsi3+0x100>
    5848:	e776      	b.n	5738 <__udivsi3>
    584a:	4770      	bx	lr

0000584c <__divsi3>:
    584c:	4603      	mov	r3, r0
    584e:	430b      	orrs	r3, r1
    5850:	d47f      	bmi.n	5952 <__divsi3+0x106>
    5852:	2200      	movs	r2, #0
    5854:	0843      	lsrs	r3, r0, #1
    5856:	428b      	cmp	r3, r1
    5858:	d374      	bcc.n	5944 <__divsi3+0xf8>
    585a:	0903      	lsrs	r3, r0, #4
    585c:	428b      	cmp	r3, r1
    585e:	d35f      	bcc.n	5920 <__divsi3+0xd4>
    5860:	0a03      	lsrs	r3, r0, #8
    5862:	428b      	cmp	r3, r1
    5864:	d344      	bcc.n	58f0 <__divsi3+0xa4>
    5866:	0b03      	lsrs	r3, r0, #12
    5868:	428b      	cmp	r3, r1
    586a:	d328      	bcc.n	58be <__divsi3+0x72>
    586c:	0c03      	lsrs	r3, r0, #16
    586e:	428b      	cmp	r3, r1
    5870:	d30d      	bcc.n	588e <__divsi3+0x42>
    5872:	22ff      	movs	r2, #255	; 0xff
    5874:	0209      	lsls	r1, r1, #8
    5876:	ba12      	rev	r2, r2
    5878:	0c03      	lsrs	r3, r0, #16
    587a:	428b      	cmp	r3, r1
    587c:	d302      	bcc.n	5884 <__divsi3+0x38>
    587e:	1212      	asrs	r2, r2, #8
    5880:	0209      	lsls	r1, r1, #8
    5882:	d065      	beq.n	5950 <__divsi3+0x104>
    5884:	0b03      	lsrs	r3, r0, #12
    5886:	428b      	cmp	r3, r1
    5888:	d319      	bcc.n	58be <__divsi3+0x72>
    588a:	e000      	b.n	588e <__divsi3+0x42>
    588c:	0a09      	lsrs	r1, r1, #8
    588e:	0bc3      	lsrs	r3, r0, #15
    5890:	428b      	cmp	r3, r1
    5892:	d301      	bcc.n	5898 <__divsi3+0x4c>
    5894:	03cb      	lsls	r3, r1, #15
    5896:	1ac0      	subs	r0, r0, r3
    5898:	4152      	adcs	r2, r2
    589a:	0b83      	lsrs	r3, r0, #14
    589c:	428b      	cmp	r3, r1
    589e:	d301      	bcc.n	58a4 <__divsi3+0x58>
    58a0:	038b      	lsls	r3, r1, #14
    58a2:	1ac0      	subs	r0, r0, r3
    58a4:	4152      	adcs	r2, r2
    58a6:	0b43      	lsrs	r3, r0, #13
    58a8:	428b      	cmp	r3, r1
    58aa:	d301      	bcc.n	58b0 <__divsi3+0x64>
    58ac:	034b      	lsls	r3, r1, #13
    58ae:	1ac0      	subs	r0, r0, r3
    58b0:	4152      	adcs	r2, r2
    58b2:	0b03      	lsrs	r3, r0, #12
    58b4:	428b      	cmp	r3, r1
    58b6:	d301      	bcc.n	58bc <__divsi3+0x70>
    58b8:	030b      	lsls	r3, r1, #12
    58ba:	1ac0      	subs	r0, r0, r3
    58bc:	4152      	adcs	r2, r2
    58be:	0ac3      	lsrs	r3, r0, #11
    58c0:	428b      	cmp	r3, r1
    58c2:	d301      	bcc.n	58c8 <__divsi3+0x7c>
    58c4:	02cb      	lsls	r3, r1, #11
    58c6:	1ac0      	subs	r0, r0, r3
    58c8:	4152      	adcs	r2, r2
    58ca:	0a83      	lsrs	r3, r0, #10
    58cc:	428b      	cmp	r3, r1
    58ce:	d301      	bcc.n	58d4 <__divsi3+0x88>
    58d0:	028b      	lsls	r3, r1, #10
    58d2:	1ac0      	subs	r0, r0, r3
    58d4:	4152      	adcs	r2, r2
    58d6:	0a43      	lsrs	r3, r0, #9
    58d8:	428b      	cmp	r3, r1
    58da:	d301      	bcc.n	58e0 <__divsi3+0x94>
    58dc:	024b      	lsls	r3, r1, #9
    58de:	1ac0      	subs	r0, r0, r3
    58e0:	4152      	adcs	r2, r2
    58e2:	0a03      	lsrs	r3, r0, #8
    58e4:	428b      	cmp	r3, r1
    58e6:	d301      	bcc.n	58ec <__divsi3+0xa0>
    58e8:	020b      	lsls	r3, r1, #8
    58ea:	1ac0      	subs	r0, r0, r3
    58ec:	4152      	adcs	r2, r2
    58ee:	d2cd      	bcs.n	588c <__divsi3+0x40>
    58f0:	09c3      	lsrs	r3, r0, #7
    58f2:	428b      	cmp	r3, r1
    58f4:	d301      	bcc.n	58fa <__divsi3+0xae>
    58f6:	01cb      	lsls	r3, r1, #7
    58f8:	1ac0      	subs	r0, r0, r3
    58fa:	4152      	adcs	r2, r2
    58fc:	0983      	lsrs	r3, r0, #6
    58fe:	428b      	cmp	r3, r1
    5900:	d301      	bcc.n	5906 <__divsi3+0xba>
    5902:	018b      	lsls	r3, r1, #6
    5904:	1ac0      	subs	r0, r0, r3
    5906:	4152      	adcs	r2, r2
    5908:	0943      	lsrs	r3, r0, #5
    590a:	428b      	cmp	r3, r1
    590c:	d301      	bcc.n	5912 <__divsi3+0xc6>
    590e:	014b      	lsls	r3, r1, #5
    5910:	1ac0      	subs	r0, r0, r3
    5912:	4152      	adcs	r2, r2
    5914:	0903      	lsrs	r3, r0, #4
    5916:	428b      	cmp	r3, r1
    5918:	d301      	bcc.n	591e <__divsi3+0xd2>
    591a:	010b      	lsls	r3, r1, #4
    591c:	1ac0      	subs	r0, r0, r3
    591e:	4152      	adcs	r2, r2
    5920:	08c3      	lsrs	r3, r0, #3
    5922:	428b      	cmp	r3, r1
    5924:	d301      	bcc.n	592a <__divsi3+0xde>
    5926:	00cb      	lsls	r3, r1, #3
    5928:	1ac0      	subs	r0, r0, r3
    592a:	4152      	adcs	r2, r2
    592c:	0883      	lsrs	r3, r0, #2
    592e:	428b      	cmp	r3, r1
    5930:	d301      	bcc.n	5936 <__divsi3+0xea>
    5932:	008b      	lsls	r3, r1, #2
    5934:	1ac0      	subs	r0, r0, r3
    5936:	4152      	adcs	r2, r2
    5938:	0843      	lsrs	r3, r0, #1
    593a:	428b      	cmp	r3, r1
    593c:	d301      	bcc.n	5942 <__divsi3+0xf6>
    593e:	004b      	lsls	r3, r1, #1
    5940:	1ac0      	subs	r0, r0, r3
    5942:	4152      	adcs	r2, r2
    5944:	1a41      	subs	r1, r0, r1
    5946:	d200      	bcs.n	594a <__divsi3+0xfe>
    5948:	4601      	mov	r1, r0
    594a:	4152      	adcs	r2, r2
    594c:	4610      	mov	r0, r2
    594e:	4770      	bx	lr
    5950:	e05d      	b.n	5a0e <__divsi3+0x1c2>
    5952:	0fca      	lsrs	r2, r1, #31
    5954:	d000      	beq.n	5958 <__divsi3+0x10c>
    5956:	4249      	negs	r1, r1
    5958:	1003      	asrs	r3, r0, #32
    595a:	d300      	bcc.n	595e <__divsi3+0x112>
    595c:	4240      	negs	r0, r0
    595e:	4053      	eors	r3, r2
    5960:	2200      	movs	r2, #0
    5962:	469c      	mov	ip, r3
    5964:	0903      	lsrs	r3, r0, #4
    5966:	428b      	cmp	r3, r1
    5968:	d32d      	bcc.n	59c6 <__divsi3+0x17a>
    596a:	0a03      	lsrs	r3, r0, #8
    596c:	428b      	cmp	r3, r1
    596e:	d312      	bcc.n	5996 <__divsi3+0x14a>
    5970:	22fc      	movs	r2, #252	; 0xfc
    5972:	0189      	lsls	r1, r1, #6
    5974:	ba12      	rev	r2, r2
    5976:	0a03      	lsrs	r3, r0, #8
    5978:	428b      	cmp	r3, r1
    597a:	d30c      	bcc.n	5996 <__divsi3+0x14a>
    597c:	0189      	lsls	r1, r1, #6
    597e:	1192      	asrs	r2, r2, #6
    5980:	428b      	cmp	r3, r1
    5982:	d308      	bcc.n	5996 <__divsi3+0x14a>
    5984:	0189      	lsls	r1, r1, #6
    5986:	1192      	asrs	r2, r2, #6
    5988:	428b      	cmp	r3, r1
    598a:	d304      	bcc.n	5996 <__divsi3+0x14a>
    598c:	0189      	lsls	r1, r1, #6
    598e:	d03a      	beq.n	5a06 <__divsi3+0x1ba>
    5990:	1192      	asrs	r2, r2, #6
    5992:	e000      	b.n	5996 <__divsi3+0x14a>
    5994:	0989      	lsrs	r1, r1, #6
    5996:	09c3      	lsrs	r3, r0, #7
    5998:	428b      	cmp	r3, r1
    599a:	d301      	bcc.n	59a0 <__divsi3+0x154>
    599c:	01cb      	lsls	r3, r1, #7
    599e:	1ac0      	subs	r0, r0, r3
    59a0:	4152      	adcs	r2, r2
    59a2:	0983      	lsrs	r3, r0, #6
    59a4:	428b      	cmp	r3, r1
    59a6:	d301      	bcc.n	59ac <__divsi3+0x160>
    59a8:	018b      	lsls	r3, r1, #6
    59aa:	1ac0      	subs	r0, r0, r3
    59ac:	4152      	adcs	r2, r2
    59ae:	0943      	lsrs	r3, r0, #5
    59b0:	428b      	cmp	r3, r1
    59b2:	d301      	bcc.n	59b8 <__divsi3+0x16c>
    59b4:	014b      	lsls	r3, r1, #5
    59b6:	1ac0      	subs	r0, r0, r3
    59b8:	4152      	adcs	r2, r2
    59ba:	0903      	lsrs	r3, r0, #4
    59bc:	428b      	cmp	r3, r1
    59be:	d301      	bcc.n	59c4 <__divsi3+0x178>
    59c0:	010b      	lsls	r3, r1, #4
    59c2:	1ac0      	subs	r0, r0, r3
    59c4:	4152      	adcs	r2, r2
    59c6:	08c3      	lsrs	r3, r0, #3
    59c8:	428b      	cmp	r3, r1
    59ca:	d301      	bcc.n	59d0 <__divsi3+0x184>
    59cc:	00cb      	lsls	r3, r1, #3
    59ce:	1ac0      	subs	r0, r0, r3
    59d0:	4152      	adcs	r2, r2
    59d2:	0883      	lsrs	r3, r0, #2
    59d4:	428b      	cmp	r3, r1
    59d6:	d301      	bcc.n	59dc <__divsi3+0x190>
    59d8:	008b      	lsls	r3, r1, #2
    59da:	1ac0      	subs	r0, r0, r3
    59dc:	4152      	adcs	r2, r2
    59de:	d2d9      	bcs.n	5994 <__divsi3+0x148>
    59e0:	0843      	lsrs	r3, r0, #1
    59e2:	428b      	cmp	r3, r1
    59e4:	d301      	bcc.n	59ea <__divsi3+0x19e>
    59e6:	004b      	lsls	r3, r1, #1
    59e8:	1ac0      	subs	r0, r0, r3
    59ea:	4152      	adcs	r2, r2
    59ec:	1a41      	subs	r1, r0, r1
    59ee:	d200      	bcs.n	59f2 <__divsi3+0x1a6>
    59f0:	4601      	mov	r1, r0
    59f2:	4663      	mov	r3, ip
    59f4:	4152      	adcs	r2, r2
    59f6:	105b      	asrs	r3, r3, #1
    59f8:	4610      	mov	r0, r2
    59fa:	d301      	bcc.n	5a00 <__divsi3+0x1b4>
    59fc:	4240      	negs	r0, r0
    59fe:	2b00      	cmp	r3, #0
    5a00:	d500      	bpl.n	5a04 <__divsi3+0x1b8>
    5a02:	4249      	negs	r1, r1
    5a04:	4770      	bx	lr
    5a06:	4663      	mov	r3, ip
    5a08:	105b      	asrs	r3, r3, #1
    5a0a:	d300      	bcc.n	5a0e <__divsi3+0x1c2>
    5a0c:	4240      	negs	r0, r0
    5a0e:	b501      	push	{r0, lr}
    5a10:	2000      	movs	r0, #0
    5a12:	f000 f805 	bl	5a20 <__aeabi_idiv0>
    5a16:	bd02      	pop	{r1, pc}

00005a18 <__aeabi_idivmod>:
    5a18:	2900      	cmp	r1, #0
    5a1a:	d0f8      	beq.n	5a0e <__divsi3+0x1c2>
    5a1c:	e716      	b.n	584c <__divsi3>
    5a1e:	4770      	bx	lr

00005a20 <__aeabi_idiv0>:
    5a20:	4770      	bx	lr
    5a22:	46c0      	nop			; (mov r8, r8)

00005a24 <__aeabi_uldivmod>:
    5a24:	2b00      	cmp	r3, #0
    5a26:	d111      	bne.n	5a4c <__aeabi_uldivmod+0x28>
    5a28:	2a00      	cmp	r2, #0
    5a2a:	d10f      	bne.n	5a4c <__aeabi_uldivmod+0x28>
    5a2c:	2900      	cmp	r1, #0
    5a2e:	d100      	bne.n	5a32 <__aeabi_uldivmod+0xe>
    5a30:	2800      	cmp	r0, #0
    5a32:	d002      	beq.n	5a3a <__aeabi_uldivmod+0x16>
    5a34:	2100      	movs	r1, #0
    5a36:	43c9      	mvns	r1, r1
    5a38:	1c08      	adds	r0, r1, #0
    5a3a:	b407      	push	{r0, r1, r2}
    5a3c:	4802      	ldr	r0, [pc, #8]	; (5a48 <__aeabi_uldivmod+0x24>)
    5a3e:	a102      	add	r1, pc, #8	; (adr r1, 5a48 <__aeabi_uldivmod+0x24>)
    5a40:	1840      	adds	r0, r0, r1
    5a42:	9002      	str	r0, [sp, #8]
    5a44:	bd03      	pop	{r0, r1, pc}
    5a46:	46c0      	nop			; (mov r8, r8)
    5a48:	ffffffd9 	.word	0xffffffd9
    5a4c:	b403      	push	{r0, r1}
    5a4e:	4668      	mov	r0, sp
    5a50:	b501      	push	{r0, lr}
    5a52:	9802      	ldr	r0, [sp, #8]
    5a54:	f000 f830 	bl	5ab8 <__udivmoddi4>
    5a58:	9b01      	ldr	r3, [sp, #4]
    5a5a:	469e      	mov	lr, r3
    5a5c:	b002      	add	sp, #8
    5a5e:	bc0c      	pop	{r2, r3}
    5a60:	4770      	bx	lr
    5a62:	46c0      	nop			; (mov r8, r8)

00005a64 <__aeabi_lmul>:
    5a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a66:	46ce      	mov	lr, r9
    5a68:	4647      	mov	r7, r8
    5a6a:	0415      	lsls	r5, r2, #16
    5a6c:	0c2d      	lsrs	r5, r5, #16
    5a6e:	002e      	movs	r6, r5
    5a70:	b580      	push	{r7, lr}
    5a72:	0407      	lsls	r7, r0, #16
    5a74:	0c14      	lsrs	r4, r2, #16
    5a76:	0c3f      	lsrs	r7, r7, #16
    5a78:	4699      	mov	r9, r3
    5a7a:	0c03      	lsrs	r3, r0, #16
    5a7c:	437e      	muls	r6, r7
    5a7e:	435d      	muls	r5, r3
    5a80:	4367      	muls	r7, r4
    5a82:	4363      	muls	r3, r4
    5a84:	197f      	adds	r7, r7, r5
    5a86:	0c34      	lsrs	r4, r6, #16
    5a88:	19e4      	adds	r4, r4, r7
    5a8a:	469c      	mov	ip, r3
    5a8c:	42a5      	cmp	r5, r4
    5a8e:	d903      	bls.n	5a98 <__aeabi_lmul+0x34>
    5a90:	2380      	movs	r3, #128	; 0x80
    5a92:	025b      	lsls	r3, r3, #9
    5a94:	4698      	mov	r8, r3
    5a96:	44c4      	add	ip, r8
    5a98:	464b      	mov	r3, r9
    5a9a:	4351      	muls	r1, r2
    5a9c:	4343      	muls	r3, r0
    5a9e:	0436      	lsls	r6, r6, #16
    5aa0:	0c36      	lsrs	r6, r6, #16
    5aa2:	0c25      	lsrs	r5, r4, #16
    5aa4:	0424      	lsls	r4, r4, #16
    5aa6:	4465      	add	r5, ip
    5aa8:	19a4      	adds	r4, r4, r6
    5aaa:	1859      	adds	r1, r3, r1
    5aac:	1949      	adds	r1, r1, r5
    5aae:	0020      	movs	r0, r4
    5ab0:	bc0c      	pop	{r2, r3}
    5ab2:	4690      	mov	r8, r2
    5ab4:	4699      	mov	r9, r3
    5ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005ab8 <__udivmoddi4>:
    5ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aba:	4657      	mov	r7, sl
    5abc:	464e      	mov	r6, r9
    5abe:	4645      	mov	r5, r8
    5ac0:	46de      	mov	lr, fp
    5ac2:	b5e0      	push	{r5, r6, r7, lr}
    5ac4:	0004      	movs	r4, r0
    5ac6:	b083      	sub	sp, #12
    5ac8:	000d      	movs	r5, r1
    5aca:	4692      	mov	sl, r2
    5acc:	4699      	mov	r9, r3
    5ace:	428b      	cmp	r3, r1
    5ad0:	d82f      	bhi.n	5b32 <__udivmoddi4+0x7a>
    5ad2:	d02c      	beq.n	5b2e <__udivmoddi4+0x76>
    5ad4:	4649      	mov	r1, r9
    5ad6:	4650      	mov	r0, sl
    5ad8:	f000 f8ae 	bl	5c38 <__clzdi2>
    5adc:	0029      	movs	r1, r5
    5ade:	0006      	movs	r6, r0
    5ae0:	0020      	movs	r0, r4
    5ae2:	f000 f8a9 	bl	5c38 <__clzdi2>
    5ae6:	1a33      	subs	r3, r6, r0
    5ae8:	4698      	mov	r8, r3
    5aea:	3b20      	subs	r3, #32
    5aec:	469b      	mov	fp, r3
    5aee:	d500      	bpl.n	5af2 <__udivmoddi4+0x3a>
    5af0:	e074      	b.n	5bdc <__udivmoddi4+0x124>
    5af2:	4653      	mov	r3, sl
    5af4:	465a      	mov	r2, fp
    5af6:	4093      	lsls	r3, r2
    5af8:	001f      	movs	r7, r3
    5afa:	4653      	mov	r3, sl
    5afc:	4642      	mov	r2, r8
    5afe:	4093      	lsls	r3, r2
    5b00:	001e      	movs	r6, r3
    5b02:	42af      	cmp	r7, r5
    5b04:	d829      	bhi.n	5b5a <__udivmoddi4+0xa2>
    5b06:	d026      	beq.n	5b56 <__udivmoddi4+0x9e>
    5b08:	465b      	mov	r3, fp
    5b0a:	1ba4      	subs	r4, r4, r6
    5b0c:	41bd      	sbcs	r5, r7
    5b0e:	2b00      	cmp	r3, #0
    5b10:	da00      	bge.n	5b14 <__udivmoddi4+0x5c>
    5b12:	e079      	b.n	5c08 <__udivmoddi4+0x150>
    5b14:	2200      	movs	r2, #0
    5b16:	2300      	movs	r3, #0
    5b18:	9200      	str	r2, [sp, #0]
    5b1a:	9301      	str	r3, [sp, #4]
    5b1c:	2301      	movs	r3, #1
    5b1e:	465a      	mov	r2, fp
    5b20:	4093      	lsls	r3, r2
    5b22:	9301      	str	r3, [sp, #4]
    5b24:	2301      	movs	r3, #1
    5b26:	4642      	mov	r2, r8
    5b28:	4093      	lsls	r3, r2
    5b2a:	9300      	str	r3, [sp, #0]
    5b2c:	e019      	b.n	5b62 <__udivmoddi4+0xaa>
    5b2e:	4282      	cmp	r2, r0
    5b30:	d9d0      	bls.n	5ad4 <__udivmoddi4+0x1c>
    5b32:	2200      	movs	r2, #0
    5b34:	2300      	movs	r3, #0
    5b36:	9200      	str	r2, [sp, #0]
    5b38:	9301      	str	r3, [sp, #4]
    5b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b3c:	2b00      	cmp	r3, #0
    5b3e:	d001      	beq.n	5b44 <__udivmoddi4+0x8c>
    5b40:	601c      	str	r4, [r3, #0]
    5b42:	605d      	str	r5, [r3, #4]
    5b44:	9800      	ldr	r0, [sp, #0]
    5b46:	9901      	ldr	r1, [sp, #4]
    5b48:	b003      	add	sp, #12
    5b4a:	bc3c      	pop	{r2, r3, r4, r5}
    5b4c:	4690      	mov	r8, r2
    5b4e:	4699      	mov	r9, r3
    5b50:	46a2      	mov	sl, r4
    5b52:	46ab      	mov	fp, r5
    5b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b56:	42a3      	cmp	r3, r4
    5b58:	d9d6      	bls.n	5b08 <__udivmoddi4+0x50>
    5b5a:	2200      	movs	r2, #0
    5b5c:	2300      	movs	r3, #0
    5b5e:	9200      	str	r2, [sp, #0]
    5b60:	9301      	str	r3, [sp, #4]
    5b62:	4643      	mov	r3, r8
    5b64:	2b00      	cmp	r3, #0
    5b66:	d0e8      	beq.n	5b3a <__udivmoddi4+0x82>
    5b68:	07fb      	lsls	r3, r7, #31
    5b6a:	0872      	lsrs	r2, r6, #1
    5b6c:	431a      	orrs	r2, r3
    5b6e:	4646      	mov	r6, r8
    5b70:	087b      	lsrs	r3, r7, #1
    5b72:	e00e      	b.n	5b92 <__udivmoddi4+0xda>
    5b74:	42ab      	cmp	r3, r5
    5b76:	d101      	bne.n	5b7c <__udivmoddi4+0xc4>
    5b78:	42a2      	cmp	r2, r4
    5b7a:	d80c      	bhi.n	5b96 <__udivmoddi4+0xde>
    5b7c:	1aa4      	subs	r4, r4, r2
    5b7e:	419d      	sbcs	r5, r3
    5b80:	2001      	movs	r0, #1
    5b82:	1924      	adds	r4, r4, r4
    5b84:	416d      	adcs	r5, r5
    5b86:	2100      	movs	r1, #0
    5b88:	3e01      	subs	r6, #1
    5b8a:	1824      	adds	r4, r4, r0
    5b8c:	414d      	adcs	r5, r1
    5b8e:	2e00      	cmp	r6, #0
    5b90:	d006      	beq.n	5ba0 <__udivmoddi4+0xe8>
    5b92:	42ab      	cmp	r3, r5
    5b94:	d9ee      	bls.n	5b74 <__udivmoddi4+0xbc>
    5b96:	3e01      	subs	r6, #1
    5b98:	1924      	adds	r4, r4, r4
    5b9a:	416d      	adcs	r5, r5
    5b9c:	2e00      	cmp	r6, #0
    5b9e:	d1f8      	bne.n	5b92 <__udivmoddi4+0xda>
    5ba0:	465b      	mov	r3, fp
    5ba2:	9800      	ldr	r0, [sp, #0]
    5ba4:	9901      	ldr	r1, [sp, #4]
    5ba6:	1900      	adds	r0, r0, r4
    5ba8:	4169      	adcs	r1, r5
    5baa:	2b00      	cmp	r3, #0
    5bac:	db22      	blt.n	5bf4 <__udivmoddi4+0x13c>
    5bae:	002b      	movs	r3, r5
    5bb0:	465a      	mov	r2, fp
    5bb2:	40d3      	lsrs	r3, r2
    5bb4:	002a      	movs	r2, r5
    5bb6:	4644      	mov	r4, r8
    5bb8:	40e2      	lsrs	r2, r4
    5bba:	001c      	movs	r4, r3
    5bbc:	465b      	mov	r3, fp
    5bbe:	0015      	movs	r5, r2
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	db2c      	blt.n	5c1e <__udivmoddi4+0x166>
    5bc4:	0026      	movs	r6, r4
    5bc6:	409e      	lsls	r6, r3
    5bc8:	0033      	movs	r3, r6
    5bca:	0026      	movs	r6, r4
    5bcc:	4647      	mov	r7, r8
    5bce:	40be      	lsls	r6, r7
    5bd0:	0032      	movs	r2, r6
    5bd2:	1a80      	subs	r0, r0, r2
    5bd4:	4199      	sbcs	r1, r3
    5bd6:	9000      	str	r0, [sp, #0]
    5bd8:	9101      	str	r1, [sp, #4]
    5bda:	e7ae      	b.n	5b3a <__udivmoddi4+0x82>
    5bdc:	4642      	mov	r2, r8
    5bde:	2320      	movs	r3, #32
    5be0:	1a9b      	subs	r3, r3, r2
    5be2:	4652      	mov	r2, sl
    5be4:	40da      	lsrs	r2, r3
    5be6:	4641      	mov	r1, r8
    5be8:	0013      	movs	r3, r2
    5bea:	464a      	mov	r2, r9
    5bec:	408a      	lsls	r2, r1
    5bee:	0017      	movs	r7, r2
    5bf0:	431f      	orrs	r7, r3
    5bf2:	e782      	b.n	5afa <__udivmoddi4+0x42>
    5bf4:	4642      	mov	r2, r8
    5bf6:	2320      	movs	r3, #32
    5bf8:	1a9b      	subs	r3, r3, r2
    5bfa:	002a      	movs	r2, r5
    5bfc:	4646      	mov	r6, r8
    5bfe:	409a      	lsls	r2, r3
    5c00:	0023      	movs	r3, r4
    5c02:	40f3      	lsrs	r3, r6
    5c04:	4313      	orrs	r3, r2
    5c06:	e7d5      	b.n	5bb4 <__udivmoddi4+0xfc>
    5c08:	4642      	mov	r2, r8
    5c0a:	2320      	movs	r3, #32
    5c0c:	2100      	movs	r1, #0
    5c0e:	1a9b      	subs	r3, r3, r2
    5c10:	2200      	movs	r2, #0
    5c12:	9100      	str	r1, [sp, #0]
    5c14:	9201      	str	r2, [sp, #4]
    5c16:	2201      	movs	r2, #1
    5c18:	40da      	lsrs	r2, r3
    5c1a:	9201      	str	r2, [sp, #4]
    5c1c:	e782      	b.n	5b24 <__udivmoddi4+0x6c>
    5c1e:	4642      	mov	r2, r8
    5c20:	2320      	movs	r3, #32
    5c22:	0026      	movs	r6, r4
    5c24:	1a9b      	subs	r3, r3, r2
    5c26:	40de      	lsrs	r6, r3
    5c28:	002f      	movs	r7, r5
    5c2a:	46b4      	mov	ip, r6
    5c2c:	4097      	lsls	r7, r2
    5c2e:	4666      	mov	r6, ip
    5c30:	003b      	movs	r3, r7
    5c32:	4333      	orrs	r3, r6
    5c34:	e7c9      	b.n	5bca <__udivmoddi4+0x112>
    5c36:	46c0      	nop			; (mov r8, r8)

00005c38 <__clzdi2>:
    5c38:	b510      	push	{r4, lr}
    5c3a:	2900      	cmp	r1, #0
    5c3c:	d103      	bne.n	5c46 <__clzdi2+0xe>
    5c3e:	f000 f807 	bl	5c50 <__clzsi2>
    5c42:	3020      	adds	r0, #32
    5c44:	e002      	b.n	5c4c <__clzdi2+0x14>
    5c46:	1c08      	adds	r0, r1, #0
    5c48:	f000 f802 	bl	5c50 <__clzsi2>
    5c4c:	bd10      	pop	{r4, pc}
    5c4e:	46c0      	nop			; (mov r8, r8)

00005c50 <__clzsi2>:
    5c50:	211c      	movs	r1, #28
    5c52:	2301      	movs	r3, #1
    5c54:	041b      	lsls	r3, r3, #16
    5c56:	4298      	cmp	r0, r3
    5c58:	d301      	bcc.n	5c5e <__clzsi2+0xe>
    5c5a:	0c00      	lsrs	r0, r0, #16
    5c5c:	3910      	subs	r1, #16
    5c5e:	0a1b      	lsrs	r3, r3, #8
    5c60:	4298      	cmp	r0, r3
    5c62:	d301      	bcc.n	5c68 <__clzsi2+0x18>
    5c64:	0a00      	lsrs	r0, r0, #8
    5c66:	3908      	subs	r1, #8
    5c68:	091b      	lsrs	r3, r3, #4
    5c6a:	4298      	cmp	r0, r3
    5c6c:	d301      	bcc.n	5c72 <__clzsi2+0x22>
    5c6e:	0900      	lsrs	r0, r0, #4
    5c70:	3904      	subs	r1, #4
    5c72:	a202      	add	r2, pc, #8	; (adr r2, 5c7c <__clzsi2+0x2c>)
    5c74:	5c10      	ldrb	r0, [r2, r0]
    5c76:	1840      	adds	r0, r0, r1
    5c78:	4770      	bx	lr
    5c7a:	46c0      	nop			; (mov r8, r8)
    5c7c:	02020304 	.word	0x02020304
    5c80:	01010101 	.word	0x01010101
	...

00005c8c <__libc_init_array>:
    5c8c:	b570      	push	{r4, r5, r6, lr}
    5c8e:	2600      	movs	r6, #0
    5c90:	4d0c      	ldr	r5, [pc, #48]	; (5cc4 <__libc_init_array+0x38>)
    5c92:	4c0d      	ldr	r4, [pc, #52]	; (5cc8 <__libc_init_array+0x3c>)
    5c94:	1b64      	subs	r4, r4, r5
    5c96:	10a4      	asrs	r4, r4, #2
    5c98:	42a6      	cmp	r6, r4
    5c9a:	d109      	bne.n	5cb0 <__libc_init_array+0x24>
    5c9c:	2600      	movs	r6, #0
    5c9e:	f001 f939 	bl	6f14 <_init>
    5ca2:	4d0a      	ldr	r5, [pc, #40]	; (5ccc <__libc_init_array+0x40>)
    5ca4:	4c0a      	ldr	r4, [pc, #40]	; (5cd0 <__libc_init_array+0x44>)
    5ca6:	1b64      	subs	r4, r4, r5
    5ca8:	10a4      	asrs	r4, r4, #2
    5caa:	42a6      	cmp	r6, r4
    5cac:	d105      	bne.n	5cba <__libc_init_array+0x2e>
    5cae:	bd70      	pop	{r4, r5, r6, pc}
    5cb0:	00b3      	lsls	r3, r6, #2
    5cb2:	58eb      	ldr	r3, [r5, r3]
    5cb4:	4798      	blx	r3
    5cb6:	3601      	adds	r6, #1
    5cb8:	e7ee      	b.n	5c98 <__libc_init_array+0xc>
    5cba:	00b3      	lsls	r3, r6, #2
    5cbc:	58eb      	ldr	r3, [r5, r3]
    5cbe:	4798      	blx	r3
    5cc0:	3601      	adds	r6, #1
    5cc2:	e7f2      	b.n	5caa <__libc_init_array+0x1e>
    5cc4:	00006f20 	.word	0x00006f20
    5cc8:	00006f20 	.word	0x00006f20
    5ccc:	00006f20 	.word	0x00006f20
    5cd0:	00006f24 	.word	0x00006f24

00005cd4 <malloc>:
    5cd4:	b510      	push	{r4, lr}
    5cd6:	4b03      	ldr	r3, [pc, #12]	; (5ce4 <malloc+0x10>)
    5cd8:	0001      	movs	r1, r0
    5cda:	6818      	ldr	r0, [r3, #0]
    5cdc:	f000 f860 	bl	5da0 <_malloc_r>
    5ce0:	bd10      	pop	{r4, pc}
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	20000020 	.word	0x20000020

00005ce8 <memcpy>:
    5ce8:	2300      	movs	r3, #0
    5cea:	b510      	push	{r4, lr}
    5cec:	429a      	cmp	r2, r3
    5cee:	d100      	bne.n	5cf2 <memcpy+0xa>
    5cf0:	bd10      	pop	{r4, pc}
    5cf2:	5ccc      	ldrb	r4, [r1, r3]
    5cf4:	54c4      	strb	r4, [r0, r3]
    5cf6:	3301      	adds	r3, #1
    5cf8:	e7f8      	b.n	5cec <memcpy+0x4>

00005cfa <memset>:
    5cfa:	0003      	movs	r3, r0
    5cfc:	1882      	adds	r2, r0, r2
    5cfe:	4293      	cmp	r3, r2
    5d00:	d100      	bne.n	5d04 <memset+0xa>
    5d02:	4770      	bx	lr
    5d04:	7019      	strb	r1, [r3, #0]
    5d06:	3301      	adds	r3, #1
    5d08:	e7f9      	b.n	5cfe <memset+0x4>
	...

00005d0c <_free_r>:
    5d0c:	b570      	push	{r4, r5, r6, lr}
    5d0e:	0005      	movs	r5, r0
    5d10:	2900      	cmp	r1, #0
    5d12:	d010      	beq.n	5d36 <_free_r+0x2a>
    5d14:	1f0c      	subs	r4, r1, #4
    5d16:	6823      	ldr	r3, [r4, #0]
    5d18:	2b00      	cmp	r3, #0
    5d1a:	da00      	bge.n	5d1e <_free_r+0x12>
    5d1c:	18e4      	adds	r4, r4, r3
    5d1e:	0028      	movs	r0, r5
    5d20:	f000 f8e1 	bl	5ee6 <__malloc_lock>
    5d24:	4a1d      	ldr	r2, [pc, #116]	; (5d9c <_free_r+0x90>)
    5d26:	6813      	ldr	r3, [r2, #0]
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d105      	bne.n	5d38 <_free_r+0x2c>
    5d2c:	6063      	str	r3, [r4, #4]
    5d2e:	6014      	str	r4, [r2, #0]
    5d30:	0028      	movs	r0, r5
    5d32:	f000 f8d9 	bl	5ee8 <__malloc_unlock>
    5d36:	bd70      	pop	{r4, r5, r6, pc}
    5d38:	42a3      	cmp	r3, r4
    5d3a:	d909      	bls.n	5d50 <_free_r+0x44>
    5d3c:	6821      	ldr	r1, [r4, #0]
    5d3e:	1860      	adds	r0, r4, r1
    5d40:	4283      	cmp	r3, r0
    5d42:	d1f3      	bne.n	5d2c <_free_r+0x20>
    5d44:	6818      	ldr	r0, [r3, #0]
    5d46:	685b      	ldr	r3, [r3, #4]
    5d48:	1841      	adds	r1, r0, r1
    5d4a:	6021      	str	r1, [r4, #0]
    5d4c:	e7ee      	b.n	5d2c <_free_r+0x20>
    5d4e:	0013      	movs	r3, r2
    5d50:	685a      	ldr	r2, [r3, #4]
    5d52:	2a00      	cmp	r2, #0
    5d54:	d001      	beq.n	5d5a <_free_r+0x4e>
    5d56:	42a2      	cmp	r2, r4
    5d58:	d9f9      	bls.n	5d4e <_free_r+0x42>
    5d5a:	6819      	ldr	r1, [r3, #0]
    5d5c:	1858      	adds	r0, r3, r1
    5d5e:	42a0      	cmp	r0, r4
    5d60:	d10b      	bne.n	5d7a <_free_r+0x6e>
    5d62:	6820      	ldr	r0, [r4, #0]
    5d64:	1809      	adds	r1, r1, r0
    5d66:	1858      	adds	r0, r3, r1
    5d68:	6019      	str	r1, [r3, #0]
    5d6a:	4282      	cmp	r2, r0
    5d6c:	d1e0      	bne.n	5d30 <_free_r+0x24>
    5d6e:	6810      	ldr	r0, [r2, #0]
    5d70:	6852      	ldr	r2, [r2, #4]
    5d72:	1841      	adds	r1, r0, r1
    5d74:	6019      	str	r1, [r3, #0]
    5d76:	605a      	str	r2, [r3, #4]
    5d78:	e7da      	b.n	5d30 <_free_r+0x24>
    5d7a:	42a0      	cmp	r0, r4
    5d7c:	d902      	bls.n	5d84 <_free_r+0x78>
    5d7e:	230c      	movs	r3, #12
    5d80:	602b      	str	r3, [r5, #0]
    5d82:	e7d5      	b.n	5d30 <_free_r+0x24>
    5d84:	6821      	ldr	r1, [r4, #0]
    5d86:	1860      	adds	r0, r4, r1
    5d88:	4282      	cmp	r2, r0
    5d8a:	d103      	bne.n	5d94 <_free_r+0x88>
    5d8c:	6810      	ldr	r0, [r2, #0]
    5d8e:	6852      	ldr	r2, [r2, #4]
    5d90:	1841      	adds	r1, r0, r1
    5d92:	6021      	str	r1, [r4, #0]
    5d94:	6062      	str	r2, [r4, #4]
    5d96:	605c      	str	r4, [r3, #4]
    5d98:	e7ca      	b.n	5d30 <_free_r+0x24>
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	20000190 	.word	0x20000190

00005da0 <_malloc_r>:
    5da0:	2303      	movs	r3, #3
    5da2:	b570      	push	{r4, r5, r6, lr}
    5da4:	1ccd      	adds	r5, r1, #3
    5da6:	439d      	bics	r5, r3
    5da8:	3508      	adds	r5, #8
    5daa:	0006      	movs	r6, r0
    5dac:	2d0c      	cmp	r5, #12
    5dae:	d21e      	bcs.n	5dee <_malloc_r+0x4e>
    5db0:	250c      	movs	r5, #12
    5db2:	42a9      	cmp	r1, r5
    5db4:	d81d      	bhi.n	5df2 <_malloc_r+0x52>
    5db6:	0030      	movs	r0, r6
    5db8:	f000 f895 	bl	5ee6 <__malloc_lock>
    5dbc:	4a25      	ldr	r2, [pc, #148]	; (5e54 <_malloc_r+0xb4>)
    5dbe:	6814      	ldr	r4, [r2, #0]
    5dc0:	0021      	movs	r1, r4
    5dc2:	2900      	cmp	r1, #0
    5dc4:	d119      	bne.n	5dfa <_malloc_r+0x5a>
    5dc6:	4c24      	ldr	r4, [pc, #144]	; (5e58 <_malloc_r+0xb8>)
    5dc8:	6823      	ldr	r3, [r4, #0]
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d103      	bne.n	5dd6 <_malloc_r+0x36>
    5dce:	0030      	movs	r0, r6
    5dd0:	f000 f844 	bl	5e5c <_sbrk_r>
    5dd4:	6020      	str	r0, [r4, #0]
    5dd6:	0029      	movs	r1, r5
    5dd8:	0030      	movs	r0, r6
    5dda:	f000 f83f 	bl	5e5c <_sbrk_r>
    5dde:	1c43      	adds	r3, r0, #1
    5de0:	d12c      	bne.n	5e3c <_malloc_r+0x9c>
    5de2:	230c      	movs	r3, #12
    5de4:	0030      	movs	r0, r6
    5de6:	6033      	str	r3, [r6, #0]
    5de8:	f000 f87e 	bl	5ee8 <__malloc_unlock>
    5dec:	e003      	b.n	5df6 <_malloc_r+0x56>
    5dee:	2d00      	cmp	r5, #0
    5df0:	dadf      	bge.n	5db2 <_malloc_r+0x12>
    5df2:	230c      	movs	r3, #12
    5df4:	6033      	str	r3, [r6, #0]
    5df6:	2000      	movs	r0, #0
    5df8:	bd70      	pop	{r4, r5, r6, pc}
    5dfa:	680b      	ldr	r3, [r1, #0]
    5dfc:	1b5b      	subs	r3, r3, r5
    5dfe:	d41a      	bmi.n	5e36 <_malloc_r+0x96>
    5e00:	2b0b      	cmp	r3, #11
    5e02:	d903      	bls.n	5e0c <_malloc_r+0x6c>
    5e04:	600b      	str	r3, [r1, #0]
    5e06:	18cc      	adds	r4, r1, r3
    5e08:	6025      	str	r5, [r4, #0]
    5e0a:	e003      	b.n	5e14 <_malloc_r+0x74>
    5e0c:	428c      	cmp	r4, r1
    5e0e:	d10e      	bne.n	5e2e <_malloc_r+0x8e>
    5e10:	6863      	ldr	r3, [r4, #4]
    5e12:	6013      	str	r3, [r2, #0]
    5e14:	0030      	movs	r0, r6
    5e16:	f000 f867 	bl	5ee8 <__malloc_unlock>
    5e1a:	0020      	movs	r0, r4
    5e1c:	2207      	movs	r2, #7
    5e1e:	300b      	adds	r0, #11
    5e20:	1d23      	adds	r3, r4, #4
    5e22:	4390      	bics	r0, r2
    5e24:	1ac3      	subs	r3, r0, r3
    5e26:	d0e7      	beq.n	5df8 <_malloc_r+0x58>
    5e28:	425a      	negs	r2, r3
    5e2a:	50e2      	str	r2, [r4, r3]
    5e2c:	e7e4      	b.n	5df8 <_malloc_r+0x58>
    5e2e:	684b      	ldr	r3, [r1, #4]
    5e30:	6063      	str	r3, [r4, #4]
    5e32:	000c      	movs	r4, r1
    5e34:	e7ee      	b.n	5e14 <_malloc_r+0x74>
    5e36:	000c      	movs	r4, r1
    5e38:	6849      	ldr	r1, [r1, #4]
    5e3a:	e7c2      	b.n	5dc2 <_malloc_r+0x22>
    5e3c:	2303      	movs	r3, #3
    5e3e:	1cc4      	adds	r4, r0, #3
    5e40:	439c      	bics	r4, r3
    5e42:	42a0      	cmp	r0, r4
    5e44:	d0e0      	beq.n	5e08 <_malloc_r+0x68>
    5e46:	1a21      	subs	r1, r4, r0
    5e48:	0030      	movs	r0, r6
    5e4a:	f000 f807 	bl	5e5c <_sbrk_r>
    5e4e:	1c43      	adds	r3, r0, #1
    5e50:	d1da      	bne.n	5e08 <_malloc_r+0x68>
    5e52:	e7c6      	b.n	5de2 <_malloc_r+0x42>
    5e54:	20000190 	.word	0x20000190
    5e58:	20000194 	.word	0x20000194

00005e5c <_sbrk_r>:
    5e5c:	2300      	movs	r3, #0
    5e5e:	b570      	push	{r4, r5, r6, lr}
    5e60:	4c06      	ldr	r4, [pc, #24]	; (5e7c <_sbrk_r+0x20>)
    5e62:	0005      	movs	r5, r0
    5e64:	0008      	movs	r0, r1
    5e66:	6023      	str	r3, [r4, #0]
    5e68:	f7fd fb8a 	bl	3580 <_sbrk>
    5e6c:	1c43      	adds	r3, r0, #1
    5e6e:	d103      	bne.n	5e78 <_sbrk_r+0x1c>
    5e70:	6823      	ldr	r3, [r4, #0]
    5e72:	2b00      	cmp	r3, #0
    5e74:	d000      	beq.n	5e78 <_sbrk_r+0x1c>
    5e76:	602b      	str	r3, [r5, #0]
    5e78:	bd70      	pop	{r4, r5, r6, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	20000c98 	.word	0x20000c98

00005e80 <siprintf>:
    5e80:	b40e      	push	{r1, r2, r3}
    5e82:	b510      	push	{r4, lr}
    5e84:	b09d      	sub	sp, #116	; 0x74
    5e86:	a902      	add	r1, sp, #8
    5e88:	9002      	str	r0, [sp, #8]
    5e8a:	6108      	str	r0, [r1, #16]
    5e8c:	480b      	ldr	r0, [pc, #44]	; (5ebc <siprintf+0x3c>)
    5e8e:	2482      	movs	r4, #130	; 0x82
    5e90:	6088      	str	r0, [r1, #8]
    5e92:	6148      	str	r0, [r1, #20]
    5e94:	2001      	movs	r0, #1
    5e96:	4240      	negs	r0, r0
    5e98:	ab1f      	add	r3, sp, #124	; 0x7c
    5e9a:	81c8      	strh	r0, [r1, #14]
    5e9c:	4808      	ldr	r0, [pc, #32]	; (5ec0 <siprintf+0x40>)
    5e9e:	cb04      	ldmia	r3!, {r2}
    5ea0:	00a4      	lsls	r4, r4, #2
    5ea2:	6800      	ldr	r0, [r0, #0]
    5ea4:	9301      	str	r3, [sp, #4]
    5ea6:	818c      	strh	r4, [r1, #12]
    5ea8:	f000 f882 	bl	5fb0 <_svfiprintf_r>
    5eac:	2300      	movs	r3, #0
    5eae:	9a02      	ldr	r2, [sp, #8]
    5eb0:	7013      	strb	r3, [r2, #0]
    5eb2:	b01d      	add	sp, #116	; 0x74
    5eb4:	bc10      	pop	{r4}
    5eb6:	bc08      	pop	{r3}
    5eb8:	b003      	add	sp, #12
    5eba:	4718      	bx	r3
    5ebc:	7fffffff 	.word	0x7fffffff
    5ec0:	20000020 	.word	0x20000020

00005ec4 <strcmp>:
    5ec4:	7802      	ldrb	r2, [r0, #0]
    5ec6:	780b      	ldrb	r3, [r1, #0]
    5ec8:	2a00      	cmp	r2, #0
    5eca:	d003      	beq.n	5ed4 <strcmp+0x10>
    5ecc:	3001      	adds	r0, #1
    5ece:	3101      	adds	r1, #1
    5ed0:	429a      	cmp	r2, r3
    5ed2:	d0f7      	beq.n	5ec4 <strcmp>
    5ed4:	1ad0      	subs	r0, r2, r3
    5ed6:	4770      	bx	lr

00005ed8 <strlen>:
    5ed8:	2300      	movs	r3, #0
    5eda:	5cc2      	ldrb	r2, [r0, r3]
    5edc:	3301      	adds	r3, #1
    5ede:	2a00      	cmp	r2, #0
    5ee0:	d1fb      	bne.n	5eda <strlen+0x2>
    5ee2:	1e58      	subs	r0, r3, #1
    5ee4:	4770      	bx	lr

00005ee6 <__malloc_lock>:
    5ee6:	4770      	bx	lr

00005ee8 <__malloc_unlock>:
    5ee8:	4770      	bx	lr
	...

00005eec <__ssputs_r>:
    5eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5eee:	688e      	ldr	r6, [r1, #8]
    5ef0:	b085      	sub	sp, #20
    5ef2:	0007      	movs	r7, r0
    5ef4:	000c      	movs	r4, r1
    5ef6:	9203      	str	r2, [sp, #12]
    5ef8:	9301      	str	r3, [sp, #4]
    5efa:	429e      	cmp	r6, r3
    5efc:	d839      	bhi.n	5f72 <__ssputs_r+0x86>
    5efe:	2390      	movs	r3, #144	; 0x90
    5f00:	898a      	ldrh	r2, [r1, #12]
    5f02:	00db      	lsls	r3, r3, #3
    5f04:	421a      	tst	r2, r3
    5f06:	d034      	beq.n	5f72 <__ssputs_r+0x86>
    5f08:	2503      	movs	r5, #3
    5f0a:	6909      	ldr	r1, [r1, #16]
    5f0c:	6823      	ldr	r3, [r4, #0]
    5f0e:	1a5b      	subs	r3, r3, r1
    5f10:	9302      	str	r3, [sp, #8]
    5f12:	6963      	ldr	r3, [r4, #20]
    5f14:	9802      	ldr	r0, [sp, #8]
    5f16:	435d      	muls	r5, r3
    5f18:	0feb      	lsrs	r3, r5, #31
    5f1a:	195d      	adds	r5, r3, r5
    5f1c:	9b01      	ldr	r3, [sp, #4]
    5f1e:	106d      	asrs	r5, r5, #1
    5f20:	3301      	adds	r3, #1
    5f22:	181b      	adds	r3, r3, r0
    5f24:	42ab      	cmp	r3, r5
    5f26:	d900      	bls.n	5f2a <__ssputs_r+0x3e>
    5f28:	001d      	movs	r5, r3
    5f2a:	0553      	lsls	r3, r2, #21
    5f2c:	d532      	bpl.n	5f94 <__ssputs_r+0xa8>
    5f2e:	0029      	movs	r1, r5
    5f30:	0038      	movs	r0, r7
    5f32:	f7ff ff35 	bl	5da0 <_malloc_r>
    5f36:	1e06      	subs	r6, r0, #0
    5f38:	d109      	bne.n	5f4e <__ssputs_r+0x62>
    5f3a:	230c      	movs	r3, #12
    5f3c:	603b      	str	r3, [r7, #0]
    5f3e:	2340      	movs	r3, #64	; 0x40
    5f40:	2001      	movs	r0, #1
    5f42:	89a2      	ldrh	r2, [r4, #12]
    5f44:	4240      	negs	r0, r0
    5f46:	4313      	orrs	r3, r2
    5f48:	81a3      	strh	r3, [r4, #12]
    5f4a:	b005      	add	sp, #20
    5f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f4e:	9a02      	ldr	r2, [sp, #8]
    5f50:	6921      	ldr	r1, [r4, #16]
    5f52:	f7ff fec9 	bl	5ce8 <memcpy>
    5f56:	89a3      	ldrh	r3, [r4, #12]
    5f58:	4a14      	ldr	r2, [pc, #80]	; (5fac <__ssputs_r+0xc0>)
    5f5a:	401a      	ands	r2, r3
    5f5c:	2380      	movs	r3, #128	; 0x80
    5f5e:	4313      	orrs	r3, r2
    5f60:	81a3      	strh	r3, [r4, #12]
    5f62:	9b02      	ldr	r3, [sp, #8]
    5f64:	6126      	str	r6, [r4, #16]
    5f66:	18f6      	adds	r6, r6, r3
    5f68:	6026      	str	r6, [r4, #0]
    5f6a:	6165      	str	r5, [r4, #20]
    5f6c:	9e01      	ldr	r6, [sp, #4]
    5f6e:	1aed      	subs	r5, r5, r3
    5f70:	60a5      	str	r5, [r4, #8]
    5f72:	9b01      	ldr	r3, [sp, #4]
    5f74:	42b3      	cmp	r3, r6
    5f76:	d200      	bcs.n	5f7a <__ssputs_r+0x8e>
    5f78:	001e      	movs	r6, r3
    5f7a:	0032      	movs	r2, r6
    5f7c:	9903      	ldr	r1, [sp, #12]
    5f7e:	6820      	ldr	r0, [r4, #0]
    5f80:	f000 faad 	bl	64de <memmove>
    5f84:	68a3      	ldr	r3, [r4, #8]
    5f86:	2000      	movs	r0, #0
    5f88:	1b9b      	subs	r3, r3, r6
    5f8a:	60a3      	str	r3, [r4, #8]
    5f8c:	6823      	ldr	r3, [r4, #0]
    5f8e:	199e      	adds	r6, r3, r6
    5f90:	6026      	str	r6, [r4, #0]
    5f92:	e7da      	b.n	5f4a <__ssputs_r+0x5e>
    5f94:	002a      	movs	r2, r5
    5f96:	0038      	movs	r0, r7
    5f98:	f000 fab3 	bl	6502 <_realloc_r>
    5f9c:	1e06      	subs	r6, r0, #0
    5f9e:	d1e0      	bne.n	5f62 <__ssputs_r+0x76>
    5fa0:	6921      	ldr	r1, [r4, #16]
    5fa2:	0038      	movs	r0, r7
    5fa4:	f7ff feb2 	bl	5d0c <_free_r>
    5fa8:	e7c7      	b.n	5f3a <__ssputs_r+0x4e>
    5faa:	46c0      	nop			; (mov r8, r8)
    5fac:	fffffb7f 	.word	0xfffffb7f

00005fb0 <_svfiprintf_r>:
    5fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fb2:	b09f      	sub	sp, #124	; 0x7c
    5fb4:	9002      	str	r0, [sp, #8]
    5fb6:	9305      	str	r3, [sp, #20]
    5fb8:	898b      	ldrh	r3, [r1, #12]
    5fba:	000f      	movs	r7, r1
    5fbc:	0016      	movs	r6, r2
    5fbe:	061b      	lsls	r3, r3, #24
    5fc0:	d511      	bpl.n	5fe6 <_svfiprintf_r+0x36>
    5fc2:	690b      	ldr	r3, [r1, #16]
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d10e      	bne.n	5fe6 <_svfiprintf_r+0x36>
    5fc8:	2140      	movs	r1, #64	; 0x40
    5fca:	f7ff fee9 	bl	5da0 <_malloc_r>
    5fce:	6038      	str	r0, [r7, #0]
    5fd0:	6138      	str	r0, [r7, #16]
    5fd2:	2800      	cmp	r0, #0
    5fd4:	d105      	bne.n	5fe2 <_svfiprintf_r+0x32>
    5fd6:	230c      	movs	r3, #12
    5fd8:	9a02      	ldr	r2, [sp, #8]
    5fda:	3801      	subs	r0, #1
    5fdc:	6013      	str	r3, [r2, #0]
    5fde:	b01f      	add	sp, #124	; 0x7c
    5fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fe2:	2340      	movs	r3, #64	; 0x40
    5fe4:	617b      	str	r3, [r7, #20]
    5fe6:	2300      	movs	r3, #0
    5fe8:	ad06      	add	r5, sp, #24
    5fea:	616b      	str	r3, [r5, #20]
    5fec:	3320      	adds	r3, #32
    5fee:	766b      	strb	r3, [r5, #25]
    5ff0:	3310      	adds	r3, #16
    5ff2:	76ab      	strb	r3, [r5, #26]
    5ff4:	0034      	movs	r4, r6
    5ff6:	7823      	ldrb	r3, [r4, #0]
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	d147      	bne.n	608c <_svfiprintf_r+0xdc>
    5ffc:	1ba3      	subs	r3, r4, r6
    5ffe:	9304      	str	r3, [sp, #16]
    6000:	d00d      	beq.n	601e <_svfiprintf_r+0x6e>
    6002:	1ba3      	subs	r3, r4, r6
    6004:	0032      	movs	r2, r6
    6006:	0039      	movs	r1, r7
    6008:	9802      	ldr	r0, [sp, #8]
    600a:	f7ff ff6f 	bl	5eec <__ssputs_r>
    600e:	1c43      	adds	r3, r0, #1
    6010:	d100      	bne.n	6014 <_svfiprintf_r+0x64>
    6012:	e0b5      	b.n	6180 <_svfiprintf_r+0x1d0>
    6014:	696a      	ldr	r2, [r5, #20]
    6016:	9b04      	ldr	r3, [sp, #16]
    6018:	4694      	mov	ip, r2
    601a:	4463      	add	r3, ip
    601c:	616b      	str	r3, [r5, #20]
    601e:	7823      	ldrb	r3, [r4, #0]
    6020:	2b00      	cmp	r3, #0
    6022:	d100      	bne.n	6026 <_svfiprintf_r+0x76>
    6024:	e0ac      	b.n	6180 <_svfiprintf_r+0x1d0>
    6026:	2201      	movs	r2, #1
    6028:	2300      	movs	r3, #0
    602a:	4252      	negs	r2, r2
    602c:	606a      	str	r2, [r5, #4]
    602e:	a902      	add	r1, sp, #8
    6030:	3254      	adds	r2, #84	; 0x54
    6032:	1852      	adds	r2, r2, r1
    6034:	3401      	adds	r4, #1
    6036:	602b      	str	r3, [r5, #0]
    6038:	60eb      	str	r3, [r5, #12]
    603a:	60ab      	str	r3, [r5, #8]
    603c:	7013      	strb	r3, [r2, #0]
    603e:	65ab      	str	r3, [r5, #88]	; 0x58
    6040:	4e58      	ldr	r6, [pc, #352]	; (61a4 <_svfiprintf_r+0x1f4>)
    6042:	2205      	movs	r2, #5
    6044:	7821      	ldrb	r1, [r4, #0]
    6046:	0030      	movs	r0, r6
    6048:	f000 fa3e 	bl	64c8 <memchr>
    604c:	1c62      	adds	r2, r4, #1
    604e:	2800      	cmp	r0, #0
    6050:	d120      	bne.n	6094 <_svfiprintf_r+0xe4>
    6052:	6829      	ldr	r1, [r5, #0]
    6054:	06cb      	lsls	r3, r1, #27
    6056:	d504      	bpl.n	6062 <_svfiprintf_r+0xb2>
    6058:	2353      	movs	r3, #83	; 0x53
    605a:	ae02      	add	r6, sp, #8
    605c:	3020      	adds	r0, #32
    605e:	199b      	adds	r3, r3, r6
    6060:	7018      	strb	r0, [r3, #0]
    6062:	070b      	lsls	r3, r1, #28
    6064:	d504      	bpl.n	6070 <_svfiprintf_r+0xc0>
    6066:	2353      	movs	r3, #83	; 0x53
    6068:	202b      	movs	r0, #43	; 0x2b
    606a:	ae02      	add	r6, sp, #8
    606c:	199b      	adds	r3, r3, r6
    606e:	7018      	strb	r0, [r3, #0]
    6070:	7823      	ldrb	r3, [r4, #0]
    6072:	2b2a      	cmp	r3, #42	; 0x2a
    6074:	d016      	beq.n	60a4 <_svfiprintf_r+0xf4>
    6076:	2000      	movs	r0, #0
    6078:	210a      	movs	r1, #10
    607a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    607c:	7822      	ldrb	r2, [r4, #0]
    607e:	3a30      	subs	r2, #48	; 0x30
    6080:	2a09      	cmp	r2, #9
    6082:	d955      	bls.n	6130 <_svfiprintf_r+0x180>
    6084:	2800      	cmp	r0, #0
    6086:	d015      	beq.n	60b4 <_svfiprintf_r+0x104>
    6088:	9309      	str	r3, [sp, #36]	; 0x24
    608a:	e013      	b.n	60b4 <_svfiprintf_r+0x104>
    608c:	2b25      	cmp	r3, #37	; 0x25
    608e:	d0b5      	beq.n	5ffc <_svfiprintf_r+0x4c>
    6090:	3401      	adds	r4, #1
    6092:	e7b0      	b.n	5ff6 <_svfiprintf_r+0x46>
    6094:	2301      	movs	r3, #1
    6096:	1b80      	subs	r0, r0, r6
    6098:	4083      	lsls	r3, r0
    609a:	6829      	ldr	r1, [r5, #0]
    609c:	0014      	movs	r4, r2
    609e:	430b      	orrs	r3, r1
    60a0:	602b      	str	r3, [r5, #0]
    60a2:	e7cd      	b.n	6040 <_svfiprintf_r+0x90>
    60a4:	9b05      	ldr	r3, [sp, #20]
    60a6:	1d18      	adds	r0, r3, #4
    60a8:	681b      	ldr	r3, [r3, #0]
    60aa:	9005      	str	r0, [sp, #20]
    60ac:	2b00      	cmp	r3, #0
    60ae:	db39      	blt.n	6124 <_svfiprintf_r+0x174>
    60b0:	9309      	str	r3, [sp, #36]	; 0x24
    60b2:	0014      	movs	r4, r2
    60b4:	7823      	ldrb	r3, [r4, #0]
    60b6:	2b2e      	cmp	r3, #46	; 0x2e
    60b8:	d10b      	bne.n	60d2 <_svfiprintf_r+0x122>
    60ba:	7863      	ldrb	r3, [r4, #1]
    60bc:	1c62      	adds	r2, r4, #1
    60be:	2b2a      	cmp	r3, #42	; 0x2a
    60c0:	d13e      	bne.n	6140 <_svfiprintf_r+0x190>
    60c2:	9b05      	ldr	r3, [sp, #20]
    60c4:	3402      	adds	r4, #2
    60c6:	1d1a      	adds	r2, r3, #4
    60c8:	681b      	ldr	r3, [r3, #0]
    60ca:	9205      	str	r2, [sp, #20]
    60cc:	2b00      	cmp	r3, #0
    60ce:	db34      	blt.n	613a <_svfiprintf_r+0x18a>
    60d0:	9307      	str	r3, [sp, #28]
    60d2:	4e35      	ldr	r6, [pc, #212]	; (61a8 <_svfiprintf_r+0x1f8>)
    60d4:	7821      	ldrb	r1, [r4, #0]
    60d6:	2203      	movs	r2, #3
    60d8:	0030      	movs	r0, r6
    60da:	f000 f9f5 	bl	64c8 <memchr>
    60de:	2800      	cmp	r0, #0
    60e0:	d006      	beq.n	60f0 <_svfiprintf_r+0x140>
    60e2:	2340      	movs	r3, #64	; 0x40
    60e4:	1b80      	subs	r0, r0, r6
    60e6:	4083      	lsls	r3, r0
    60e8:	682a      	ldr	r2, [r5, #0]
    60ea:	3401      	adds	r4, #1
    60ec:	4313      	orrs	r3, r2
    60ee:	602b      	str	r3, [r5, #0]
    60f0:	7821      	ldrb	r1, [r4, #0]
    60f2:	2206      	movs	r2, #6
    60f4:	482d      	ldr	r0, [pc, #180]	; (61ac <_svfiprintf_r+0x1fc>)
    60f6:	1c66      	adds	r6, r4, #1
    60f8:	7629      	strb	r1, [r5, #24]
    60fa:	f000 f9e5 	bl	64c8 <memchr>
    60fe:	2800      	cmp	r0, #0
    6100:	d046      	beq.n	6190 <_svfiprintf_r+0x1e0>
    6102:	4b2b      	ldr	r3, [pc, #172]	; (61b0 <_svfiprintf_r+0x200>)
    6104:	2b00      	cmp	r3, #0
    6106:	d12f      	bne.n	6168 <_svfiprintf_r+0x1b8>
    6108:	6829      	ldr	r1, [r5, #0]
    610a:	9b05      	ldr	r3, [sp, #20]
    610c:	2207      	movs	r2, #7
    610e:	05c9      	lsls	r1, r1, #23
    6110:	d528      	bpl.n	6164 <_svfiprintf_r+0x1b4>
    6112:	189b      	adds	r3, r3, r2
    6114:	4393      	bics	r3, r2
    6116:	3308      	adds	r3, #8
    6118:	9305      	str	r3, [sp, #20]
    611a:	696b      	ldr	r3, [r5, #20]
    611c:	9a03      	ldr	r2, [sp, #12]
    611e:	189b      	adds	r3, r3, r2
    6120:	616b      	str	r3, [r5, #20]
    6122:	e767      	b.n	5ff4 <_svfiprintf_r+0x44>
    6124:	425b      	negs	r3, r3
    6126:	60eb      	str	r3, [r5, #12]
    6128:	2302      	movs	r3, #2
    612a:	430b      	orrs	r3, r1
    612c:	602b      	str	r3, [r5, #0]
    612e:	e7c0      	b.n	60b2 <_svfiprintf_r+0x102>
    6130:	434b      	muls	r3, r1
    6132:	3401      	adds	r4, #1
    6134:	189b      	adds	r3, r3, r2
    6136:	2001      	movs	r0, #1
    6138:	e7a0      	b.n	607c <_svfiprintf_r+0xcc>
    613a:	2301      	movs	r3, #1
    613c:	425b      	negs	r3, r3
    613e:	e7c7      	b.n	60d0 <_svfiprintf_r+0x120>
    6140:	2300      	movs	r3, #0
    6142:	0014      	movs	r4, r2
    6144:	200a      	movs	r0, #10
    6146:	001a      	movs	r2, r3
    6148:	606b      	str	r3, [r5, #4]
    614a:	7821      	ldrb	r1, [r4, #0]
    614c:	3930      	subs	r1, #48	; 0x30
    614e:	2909      	cmp	r1, #9
    6150:	d903      	bls.n	615a <_svfiprintf_r+0x1aa>
    6152:	2b00      	cmp	r3, #0
    6154:	d0bd      	beq.n	60d2 <_svfiprintf_r+0x122>
    6156:	9207      	str	r2, [sp, #28]
    6158:	e7bb      	b.n	60d2 <_svfiprintf_r+0x122>
    615a:	4342      	muls	r2, r0
    615c:	3401      	adds	r4, #1
    615e:	1852      	adds	r2, r2, r1
    6160:	2301      	movs	r3, #1
    6162:	e7f2      	b.n	614a <_svfiprintf_r+0x19a>
    6164:	3307      	adds	r3, #7
    6166:	e7d5      	b.n	6114 <_svfiprintf_r+0x164>
    6168:	ab05      	add	r3, sp, #20
    616a:	9300      	str	r3, [sp, #0]
    616c:	003a      	movs	r2, r7
    616e:	4b11      	ldr	r3, [pc, #68]	; (61b4 <_svfiprintf_r+0x204>)
    6170:	0029      	movs	r1, r5
    6172:	9802      	ldr	r0, [sp, #8]
    6174:	e000      	b.n	6178 <_svfiprintf_r+0x1c8>
    6176:	bf00      	nop
    6178:	9003      	str	r0, [sp, #12]
    617a:	9b03      	ldr	r3, [sp, #12]
    617c:	3301      	adds	r3, #1
    617e:	d1cc      	bne.n	611a <_svfiprintf_r+0x16a>
    6180:	89bb      	ldrh	r3, [r7, #12]
    6182:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6184:	065b      	lsls	r3, r3, #25
    6186:	d400      	bmi.n	618a <_svfiprintf_r+0x1da>
    6188:	e729      	b.n	5fde <_svfiprintf_r+0x2e>
    618a:	2001      	movs	r0, #1
    618c:	4240      	negs	r0, r0
    618e:	e726      	b.n	5fde <_svfiprintf_r+0x2e>
    6190:	ab05      	add	r3, sp, #20
    6192:	9300      	str	r3, [sp, #0]
    6194:	003a      	movs	r2, r7
    6196:	4b07      	ldr	r3, [pc, #28]	; (61b4 <_svfiprintf_r+0x204>)
    6198:	0029      	movs	r1, r5
    619a:	9802      	ldr	r0, [sp, #8]
    619c:	f000 f87a 	bl	6294 <_printf_i>
    61a0:	e7ea      	b.n	6178 <_svfiprintf_r+0x1c8>
    61a2:	46c0      	nop			; (mov r8, r8)
    61a4:	00006ee0 	.word	0x00006ee0
    61a8:	00006ee6 	.word	0x00006ee6
    61ac:	00006eea 	.word	0x00006eea
    61b0:	00000000 	.word	0x00000000
    61b4:	00005eed 	.word	0x00005eed

000061b8 <_printf_common>:
    61b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61ba:	0015      	movs	r5, r2
    61bc:	9301      	str	r3, [sp, #4]
    61be:	688a      	ldr	r2, [r1, #8]
    61c0:	690b      	ldr	r3, [r1, #16]
    61c2:	9000      	str	r0, [sp, #0]
    61c4:	000c      	movs	r4, r1
    61c6:	4293      	cmp	r3, r2
    61c8:	da00      	bge.n	61cc <_printf_common+0x14>
    61ca:	0013      	movs	r3, r2
    61cc:	0022      	movs	r2, r4
    61ce:	602b      	str	r3, [r5, #0]
    61d0:	3243      	adds	r2, #67	; 0x43
    61d2:	7812      	ldrb	r2, [r2, #0]
    61d4:	2a00      	cmp	r2, #0
    61d6:	d001      	beq.n	61dc <_printf_common+0x24>
    61d8:	3301      	adds	r3, #1
    61da:	602b      	str	r3, [r5, #0]
    61dc:	6823      	ldr	r3, [r4, #0]
    61de:	069b      	lsls	r3, r3, #26
    61e0:	d502      	bpl.n	61e8 <_printf_common+0x30>
    61e2:	682b      	ldr	r3, [r5, #0]
    61e4:	3302      	adds	r3, #2
    61e6:	602b      	str	r3, [r5, #0]
    61e8:	2706      	movs	r7, #6
    61ea:	6823      	ldr	r3, [r4, #0]
    61ec:	401f      	ands	r7, r3
    61ee:	d027      	beq.n	6240 <_printf_common+0x88>
    61f0:	0023      	movs	r3, r4
    61f2:	3343      	adds	r3, #67	; 0x43
    61f4:	781b      	ldrb	r3, [r3, #0]
    61f6:	1e5a      	subs	r2, r3, #1
    61f8:	4193      	sbcs	r3, r2
    61fa:	6822      	ldr	r2, [r4, #0]
    61fc:	0692      	lsls	r2, r2, #26
    61fe:	d430      	bmi.n	6262 <_printf_common+0xaa>
    6200:	0022      	movs	r2, r4
    6202:	9901      	ldr	r1, [sp, #4]
    6204:	3243      	adds	r2, #67	; 0x43
    6206:	9800      	ldr	r0, [sp, #0]
    6208:	9e08      	ldr	r6, [sp, #32]
    620a:	47b0      	blx	r6
    620c:	1c43      	adds	r3, r0, #1
    620e:	d025      	beq.n	625c <_printf_common+0xa4>
    6210:	2306      	movs	r3, #6
    6212:	6820      	ldr	r0, [r4, #0]
    6214:	682a      	ldr	r2, [r5, #0]
    6216:	68e1      	ldr	r1, [r4, #12]
    6218:	4003      	ands	r3, r0
    621a:	2500      	movs	r5, #0
    621c:	2b04      	cmp	r3, #4
    621e:	d103      	bne.n	6228 <_printf_common+0x70>
    6220:	1a8d      	subs	r5, r1, r2
    6222:	43eb      	mvns	r3, r5
    6224:	17db      	asrs	r3, r3, #31
    6226:	401d      	ands	r5, r3
    6228:	68a3      	ldr	r3, [r4, #8]
    622a:	6922      	ldr	r2, [r4, #16]
    622c:	4293      	cmp	r3, r2
    622e:	dd01      	ble.n	6234 <_printf_common+0x7c>
    6230:	1a9b      	subs	r3, r3, r2
    6232:	18ed      	adds	r5, r5, r3
    6234:	2700      	movs	r7, #0
    6236:	42bd      	cmp	r5, r7
    6238:	d120      	bne.n	627c <_printf_common+0xc4>
    623a:	2000      	movs	r0, #0
    623c:	e010      	b.n	6260 <_printf_common+0xa8>
    623e:	3701      	adds	r7, #1
    6240:	68e3      	ldr	r3, [r4, #12]
    6242:	682a      	ldr	r2, [r5, #0]
    6244:	1a9b      	subs	r3, r3, r2
    6246:	429f      	cmp	r7, r3
    6248:	dad2      	bge.n	61f0 <_printf_common+0x38>
    624a:	0022      	movs	r2, r4
    624c:	2301      	movs	r3, #1
    624e:	3219      	adds	r2, #25
    6250:	9901      	ldr	r1, [sp, #4]
    6252:	9800      	ldr	r0, [sp, #0]
    6254:	9e08      	ldr	r6, [sp, #32]
    6256:	47b0      	blx	r6
    6258:	1c43      	adds	r3, r0, #1
    625a:	d1f0      	bne.n	623e <_printf_common+0x86>
    625c:	2001      	movs	r0, #1
    625e:	4240      	negs	r0, r0
    6260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6262:	2030      	movs	r0, #48	; 0x30
    6264:	18e1      	adds	r1, r4, r3
    6266:	3143      	adds	r1, #67	; 0x43
    6268:	7008      	strb	r0, [r1, #0]
    626a:	0021      	movs	r1, r4
    626c:	1c5a      	adds	r2, r3, #1
    626e:	3145      	adds	r1, #69	; 0x45
    6270:	7809      	ldrb	r1, [r1, #0]
    6272:	18a2      	adds	r2, r4, r2
    6274:	3243      	adds	r2, #67	; 0x43
    6276:	3302      	adds	r3, #2
    6278:	7011      	strb	r1, [r2, #0]
    627a:	e7c1      	b.n	6200 <_printf_common+0x48>
    627c:	0022      	movs	r2, r4
    627e:	2301      	movs	r3, #1
    6280:	321a      	adds	r2, #26
    6282:	9901      	ldr	r1, [sp, #4]
    6284:	9800      	ldr	r0, [sp, #0]
    6286:	9e08      	ldr	r6, [sp, #32]
    6288:	47b0      	blx	r6
    628a:	1c43      	adds	r3, r0, #1
    628c:	d0e6      	beq.n	625c <_printf_common+0xa4>
    628e:	3701      	adds	r7, #1
    6290:	e7d1      	b.n	6236 <_printf_common+0x7e>
	...

00006294 <_printf_i>:
    6294:	b5f0      	push	{r4, r5, r6, r7, lr}
    6296:	b08b      	sub	sp, #44	; 0x2c
    6298:	9206      	str	r2, [sp, #24]
    629a:	000a      	movs	r2, r1
    629c:	3243      	adds	r2, #67	; 0x43
    629e:	9307      	str	r3, [sp, #28]
    62a0:	9005      	str	r0, [sp, #20]
    62a2:	9204      	str	r2, [sp, #16]
    62a4:	7e0a      	ldrb	r2, [r1, #24]
    62a6:	000c      	movs	r4, r1
    62a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    62aa:	2a6e      	cmp	r2, #110	; 0x6e
    62ac:	d100      	bne.n	62b0 <_printf_i+0x1c>
    62ae:	e08f      	b.n	63d0 <_printf_i+0x13c>
    62b0:	d817      	bhi.n	62e2 <_printf_i+0x4e>
    62b2:	2a63      	cmp	r2, #99	; 0x63
    62b4:	d02c      	beq.n	6310 <_printf_i+0x7c>
    62b6:	d808      	bhi.n	62ca <_printf_i+0x36>
    62b8:	2a00      	cmp	r2, #0
    62ba:	d100      	bne.n	62be <_printf_i+0x2a>
    62bc:	e099      	b.n	63f2 <_printf_i+0x15e>
    62be:	2a58      	cmp	r2, #88	; 0x58
    62c0:	d054      	beq.n	636c <_printf_i+0xd8>
    62c2:	0026      	movs	r6, r4
    62c4:	3642      	adds	r6, #66	; 0x42
    62c6:	7032      	strb	r2, [r6, #0]
    62c8:	e029      	b.n	631e <_printf_i+0x8a>
    62ca:	2a64      	cmp	r2, #100	; 0x64
    62cc:	d001      	beq.n	62d2 <_printf_i+0x3e>
    62ce:	2a69      	cmp	r2, #105	; 0x69
    62d0:	d1f7      	bne.n	62c2 <_printf_i+0x2e>
    62d2:	6821      	ldr	r1, [r4, #0]
    62d4:	681a      	ldr	r2, [r3, #0]
    62d6:	0608      	lsls	r0, r1, #24
    62d8:	d523      	bpl.n	6322 <_printf_i+0x8e>
    62da:	1d11      	adds	r1, r2, #4
    62dc:	6019      	str	r1, [r3, #0]
    62de:	6815      	ldr	r5, [r2, #0]
    62e0:	e025      	b.n	632e <_printf_i+0x9a>
    62e2:	2a73      	cmp	r2, #115	; 0x73
    62e4:	d100      	bne.n	62e8 <_printf_i+0x54>
    62e6:	e088      	b.n	63fa <_printf_i+0x166>
    62e8:	d808      	bhi.n	62fc <_printf_i+0x68>
    62ea:	2a6f      	cmp	r2, #111	; 0x6f
    62ec:	d029      	beq.n	6342 <_printf_i+0xae>
    62ee:	2a70      	cmp	r2, #112	; 0x70
    62f0:	d1e7      	bne.n	62c2 <_printf_i+0x2e>
    62f2:	2220      	movs	r2, #32
    62f4:	6809      	ldr	r1, [r1, #0]
    62f6:	430a      	orrs	r2, r1
    62f8:	6022      	str	r2, [r4, #0]
    62fa:	e003      	b.n	6304 <_printf_i+0x70>
    62fc:	2a75      	cmp	r2, #117	; 0x75
    62fe:	d020      	beq.n	6342 <_printf_i+0xae>
    6300:	2a78      	cmp	r2, #120	; 0x78
    6302:	d1de      	bne.n	62c2 <_printf_i+0x2e>
    6304:	0022      	movs	r2, r4
    6306:	2178      	movs	r1, #120	; 0x78
    6308:	3245      	adds	r2, #69	; 0x45
    630a:	7011      	strb	r1, [r2, #0]
    630c:	4a6c      	ldr	r2, [pc, #432]	; (64c0 <_printf_i+0x22c>)
    630e:	e030      	b.n	6372 <_printf_i+0xde>
    6310:	000e      	movs	r6, r1
    6312:	681a      	ldr	r2, [r3, #0]
    6314:	3642      	adds	r6, #66	; 0x42
    6316:	1d11      	adds	r1, r2, #4
    6318:	6019      	str	r1, [r3, #0]
    631a:	6813      	ldr	r3, [r2, #0]
    631c:	7033      	strb	r3, [r6, #0]
    631e:	2301      	movs	r3, #1
    6320:	e079      	b.n	6416 <_printf_i+0x182>
    6322:	0649      	lsls	r1, r1, #25
    6324:	d5d9      	bpl.n	62da <_printf_i+0x46>
    6326:	1d11      	adds	r1, r2, #4
    6328:	6019      	str	r1, [r3, #0]
    632a:	2300      	movs	r3, #0
    632c:	5ed5      	ldrsh	r5, [r2, r3]
    632e:	2d00      	cmp	r5, #0
    6330:	da03      	bge.n	633a <_printf_i+0xa6>
    6332:	232d      	movs	r3, #45	; 0x2d
    6334:	9a04      	ldr	r2, [sp, #16]
    6336:	426d      	negs	r5, r5
    6338:	7013      	strb	r3, [r2, #0]
    633a:	4b62      	ldr	r3, [pc, #392]	; (64c4 <_printf_i+0x230>)
    633c:	270a      	movs	r7, #10
    633e:	9303      	str	r3, [sp, #12]
    6340:	e02f      	b.n	63a2 <_printf_i+0x10e>
    6342:	6820      	ldr	r0, [r4, #0]
    6344:	6819      	ldr	r1, [r3, #0]
    6346:	0605      	lsls	r5, r0, #24
    6348:	d503      	bpl.n	6352 <_printf_i+0xbe>
    634a:	1d08      	adds	r0, r1, #4
    634c:	6018      	str	r0, [r3, #0]
    634e:	680d      	ldr	r5, [r1, #0]
    6350:	e005      	b.n	635e <_printf_i+0xca>
    6352:	0640      	lsls	r0, r0, #25
    6354:	d5f9      	bpl.n	634a <_printf_i+0xb6>
    6356:	680d      	ldr	r5, [r1, #0]
    6358:	1d08      	adds	r0, r1, #4
    635a:	6018      	str	r0, [r3, #0]
    635c:	b2ad      	uxth	r5, r5
    635e:	4b59      	ldr	r3, [pc, #356]	; (64c4 <_printf_i+0x230>)
    6360:	2708      	movs	r7, #8
    6362:	9303      	str	r3, [sp, #12]
    6364:	2a6f      	cmp	r2, #111	; 0x6f
    6366:	d018      	beq.n	639a <_printf_i+0x106>
    6368:	270a      	movs	r7, #10
    636a:	e016      	b.n	639a <_printf_i+0x106>
    636c:	3145      	adds	r1, #69	; 0x45
    636e:	700a      	strb	r2, [r1, #0]
    6370:	4a54      	ldr	r2, [pc, #336]	; (64c4 <_printf_i+0x230>)
    6372:	9203      	str	r2, [sp, #12]
    6374:	681a      	ldr	r2, [r3, #0]
    6376:	6821      	ldr	r1, [r4, #0]
    6378:	1d10      	adds	r0, r2, #4
    637a:	6018      	str	r0, [r3, #0]
    637c:	6815      	ldr	r5, [r2, #0]
    637e:	0608      	lsls	r0, r1, #24
    6380:	d522      	bpl.n	63c8 <_printf_i+0x134>
    6382:	07cb      	lsls	r3, r1, #31
    6384:	d502      	bpl.n	638c <_printf_i+0xf8>
    6386:	2320      	movs	r3, #32
    6388:	4319      	orrs	r1, r3
    638a:	6021      	str	r1, [r4, #0]
    638c:	2710      	movs	r7, #16
    638e:	2d00      	cmp	r5, #0
    6390:	d103      	bne.n	639a <_printf_i+0x106>
    6392:	2320      	movs	r3, #32
    6394:	6822      	ldr	r2, [r4, #0]
    6396:	439a      	bics	r2, r3
    6398:	6022      	str	r2, [r4, #0]
    639a:	0023      	movs	r3, r4
    639c:	2200      	movs	r2, #0
    639e:	3343      	adds	r3, #67	; 0x43
    63a0:	701a      	strb	r2, [r3, #0]
    63a2:	6863      	ldr	r3, [r4, #4]
    63a4:	60a3      	str	r3, [r4, #8]
    63a6:	2b00      	cmp	r3, #0
    63a8:	db5c      	blt.n	6464 <_printf_i+0x1d0>
    63aa:	2204      	movs	r2, #4
    63ac:	6821      	ldr	r1, [r4, #0]
    63ae:	4391      	bics	r1, r2
    63b0:	6021      	str	r1, [r4, #0]
    63b2:	2d00      	cmp	r5, #0
    63b4:	d158      	bne.n	6468 <_printf_i+0x1d4>
    63b6:	9e04      	ldr	r6, [sp, #16]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d064      	beq.n	6486 <_printf_i+0x1f2>
    63bc:	0026      	movs	r6, r4
    63be:	9b03      	ldr	r3, [sp, #12]
    63c0:	3642      	adds	r6, #66	; 0x42
    63c2:	781b      	ldrb	r3, [r3, #0]
    63c4:	7033      	strb	r3, [r6, #0]
    63c6:	e05e      	b.n	6486 <_printf_i+0x1f2>
    63c8:	0648      	lsls	r0, r1, #25
    63ca:	d5da      	bpl.n	6382 <_printf_i+0xee>
    63cc:	b2ad      	uxth	r5, r5
    63ce:	e7d8      	b.n	6382 <_printf_i+0xee>
    63d0:	6809      	ldr	r1, [r1, #0]
    63d2:	681a      	ldr	r2, [r3, #0]
    63d4:	0608      	lsls	r0, r1, #24
    63d6:	d505      	bpl.n	63e4 <_printf_i+0x150>
    63d8:	1d11      	adds	r1, r2, #4
    63da:	6019      	str	r1, [r3, #0]
    63dc:	6813      	ldr	r3, [r2, #0]
    63de:	6962      	ldr	r2, [r4, #20]
    63e0:	601a      	str	r2, [r3, #0]
    63e2:	e006      	b.n	63f2 <_printf_i+0x15e>
    63e4:	0649      	lsls	r1, r1, #25
    63e6:	d5f7      	bpl.n	63d8 <_printf_i+0x144>
    63e8:	1d11      	adds	r1, r2, #4
    63ea:	6019      	str	r1, [r3, #0]
    63ec:	6813      	ldr	r3, [r2, #0]
    63ee:	8aa2      	ldrh	r2, [r4, #20]
    63f0:	801a      	strh	r2, [r3, #0]
    63f2:	2300      	movs	r3, #0
    63f4:	9e04      	ldr	r6, [sp, #16]
    63f6:	6123      	str	r3, [r4, #16]
    63f8:	e054      	b.n	64a4 <_printf_i+0x210>
    63fa:	681a      	ldr	r2, [r3, #0]
    63fc:	1d11      	adds	r1, r2, #4
    63fe:	6019      	str	r1, [r3, #0]
    6400:	6816      	ldr	r6, [r2, #0]
    6402:	2100      	movs	r1, #0
    6404:	6862      	ldr	r2, [r4, #4]
    6406:	0030      	movs	r0, r6
    6408:	f000 f85e 	bl	64c8 <memchr>
    640c:	2800      	cmp	r0, #0
    640e:	d001      	beq.n	6414 <_printf_i+0x180>
    6410:	1b80      	subs	r0, r0, r6
    6412:	6060      	str	r0, [r4, #4]
    6414:	6863      	ldr	r3, [r4, #4]
    6416:	6123      	str	r3, [r4, #16]
    6418:	2300      	movs	r3, #0
    641a:	9a04      	ldr	r2, [sp, #16]
    641c:	7013      	strb	r3, [r2, #0]
    641e:	e041      	b.n	64a4 <_printf_i+0x210>
    6420:	6923      	ldr	r3, [r4, #16]
    6422:	0032      	movs	r2, r6
    6424:	9906      	ldr	r1, [sp, #24]
    6426:	9805      	ldr	r0, [sp, #20]
    6428:	9d07      	ldr	r5, [sp, #28]
    642a:	47a8      	blx	r5
    642c:	1c43      	adds	r3, r0, #1
    642e:	d043      	beq.n	64b8 <_printf_i+0x224>
    6430:	6823      	ldr	r3, [r4, #0]
    6432:	2500      	movs	r5, #0
    6434:	079b      	lsls	r3, r3, #30
    6436:	d40f      	bmi.n	6458 <_printf_i+0x1c4>
    6438:	9b09      	ldr	r3, [sp, #36]	; 0x24
    643a:	68e0      	ldr	r0, [r4, #12]
    643c:	4298      	cmp	r0, r3
    643e:	da3d      	bge.n	64bc <_printf_i+0x228>
    6440:	0018      	movs	r0, r3
    6442:	e03b      	b.n	64bc <_printf_i+0x228>
    6444:	0022      	movs	r2, r4
    6446:	2301      	movs	r3, #1
    6448:	3219      	adds	r2, #25
    644a:	9906      	ldr	r1, [sp, #24]
    644c:	9805      	ldr	r0, [sp, #20]
    644e:	9e07      	ldr	r6, [sp, #28]
    6450:	47b0      	blx	r6
    6452:	1c43      	adds	r3, r0, #1
    6454:	d030      	beq.n	64b8 <_printf_i+0x224>
    6456:	3501      	adds	r5, #1
    6458:	68e3      	ldr	r3, [r4, #12]
    645a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    645c:	1a9b      	subs	r3, r3, r2
    645e:	429d      	cmp	r5, r3
    6460:	dbf0      	blt.n	6444 <_printf_i+0x1b0>
    6462:	e7e9      	b.n	6438 <_printf_i+0x1a4>
    6464:	2d00      	cmp	r5, #0
    6466:	d0a9      	beq.n	63bc <_printf_i+0x128>
    6468:	9e04      	ldr	r6, [sp, #16]
    646a:	0028      	movs	r0, r5
    646c:	0039      	movs	r1, r7
    646e:	f7ff f9e9 	bl	5844 <__aeabi_uidivmod>
    6472:	9b03      	ldr	r3, [sp, #12]
    6474:	3e01      	subs	r6, #1
    6476:	5c5b      	ldrb	r3, [r3, r1]
    6478:	0028      	movs	r0, r5
    647a:	7033      	strb	r3, [r6, #0]
    647c:	0039      	movs	r1, r7
    647e:	f7ff f95b 	bl	5738 <__udivsi3>
    6482:	1e05      	subs	r5, r0, #0
    6484:	d1f1      	bne.n	646a <_printf_i+0x1d6>
    6486:	2f08      	cmp	r7, #8
    6488:	d109      	bne.n	649e <_printf_i+0x20a>
    648a:	6823      	ldr	r3, [r4, #0]
    648c:	07db      	lsls	r3, r3, #31
    648e:	d506      	bpl.n	649e <_printf_i+0x20a>
    6490:	6863      	ldr	r3, [r4, #4]
    6492:	6922      	ldr	r2, [r4, #16]
    6494:	4293      	cmp	r3, r2
    6496:	dc02      	bgt.n	649e <_printf_i+0x20a>
    6498:	2330      	movs	r3, #48	; 0x30
    649a:	3e01      	subs	r6, #1
    649c:	7033      	strb	r3, [r6, #0]
    649e:	9b04      	ldr	r3, [sp, #16]
    64a0:	1b9b      	subs	r3, r3, r6
    64a2:	6123      	str	r3, [r4, #16]
    64a4:	9b07      	ldr	r3, [sp, #28]
    64a6:	aa09      	add	r2, sp, #36	; 0x24
    64a8:	9300      	str	r3, [sp, #0]
    64aa:	0021      	movs	r1, r4
    64ac:	9b06      	ldr	r3, [sp, #24]
    64ae:	9805      	ldr	r0, [sp, #20]
    64b0:	f7ff fe82 	bl	61b8 <_printf_common>
    64b4:	1c43      	adds	r3, r0, #1
    64b6:	d1b3      	bne.n	6420 <_printf_i+0x18c>
    64b8:	2001      	movs	r0, #1
    64ba:	4240      	negs	r0, r0
    64bc:	b00b      	add	sp, #44	; 0x2c
    64be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64c0:	00006f02 	.word	0x00006f02
    64c4:	00006ef1 	.word	0x00006ef1

000064c8 <memchr>:
    64c8:	b2c9      	uxtb	r1, r1
    64ca:	1882      	adds	r2, r0, r2
    64cc:	4290      	cmp	r0, r2
    64ce:	d101      	bne.n	64d4 <memchr+0xc>
    64d0:	2000      	movs	r0, #0
    64d2:	4770      	bx	lr
    64d4:	7803      	ldrb	r3, [r0, #0]
    64d6:	428b      	cmp	r3, r1
    64d8:	d0fb      	beq.n	64d2 <memchr+0xa>
    64da:	3001      	adds	r0, #1
    64dc:	e7f6      	b.n	64cc <memchr+0x4>

000064de <memmove>:
    64de:	b510      	push	{r4, lr}
    64e0:	4288      	cmp	r0, r1
    64e2:	d902      	bls.n	64ea <memmove+0xc>
    64e4:	188b      	adds	r3, r1, r2
    64e6:	4298      	cmp	r0, r3
    64e8:	d308      	bcc.n	64fc <memmove+0x1e>
    64ea:	2300      	movs	r3, #0
    64ec:	429a      	cmp	r2, r3
    64ee:	d007      	beq.n	6500 <memmove+0x22>
    64f0:	5ccc      	ldrb	r4, [r1, r3]
    64f2:	54c4      	strb	r4, [r0, r3]
    64f4:	3301      	adds	r3, #1
    64f6:	e7f9      	b.n	64ec <memmove+0xe>
    64f8:	5c8b      	ldrb	r3, [r1, r2]
    64fa:	5483      	strb	r3, [r0, r2]
    64fc:	3a01      	subs	r2, #1
    64fe:	d2fb      	bcs.n	64f8 <memmove+0x1a>
    6500:	bd10      	pop	{r4, pc}

00006502 <_realloc_r>:
    6502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6504:	0007      	movs	r7, r0
    6506:	000d      	movs	r5, r1
    6508:	0016      	movs	r6, r2
    650a:	2900      	cmp	r1, #0
    650c:	d105      	bne.n	651a <_realloc_r+0x18>
    650e:	0011      	movs	r1, r2
    6510:	f7ff fc46 	bl	5da0 <_malloc_r>
    6514:	0004      	movs	r4, r0
    6516:	0020      	movs	r0, r4
    6518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    651a:	2a00      	cmp	r2, #0
    651c:	d103      	bne.n	6526 <_realloc_r+0x24>
    651e:	f7ff fbf5 	bl	5d0c <_free_r>
    6522:	0034      	movs	r4, r6
    6524:	e7f7      	b.n	6516 <_realloc_r+0x14>
    6526:	f000 f812 	bl	654e <_malloc_usable_size_r>
    652a:	002c      	movs	r4, r5
    652c:	4286      	cmp	r6, r0
    652e:	d9f2      	bls.n	6516 <_realloc_r+0x14>
    6530:	0031      	movs	r1, r6
    6532:	0038      	movs	r0, r7
    6534:	f7ff fc34 	bl	5da0 <_malloc_r>
    6538:	1e04      	subs	r4, r0, #0
    653a:	d0ec      	beq.n	6516 <_realloc_r+0x14>
    653c:	0029      	movs	r1, r5
    653e:	0032      	movs	r2, r6
    6540:	f7ff fbd2 	bl	5ce8 <memcpy>
    6544:	0029      	movs	r1, r5
    6546:	0038      	movs	r0, r7
    6548:	f7ff fbe0 	bl	5d0c <_free_r>
    654c:	e7e3      	b.n	6516 <_realloc_r+0x14>

0000654e <_malloc_usable_size_r>:
    654e:	1f0b      	subs	r3, r1, #4
    6550:	681b      	ldr	r3, [r3, #0]
    6552:	1f18      	subs	r0, r3, #4
    6554:	2b00      	cmp	r3, #0
    6556:	da01      	bge.n	655c <_malloc_usable_size_r+0xe>
    6558:	580b      	ldr	r3, [r1, r0]
    655a:	18c0      	adds	r0, r0, r3
    655c:	4770      	bx	lr
    655e:	0000      	movs	r0, r0
    6560:	00000334 	.word	0x00000334
    6564:	00000334 	.word	0x00000334
    6568:	00000310 	.word	0x00000310
    656c:	00000334 	.word	0x00000334
    6570:	00000310 	.word	0x00000310
    6574:	000002f6 	.word	0x000002f6
    6578:	000002f6 	.word	0x000002f6
    657c:	00000334 	.word	0x00000334
    6580:	00000334 	.word	0x00000334
    6584:	00000334 	.word	0x00000334
    6588:	00000334 	.word	0x00000334
    658c:	00000334 	.word	0x00000334
    6590:	00000334 	.word	0x00000334
    6594:	00000334 	.word	0x00000334
    6598:	00000334 	.word	0x00000334
    659c:	00000334 	.word	0x00000334
    65a0:	00000334 	.word	0x00000334
    65a4:	00000334 	.word	0x00000334
    65a8:	00000334 	.word	0x00000334
    65ac:	00000334 	.word	0x00000334
    65b0:	00000334 	.word	0x00000334
    65b4:	00000334 	.word	0x00000334
    65b8:	00000334 	.word	0x00000334
    65bc:	00000334 	.word	0x00000334
    65c0:	00000334 	.word	0x00000334
    65c4:	00000334 	.word	0x00000334
    65c8:	00000334 	.word	0x00000334
    65cc:	00000334 	.word	0x00000334
    65d0:	00000334 	.word	0x00000334
    65d4:	00000334 	.word	0x00000334
    65d8:	00000334 	.word	0x00000334
    65dc:	00000334 	.word	0x00000334
    65e0:	00000334 	.word	0x00000334
    65e4:	00000334 	.word	0x00000334
    65e8:	00000334 	.word	0x00000334
    65ec:	00000334 	.word	0x00000334
    65f0:	00000334 	.word	0x00000334
    65f4:	00000334 	.word	0x00000334
    65f8:	00000334 	.word	0x00000334
    65fc:	00000334 	.word	0x00000334
    6600:	00000334 	.word	0x00000334
    6604:	00000334 	.word	0x00000334
    6608:	00000334 	.word	0x00000334
    660c:	00000334 	.word	0x00000334
    6610:	00000334 	.word	0x00000334
    6614:	00000334 	.word	0x00000334
    6618:	00000334 	.word	0x00000334
    661c:	00000334 	.word	0x00000334
    6620:	00000334 	.word	0x00000334
    6624:	00000334 	.word	0x00000334
    6628:	00000334 	.word	0x00000334
    662c:	00000334 	.word	0x00000334
    6630:	00000334 	.word	0x00000334
    6634:	00000334 	.word	0x00000334
    6638:	00000334 	.word	0x00000334
    663c:	00000334 	.word	0x00000334
    6640:	00000334 	.word	0x00000334
    6644:	00000334 	.word	0x00000334
    6648:	00000334 	.word	0x00000334
    664c:	00000334 	.word	0x00000334
    6650:	00000334 	.word	0x00000334
    6654:	00000334 	.word	0x00000334
    6658:	00000334 	.word	0x00000334
    665c:	00000334 	.word	0x00000334
    6660:	00000310 	.word	0x00000310
    6664:	00000310 	.word	0x00000310
    6668:	00000318 	.word	0x00000318
    666c:	00000318 	.word	0x00000318
    6670:	00000318 	.word	0x00000318
    6674:	00000318 	.word	0x00000318

00006678 <mmc_trans_multipliers>:
    6678:	00000000 0000000a 0000000c 0000000d     ................
    6688:	0000000f 00000014 0000001a 0000001e     ................
    6698:	00000023 00000028 0000002d 00000034     #...(...-...4...
    66a8:	00000037 0000003c 00000046 00000050     7...<...F...P...

000066b8 <sd_mmc_trans_units>:
    66b8:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000066d4 <sd_trans_multipliers>:
    66d4:	00000000 0000000a 0000000c 0000000d     ................
    66e4:	0000000f 00000014 00000019 0000001e     ................
    66f4:	00000023 00000028 0000002d 00000032     #...(...-...2...
    6704:	00000037 0000003c 00000046 00000050     7...<...F...P...
    6714:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    6724:	42001800 42001c00 00002d16 00002d12     ...B...B.-...-..
    6734:	00002d12 00002d78 00002d78 00002d2a     .-..x-..x-..*-..
    6744:	00002d1c 00002d30 00002d66 00002f38     .-..0-..f-..8/..
    6754:	00002f18 00002f18 00002fa4 00002f2a     ./.../.../..*/..
    6764:	00002f46 00002f1c 00002f54 00002f94     F/.../..T/.../..

00006774 <LfnOfs>:
    6774:	07050301 12100e09 1c181614 0000001e     ................

00006784 <excvt.4558>:
    6784:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    6794:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    67a4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    67b4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    67c4:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    67d4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    67e4:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    67f4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    6804:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    6814:	00005d5b                                []..

00006818 <Tbl>:
    6818:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    6828:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    6838:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    6848:	00d600ff 00f800dc 00d800a3 019200d7     ................
    6858:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    6868:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    6878:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    6888:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    6898:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    68a8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    68b8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    68c8:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    68d8:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    68e8:	00da00de 00d900db 00dd00fd 00b400af     ................
    68f8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    6908:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00006918 <tbl_lower.4308>:
    6918:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    6928:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    6938:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    6948:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    6958:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    6968:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    6978:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    6988:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    6998:	01050103 01090107 010d010b 0111010f     ................
    69a8:	01150113 01190117 011d011b 0121011f     ..............!.
    69b8:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    69c8:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    69d8:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    69e8:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    69f8:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    6a08:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    6a18:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    6a28:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    6a38:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    6a48:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    6a58:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    6a68:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    6a78:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    6a88:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    6a98:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    6aa8:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    6ab8:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    6ac8:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    6ad8:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    6ae8:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00006af8 <tbl_upper.4309>:
    6af8:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    6b08:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    6b18:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    6b28:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    6b38:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    6b48:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    6b58:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    6b68:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    6b78:	01040102 01080106 010c010a 0110010e     ................
    6b88:	01140112 01180116 011c011a 0120011e     .............. .
    6b98:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    6ba8:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    6bb8:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    6bc8:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    6bd8:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    6be8:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    6bf8:	03940393 03960395 03980397 039a0399     ................
    6c08:	039c039b 039e039d 03a0039f 03a303a1     ................
    6c18:	03a503a4 03a703a6 03a903a8 041003aa     ................
    6c28:	04120411 04140413 04160415 04180417     ................
    6c38:	041a0419 041c041b 041e041d 0420041f     .............. .
    6c48:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    6c58:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    6c68:	04030402 04050404 04070406 04090408     ................
    6c78:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    6c88:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    6c98:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    6ca8:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    6cb8:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    6cc8:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    6cd8:	20656854 657a6973 20666f20 20656874     The size of the 
    6ce8:	6d726966 65726177 6c696620 73692065     firmware file is
    6cf8:	20642520 65747962 0a0d2e73 00000000      %d bytes.......
    6d08:	33435243 72612032 6f6e2065 71652074     CRC32 are not eq
    6d18:	2e6c6175 000a0d20 00007825 6174654d     ual. ...%x..Meta
    6d28:	74616420 20262061 204d564e 64616552      data & NVM Read
    6d38:	43524320 204f4420 20544f4e 4354414d      CRC DO NOT MATC
    6d48:	0a0d2048 00000000 43204453 20647261     H ......SD Card 
    6d58:	564e2026 5243204d 20323343 4e204f44     & NVM CRC32 DO N
    6d68:	4d20544f 48435441 00000a0d 61772d33     OT MATCH....3-wa
    6d78:	52432079 68632043 206b6365 73736170     y CRC check pass
    6d88:	282e6465 6174654d 74614420 203d2061     ed.(Meta Data = 
    6d98:	43204453 20647261 564e203d 5243204d     SD Card = NVM CR
    6da8:	0d202943 0000000a 70413a30 63696c70     C) .....0:Applic
    6db8:	6f697461 646f436e 69622e65 0000006e     ationCode.bin...
    6dc8:	61520d0a 6e616964 545f6563 4f4f4220     ..Radiance_T BOO
    6dd8:	414f4c54 0a524544 0000000d 61656c50     TLOADER.....Plea
    6de8:	70206573 2067756c 53206e61 4d4d2f44     se plug an SD/MM
    6df8:	61632043 69206472 6c73206e 0a2e746f     C card in slot..
    6e08:	0000000d 64726143 736e6920 6c6c6174     ....Card install
    6e18:	49414620 000d0a4c 61656c50 75206573      FAIL...Please u
    6e28:	756c706e 6e612067 65722064 756c702d     nplug and re-plu
    6e38:	68742067 61632065 0a2e6472 0000000d     g the card......
    6e48:	6e756f4d 69642074 28206b73 6f6d5f66     Mount disk (f_mo
    6e58:	29746e75 00000a0d 45544544 44455443     unt)....DETECTED
    6e68:	45525020 0d2e5353 0000000a 72500a0d      PRESS........Pr
    6e78:	6565636f 676e6964 206f7420 6c707041     oceeding to Appl
    6e88:	74616369 206e6f69 65646f43 00000a0d     ication Code....
    6e98:	6e65704f 74656d20 74616461 69662061     Open metadata fi
    6ea8:	2820656c 706f5f66 0d296e65 0000000a     le (f_open).....
    6eb8:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
    6ec8:	64616552 206e6920 6174654d 61746164     Read in Metadata
    6ed8:	4b4f5b20 000a0d5d 2b302d23 6c680020      [OK]...#-0+ .hl
    6ee8:	6665004c 47464567 32313000 36353433     L.efgEFG.0123456
    6ef8:	41393837 45444342 31300046 35343332     789ABCDEF.012345
    6f08:	39383736 64636261 00006665              6789abcdef..

00006f14 <_init>:
    6f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f16:	46c0      	nop			; (mov r8, r8)
    6f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f1a:	bc08      	pop	{r3}
    6f1c:	469e      	mov	lr, r3
    6f1e:	4770      	bx	lr

00006f20 <__init_array_start>:
    6f20:	000000dd 	.word	0x000000dd

00006f24 <_fini>:
    6f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f2a:	bc08      	pop	{r3}
    6f2c:	469e      	mov	lr, r3
    6f2e:	4770      	bx	lr

00006f30 <__fini_array_start>:
    6f30:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ss_pins>:
2000000c:	0111                                             .

2000000d <g_interrupt_enabled>:
2000000d:	0001 3000                                        ...

20000010 <metadata_file_name>:
20000010:	3a30 656d 6174 6164 6174 742e 7478 0000     0:metadata.txt..

20000020 <_impure_ptr>:
20000020:	0024 2000                                   $.. 

20000024 <impure_data>:
	...
