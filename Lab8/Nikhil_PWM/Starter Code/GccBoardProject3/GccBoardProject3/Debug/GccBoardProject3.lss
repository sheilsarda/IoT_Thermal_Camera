
GccBoardProject3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002218  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  20000068  00002280  00020068  2**2
                  ALLOC
  3 .stack        00002004  2000012c  00002344  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002004f  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d30  00000000  00000000  00040138  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003d0a  00000000  00000000  00042e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003f0  00000000  00000000  00046b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000450  00000000  00000000  00046f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018cdd  00000000  00000000  000473b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009019  00000000  00000000  0006008f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089550  00000000  00000000  000690a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c34  00000000  00000000  000f25f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 21 00 20 71 14 00 00 6d 14 00 00 6d 14 00 00     0!. q...m...m...
	...
      2c:	6d 14 00 00 00 00 00 00 00 00 00 00 6d 14 00 00     m...........m...
      3c:	6d 14 00 00 6d 14 00 00 6d 14 00 00 6d 14 00 00     m...m...m...m...
      4c:	6d 14 00 00 6d 14 00 00 6d 14 00 00 6d 14 00 00     m...m...m...m...
      5c:	6d 14 00 00 6d 14 00 00 a1 0b 00 00 b1 0b 00 00     m...m...........
      6c:	c1 0b 00 00 d1 0b 00 00 e1 0b 00 00 f1 0b 00 00     ................
      7c:	6d 14 00 00 6d 14 00 00 6d 14 00 00 6d 14 00 00     m...m...m...m...
      8c:	6d 14 00 00 6d 14 00 00 00 00 00 00 00 00 00 00     m...m...........
      9c:	6d 14 00 00 6d 14 00 00 6d 14 00 00 6d 14 00 00     m...m...m...m...
      ac:	6d 14 00 00 00 00 00 00                             m.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002218 	.word	0x00002218

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002218 	.word	0x00002218
     10c:	00002218 	.word	0x00002218
     110:	00000000 	.word	0x00000000

00000114 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46de      	mov	lr, fp
     118:	4657      	mov	r7, sl
     11a:	464e      	mov	r6, r9
     11c:	4645      	mov	r5, r8
     11e:	b5e0      	push	{r5, r6, r7, lr}
     120:	b087      	sub	sp, #28
     122:	4680      	mov	r8, r0
     124:	9104      	str	r1, [sp, #16]
     126:	0016      	movs	r6, r2
     128:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     12a:	2200      	movs	r2, #0
     12c:	2300      	movs	r3, #0
     12e:	2100      	movs	r1, #0
     130:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     132:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     134:	2001      	movs	r0, #1
     136:	0021      	movs	r1, r4
     138:	9600      	str	r6, [sp, #0]
     13a:	9701      	str	r7, [sp, #4]
     13c:	465c      	mov	r4, fp
     13e:	9403      	str	r4, [sp, #12]
     140:	4644      	mov	r4, r8
     142:	9405      	str	r4, [sp, #20]
     144:	e013      	b.n	16e <long_division+0x5a>
     146:	2420      	movs	r4, #32
     148:	1a64      	subs	r4, r4, r1
     14a:	0005      	movs	r5, r0
     14c:	40e5      	lsrs	r5, r4
     14e:	46a8      	mov	r8, r5
     150:	e014      	b.n	17c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     152:	9c00      	ldr	r4, [sp, #0]
     154:	9d01      	ldr	r5, [sp, #4]
     156:	1b12      	subs	r2, r2, r4
     158:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     15a:	465c      	mov	r4, fp
     15c:	464d      	mov	r5, r9
     15e:	432c      	orrs	r4, r5
     160:	46a3      	mov	fp, r4
     162:	9c03      	ldr	r4, [sp, #12]
     164:	4645      	mov	r5, r8
     166:	432c      	orrs	r4, r5
     168:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     16a:	3901      	subs	r1, #1
     16c:	d325      	bcc.n	1ba <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     16e:	2420      	movs	r4, #32
     170:	4264      	negs	r4, r4
     172:	190c      	adds	r4, r1, r4
     174:	d4e7      	bmi.n	146 <long_division+0x32>
     176:	0005      	movs	r5, r0
     178:	40a5      	lsls	r5, r4
     17a:	46a8      	mov	r8, r5
     17c:	0004      	movs	r4, r0
     17e:	408c      	lsls	r4, r1
     180:	46a1      	mov	r9, r4
		r = r << 1;
     182:	1892      	adds	r2, r2, r2
     184:	415b      	adcs	r3, r3
     186:	0014      	movs	r4, r2
     188:	001d      	movs	r5, r3
		if (n & bit_shift) {
     18a:	9e05      	ldr	r6, [sp, #20]
     18c:	464f      	mov	r7, r9
     18e:	403e      	ands	r6, r7
     190:	46b4      	mov	ip, r6
     192:	9e04      	ldr	r6, [sp, #16]
     194:	4647      	mov	r7, r8
     196:	403e      	ands	r6, r7
     198:	46b2      	mov	sl, r6
     19a:	4666      	mov	r6, ip
     19c:	4657      	mov	r7, sl
     19e:	433e      	orrs	r6, r7
     1a0:	d003      	beq.n	1aa <long_division+0x96>
			r |= 0x01;
     1a2:	0006      	movs	r6, r0
     1a4:	4326      	orrs	r6, r4
     1a6:	0032      	movs	r2, r6
     1a8:	002b      	movs	r3, r5
		if (r >= d) {
     1aa:	9c00      	ldr	r4, [sp, #0]
     1ac:	9d01      	ldr	r5, [sp, #4]
     1ae:	429d      	cmp	r5, r3
     1b0:	d8db      	bhi.n	16a <long_division+0x56>
     1b2:	d1ce      	bne.n	152 <long_division+0x3e>
     1b4:	4294      	cmp	r4, r2
     1b6:	d8d8      	bhi.n	16a <long_division+0x56>
     1b8:	e7cb      	b.n	152 <long_division+0x3e>
     1ba:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     1bc:	4658      	mov	r0, fp
     1be:	0019      	movs	r1, r3
     1c0:	b007      	add	sp, #28
     1c2:	bc3c      	pop	{r2, r3, r4, r5}
     1c4:	4690      	mov	r8, r2
     1c6:	4699      	mov	r9, r3
     1c8:	46a2      	mov	sl, r4
     1ca:	46ab      	mov	fp, r5
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000001ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1ce:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1d0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1d2:	2340      	movs	r3, #64	; 0x40
     1d4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     1d6:	4281      	cmp	r1, r0
     1d8:	d202      	bcs.n	1e0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     1da:	0018      	movs	r0, r3
     1dc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     1de:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     1e0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1e2:	1c63      	adds	r3, r4, #1
     1e4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     1e6:	4288      	cmp	r0, r1
     1e8:	d9f9      	bls.n	1de <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ea:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     1ec:	2cff      	cmp	r4, #255	; 0xff
     1ee:	d8f4      	bhi.n	1da <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     1f0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1f2:	2300      	movs	r3, #0
     1f4:	e7f1      	b.n	1da <_sercom_get_sync_baud_val+0xc>
	...

000001f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	000f      	movs	r7, r1
     1fe:	0016      	movs	r6, r2
     200:	aa08      	add	r2, sp, #32
     202:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     204:	0004      	movs	r4, r0
     206:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     208:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     20a:	42bc      	cmp	r4, r7
     20c:	d902      	bls.n	214 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     20e:	0010      	movs	r0, r2
     210:	b003      	add	sp, #12
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     214:	2b00      	cmp	r3, #0
     216:	d114      	bne.n	242 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     218:	0002      	movs	r2, r0
     21a:	0008      	movs	r0, r1
     21c:	2100      	movs	r1, #0
     21e:	4c19      	ldr	r4, [pc, #100]	; (284 <_sercom_get_async_baud_val+0x8c>)
     220:	47a0      	blx	r4
     222:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     224:	003a      	movs	r2, r7
     226:	2300      	movs	r3, #0
     228:	2000      	movs	r0, #0
     22a:	4c17      	ldr	r4, [pc, #92]	; (288 <_sercom_get_async_baud_val+0x90>)
     22c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     22e:	2200      	movs	r2, #0
     230:	2301      	movs	r3, #1
     232:	1a12      	subs	r2, r2, r0
     234:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     236:	0c12      	lsrs	r2, r2, #16
     238:	041b      	lsls	r3, r3, #16
     23a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     23c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     23e:	2200      	movs	r2, #0
     240:	e7e5      	b.n	20e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     242:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     244:	2b01      	cmp	r3, #1
     246:	d1f9      	bne.n	23c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     248:	000a      	movs	r2, r1
     24a:	2300      	movs	r3, #0
     24c:	2100      	movs	r1, #0
     24e:	4c0d      	ldr	r4, [pc, #52]	; (284 <_sercom_get_async_baud_val+0x8c>)
     250:	47a0      	blx	r4
     252:	0002      	movs	r2, r0
     254:	000b      	movs	r3, r1
     256:	9200      	str	r2, [sp, #0]
     258:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     25a:	0038      	movs	r0, r7
     25c:	2100      	movs	r1, #0
     25e:	4c0a      	ldr	r4, [pc, #40]	; (288 <_sercom_get_async_baud_val+0x90>)
     260:	47a0      	blx	r4
     262:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     264:	2380      	movs	r3, #128	; 0x80
     266:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     268:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     26a:	4298      	cmp	r0, r3
     26c:	d8cf      	bhi.n	20e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     26e:	0f79      	lsrs	r1, r7, #29
     270:	00f8      	lsls	r0, r7, #3
     272:	9a00      	ldr	r2, [sp, #0]
     274:	9b01      	ldr	r3, [sp, #4]
     276:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     278:	00ea      	lsls	r2, r5, #3
     27a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     27c:	b2d2      	uxtb	r2, r2
     27e:	0352      	lsls	r2, r2, #13
     280:	432a      	orrs	r2, r5
     282:	e7db      	b.n	23c <_sercom_get_async_baud_val+0x44>
     284:	00001841 	.word	0x00001841
     288:	00000115 	.word	0x00000115

0000028c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     28c:	b510      	push	{r4, lr}
     28e:	b082      	sub	sp, #8
     290:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     292:	4b0e      	ldr	r3, [pc, #56]	; (2cc <sercom_set_gclk_generator+0x40>)
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2b00      	cmp	r3, #0
     298:	d007      	beq.n	2aa <sercom_set_gclk_generator+0x1e>
     29a:	2900      	cmp	r1, #0
     29c:	d105      	bne.n	2aa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     29e:	4b0b      	ldr	r3, [pc, #44]	; (2cc <sercom_set_gclk_generator+0x40>)
     2a0:	785b      	ldrb	r3, [r3, #1]
     2a2:	4283      	cmp	r3, r0
     2a4:	d010      	beq.n	2c8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     2a6:	201d      	movs	r0, #29
     2a8:	e00c      	b.n	2c4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     2aa:	a901      	add	r1, sp, #4
     2ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2ae:	2013      	movs	r0, #19
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <sercom_set_gclk_generator+0x44>)
     2b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     2b4:	2013      	movs	r0, #19
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <sercom_set_gclk_generator+0x48>)
     2b8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <sercom_set_gclk_generator+0x40>)
     2bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     2c2:	2000      	movs	r0, #0
}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e7fb      	b.n	2c4 <sercom_set_gclk_generator+0x38>
     2cc:	20000084 	.word	0x20000084
     2d0:	00001315 	.word	0x00001315
     2d4:	00001289 	.word	0x00001289

000002d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     2d8:	4b40      	ldr	r3, [pc, #256]	; (3dc <_sercom_get_default_pad+0x104>)
     2da:	4298      	cmp	r0, r3
     2dc:	d031      	beq.n	342 <_sercom_get_default_pad+0x6a>
     2de:	d90a      	bls.n	2f6 <_sercom_get_default_pad+0x1e>
     2e0:	4b3f      	ldr	r3, [pc, #252]	; (3e0 <_sercom_get_default_pad+0x108>)
     2e2:	4298      	cmp	r0, r3
     2e4:	d04d      	beq.n	382 <_sercom_get_default_pad+0xaa>
     2e6:	4b3f      	ldr	r3, [pc, #252]	; (3e4 <_sercom_get_default_pad+0x10c>)
     2e8:	4298      	cmp	r0, r3
     2ea:	d05a      	beq.n	3a2 <_sercom_get_default_pad+0xca>
     2ec:	4b3e      	ldr	r3, [pc, #248]	; (3e8 <_sercom_get_default_pad+0x110>)
     2ee:	4298      	cmp	r0, r3
     2f0:	d037      	beq.n	362 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     2f2:	2000      	movs	r0, #0
}
     2f4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     2f6:	4b3d      	ldr	r3, [pc, #244]	; (3ec <_sercom_get_default_pad+0x114>)
     2f8:	4298      	cmp	r0, r3
     2fa:	d00c      	beq.n	316 <_sercom_get_default_pad+0x3e>
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_sercom_get_default_pad+0x118>)
     2fe:	4298      	cmp	r0, r3
     300:	d1f7      	bne.n	2f2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     302:	2901      	cmp	r1, #1
     304:	d017      	beq.n	336 <_sercom_get_default_pad+0x5e>
     306:	2900      	cmp	r1, #0
     308:	d05d      	beq.n	3c6 <_sercom_get_default_pad+0xee>
     30a:	2902      	cmp	r1, #2
     30c:	d015      	beq.n	33a <_sercom_get_default_pad+0x62>
     30e:	2903      	cmp	r1, #3
     310:	d015      	beq.n	33e <_sercom_get_default_pad+0x66>
	return 0;
     312:	2000      	movs	r0, #0
     314:	e7ee      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     316:	2901      	cmp	r1, #1
     318:	d007      	beq.n	32a <_sercom_get_default_pad+0x52>
     31a:	2900      	cmp	r1, #0
     31c:	d051      	beq.n	3c2 <_sercom_get_default_pad+0xea>
     31e:	2902      	cmp	r1, #2
     320:	d005      	beq.n	32e <_sercom_get_default_pad+0x56>
     322:	2903      	cmp	r1, #3
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x5a>
	return 0;
     326:	2000      	movs	r0, #0
     328:	e7e4      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     32a:	4832      	ldr	r0, [pc, #200]	; (3f4 <_sercom_get_default_pad+0x11c>)
     32c:	e7e2      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     32e:	4832      	ldr	r0, [pc, #200]	; (3f8 <_sercom_get_default_pad+0x120>)
     330:	e7e0      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     332:	4832      	ldr	r0, [pc, #200]	; (3fc <_sercom_get_default_pad+0x124>)
     334:	e7de      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     336:	4832      	ldr	r0, [pc, #200]	; (400 <_sercom_get_default_pad+0x128>)
     338:	e7dc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33a:	4832      	ldr	r0, [pc, #200]	; (404 <_sercom_get_default_pad+0x12c>)
     33c:	e7da      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     33e:	4832      	ldr	r0, [pc, #200]	; (408 <_sercom_get_default_pad+0x130>)
     340:	e7d8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     342:	2901      	cmp	r1, #1
     344:	d007      	beq.n	356 <_sercom_get_default_pad+0x7e>
     346:	2900      	cmp	r1, #0
     348:	d03f      	beq.n	3ca <_sercom_get_default_pad+0xf2>
     34a:	2902      	cmp	r1, #2
     34c:	d005      	beq.n	35a <_sercom_get_default_pad+0x82>
     34e:	2903      	cmp	r1, #3
     350:	d005      	beq.n	35e <_sercom_get_default_pad+0x86>
	return 0;
     352:	2000      	movs	r0, #0
     354:	e7ce      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     356:	482d      	ldr	r0, [pc, #180]	; (40c <_sercom_get_default_pad+0x134>)
     358:	e7cc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35a:	482d      	ldr	r0, [pc, #180]	; (410 <_sercom_get_default_pad+0x138>)
     35c:	e7ca      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     35e:	482d      	ldr	r0, [pc, #180]	; (414 <_sercom_get_default_pad+0x13c>)
     360:	e7c8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     362:	2901      	cmp	r1, #1
     364:	d007      	beq.n	376 <_sercom_get_default_pad+0x9e>
     366:	2900      	cmp	r1, #0
     368:	d031      	beq.n	3ce <_sercom_get_default_pad+0xf6>
     36a:	2902      	cmp	r1, #2
     36c:	d005      	beq.n	37a <_sercom_get_default_pad+0xa2>
     36e:	2903      	cmp	r1, #3
     370:	d005      	beq.n	37e <_sercom_get_default_pad+0xa6>
	return 0;
     372:	2000      	movs	r0, #0
     374:	e7be      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     376:	4828      	ldr	r0, [pc, #160]	; (418 <_sercom_get_default_pad+0x140>)
     378:	e7bc      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37a:	4828      	ldr	r0, [pc, #160]	; (41c <_sercom_get_default_pad+0x144>)
     37c:	e7ba      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     37e:	4828      	ldr	r0, [pc, #160]	; (420 <_sercom_get_default_pad+0x148>)
     380:	e7b8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     382:	2901      	cmp	r1, #1
     384:	d007      	beq.n	396 <_sercom_get_default_pad+0xbe>
     386:	2900      	cmp	r1, #0
     388:	d023      	beq.n	3d2 <_sercom_get_default_pad+0xfa>
     38a:	2902      	cmp	r1, #2
     38c:	d005      	beq.n	39a <_sercom_get_default_pad+0xc2>
     38e:	2903      	cmp	r1, #3
     390:	d005      	beq.n	39e <_sercom_get_default_pad+0xc6>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ae      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	4823      	ldr	r0, [pc, #140]	; (424 <_sercom_get_default_pad+0x14c>)
     398:	e7ac      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39a:	4823      	ldr	r0, [pc, #140]	; (428 <_sercom_get_default_pad+0x150>)
     39c:	e7aa      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     39e:	4823      	ldr	r0, [pc, #140]	; (42c <_sercom_get_default_pad+0x154>)
     3a0:	e7a8      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3a2:	2901      	cmp	r1, #1
     3a4:	d007      	beq.n	3b6 <_sercom_get_default_pad+0xde>
     3a6:	2900      	cmp	r1, #0
     3a8:	d015      	beq.n	3d6 <_sercom_get_default_pad+0xfe>
     3aa:	2902      	cmp	r1, #2
     3ac:	d005      	beq.n	3ba <_sercom_get_default_pad+0xe2>
     3ae:	2903      	cmp	r1, #3
     3b0:	d005      	beq.n	3be <_sercom_get_default_pad+0xe6>
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e79e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	481e      	ldr	r0, [pc, #120]	; (430 <_sercom_get_default_pad+0x158>)
     3b8:	e79c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ba:	481e      	ldr	r0, [pc, #120]	; (434 <_sercom_get_default_pad+0x15c>)
     3bc:	e79a      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3be:	481e      	ldr	r0, [pc, #120]	; (438 <_sercom_get_default_pad+0x160>)
     3c0:	e798      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c2:	481e      	ldr	r0, [pc, #120]	; (43c <_sercom_get_default_pad+0x164>)
     3c4:	e796      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3c6:	2003      	movs	r0, #3
     3c8:	e794      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ca:	481d      	ldr	r0, [pc, #116]	; (440 <_sercom_get_default_pad+0x168>)
     3cc:	e792      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3ce:	481d      	ldr	r0, [pc, #116]	; (444 <_sercom_get_default_pad+0x16c>)
     3d0:	e790      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d2:	481d      	ldr	r0, [pc, #116]	; (448 <_sercom_get_default_pad+0x170>)
     3d4:	e78e      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3d6:	481d      	ldr	r0, [pc, #116]	; (44c <_sercom_get_default_pad+0x174>)
     3d8:	e78c      	b.n	2f4 <_sercom_get_default_pad+0x1c>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	42001000 	.word	0x42001000
     3e0:	42001800 	.word	0x42001800
     3e4:	42001c00 	.word	0x42001c00
     3e8:	42001400 	.word	0x42001400
     3ec:	42000800 	.word	0x42000800
     3f0:	42000c00 	.word	0x42000c00
     3f4:	00050003 	.word	0x00050003
     3f8:	00060003 	.word	0x00060003
     3fc:	00070003 	.word	0x00070003
     400:	00010003 	.word	0x00010003
     404:	001e0003 	.word	0x001e0003
     408:	001f0003 	.word	0x001f0003
     40c:	00090003 	.word	0x00090003
     410:	000a0003 	.word	0x000a0003
     414:	000b0003 	.word	0x000b0003
     418:	00110003 	.word	0x00110003
     41c:	00120003 	.word	0x00120003
     420:	00130003 	.word	0x00130003
     424:	000d0003 	.word	0x000d0003
     428:	000e0003 	.word	0x000e0003
     42c:	000f0003 	.word	0x000f0003
     430:	00170003 	.word	0x00170003
     434:	00180003 	.word	0x00180003
     438:	00190003 	.word	0x00190003
     43c:	00040003 	.word	0x00040003
     440:	00080003 	.word	0x00080003
     444:	00100003 	.word	0x00100003
     448:	000c0003 	.word	0x000c0003
     44c:	00160003 	.word	0x00160003

00000450 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     450:	b530      	push	{r4, r5, lr}
     452:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     454:	4b0b      	ldr	r3, [pc, #44]	; (484 <_sercom_get_sercom_inst_index+0x34>)
     456:	466a      	mov	r2, sp
     458:	cb32      	ldmia	r3!, {r1, r4, r5}
     45a:	c232      	stmia	r2!, {r1, r4, r5}
     45c:	cb32      	ldmia	r3!, {r1, r4, r5}
     45e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     460:	9b00      	ldr	r3, [sp, #0]
     462:	4283      	cmp	r3, r0
     464:	d00b      	beq.n	47e <_sercom_get_sercom_inst_index+0x2e>
     466:	2301      	movs	r3, #1
     468:	009a      	lsls	r2, r3, #2
     46a:	4669      	mov	r1, sp
     46c:	5852      	ldr	r2, [r2, r1]
     46e:	4282      	cmp	r2, r0
     470:	d006      	beq.n	480 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     472:	3301      	adds	r3, #1
     474:	2b06      	cmp	r3, #6
     476:	d1f7      	bne.n	468 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
}
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
			return i;
     480:	b2d8      	uxtb	r0, r3
     482:	e7fa      	b.n	47a <_sercom_get_sercom_inst_index+0x2a>
     484:	0000214c 	.word	0x0000214c

00000488 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     488:	b5f0      	push	{r4, r5, r6, r7, lr}
     48a:	46de      	mov	lr, fp
     48c:	4657      	mov	r7, sl
     48e:	464e      	mov	r6, r9
     490:	4645      	mov	r5, r8
     492:	b5e0      	push	{r5, r6, r7, lr}
     494:	b091      	sub	sp, #68	; 0x44
     496:	0005      	movs	r5, r0
     498:	000c      	movs	r4, r1
     49a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     49c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     49e:	0008      	movs	r0, r1
     4a0:	4bbc      	ldr	r3, [pc, #752]	; (794 <usart_init+0x30c>)
     4a2:	4798      	blx	r3
     4a4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     4a6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     4a8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     4aa:	07db      	lsls	r3, r3, #31
     4ac:	d506      	bpl.n	4bc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     4ae:	b011      	add	sp, #68	; 0x44
     4b0:	bc3c      	pop	{r2, r3, r4, r5}
     4b2:	4690      	mov	r8, r2
     4b4:	4699      	mov	r9, r3
     4b6:	46a2      	mov	sl, r4
     4b8:	46ab      	mov	fp, r5
     4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     4bc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     4be:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     4c0:	079b      	lsls	r3, r3, #30
     4c2:	d4f4      	bmi.n	4ae <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4c4:	49b4      	ldr	r1, [pc, #720]	; (798 <usart_init+0x310>)
     4c6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     4c8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     4ca:	2301      	movs	r3, #1
     4cc:	40bb      	lsls	r3, r7
     4ce:	4303      	orrs	r3, r0
     4d0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     4d2:	a90f      	add	r1, sp, #60	; 0x3c
     4d4:	272d      	movs	r7, #45	; 0x2d
     4d6:	5df3      	ldrb	r3, [r6, r7]
     4d8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     4da:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     4dc:	b2d3      	uxtb	r3, r2
     4de:	9302      	str	r3, [sp, #8]
     4e0:	0018      	movs	r0, r3
     4e2:	4bae      	ldr	r3, [pc, #696]	; (79c <usart_init+0x314>)
     4e4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     4e6:	9802      	ldr	r0, [sp, #8]
     4e8:	4bad      	ldr	r3, [pc, #692]	; (7a0 <usart_init+0x318>)
     4ea:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     4ec:	5df0      	ldrb	r0, [r6, r7]
     4ee:	2100      	movs	r1, #0
     4f0:	4bac      	ldr	r3, [pc, #688]	; (7a4 <usart_init+0x31c>)
     4f2:	4798      	blx	r3
	module->character_size = config->character_size;
     4f4:	7af3      	ldrb	r3, [r6, #11]
     4f6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     4f8:	2324      	movs	r3, #36	; 0x24
     4fa:	5cf3      	ldrb	r3, [r6, r3]
     4fc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     4fe:	2325      	movs	r3, #37	; 0x25
     500:	5cf3      	ldrb	r3, [r6, r3]
     502:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     504:	7ef3      	ldrb	r3, [r6, #27]
     506:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     508:	7f33      	ldrb	r3, [r6, #28]
     50a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     50c:	682b      	ldr	r3, [r5, #0]
     50e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     510:	0018      	movs	r0, r3
     512:	4ba0      	ldr	r3, [pc, #640]	; (794 <usart_init+0x30c>)
     514:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     516:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     518:	2200      	movs	r2, #0
     51a:	230e      	movs	r3, #14
     51c:	a906      	add	r1, sp, #24
     51e:	468c      	mov	ip, r1
     520:	4463      	add	r3, ip
     522:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     524:	8a32      	ldrh	r2, [r6, #16]
     526:	9202      	str	r2, [sp, #8]
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	429a      	cmp	r2, r3
     52e:	d100      	bne.n	532 <usart_init+0xaa>
     530:	e09e      	b.n	670 <usart_init+0x1e8>
     532:	d90f      	bls.n	554 <usart_init+0xcc>
     534:	23c0      	movs	r3, #192	; 0xc0
     536:	01db      	lsls	r3, r3, #7
     538:	9a02      	ldr	r2, [sp, #8]
     53a:	429a      	cmp	r2, r3
     53c:	d100      	bne.n	540 <usart_init+0xb8>
     53e:	e092      	b.n	666 <usart_init+0x1de>
     540:	2380      	movs	r3, #128	; 0x80
     542:	021b      	lsls	r3, r3, #8
     544:	429a      	cmp	r2, r3
     546:	d000      	beq.n	54a <usart_init+0xc2>
     548:	e11f      	b.n	78a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     54a:	2303      	movs	r3, #3
     54c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     54e:	2300      	movs	r3, #0
     550:	9307      	str	r3, [sp, #28]
     552:	e008      	b.n	566 <usart_init+0xde>
	switch (config->sample_rate) {
     554:	2380      	movs	r3, #128	; 0x80
     556:	019b      	lsls	r3, r3, #6
     558:	429a      	cmp	r2, r3
     55a:	d000      	beq.n	55e <usart_init+0xd6>
     55c:	e115      	b.n	78a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     55e:	2310      	movs	r3, #16
     560:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     562:	3b0f      	subs	r3, #15
     564:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     566:	6833      	ldr	r3, [r6, #0]
     568:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     56a:	68f3      	ldr	r3, [r6, #12]
     56c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     56e:	6973      	ldr	r3, [r6, #20]
     570:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     572:	7e33      	ldrb	r3, [r6, #24]
     574:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     576:	2326      	movs	r3, #38	; 0x26
     578:	5cf3      	ldrb	r3, [r6, r3]
     57a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     57c:	6873      	ldr	r3, [r6, #4]
     57e:	4699      	mov	r9, r3
	switch (transfer_mode)
     580:	2b00      	cmp	r3, #0
     582:	d100      	bne.n	586 <usart_init+0xfe>
     584:	e0a0      	b.n	6c8 <usart_init+0x240>
     586:	2380      	movs	r3, #128	; 0x80
     588:	055b      	lsls	r3, r3, #21
     58a:	4599      	cmp	r9, r3
     58c:	d100      	bne.n	590 <usart_init+0x108>
     58e:	e084      	b.n	69a <usart_init+0x212>
	if(config->encoding_format_enable) {
     590:	7e73      	ldrb	r3, [r6, #25]
     592:	2b00      	cmp	r3, #0
     594:	d002      	beq.n	59c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     596:	7eb3      	ldrb	r3, [r6, #26]
     598:	4642      	mov	r2, r8
     59a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     59c:	682a      	ldr	r2, [r5, #0]
     59e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     5a0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     5a2:	2b00      	cmp	r3, #0
     5a4:	d1fc      	bne.n	5a0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     5a6:	330e      	adds	r3, #14
     5a8:	aa06      	add	r2, sp, #24
     5aa:	4694      	mov	ip, r2
     5ac:	4463      	add	r3, ip
     5ae:	881b      	ldrh	r3, [r3, #0]
     5b0:	4642      	mov	r2, r8
     5b2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     5b4:	9b05      	ldr	r3, [sp, #20]
     5b6:	9a03      	ldr	r2, [sp, #12]
     5b8:	4313      	orrs	r3, r2
     5ba:	9a04      	ldr	r2, [sp, #16]
     5bc:	4313      	orrs	r3, r2
     5be:	464a      	mov	r2, r9
     5c0:	4313      	orrs	r3, r2
     5c2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     5c4:	465b      	mov	r3, fp
     5c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     5c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     5ca:	4653      	mov	r3, sl
     5cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     5ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     5d0:	2327      	movs	r3, #39	; 0x27
     5d2:	5cf3      	ldrb	r3, [r6, r3]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d101      	bne.n	5dc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     5d8:	3304      	adds	r3, #4
     5da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     5dc:	7e73      	ldrb	r3, [r6, #25]
     5de:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     5e0:	7f32      	ldrb	r2, [r6, #28]
     5e2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     5e4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     5e6:	7f72      	ldrb	r2, [r6, #29]
     5e8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     5ea:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     5ec:	2224      	movs	r2, #36	; 0x24
     5ee:	5cb2      	ldrb	r2, [r6, r2]
     5f0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     5f2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     5f4:	2225      	movs	r2, #37	; 0x25
     5f6:	5cb2      	ldrb	r2, [r6, r2]
     5f8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     5fa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     5fc:	7ab1      	ldrb	r1, [r6, #10]
     5fe:	7af2      	ldrb	r2, [r6, #11]
     600:	4311      	orrs	r1, r2
     602:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     604:	8933      	ldrh	r3, [r6, #8]
     606:	2bff      	cmp	r3, #255	; 0xff
     608:	d100      	bne.n	60c <usart_init+0x184>
     60a:	e081      	b.n	710 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     60c:	2280      	movs	r2, #128	; 0x80
     60e:	0452      	lsls	r2, r2, #17
     610:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     612:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     614:	232c      	movs	r3, #44	; 0x2c
     616:	5cf3      	ldrb	r3, [r6, r3]
     618:	2b00      	cmp	r3, #0
     61a:	d103      	bne.n	624 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     61c:	4b62      	ldr	r3, [pc, #392]	; (7a8 <usart_init+0x320>)
     61e:	789b      	ldrb	r3, [r3, #2]
     620:	079b      	lsls	r3, r3, #30
     622:	d501      	bpl.n	628 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     624:	2380      	movs	r3, #128	; 0x80
     626:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     628:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     62a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     62c:	2b00      	cmp	r3, #0
     62e:	d1fc      	bne.n	62a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     630:	4643      	mov	r3, r8
     632:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     634:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     636:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     638:	2b00      	cmp	r3, #0
     63a:	d1fc      	bne.n	636 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     63c:	4643      	mov	r3, r8
     63e:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     640:	ab0e      	add	r3, sp, #56	; 0x38
     642:	2280      	movs	r2, #128	; 0x80
     644:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     646:	2200      	movs	r2, #0
     648:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     64a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     64c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     64e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     650:	930a      	str	r3, [sp, #40]	; 0x28
     652:	6b73      	ldr	r3, [r6, #52]	; 0x34
     654:	930b      	str	r3, [sp, #44]	; 0x2c
     656:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     658:	930c      	str	r3, [sp, #48]	; 0x30
     65a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     65c:	9302      	str	r3, [sp, #8]
     65e:	930d      	str	r3, [sp, #52]	; 0x34
     660:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     662:	ae0a      	add	r6, sp, #40	; 0x28
     664:	e063      	b.n	72e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     666:	2308      	movs	r3, #8
     668:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     66a:	3b07      	subs	r3, #7
     66c:	9307      	str	r3, [sp, #28]
     66e:	e77a      	b.n	566 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     670:	6833      	ldr	r3, [r6, #0]
     672:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     674:	68f3      	ldr	r3, [r6, #12]
     676:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     678:	6973      	ldr	r3, [r6, #20]
     67a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     67c:	7e33      	ldrb	r3, [r6, #24]
     67e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     680:	2326      	movs	r3, #38	; 0x26
     682:	5cf3      	ldrb	r3, [r6, r3]
     684:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     686:	6873      	ldr	r3, [r6, #4]
     688:	4699      	mov	r9, r3
	switch (transfer_mode)
     68a:	2b00      	cmp	r3, #0
     68c:	d018      	beq.n	6c0 <usart_init+0x238>
     68e:	2380      	movs	r3, #128	; 0x80
     690:	055b      	lsls	r3, r3, #21
     692:	4599      	cmp	r9, r3
     694:	d001      	beq.n	69a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     696:	2000      	movs	r0, #0
     698:	e025      	b.n	6e6 <usart_init+0x25e>
			if (!config->use_external_clock) {
     69a:	2327      	movs	r3, #39	; 0x27
     69c:	5cf3      	ldrb	r3, [r6, r3]
     69e:	2b00      	cmp	r3, #0
     6a0:	d000      	beq.n	6a4 <usart_init+0x21c>
     6a2:	e775      	b.n	590 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     6a4:	6a33      	ldr	r3, [r6, #32]
     6a6:	001f      	movs	r7, r3
     6a8:	b2c0      	uxtb	r0, r0
     6aa:	4b40      	ldr	r3, [pc, #256]	; (7ac <usart_init+0x324>)
     6ac:	4798      	blx	r3
     6ae:	0001      	movs	r1, r0
     6b0:	220e      	movs	r2, #14
     6b2:	ab06      	add	r3, sp, #24
     6b4:	469c      	mov	ip, r3
     6b6:	4462      	add	r2, ip
     6b8:	0038      	movs	r0, r7
     6ba:	4b3d      	ldr	r3, [pc, #244]	; (7b0 <usart_init+0x328>)
     6bc:	4798      	blx	r3
     6be:	e012      	b.n	6e6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     6c0:	2308      	movs	r3, #8
     6c2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     6c4:	2300      	movs	r3, #0
     6c6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     6c8:	2327      	movs	r3, #39	; 0x27
     6ca:	5cf3      	ldrb	r3, [r6, r3]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d00e      	beq.n	6ee <usart_init+0x266>
				status_code =
     6d0:	9b06      	ldr	r3, [sp, #24]
     6d2:	9300      	str	r3, [sp, #0]
     6d4:	9b07      	ldr	r3, [sp, #28]
     6d6:	220e      	movs	r2, #14
     6d8:	a906      	add	r1, sp, #24
     6da:	468c      	mov	ip, r1
     6dc:	4462      	add	r2, ip
     6de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     6e0:	6a30      	ldr	r0, [r6, #32]
     6e2:	4f34      	ldr	r7, [pc, #208]	; (7b4 <usart_init+0x32c>)
     6e4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     6e6:	2800      	cmp	r0, #0
     6e8:	d000      	beq.n	6ec <usart_init+0x264>
     6ea:	e6e0      	b.n	4ae <usart_init+0x26>
     6ec:	e750      	b.n	590 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     6ee:	6a33      	ldr	r3, [r6, #32]
     6f0:	001f      	movs	r7, r3
     6f2:	b2c0      	uxtb	r0, r0
     6f4:	4b2d      	ldr	r3, [pc, #180]	; (7ac <usart_init+0x324>)
     6f6:	4798      	blx	r3
     6f8:	0001      	movs	r1, r0
				status_code =
     6fa:	9b06      	ldr	r3, [sp, #24]
     6fc:	9300      	str	r3, [sp, #0]
     6fe:	9b07      	ldr	r3, [sp, #28]
     700:	220e      	movs	r2, #14
     702:	a806      	add	r0, sp, #24
     704:	4684      	mov	ip, r0
     706:	4462      	add	r2, ip
     708:	0038      	movs	r0, r7
     70a:	4f2a      	ldr	r7, [pc, #168]	; (7b4 <usart_init+0x32c>)
     70c:	47b8      	blx	r7
     70e:	e7ea      	b.n	6e6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     710:	7ef3      	ldrb	r3, [r6, #27]
     712:	2b00      	cmp	r3, #0
     714:	d100      	bne.n	718 <usart_init+0x290>
     716:	e77d      	b.n	614 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     718:	2380      	movs	r3, #128	; 0x80
     71a:	04db      	lsls	r3, r3, #19
     71c:	431f      	orrs	r7, r3
     71e:	e779      	b.n	614 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     720:	0020      	movs	r0, r4
     722:	4b25      	ldr	r3, [pc, #148]	; (7b8 <usart_init+0x330>)
     724:	4798      	blx	r3
     726:	e007      	b.n	738 <usart_init+0x2b0>
     728:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     72a:	2f04      	cmp	r7, #4
     72c:	d00d      	beq.n	74a <usart_init+0x2c2>
     72e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     730:	00bb      	lsls	r3, r7, #2
     732:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     734:	2800      	cmp	r0, #0
     736:	d0f3      	beq.n	720 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     738:	1c43      	adds	r3, r0, #1
     73a:	d0f5      	beq.n	728 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     73c:	a90e      	add	r1, sp, #56	; 0x38
     73e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     740:	0c00      	lsrs	r0, r0, #16
     742:	b2c0      	uxtb	r0, r0
     744:	4b1d      	ldr	r3, [pc, #116]	; (7bc <usart_init+0x334>)
     746:	4798      	blx	r3
     748:	e7ee      	b.n	728 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     74a:	2300      	movs	r3, #0
     74c:	60eb      	str	r3, [r5, #12]
     74e:	612b      	str	r3, [r5, #16]
     750:	616b      	str	r3, [r5, #20]
     752:	61ab      	str	r3, [r5, #24]
     754:	61eb      	str	r3, [r5, #28]
     756:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     758:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     75a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     75c:	2200      	movs	r2, #0
     75e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     760:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     762:	3330      	adds	r3, #48	; 0x30
     764:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     766:	3301      	adds	r3, #1
     768:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     76a:	3301      	adds	r3, #1
     76c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     76e:	3301      	adds	r3, #1
     770:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     772:	6828      	ldr	r0, [r5, #0]
     774:	4b07      	ldr	r3, [pc, #28]	; (794 <usart_init+0x30c>)
     776:	4798      	blx	r3
     778:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     77a:	4911      	ldr	r1, [pc, #68]	; (7c0 <usart_init+0x338>)
     77c:	4b11      	ldr	r3, [pc, #68]	; (7c4 <usart_init+0x33c>)
     77e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     780:	00a4      	lsls	r4, r4, #2
     782:	4b11      	ldr	r3, [pc, #68]	; (7c8 <usart_init+0x340>)
     784:	50e5      	str	r5, [r4, r3]
	return status_code;
     786:	2000      	movs	r0, #0
     788:	e691      	b.n	4ae <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     78a:	2310      	movs	r3, #16
     78c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     78e:	2300      	movs	r3, #0
     790:	9307      	str	r3, [sp, #28]
     792:	e6e8      	b.n	566 <usart_init+0xde>
     794:	00000451 	.word	0x00000451
     798:	40000400 	.word	0x40000400
     79c:	00001315 	.word	0x00001315
     7a0:	00001289 	.word	0x00001289
     7a4:	0000028d 	.word	0x0000028d
     7a8:	41002000 	.word	0x41002000
     7ac:	00001331 	.word	0x00001331
     7b0:	000001cf 	.word	0x000001cf
     7b4:	000001f9 	.word	0x000001f9
     7b8:	000002d9 	.word	0x000002d9
     7bc:	0000140d 	.word	0x0000140d
     7c0:	0000099d 	.word	0x0000099d
     7c4:	00000b35 	.word	0x00000b35
     7c8:	200000cc 	.word	0x200000cc

000007cc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     7cc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     7ce:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     7d0:	2a00      	cmp	r2, #0
     7d2:	d101      	bne.n	7d8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     7d4:	0018      	movs	r0, r3
     7d6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     7d8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     7da:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     7dc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     7de:	2a00      	cmp	r2, #0
     7e0:	d1f8      	bne.n	7d4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     7e2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     7e4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     7e6:	2a00      	cmp	r2, #0
     7e8:	d1fc      	bne.n	7e4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     7ea:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     7ec:	2102      	movs	r1, #2
     7ee:	7e1a      	ldrb	r2, [r3, #24]
     7f0:	420a      	tst	r2, r1
     7f2:	d0fc      	beq.n	7ee <usart_write_wait+0x22>
	return STATUS_OK;
     7f4:	2300      	movs	r3, #0
     7f6:	e7ed      	b.n	7d4 <usart_write_wait+0x8>

000007f8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7fa:	46ce      	mov	lr, r9
     7fc:	4647      	mov	r7, r8
     7fe:	b580      	push	{r7, lr}
     800:	b083      	sub	sp, #12
     802:	0005      	movs	r5, r0
     804:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     806:	2017      	movs	r0, #23
	if (length == 0) {
     808:	2a00      	cmp	r2, #0
     80a:	d104      	bne.n	816 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     80c:	b003      	add	sp, #12
     80e:	bc0c      	pop	{r2, r3}
     810:	4690      	mov	r8, r2
     812:	4699      	mov	r9, r3
     814:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     816:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     818:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     81a:	2b00      	cmp	r3, #0
     81c:	d0f6      	beq.n	80c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     81e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     820:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     822:	2b00      	cmp	r3, #0
     824:	d1fc      	bne.n	820 <usart_write_buffer_wait+0x28>
	while (length--) {
     826:	3a01      	subs	r2, #1
     828:	b293      	uxth	r3, r2
     82a:	4699      	mov	r9, r3
     82c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     82e:	2701      	movs	r7, #1
	while (length--) {
     830:	4b1f      	ldr	r3, [pc, #124]	; (8b0 <usart_write_buffer_wait+0xb8>)
     832:	4698      	mov	r8, r3
     834:	e011      	b.n	85a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     836:	1c73      	adds	r3, r6, #1
     838:	b29b      	uxth	r3, r3
     83a:	9a01      	ldr	r2, [sp, #4]
     83c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     83e:	796a      	ldrb	r2, [r5, #5]
     840:	2a01      	cmp	r2, #1
     842:	d017      	beq.n	874 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     844:	b289      	uxth	r1, r1
     846:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     848:	0028      	movs	r0, r5
     84a:	4b1a      	ldr	r3, [pc, #104]	; (8b4 <usart_write_buffer_wait+0xbc>)
     84c:	4798      	blx	r3
	while (length--) {
     84e:	464b      	mov	r3, r9
     850:	3b01      	subs	r3, #1
     852:	b29b      	uxth	r3, r3
     854:	4699      	mov	r9, r3
     856:	4543      	cmp	r3, r8
     858:	d013      	beq.n	882 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     85a:	7e23      	ldrb	r3, [r4, #24]
     85c:	423b      	tst	r3, r7
     85e:	d1ea      	bne.n	836 <usart_write_buffer_wait+0x3e>
     860:	4b13      	ldr	r3, [pc, #76]	; (8b0 <usart_write_buffer_wait+0xb8>)
     862:	7e22      	ldrb	r2, [r4, #24]
     864:	423a      	tst	r2, r7
     866:	d1e6      	bne.n	836 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     868:	2b01      	cmp	r3, #1
     86a:	d019      	beq.n	8a0 <usart_write_buffer_wait+0xa8>
     86c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     86e:	2b00      	cmp	r3, #0
     870:	d1f7      	bne.n	862 <usart_write_buffer_wait+0x6a>
     872:	e7e0      	b.n	836 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     874:	3602      	adds	r6, #2
     876:	b2b6      	uxth	r6, r6
     878:	9a01      	ldr	r2, [sp, #4]
     87a:	5cd3      	ldrb	r3, [r2, r3]
     87c:	021b      	lsls	r3, r3, #8
     87e:	4319      	orrs	r1, r3
     880:	e7e2      	b.n	848 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     882:	7e23      	ldrb	r3, [r4, #24]
     884:	079b      	lsls	r3, r3, #30
     886:	d40d      	bmi.n	8a4 <usart_write_buffer_wait+0xac>
     888:	4b09      	ldr	r3, [pc, #36]	; (8b0 <usart_write_buffer_wait+0xb8>)
     88a:	2102      	movs	r1, #2
     88c:	7e22      	ldrb	r2, [r4, #24]
     88e:	420a      	tst	r2, r1
     890:	d10a      	bne.n	8a8 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     892:	2b01      	cmp	r3, #1
     894:	d00a      	beq.n	8ac <usart_write_buffer_wait+0xb4>
     896:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     898:	2b00      	cmp	r3, #0
     89a:	d1f7      	bne.n	88c <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     89c:	2000      	movs	r0, #0
     89e:	e7b5      	b.n	80c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     8a0:	2012      	movs	r0, #18
     8a2:	e7b3      	b.n	80c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     8a4:	2000      	movs	r0, #0
     8a6:	e7b1      	b.n	80c <usart_write_buffer_wait+0x14>
     8a8:	2000      	movs	r0, #0
     8aa:	e7af      	b.n	80c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     8ac:	2012      	movs	r0, #18
     8ae:	e7ad      	b.n	80c <usart_write_buffer_wait+0x14>
     8b0:	0000ffff 	.word	0x0000ffff
     8b4:	000007cd 	.word	0x000007cd

000008b8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ba:	0006      	movs	r6, r0
     8bc:	000c      	movs	r4, r1
     8be:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8c0:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <_usart_write_buffer+0x34>)
     8c4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     8c6:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     8c8:	b29b      	uxth	r3, r3
     8ca:	2b00      	cmp	r3, #0
     8cc:	d003      	beq.n	8d6 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     8ce:	4b08      	ldr	r3, [pc, #32]	; (8f0 <_usart_write_buffer+0x38>)
     8d0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     8d2:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     8d6:	85f5      	strh	r5, [r6, #46]	; 0x2e
     8d8:	4b05      	ldr	r3, [pc, #20]	; (8f0 <_usart_write_buffer+0x38>)
     8da:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     8dc:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     8de:	2205      	movs	r2, #5
     8e0:	2333      	movs	r3, #51	; 0x33
     8e2:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     8e4:	3b32      	subs	r3, #50	; 0x32
     8e6:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     8e8:	2000      	movs	r0, #0
     8ea:	e7f3      	b.n	8d4 <_usart_write_buffer+0x1c>
     8ec:	00000c01 	.word	0x00000c01
     8f0:	00000c41 	.word	0x00000c41

000008f4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8f6:	0004      	movs	r4, r0
     8f8:	000d      	movs	r5, r1
     8fa:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8fc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     8fe:	4b0f      	ldr	r3, [pc, #60]	; (93c <_usart_read_buffer+0x48>)
     900:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     902:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     904:	b29b      	uxth	r3, r3
     906:	2b00      	cmp	r3, #0
     908:	d003      	beq.n	912 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     90a:	4b0d      	ldr	r3, [pc, #52]	; (940 <_usart_read_buffer+0x4c>)
     90c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     90e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     912:	85a6      	strh	r6, [r4, #44]	; 0x2c
     914:	4b0a      	ldr	r3, [pc, #40]	; (940 <_usart_read_buffer+0x4c>)
     916:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     918:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     91a:	2205      	movs	r2, #5
     91c:	2332      	movs	r3, #50	; 0x32
     91e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     920:	3b2e      	subs	r3, #46	; 0x2e
     922:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     924:	7a23      	ldrb	r3, [r4, #8]
     926:	2b00      	cmp	r3, #0
     928:	d001      	beq.n	92e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     92a:	2320      	movs	r3, #32
     92c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     92e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     930:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     932:	2b00      	cmp	r3, #0
     934:	d0ec      	beq.n	910 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     936:	2308      	movs	r3, #8
     938:	75bb      	strb	r3, [r7, #22]
     93a:	e7e9      	b.n	910 <_usart_read_buffer+0x1c>
     93c:	00000c01 	.word	0x00000c01
     940:	00000c41 	.word	0x00000c41

00000944 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     944:	1c93      	adds	r3, r2, #2
     946:	009b      	lsls	r3, r3, #2
     948:	18c3      	adds	r3, r0, r3
     94a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     94c:	2130      	movs	r1, #48	; 0x30
     94e:	2301      	movs	r3, #1
     950:	4093      	lsls	r3, r2
     952:	001a      	movs	r2, r3
     954:	5c43      	ldrb	r3, [r0, r1]
     956:	4313      	orrs	r3, r2
     958:	5443      	strb	r3, [r0, r1]
}
     95a:	4770      	bx	lr

0000095c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     95c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     95e:	2317      	movs	r3, #23
	if (length == 0) {
     960:	2a00      	cmp	r2, #0
     962:	d101      	bne.n	968 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     964:	0018      	movs	r0, r3
     966:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     968:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     96a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     96c:	2c00      	cmp	r4, #0
     96e:	d0f9      	beq.n	964 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     970:	4b01      	ldr	r3, [pc, #4]	; (978 <usart_write_buffer_job+0x1c>)
     972:	4798      	blx	r3
     974:	0003      	movs	r3, r0
     976:	e7f5      	b.n	964 <usart_write_buffer_job+0x8>
     978:	000008b9 	.word	0x000008b9

0000097c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     97c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     97e:	2317      	movs	r3, #23
	if (length == 0) {
     980:	2a00      	cmp	r2, #0
     982:	d101      	bne.n	988 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     984:	0018      	movs	r0, r3
     986:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     988:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     98a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     98c:	2c00      	cmp	r4, #0
     98e:	d0f9      	beq.n	984 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     990:	4b01      	ldr	r3, [pc, #4]	; (998 <usart_read_buffer_job+0x1c>)
     992:	4798      	blx	r3
     994:	0003      	movs	r3, r0
     996:	e7f5      	b.n	984 <usart_read_buffer_job+0x8>
     998:	000008f5 	.word	0x000008f5

0000099c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     99e:	0080      	lsls	r0, r0, #2
     9a0:	4b62      	ldr	r3, [pc, #392]	; (b2c <_usart_interrupt_handler+0x190>)
     9a2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     9a4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9a6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     9a8:	2b00      	cmp	r3, #0
     9aa:	d1fc      	bne.n	9a6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     9ac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     9ae:	7da6      	ldrb	r6, [r4, #22]
     9b0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     9b2:	2330      	movs	r3, #48	; 0x30
     9b4:	5ceb      	ldrb	r3, [r5, r3]
     9b6:	2231      	movs	r2, #49	; 0x31
     9b8:	5caf      	ldrb	r7, [r5, r2]
     9ba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     9bc:	07f3      	lsls	r3, r6, #31
     9be:	d522      	bpl.n	a06 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     9c0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9c2:	b29b      	uxth	r3, r3
     9c4:	2b00      	cmp	r3, #0
     9c6:	d01c      	beq.n	a02 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     9ca:	7813      	ldrb	r3, [r2, #0]
     9cc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     9ce:	1c51      	adds	r1, r2, #1
     9d0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9d2:	7969      	ldrb	r1, [r5, #5]
     9d4:	2901      	cmp	r1, #1
     9d6:	d00e      	beq.n	9f6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9d8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     9da:	05db      	lsls	r3, r3, #23
     9dc:	0ddb      	lsrs	r3, r3, #23
     9de:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     9e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9e2:	3b01      	subs	r3, #1
     9e4:	b29b      	uxth	r3, r3
     9e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     9e8:	2b00      	cmp	r3, #0
     9ea:	d10c      	bne.n	a06 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9ec:	3301      	adds	r3, #1
     9ee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     9f0:	3301      	adds	r3, #1
     9f2:	75a3      	strb	r3, [r4, #22]
     9f4:	e007      	b.n	a06 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     9f6:	7851      	ldrb	r1, [r2, #1]
     9f8:	0209      	lsls	r1, r1, #8
     9fa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     9fc:	3202      	adds	r2, #2
     9fe:	62aa      	str	r2, [r5, #40]	; 0x28
     a00:	e7eb      	b.n	9da <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a02:	2301      	movs	r3, #1
     a04:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a06:	07b3      	lsls	r3, r6, #30
     a08:	d506      	bpl.n	a18 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a0a:	2302      	movs	r3, #2
     a0c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a0e:	2200      	movs	r2, #0
     a10:	3331      	adds	r3, #49	; 0x31
     a12:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a14:	07fb      	lsls	r3, r7, #31
     a16:	d41a      	bmi.n	a4e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a18:	0773      	lsls	r3, r6, #29
     a1a:	d565      	bpl.n	ae8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     a1c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a1e:	b29b      	uxth	r3, r3
     a20:	2b00      	cmp	r3, #0
     a22:	d05f      	beq.n	ae4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a24:	8b63      	ldrh	r3, [r4, #26]
     a26:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a28:	071a      	lsls	r2, r3, #28
     a2a:	d414      	bmi.n	a56 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a2c:	223f      	movs	r2, #63	; 0x3f
     a2e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a30:	2b00      	cmp	r3, #0
     a32:	d034      	beq.n	a9e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a34:	079a      	lsls	r2, r3, #30
     a36:	d511      	bpl.n	a5c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a38:	221a      	movs	r2, #26
     a3a:	2332      	movs	r3, #50	; 0x32
     a3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a3e:	3b30      	subs	r3, #48	; 0x30
     a40:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a42:	077b      	lsls	r3, r7, #29
     a44:	d550      	bpl.n	ae8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a46:	0028      	movs	r0, r5
     a48:	696b      	ldr	r3, [r5, #20]
     a4a:	4798      	blx	r3
     a4c:	e04c      	b.n	ae8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a4e:	0028      	movs	r0, r5
     a50:	68eb      	ldr	r3, [r5, #12]
     a52:	4798      	blx	r3
     a54:	e7e0      	b.n	a18 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a56:	2237      	movs	r2, #55	; 0x37
     a58:	4013      	ands	r3, r2
     a5a:	e7e9      	b.n	a30 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a5c:	075a      	lsls	r2, r3, #29
     a5e:	d505      	bpl.n	a6c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     a60:	221e      	movs	r2, #30
     a62:	2332      	movs	r3, #50	; 0x32
     a64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a66:	3b2e      	subs	r3, #46	; 0x2e
     a68:	8363      	strh	r3, [r4, #26]
     a6a:	e7ea      	b.n	a42 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a6c:	07da      	lsls	r2, r3, #31
     a6e:	d505      	bpl.n	a7c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     a70:	2213      	movs	r2, #19
     a72:	2332      	movs	r3, #50	; 0x32
     a74:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a76:	3b31      	subs	r3, #49	; 0x31
     a78:	8363      	strh	r3, [r4, #26]
     a7a:	e7e2      	b.n	a42 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a7c:	06da      	lsls	r2, r3, #27
     a7e:	d505      	bpl.n	a8c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     a80:	2242      	movs	r2, #66	; 0x42
     a82:	2332      	movs	r3, #50	; 0x32
     a84:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a86:	3b22      	subs	r3, #34	; 0x22
     a88:	8363      	strh	r3, [r4, #26]
     a8a:	e7da      	b.n	a42 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a8c:	2220      	movs	r2, #32
     a8e:	421a      	tst	r2, r3
     a90:	d0d7      	beq.n	a42 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a92:	3221      	adds	r2, #33	; 0x21
     a94:	2332      	movs	r3, #50	; 0x32
     a96:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a98:	3b12      	subs	r3, #18
     a9a:	8363      	strh	r3, [r4, #26]
     a9c:	e7d1      	b.n	a42 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     aa0:	05db      	lsls	r3, r3, #23
     aa2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     aa4:	b2da      	uxtb	r2, r3
     aa6:	6a69      	ldr	r1, [r5, #36]	; 0x24
     aa8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     aaa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     aac:	1c51      	adds	r1, r2, #1
     aae:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ab0:	7969      	ldrb	r1, [r5, #5]
     ab2:	2901      	cmp	r1, #1
     ab4:	d010      	beq.n	ad8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     ab6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ab8:	3b01      	subs	r3, #1
     aba:	b29b      	uxth	r3, r3
     abc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     abe:	2b00      	cmp	r3, #0
     ac0:	d112      	bne.n	ae8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ac2:	3304      	adds	r3, #4
     ac4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     ac6:	2200      	movs	r2, #0
     ac8:	332e      	adds	r3, #46	; 0x2e
     aca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     acc:	07bb      	lsls	r3, r7, #30
     ace:	d50b      	bpl.n	ae8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ad0:	0028      	movs	r0, r5
     ad2:	692b      	ldr	r3, [r5, #16]
     ad4:	4798      	blx	r3
     ad6:	e007      	b.n	ae8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ad8:	0a1b      	lsrs	r3, r3, #8
     ada:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     adc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     ade:	3301      	adds	r3, #1
     ae0:	626b      	str	r3, [r5, #36]	; 0x24
     ae2:	e7e8      	b.n	ab6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ae4:	2304      	movs	r3, #4
     ae6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ae8:	06f3      	lsls	r3, r6, #27
     aea:	d504      	bpl.n	af6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     aec:	2310      	movs	r3, #16
     aee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     af0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     af2:	06fb      	lsls	r3, r7, #27
     af4:	d40e      	bmi.n	b14 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     af6:	06b3      	lsls	r3, r6, #26
     af8:	d504      	bpl.n	b04 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     afa:	2320      	movs	r3, #32
     afc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     afe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b00:	073b      	lsls	r3, r7, #28
     b02:	d40b      	bmi.n	b1c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b04:	0733      	lsls	r3, r6, #28
     b06:	d504      	bpl.n	b12 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b08:	2308      	movs	r3, #8
     b0a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b0c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b0e:	06bb      	lsls	r3, r7, #26
     b10:	d408      	bmi.n	b24 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     b14:	0028      	movs	r0, r5
     b16:	69eb      	ldr	r3, [r5, #28]
     b18:	4798      	blx	r3
     b1a:	e7ec      	b.n	af6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b1c:	0028      	movs	r0, r5
     b1e:	69ab      	ldr	r3, [r5, #24]
     b20:	4798      	blx	r3
     b22:	e7ef      	b.n	b04 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b24:	6a2b      	ldr	r3, [r5, #32]
     b26:	0028      	movs	r0, r5
     b28:	4798      	blx	r3
}
     b2a:	e7f2      	b.n	b12 <_usart_interrupt_handler+0x176>
     b2c:	200000cc 	.word	0x200000cc

00000b30 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b30:	4770      	bx	lr
	...

00000b34 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     b34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     b36:	4b0a      	ldr	r3, [pc, #40]	; (b60 <_sercom_set_handler+0x2c>)
     b38:	781b      	ldrb	r3, [r3, #0]
     b3a:	2b00      	cmp	r3, #0
     b3c:	d10c      	bne.n	b58 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b3e:	4f09      	ldr	r7, [pc, #36]	; (b64 <_sercom_set_handler+0x30>)
     b40:	4e09      	ldr	r6, [pc, #36]	; (b68 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     b42:	4d0a      	ldr	r5, [pc, #40]	; (b6c <_sercom_set_handler+0x38>)
     b44:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b46:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     b48:	195a      	adds	r2, r3, r5
     b4a:	6014      	str	r4, [r2, #0]
     b4c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b4e:	2b18      	cmp	r3, #24
     b50:	d1f9      	bne.n	b46 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     b52:	2201      	movs	r2, #1
     b54:	4b02      	ldr	r3, [pc, #8]	; (b60 <_sercom_set_handler+0x2c>)
     b56:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b58:	0080      	lsls	r0, r0, #2
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <_sercom_set_handler+0x30>)
     b5c:	50c1      	str	r1, [r0, r3]
}
     b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b60:	20000086 	.word	0x20000086
     b64:	20000088 	.word	0x20000088
     b68:	00000b31 	.word	0x00000b31
     b6c:	200000cc 	.word	0x200000cc

00000b70 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b70:	b500      	push	{lr}
     b72:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b74:	2309      	movs	r3, #9
     b76:	466a      	mov	r2, sp
     b78:	7013      	strb	r3, [r2, #0]
     b7a:	3301      	adds	r3, #1
     b7c:	7053      	strb	r3, [r2, #1]
     b7e:	3301      	adds	r3, #1
     b80:	7093      	strb	r3, [r2, #2]
     b82:	3301      	adds	r3, #1
     b84:	70d3      	strb	r3, [r2, #3]
     b86:	3301      	adds	r3, #1
     b88:	7113      	strb	r3, [r2, #4]
     b8a:	3301      	adds	r3, #1
     b8c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b8e:	4b03      	ldr	r3, [pc, #12]	; (b9c <_sercom_get_interrupt_vector+0x2c>)
     b90:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b92:	466b      	mov	r3, sp
     b94:	5618      	ldrsb	r0, [r3, r0]
}
     b96:	b003      	add	sp, #12
     b98:	bd00      	pop	{pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	00000451 	.word	0x00000451

00000ba0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ba0:	b510      	push	{r4, lr}
     ba2:	4b02      	ldr	r3, [pc, #8]	; (bac <SERCOM0_Handler+0xc>)
     ba4:	681b      	ldr	r3, [r3, #0]
     ba6:	2000      	movs	r0, #0
     ba8:	4798      	blx	r3
     baa:	bd10      	pop	{r4, pc}
     bac:	20000088 	.word	0x20000088

00000bb0 <SERCOM1_Handler>:
     bb0:	b510      	push	{r4, lr}
     bb2:	4b02      	ldr	r3, [pc, #8]	; (bbc <SERCOM1_Handler+0xc>)
     bb4:	685b      	ldr	r3, [r3, #4]
     bb6:	2001      	movs	r0, #1
     bb8:	4798      	blx	r3
     bba:	bd10      	pop	{r4, pc}
     bbc:	20000088 	.word	0x20000088

00000bc0 <SERCOM2_Handler>:
     bc0:	b510      	push	{r4, lr}
     bc2:	4b02      	ldr	r3, [pc, #8]	; (bcc <SERCOM2_Handler+0xc>)
     bc4:	689b      	ldr	r3, [r3, #8]
     bc6:	2002      	movs	r0, #2
     bc8:	4798      	blx	r3
     bca:	bd10      	pop	{r4, pc}
     bcc:	20000088 	.word	0x20000088

00000bd0 <SERCOM3_Handler>:
     bd0:	b510      	push	{r4, lr}
     bd2:	4b02      	ldr	r3, [pc, #8]	; (bdc <SERCOM3_Handler+0xc>)
     bd4:	68db      	ldr	r3, [r3, #12]
     bd6:	2003      	movs	r0, #3
     bd8:	4798      	blx	r3
     bda:	bd10      	pop	{r4, pc}
     bdc:	20000088 	.word	0x20000088

00000be0 <SERCOM4_Handler>:
     be0:	b510      	push	{r4, lr}
     be2:	4b02      	ldr	r3, [pc, #8]	; (bec <SERCOM4_Handler+0xc>)
     be4:	691b      	ldr	r3, [r3, #16]
     be6:	2004      	movs	r0, #4
     be8:	4798      	blx	r3
     bea:	bd10      	pop	{r4, pc}
     bec:	20000088 	.word	0x20000088

00000bf0 <SERCOM5_Handler>:
     bf0:	b510      	push	{r4, lr}
     bf2:	4b02      	ldr	r3, [pc, #8]	; (bfc <SERCOM5_Handler+0xc>)
     bf4:	695b      	ldr	r3, [r3, #20]
     bf6:	2005      	movs	r0, #5
     bf8:	4798      	blx	r3
     bfa:	bd10      	pop	{r4, pc}
     bfc:	20000088 	.word	0x20000088

00000c00 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c00:	4b0c      	ldr	r3, [pc, #48]	; (c34 <cpu_irq_enter_critical+0x34>)
     c02:	681b      	ldr	r3, [r3, #0]
     c04:	2b00      	cmp	r3, #0
     c06:	d106      	bne.n	c16 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c08:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c0c:	2b00      	cmp	r3, #0
     c0e:	d007      	beq.n	c20 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c10:	2200      	movs	r2, #0
     c12:	4b09      	ldr	r3, [pc, #36]	; (c38 <cpu_irq_enter_critical+0x38>)
     c14:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c16:	4a07      	ldr	r2, [pc, #28]	; (c34 <cpu_irq_enter_critical+0x34>)
     c18:	6813      	ldr	r3, [r2, #0]
     c1a:	3301      	adds	r3, #1
     c1c:	6013      	str	r3, [r2, #0]
}
     c1e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     c20:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c22:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c26:	2200      	movs	r2, #0
     c28:	4b04      	ldr	r3, [pc, #16]	; (c3c <cpu_irq_enter_critical+0x3c>)
     c2a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c2c:	3201      	adds	r2, #1
     c2e:	4b02      	ldr	r3, [pc, #8]	; (c38 <cpu_irq_enter_critical+0x38>)
     c30:	701a      	strb	r2, [r3, #0]
     c32:	e7f0      	b.n	c16 <cpu_irq_enter_critical+0x16>
     c34:	200000a0 	.word	0x200000a0
     c38:	200000a4 	.word	0x200000a4
     c3c:	20000000 	.word	0x20000000

00000c40 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c40:	4b08      	ldr	r3, [pc, #32]	; (c64 <cpu_irq_leave_critical+0x24>)
     c42:	681a      	ldr	r2, [r3, #0]
     c44:	3a01      	subs	r2, #1
     c46:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d109      	bne.n	c62 <cpu_irq_leave_critical+0x22>
     c4e:	4b06      	ldr	r3, [pc, #24]	; (c68 <cpu_irq_leave_critical+0x28>)
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b00      	cmp	r3, #0
     c54:	d005      	beq.n	c62 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c56:	2201      	movs	r2, #1
     c58:	4b04      	ldr	r3, [pc, #16]	; (c6c <cpu_irq_leave_critical+0x2c>)
     c5a:	701a      	strb	r2, [r3, #0]
     c5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c60:	b662      	cpsie	i
	}
}
     c62:	4770      	bx	lr
     c64:	200000a0 	.word	0x200000a0
     c68:	200000a4 	.word	0x200000a4
     c6c:	20000000 	.word	0x20000000

00000c70 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     c70:	b5f0      	push	{r4, r5, r6, r7, lr}
     c72:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     c74:	ac01      	add	r4, sp, #4
     c76:	2501      	movs	r5, #1
     c78:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c7a:	2700      	movs	r7, #0
     c7c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c7e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c80:	0021      	movs	r1, r4
     c82:	2017      	movs	r0, #23
     c84:	4e06      	ldr	r6, [pc, #24]	; (ca0 <system_board_init+0x30>)
     c86:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c88:	2280      	movs	r2, #128	; 0x80
     c8a:	0412      	lsls	r2, r2, #16
     c8c:	4b05      	ldr	r3, [pc, #20]	; (ca4 <system_board_init+0x34>)
     c8e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c90:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     c92:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     c94:	0021      	movs	r1, r4
     c96:	2037      	movs	r0, #55	; 0x37
     c98:	47b0      	blx	r6
}
     c9a:	b003      	add	sp, #12
     c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	00000ca9 	.word	0x00000ca9
     ca4:	41004400 	.word	0x41004400

00000ca8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ca8:	b500      	push	{lr}
     caa:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cac:	ab01      	add	r3, sp, #4
     cae:	2280      	movs	r2, #128	; 0x80
     cb0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     cb2:	780a      	ldrb	r2, [r1, #0]
     cb4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     cb6:	784a      	ldrb	r2, [r1, #1]
     cb8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     cba:	788a      	ldrb	r2, [r1, #2]
     cbc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     cbe:	0019      	movs	r1, r3
     cc0:	4b01      	ldr	r3, [pc, #4]	; (cc8 <port_pin_set_config+0x20>)
     cc2:	4798      	blx	r3
}
     cc4:	b003      	add	sp, #12
     cc6:	bd00      	pop	{pc}
     cc8:	0000140d 	.word	0x0000140d

00000ccc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     ccc:	b510      	push	{r4, lr}
	switch (clock_source) {
     cce:	2808      	cmp	r0, #8
     cd0:	d803      	bhi.n	cda <system_clock_source_get_hz+0xe>
     cd2:	0080      	lsls	r0, r0, #2
     cd4:	4b1c      	ldr	r3, [pc, #112]	; (d48 <system_clock_source_get_hz+0x7c>)
     cd6:	581b      	ldr	r3, [r3, r0]
     cd8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     cda:	2000      	movs	r0, #0
     cdc:	e032      	b.n	d44 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     cde:	4b1b      	ldr	r3, [pc, #108]	; (d4c <system_clock_source_get_hz+0x80>)
     ce0:	6918      	ldr	r0, [r3, #16]
     ce2:	e02f      	b.n	d44 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     ce4:	4b1a      	ldr	r3, [pc, #104]	; (d50 <system_clock_source_get_hz+0x84>)
     ce6:	6a1b      	ldr	r3, [r3, #32]
     ce8:	059b      	lsls	r3, r3, #22
     cea:	0f9b      	lsrs	r3, r3, #30
     cec:	4819      	ldr	r0, [pc, #100]	; (d54 <system_clock_source_get_hz+0x88>)
     cee:	40d8      	lsrs	r0, r3
     cf0:	e028      	b.n	d44 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     cf2:	4b16      	ldr	r3, [pc, #88]	; (d4c <system_clock_source_get_hz+0x80>)
     cf4:	6958      	ldr	r0, [r3, #20]
     cf6:	e025      	b.n	d44 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cf8:	4b14      	ldr	r3, [pc, #80]	; (d4c <system_clock_source_get_hz+0x80>)
     cfa:	681b      	ldr	r3, [r3, #0]
			return 0;
     cfc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cfe:	079b      	lsls	r3, r3, #30
     d00:	d520      	bpl.n	d44 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d02:	4913      	ldr	r1, [pc, #76]	; (d50 <system_clock_source_get_hz+0x84>)
     d04:	2210      	movs	r2, #16
     d06:	68cb      	ldr	r3, [r1, #12]
     d08:	421a      	tst	r2, r3
     d0a:	d0fc      	beq.n	d06 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     d0c:	4b0f      	ldr	r3, [pc, #60]	; (d4c <system_clock_source_get_hz+0x80>)
     d0e:	681a      	ldr	r2, [r3, #0]
     d10:	2324      	movs	r3, #36	; 0x24
     d12:	4013      	ands	r3, r2
     d14:	2b04      	cmp	r3, #4
     d16:	d001      	beq.n	d1c <system_clock_source_get_hz+0x50>
			return 48000000UL;
     d18:	480f      	ldr	r0, [pc, #60]	; (d58 <system_clock_source_get_hz+0x8c>)
     d1a:	e013      	b.n	d44 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d1c:	2000      	movs	r0, #0
     d1e:	4b0f      	ldr	r3, [pc, #60]	; (d5c <system_clock_source_get_hz+0x90>)
     d20:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     d22:	4b0a      	ldr	r3, [pc, #40]	; (d4c <system_clock_source_get_hz+0x80>)
     d24:	689b      	ldr	r3, [r3, #8]
     d26:	041b      	lsls	r3, r3, #16
     d28:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d2a:	4358      	muls	r0, r3
     d2c:	e00a      	b.n	d44 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d2e:	2350      	movs	r3, #80	; 0x50
     d30:	4a07      	ldr	r2, [pc, #28]	; (d50 <system_clock_source_get_hz+0x84>)
     d32:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d34:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d36:	075b      	lsls	r3, r3, #29
     d38:	d504      	bpl.n	d44 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     d3a:	4b04      	ldr	r3, [pc, #16]	; (d4c <system_clock_source_get_hz+0x80>)
     d3c:	68d8      	ldr	r0, [r3, #12]
     d3e:	e001      	b.n	d44 <system_clock_source_get_hz+0x78>
		return 32768UL;
     d40:	2080      	movs	r0, #128	; 0x80
     d42:	0200      	lsls	r0, r0, #8
	}
}
     d44:	bd10      	pop	{r4, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	00002164 	.word	0x00002164
     d4c:	200000a8 	.word	0x200000a8
     d50:	40000800 	.word	0x40000800
     d54:	007a1200 	.word	0x007a1200
     d58:	02dc6c00 	.word	0x02dc6c00
     d5c:	00001331 	.word	0x00001331

00000d60 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d60:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d62:	490c      	ldr	r1, [pc, #48]	; (d94 <system_clock_source_osc8m_set_config+0x34>)
     d64:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d66:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d68:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d6a:	7840      	ldrb	r0, [r0, #1]
     d6c:	2201      	movs	r2, #1
     d6e:	4010      	ands	r0, r2
     d70:	0180      	lsls	r0, r0, #6
     d72:	2640      	movs	r6, #64	; 0x40
     d74:	43b3      	bics	r3, r6
     d76:	4303      	orrs	r3, r0
     d78:	402a      	ands	r2, r5
     d7a:	01d2      	lsls	r2, r2, #7
     d7c:	2080      	movs	r0, #128	; 0x80
     d7e:	4383      	bics	r3, r0
     d80:	4313      	orrs	r3, r2
     d82:	2203      	movs	r2, #3
     d84:	4022      	ands	r2, r4
     d86:	0212      	lsls	r2, r2, #8
     d88:	4803      	ldr	r0, [pc, #12]	; (d98 <system_clock_source_osc8m_set_config+0x38>)
     d8a:	4003      	ands	r3, r0
     d8c:	4313      	orrs	r3, r2
     d8e:	620b      	str	r3, [r1, #32]
}
     d90:	bd70      	pop	{r4, r5, r6, pc}
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	40000800 	.word	0x40000800
     d98:	fffffcff 	.word	0xfffffcff

00000d9c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9e:	46de      	mov	lr, fp
     da0:	4657      	mov	r7, sl
     da2:	464e      	mov	r6, r9
     da4:	4645      	mov	r5, r8
     da6:	b5e0      	push	{r5, r6, r7, lr}
     da8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     daa:	4b26      	ldr	r3, [pc, #152]	; (e44 <system_clock_source_xosc32k_set_config+0xa8>)
     dac:	469b      	mov	fp, r3
     dae:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     db0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     db2:	7800      	ldrb	r0, [r0, #0]
     db4:	4242      	negs	r2, r0
     db6:	4142      	adcs	r2, r0
     db8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     dba:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     dbc:	78ca      	ldrb	r2, [r1, #3]
     dbe:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     dc0:	790a      	ldrb	r2, [r1, #4]
     dc2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     dc4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     dc6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     dc8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     dca:	688a      	ldr	r2, [r1, #8]
     dcc:	491e      	ldr	r1, [pc, #120]	; (e48 <system_clock_source_xosc32k_set_config+0xac>)
     dce:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     dd0:	2101      	movs	r1, #1
     dd2:	464a      	mov	r2, r9
     dd4:	0092      	lsls	r2, r2, #2
     dd6:	4691      	mov	r9, r2
     dd8:	2204      	movs	r2, #4
     dda:	4393      	bics	r3, r2
     ddc:	464a      	mov	r2, r9
     dde:	4313      	orrs	r3, r2
     de0:	4642      	mov	r2, r8
     de2:	400a      	ands	r2, r1
     de4:	00d2      	lsls	r2, r2, #3
     de6:	4690      	mov	r8, r2
     de8:	2208      	movs	r2, #8
     dea:	4393      	bics	r3, r2
     dec:	4642      	mov	r2, r8
     dee:	4313      	orrs	r3, r2
     df0:	4662      	mov	r2, ip
     df2:	400a      	ands	r2, r1
     df4:	0112      	lsls	r2, r2, #4
     df6:	4694      	mov	ip, r2
     df8:	2210      	movs	r2, #16
     dfa:	4393      	bics	r3, r2
     dfc:	4662      	mov	r2, ip
     dfe:	4313      	orrs	r3, r2
     e00:	4008      	ands	r0, r1
     e02:	0140      	lsls	r0, r0, #5
     e04:	2220      	movs	r2, #32
     e06:	4393      	bics	r3, r2
     e08:	4303      	orrs	r3, r0
     e0a:	400f      	ands	r7, r1
     e0c:	01bf      	lsls	r7, r7, #6
     e0e:	2040      	movs	r0, #64	; 0x40
     e10:	4383      	bics	r3, r0
     e12:	433b      	orrs	r3, r7
     e14:	400e      	ands	r6, r1
     e16:	01f6      	lsls	r6, r6, #7
     e18:	3040      	adds	r0, #64	; 0x40
     e1a:	4383      	bics	r3, r0
     e1c:	4333      	orrs	r3, r6
     e1e:	3879      	subs	r0, #121	; 0x79
     e20:	4005      	ands	r5, r0
     e22:	022d      	lsls	r5, r5, #8
     e24:	4809      	ldr	r0, [pc, #36]	; (e4c <system_clock_source_xosc32k_set_config+0xb0>)
     e26:	4003      	ands	r3, r0
     e28:	432b      	orrs	r3, r5
     e2a:	4021      	ands	r1, r4
     e2c:	0309      	lsls	r1, r1, #12
     e2e:	4808      	ldr	r0, [pc, #32]	; (e50 <system_clock_source_xosc32k_set_config+0xb4>)
     e30:	4003      	ands	r3, r0
     e32:	430b      	orrs	r3, r1
     e34:	465a      	mov	r2, fp
     e36:	8293      	strh	r3, [r2, #20]
}
     e38:	bc3c      	pop	{r2, r3, r4, r5}
     e3a:	4690      	mov	r8, r2
     e3c:	4699      	mov	r9, r3
     e3e:	46a2      	mov	sl, r4
     e40:	46ab      	mov	fp, r5
     e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e44:	40000800 	.word	0x40000800
     e48:	200000a8 	.word	0x200000a8
     e4c:	fffff8ff 	.word	0xfffff8ff
     e50:	ffffefff 	.word	0xffffefff

00000e54 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     e54:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e56:	7a03      	ldrb	r3, [r0, #8]
     e58:	069b      	lsls	r3, r3, #26
     e5a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     e5c:	8942      	ldrh	r2, [r0, #10]
     e5e:	0592      	lsls	r2, r2, #22
     e60:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e62:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     e64:	4918      	ldr	r1, [pc, #96]	; (ec8 <system_clock_source_dfll_set_config+0x74>)
     e66:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     e68:	7983      	ldrb	r3, [r0, #6]
     e6a:	79c2      	ldrb	r2, [r0, #7]
     e6c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     e6e:	8842      	ldrh	r2, [r0, #2]
     e70:	8884      	ldrh	r4, [r0, #4]
     e72:	4322      	orrs	r2, r4
     e74:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     e76:	7842      	ldrb	r2, [r0, #1]
     e78:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     e7a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     e7c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     e7e:	7803      	ldrb	r3, [r0, #0]
     e80:	2b04      	cmp	r3, #4
     e82:	d011      	beq.n	ea8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     e84:	2b20      	cmp	r3, #32
     e86:	d10e      	bne.n	ea6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     e88:	7b03      	ldrb	r3, [r0, #12]
     e8a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     e8c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     e8e:	4313      	orrs	r3, r2
     e90:	89c2      	ldrh	r2, [r0, #14]
     e92:	0412      	lsls	r2, r2, #16
     e94:	490d      	ldr	r1, [pc, #52]	; (ecc <system_clock_source_dfll_set_config+0x78>)
     e96:	400a      	ands	r2, r1
     e98:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     e9a:	4a0b      	ldr	r2, [pc, #44]	; (ec8 <system_clock_source_dfll_set_config+0x74>)
     e9c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     e9e:	6811      	ldr	r1, [r2, #0]
     ea0:	4b0b      	ldr	r3, [pc, #44]	; (ed0 <system_clock_source_dfll_set_config+0x7c>)
     ea2:	430b      	orrs	r3, r1
     ea4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     ea6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     ea8:	7b03      	ldrb	r3, [r0, #12]
     eaa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     eac:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     eae:	4313      	orrs	r3, r2
     eb0:	89c2      	ldrh	r2, [r0, #14]
     eb2:	0412      	lsls	r2, r2, #16
     eb4:	4905      	ldr	r1, [pc, #20]	; (ecc <system_clock_source_dfll_set_config+0x78>)
     eb6:	400a      	ands	r2, r1
     eb8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     eba:	4a03      	ldr	r2, [pc, #12]	; (ec8 <system_clock_source_dfll_set_config+0x74>)
     ebc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     ebe:	6813      	ldr	r3, [r2, #0]
     ec0:	2104      	movs	r1, #4
     ec2:	430b      	orrs	r3, r1
     ec4:	6013      	str	r3, [r2, #0]
     ec6:	e7ee      	b.n	ea6 <system_clock_source_dfll_set_config+0x52>
     ec8:	200000a8 	.word	0x200000a8
     ecc:	03ff0000 	.word	0x03ff0000
     ed0:	00000424 	.word	0x00000424

00000ed4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     ed4:	2808      	cmp	r0, #8
     ed6:	d803      	bhi.n	ee0 <system_clock_source_enable+0xc>
     ed8:	0080      	lsls	r0, r0, #2
     eda:	4b25      	ldr	r3, [pc, #148]	; (f70 <system_clock_source_enable+0x9c>)
     edc:	581b      	ldr	r3, [r3, r0]
     ede:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ee0:	2017      	movs	r0, #23
     ee2:	e044      	b.n	f6e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     ee4:	4a23      	ldr	r2, [pc, #140]	; (f74 <system_clock_source_enable+0xa0>)
     ee6:	6a13      	ldr	r3, [r2, #32]
     ee8:	2102      	movs	r1, #2
     eea:	430b      	orrs	r3, r1
     eec:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     eee:	2000      	movs	r0, #0
     ef0:	e03d      	b.n	f6e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     ef2:	4a20      	ldr	r2, [pc, #128]	; (f74 <system_clock_source_enable+0xa0>)
     ef4:	6993      	ldr	r3, [r2, #24]
     ef6:	2102      	movs	r1, #2
     ef8:	430b      	orrs	r3, r1
     efa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     efc:	2000      	movs	r0, #0
		break;
     efe:	e036      	b.n	f6e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     f00:	4a1c      	ldr	r2, [pc, #112]	; (f74 <system_clock_source_enable+0xa0>)
     f02:	8a13      	ldrh	r3, [r2, #16]
     f04:	2102      	movs	r1, #2
     f06:	430b      	orrs	r3, r1
     f08:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     f0a:	2000      	movs	r0, #0
		break;
     f0c:	e02f      	b.n	f6e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     f0e:	4a19      	ldr	r2, [pc, #100]	; (f74 <system_clock_source_enable+0xa0>)
     f10:	8a93      	ldrh	r3, [r2, #20]
     f12:	2102      	movs	r1, #2
     f14:	430b      	orrs	r3, r1
     f16:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     f18:	2000      	movs	r0, #0
		break;
     f1a:	e028      	b.n	f6e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     f1c:	4916      	ldr	r1, [pc, #88]	; (f78 <system_clock_source_enable+0xa4>)
     f1e:	680b      	ldr	r3, [r1, #0]
     f20:	2202      	movs	r2, #2
     f22:	4313      	orrs	r3, r2
     f24:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     f26:	4b13      	ldr	r3, [pc, #76]	; (f74 <system_clock_source_enable+0xa0>)
     f28:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f2a:	0019      	movs	r1, r3
     f2c:	320e      	adds	r2, #14
     f2e:	68cb      	ldr	r3, [r1, #12]
     f30:	421a      	tst	r2, r3
     f32:	d0fc      	beq.n	f2e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     f34:	4a10      	ldr	r2, [pc, #64]	; (f78 <system_clock_source_enable+0xa4>)
     f36:	6891      	ldr	r1, [r2, #8]
     f38:	4b0e      	ldr	r3, [pc, #56]	; (f74 <system_clock_source_enable+0xa0>)
     f3a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     f3c:	6852      	ldr	r2, [r2, #4]
     f3e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     f40:	2200      	movs	r2, #0
     f42:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f44:	0019      	movs	r1, r3
     f46:	3210      	adds	r2, #16
     f48:	68cb      	ldr	r3, [r1, #12]
     f4a:	421a      	tst	r2, r3
     f4c:	d0fc      	beq.n	f48 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f4e:	4b0a      	ldr	r3, [pc, #40]	; (f78 <system_clock_source_enable+0xa4>)
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	b29b      	uxth	r3, r3
     f54:	4a07      	ldr	r2, [pc, #28]	; (f74 <system_clock_source_enable+0xa0>)
     f56:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     f58:	2000      	movs	r0, #0
     f5a:	e008      	b.n	f6e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f5c:	4905      	ldr	r1, [pc, #20]	; (f74 <system_clock_source_enable+0xa0>)
     f5e:	2244      	movs	r2, #68	; 0x44
     f60:	5c8b      	ldrb	r3, [r1, r2]
     f62:	2002      	movs	r0, #2
     f64:	4303      	orrs	r3, r0
     f66:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     f68:	2000      	movs	r0, #0
		break;
     f6a:	e000      	b.n	f6e <system_clock_source_enable+0x9a>
		return STATUS_OK;
     f6c:	2000      	movs	r0, #0
}
     f6e:	4770      	bx	lr
     f70:	00002188 	.word	0x00002188
     f74:	40000800 	.word	0x40000800
     f78:	200000a8 	.word	0x200000a8

00000f7c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f7e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f80:	22c2      	movs	r2, #194	; 0xc2
     f82:	00d2      	lsls	r2, r2, #3
     f84:	4b47      	ldr	r3, [pc, #284]	; (10a4 <system_clock_init+0x128>)
     f86:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     f88:	4a47      	ldr	r2, [pc, #284]	; (10a8 <system_clock_init+0x12c>)
     f8a:	6853      	ldr	r3, [r2, #4]
     f8c:	211e      	movs	r1, #30
     f8e:	438b      	bics	r3, r1
     f90:	391a      	subs	r1, #26
     f92:	430b      	orrs	r3, r1
     f94:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     f96:	2202      	movs	r2, #2
     f98:	ab01      	add	r3, sp, #4
     f9a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f9c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     f9e:	4d43      	ldr	r5, [pc, #268]	; (10ac <system_clock_init+0x130>)
     fa0:	b2e0      	uxtb	r0, r4
     fa2:	a901      	add	r1, sp, #4
     fa4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fa6:	3401      	adds	r4, #1
     fa8:	2c25      	cmp	r4, #37	; 0x25
     faa:	d1f9      	bne.n	fa0 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     fac:	a80a      	add	r0, sp, #40	; 0x28
     fae:	2300      	movs	r3, #0
     fb0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
     fb2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
     fb4:	2280      	movs	r2, #128	; 0x80
     fb6:	0212      	lsls	r2, r2, #8
     fb8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     fba:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     fbc:	2201      	movs	r2, #1
     fbe:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
     fc0:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
     fc2:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     fc4:	3202      	adds	r2, #2
     fc6:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     fc8:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     fca:	4b39      	ldr	r3, [pc, #228]	; (10b0 <system_clock_init+0x134>)
     fcc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     fce:	2005      	movs	r0, #5
     fd0:	4b38      	ldr	r3, [pc, #224]	; (10b4 <system_clock_init+0x138>)
     fd2:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     fd4:	4933      	ldr	r1, [pc, #204]	; (10a4 <system_clock_init+0x128>)
     fd6:	2202      	movs	r2, #2
     fd8:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     fda:	421a      	tst	r2, r3
     fdc:	d0fc      	beq.n	fd8 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     fde:	4a31      	ldr	r2, [pc, #196]	; (10a4 <system_clock_init+0x128>)
     fe0:	8a93      	ldrh	r3, [r2, #20]
     fe2:	2180      	movs	r1, #128	; 0x80
     fe4:	430b      	orrs	r3, r1
     fe6:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     fe8:	ab05      	add	r3, sp, #20
     fea:	2100      	movs	r1, #0
     fec:	2200      	movs	r2, #0
     fee:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     ff0:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     ff2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     ff4:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
     ff6:	313f      	adds	r1, #63	; 0x3f
     ff8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     ffa:	393b      	subs	r1, #59	; 0x3b
     ffc:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     ffe:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1000:	4b2d      	ldr	r3, [pc, #180]	; (10b8 <system_clock_init+0x13c>)
    1002:	681b      	ldr	r3, [r3, #0]
    1004:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1006:	2b3f      	cmp	r3, #63	; 0x3f
    1008:	d04a      	beq.n	10a0 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    100a:	a805      	add	r0, sp, #20
    100c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    100e:	4b2b      	ldr	r3, [pc, #172]	; (10bc <system_clock_init+0x140>)
    1010:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1012:	2307      	movs	r3, #7
    1014:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1016:	3338      	adds	r3, #56	; 0x38
    1018:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    101a:	4b29      	ldr	r3, [pc, #164]	; (10c0 <system_clock_init+0x144>)
    101c:	4798      	blx	r3
	config->run_in_standby  = false;
    101e:	a804      	add	r0, sp, #16
    1020:	2500      	movs	r5, #0
    1022:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1024:	2601      	movs	r6, #1
    1026:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1028:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    102a:	4b26      	ldr	r3, [pc, #152]	; (10c4 <system_clock_init+0x148>)
    102c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    102e:	2006      	movs	r0, #6
    1030:	4f20      	ldr	r7, [pc, #128]	; (10b4 <system_clock_init+0x138>)
    1032:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1034:	4b24      	ldr	r3, [pc, #144]	; (10c8 <system_clock_init+0x14c>)
    1036:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1038:	ac01      	add	r4, sp, #4
    103a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    103c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    103e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1040:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1042:	2305      	movs	r3, #5
    1044:	7023      	strb	r3, [r4, #0]
    1046:	0021      	movs	r1, r4
    1048:	2001      	movs	r0, #1
    104a:	4b20      	ldr	r3, [pc, #128]	; (10cc <system_clock_init+0x150>)
    104c:	4798      	blx	r3
    104e:	2001      	movs	r0, #1
    1050:	4b1f      	ldr	r3, [pc, #124]	; (10d0 <system_clock_init+0x154>)
    1052:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1054:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1056:	0021      	movs	r1, r4
    1058:	2000      	movs	r0, #0
    105a:	4b14      	ldr	r3, [pc, #80]	; (10ac <system_clock_init+0x130>)
    105c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    105e:	2000      	movs	r0, #0
    1060:	4b1c      	ldr	r3, [pc, #112]	; (10d4 <system_clock_init+0x158>)
    1062:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1064:	2007      	movs	r0, #7
    1066:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1068:	490e      	ldr	r1, [pc, #56]	; (10a4 <system_clock_init+0x128>)
    106a:	22d0      	movs	r2, #208	; 0xd0
    106c:	68cb      	ldr	r3, [r1, #12]
    106e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1070:	2bd0      	cmp	r3, #208	; 0xd0
    1072:	d1fb      	bne.n	106c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1074:	4a18      	ldr	r2, [pc, #96]	; (10d8 <system_clock_init+0x15c>)
    1076:	2300      	movs	r3, #0
    1078:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    107a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    107c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    107e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1080:	a901      	add	r1, sp, #4
    1082:	2201      	movs	r2, #1
    1084:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1086:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1088:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    108a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    108c:	3307      	adds	r3, #7
    108e:	700b      	strb	r3, [r1, #0]
    1090:	2000      	movs	r0, #0
    1092:	4b0e      	ldr	r3, [pc, #56]	; (10cc <system_clock_init+0x150>)
    1094:	4798      	blx	r3
    1096:	2000      	movs	r0, #0
    1098:	4b0d      	ldr	r3, [pc, #52]	; (10d0 <system_clock_init+0x154>)
    109a:	4798      	blx	r3
#endif
}
    109c:	b00f      	add	sp, #60	; 0x3c
    109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    10a0:	3b20      	subs	r3, #32
    10a2:	e7b2      	b.n	100a <system_clock_init+0x8e>
    10a4:	40000800 	.word	0x40000800
    10a8:	41004000 	.word	0x41004000
    10ac:	00001315 	.word	0x00001315
    10b0:	00000d9d 	.word	0x00000d9d
    10b4:	00000ed5 	.word	0x00000ed5
    10b8:	00806024 	.word	0x00806024
    10bc:	000005b9 	.word	0x000005b9
    10c0:	00000e55 	.word	0x00000e55
    10c4:	00000d61 	.word	0x00000d61
    10c8:	000010dd 	.word	0x000010dd
    10cc:	00001101 	.word	0x00001101
    10d0:	000011b9 	.word	0x000011b9
    10d4:	00001289 	.word	0x00001289
    10d8:	40000400 	.word	0x40000400

000010dc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    10dc:	4a06      	ldr	r2, [pc, #24]	; (10f8 <system_gclk_init+0x1c>)
    10de:	6993      	ldr	r3, [r2, #24]
    10e0:	2108      	movs	r1, #8
    10e2:	430b      	orrs	r3, r1
    10e4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10e6:	2201      	movs	r2, #1
    10e8:	4b04      	ldr	r3, [pc, #16]	; (10fc <system_gclk_init+0x20>)
    10ea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10ec:	0019      	movs	r1, r3
    10ee:	780b      	ldrb	r3, [r1, #0]
    10f0:	4213      	tst	r3, r2
    10f2:	d1fc      	bne.n	10ee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    10f4:	4770      	bx	lr
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	40000400 	.word	0x40000400
    10fc:	40000c00 	.word	0x40000c00

00001100 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1100:	b570      	push	{r4, r5, r6, lr}
    1102:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1104:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1106:	780d      	ldrb	r5, [r1, #0]
    1108:	022d      	lsls	r5, r5, #8
    110a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    110c:	784b      	ldrb	r3, [r1, #1]
    110e:	2b00      	cmp	r3, #0
    1110:	d002      	beq.n	1118 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1112:	2380      	movs	r3, #128	; 0x80
    1114:	02db      	lsls	r3, r3, #11
    1116:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1118:	7a4b      	ldrb	r3, [r1, #9]
    111a:	2b00      	cmp	r3, #0
    111c:	d002      	beq.n	1124 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    111e:	2380      	movs	r3, #128	; 0x80
    1120:	031b      	lsls	r3, r3, #12
    1122:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1124:	6848      	ldr	r0, [r1, #4]
    1126:	2801      	cmp	r0, #1
    1128:	d910      	bls.n	114c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    112a:	1e43      	subs	r3, r0, #1
    112c:	4218      	tst	r0, r3
    112e:	d134      	bne.n	119a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1130:	2802      	cmp	r0, #2
    1132:	d930      	bls.n	1196 <system_gclk_gen_set_config+0x96>
    1134:	2302      	movs	r3, #2
    1136:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1138:	3201      	adds	r2, #1
						mask <<= 1) {
    113a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    113c:	4298      	cmp	r0, r3
    113e:	d8fb      	bhi.n	1138 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1140:	0212      	lsls	r2, r2, #8
    1142:	4332      	orrs	r2, r6
    1144:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1146:	2380      	movs	r3, #128	; 0x80
    1148:	035b      	lsls	r3, r3, #13
    114a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    114c:	7a0b      	ldrb	r3, [r1, #8]
    114e:	2b00      	cmp	r3, #0
    1150:	d002      	beq.n	1158 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1152:	2380      	movs	r3, #128	; 0x80
    1154:	039b      	lsls	r3, r3, #14
    1156:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1158:	4a13      	ldr	r2, [pc, #76]	; (11a8 <system_gclk_gen_set_config+0xa8>)
    115a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    115c:	b25b      	sxtb	r3, r3
    115e:	2b00      	cmp	r3, #0
    1160:	dbfb      	blt.n	115a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1162:	4b12      	ldr	r3, [pc, #72]	; (11ac <system_gclk_gen_set_config+0xac>)
    1164:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1166:	4b12      	ldr	r3, [pc, #72]	; (11b0 <system_gclk_gen_set_config+0xb0>)
    1168:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    116a:	4a0f      	ldr	r2, [pc, #60]	; (11a8 <system_gclk_gen_set_config+0xa8>)
    116c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    116e:	b25b      	sxtb	r3, r3
    1170:	2b00      	cmp	r3, #0
    1172:	dbfb      	blt.n	116c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1174:	4b0c      	ldr	r3, [pc, #48]	; (11a8 <system_gclk_gen_set_config+0xa8>)
    1176:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1178:	001a      	movs	r2, r3
    117a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    117c:	b25b      	sxtb	r3, r3
    117e:	2b00      	cmp	r3, #0
    1180:	dbfb      	blt.n	117a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1182:	4a09      	ldr	r2, [pc, #36]	; (11a8 <system_gclk_gen_set_config+0xa8>)
    1184:	6853      	ldr	r3, [r2, #4]
    1186:	2180      	movs	r1, #128	; 0x80
    1188:	0249      	lsls	r1, r1, #9
    118a:	400b      	ands	r3, r1
    118c:	431d      	orrs	r5, r3
    118e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1190:	4b08      	ldr	r3, [pc, #32]	; (11b4 <system_gclk_gen_set_config+0xb4>)
    1192:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1194:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1196:	2200      	movs	r2, #0
    1198:	e7d2      	b.n	1140 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    119a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    119c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    119e:	2380      	movs	r3, #128	; 0x80
    11a0:	029b      	lsls	r3, r3, #10
    11a2:	431d      	orrs	r5, r3
    11a4:	e7d2      	b.n	114c <system_gclk_gen_set_config+0x4c>
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	40000c00 	.word	0x40000c00
    11ac:	00000c01 	.word	0x00000c01
    11b0:	40000c08 	.word	0x40000c08
    11b4:	00000c41 	.word	0x00000c41

000011b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    11b8:	b510      	push	{r4, lr}
    11ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11bc:	4a0b      	ldr	r2, [pc, #44]	; (11ec <system_gclk_gen_enable+0x34>)
    11be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11c0:	b25b      	sxtb	r3, r3
    11c2:	2b00      	cmp	r3, #0
    11c4:	dbfb      	blt.n	11be <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    11c6:	4b0a      	ldr	r3, [pc, #40]	; (11f0 <system_gclk_gen_enable+0x38>)
    11c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11ca:	4b0a      	ldr	r3, [pc, #40]	; (11f4 <system_gclk_gen_enable+0x3c>)
    11cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ce:	4a07      	ldr	r2, [pc, #28]	; (11ec <system_gclk_gen_enable+0x34>)
    11d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11d2:	b25b      	sxtb	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	dbfb      	blt.n	11d0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    11d8:	4a04      	ldr	r2, [pc, #16]	; (11ec <system_gclk_gen_enable+0x34>)
    11da:	6851      	ldr	r1, [r2, #4]
    11dc:	2380      	movs	r3, #128	; 0x80
    11de:	025b      	lsls	r3, r3, #9
    11e0:	430b      	orrs	r3, r1
    11e2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    11e4:	4b04      	ldr	r3, [pc, #16]	; (11f8 <system_gclk_gen_enable+0x40>)
    11e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11e8:	bd10      	pop	{r4, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	40000c00 	.word	0x40000c00
    11f0:	00000c01 	.word	0x00000c01
    11f4:	40000c04 	.word	0x40000c04
    11f8:	00000c41 	.word	0x00000c41

000011fc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    11fc:	b570      	push	{r4, r5, r6, lr}
    11fe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1200:	4a1a      	ldr	r2, [pc, #104]	; (126c <system_gclk_gen_get_hz+0x70>)
    1202:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1204:	b25b      	sxtb	r3, r3
    1206:	2b00      	cmp	r3, #0
    1208:	dbfb      	blt.n	1202 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    120a:	4b19      	ldr	r3, [pc, #100]	; (1270 <system_gclk_gen_get_hz+0x74>)
    120c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    120e:	4b19      	ldr	r3, [pc, #100]	; (1274 <system_gclk_gen_get_hz+0x78>)
    1210:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1212:	4a16      	ldr	r2, [pc, #88]	; (126c <system_gclk_gen_get_hz+0x70>)
    1214:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1216:	b25b      	sxtb	r3, r3
    1218:	2b00      	cmp	r3, #0
    121a:	dbfb      	blt.n	1214 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    121c:	4e13      	ldr	r6, [pc, #76]	; (126c <system_gclk_gen_get_hz+0x70>)
    121e:	6870      	ldr	r0, [r6, #4]
    1220:	04c0      	lsls	r0, r0, #19
    1222:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1224:	4b14      	ldr	r3, [pc, #80]	; (1278 <system_gclk_gen_get_hz+0x7c>)
    1226:	4798      	blx	r3
    1228:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    122a:	4b12      	ldr	r3, [pc, #72]	; (1274 <system_gclk_gen_get_hz+0x78>)
    122c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    122e:	6876      	ldr	r6, [r6, #4]
    1230:	02f6      	lsls	r6, r6, #11
    1232:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1234:	4b11      	ldr	r3, [pc, #68]	; (127c <system_gclk_gen_get_hz+0x80>)
    1236:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1238:	4a0c      	ldr	r2, [pc, #48]	; (126c <system_gclk_gen_get_hz+0x70>)
    123a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    123c:	b25b      	sxtb	r3, r3
    123e:	2b00      	cmp	r3, #0
    1240:	dbfb      	blt.n	123a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1242:	4b0a      	ldr	r3, [pc, #40]	; (126c <system_gclk_gen_get_hz+0x70>)
    1244:	689c      	ldr	r4, [r3, #8]
    1246:	0224      	lsls	r4, r4, #8
    1248:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    124a:	4b0d      	ldr	r3, [pc, #52]	; (1280 <system_gclk_gen_get_hz+0x84>)
    124c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    124e:	2e00      	cmp	r6, #0
    1250:	d107      	bne.n	1262 <system_gclk_gen_get_hz+0x66>
    1252:	2c01      	cmp	r4, #1
    1254:	d907      	bls.n	1266 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1256:	0021      	movs	r1, r4
    1258:	0028      	movs	r0, r5
    125a:	4b0a      	ldr	r3, [pc, #40]	; (1284 <system_gclk_gen_get_hz+0x88>)
    125c:	4798      	blx	r3
    125e:	0005      	movs	r5, r0
    1260:	e001      	b.n	1266 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1262:	3401      	adds	r4, #1
    1264:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1266:	0028      	movs	r0, r5
    1268:	bd70      	pop	{r4, r5, r6, pc}
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	40000c00 	.word	0x40000c00
    1270:	00000c01 	.word	0x00000c01
    1274:	40000c04 	.word	0x40000c04
    1278:	00000ccd 	.word	0x00000ccd
    127c:	40000c08 	.word	0x40000c08
    1280:	00000c41 	.word	0x00000c41
    1284:	00001729 	.word	0x00001729

00001288 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1288:	b510      	push	{r4, lr}
    128a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    128c:	4b06      	ldr	r3, [pc, #24]	; (12a8 <system_gclk_chan_enable+0x20>)
    128e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1290:	4b06      	ldr	r3, [pc, #24]	; (12ac <system_gclk_chan_enable+0x24>)
    1292:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1294:	4a06      	ldr	r2, [pc, #24]	; (12b0 <system_gclk_chan_enable+0x28>)
    1296:	8853      	ldrh	r3, [r2, #2]
    1298:	2180      	movs	r1, #128	; 0x80
    129a:	01c9      	lsls	r1, r1, #7
    129c:	430b      	orrs	r3, r1
    129e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    12a0:	4b04      	ldr	r3, [pc, #16]	; (12b4 <system_gclk_chan_enable+0x2c>)
    12a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12a4:	bd10      	pop	{r4, pc}
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	00000c01 	.word	0x00000c01
    12ac:	40000c02 	.word	0x40000c02
    12b0:	40000c00 	.word	0x40000c00
    12b4:	00000c41 	.word	0x00000c41

000012b8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    12b8:	b510      	push	{r4, lr}
    12ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12bc:	4b0f      	ldr	r3, [pc, #60]	; (12fc <system_gclk_chan_disable+0x44>)
    12be:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12c0:	4b0f      	ldr	r3, [pc, #60]	; (1300 <system_gclk_chan_disable+0x48>)
    12c2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    12c4:	4a0f      	ldr	r2, [pc, #60]	; (1304 <system_gclk_chan_disable+0x4c>)
    12c6:	8853      	ldrh	r3, [r2, #2]
    12c8:	051b      	lsls	r3, r3, #20
    12ca:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    12cc:	8853      	ldrh	r3, [r2, #2]
    12ce:	490e      	ldr	r1, [pc, #56]	; (1308 <system_gclk_chan_disable+0x50>)
    12d0:	400b      	ands	r3, r1
    12d2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    12d4:	8853      	ldrh	r3, [r2, #2]
    12d6:	490d      	ldr	r1, [pc, #52]	; (130c <system_gclk_chan_disable+0x54>)
    12d8:	400b      	ands	r3, r1
    12da:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    12dc:	0011      	movs	r1, r2
    12de:	2280      	movs	r2, #128	; 0x80
    12e0:	01d2      	lsls	r2, r2, #7
    12e2:	884b      	ldrh	r3, [r1, #2]
    12e4:	4213      	tst	r3, r2
    12e6:	d1fc      	bne.n	12e2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    12e8:	4906      	ldr	r1, [pc, #24]	; (1304 <system_gclk_chan_disable+0x4c>)
    12ea:	884a      	ldrh	r2, [r1, #2]
    12ec:	0203      	lsls	r3, r0, #8
    12ee:	4806      	ldr	r0, [pc, #24]	; (1308 <system_gclk_chan_disable+0x50>)
    12f0:	4002      	ands	r2, r0
    12f2:	4313      	orrs	r3, r2
    12f4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    12f6:	4b06      	ldr	r3, [pc, #24]	; (1310 <system_gclk_chan_disable+0x58>)
    12f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12fa:	bd10      	pop	{r4, pc}
    12fc:	00000c01 	.word	0x00000c01
    1300:	40000c02 	.word	0x40000c02
    1304:	40000c00 	.word	0x40000c00
    1308:	fffff0ff 	.word	0xfffff0ff
    130c:	ffffbfff 	.word	0xffffbfff
    1310:	00000c41 	.word	0x00000c41

00001314 <system_gclk_chan_set_config>:
{
    1314:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1316:	780c      	ldrb	r4, [r1, #0]
    1318:	0224      	lsls	r4, r4, #8
    131a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    131c:	4b02      	ldr	r3, [pc, #8]	; (1328 <system_gclk_chan_set_config+0x14>)
    131e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1320:	b2a4      	uxth	r4, r4
    1322:	4b02      	ldr	r3, [pc, #8]	; (132c <system_gclk_chan_set_config+0x18>)
    1324:	805c      	strh	r4, [r3, #2]
}
    1326:	bd10      	pop	{r4, pc}
    1328:	000012b9 	.word	0x000012b9
    132c:	40000c00 	.word	0x40000c00

00001330 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1330:	b510      	push	{r4, lr}
    1332:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <system_gclk_chan_get_hz+0x20>)
    1336:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <system_gclk_chan_get_hz+0x24>)
    133a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    133c:	4b06      	ldr	r3, [pc, #24]	; (1358 <system_gclk_chan_get_hz+0x28>)
    133e:	885c      	ldrh	r4, [r3, #2]
    1340:	0524      	lsls	r4, r4, #20
    1342:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1344:	4b05      	ldr	r3, [pc, #20]	; (135c <system_gclk_chan_get_hz+0x2c>)
    1346:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1348:	0020      	movs	r0, r4
    134a:	4b05      	ldr	r3, [pc, #20]	; (1360 <system_gclk_chan_get_hz+0x30>)
    134c:	4798      	blx	r3
}
    134e:	bd10      	pop	{r4, pc}
    1350:	00000c01 	.word	0x00000c01
    1354:	40000c02 	.word	0x40000c02
    1358:	40000c00 	.word	0x40000c00
    135c:	00000c41 	.word	0x00000c41
    1360:	000011fd 	.word	0x000011fd

00001364 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1364:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1366:	78d3      	ldrb	r3, [r2, #3]
    1368:	2b00      	cmp	r3, #0
    136a:	d135      	bne.n	13d8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    136c:	7813      	ldrb	r3, [r2, #0]
    136e:	2b80      	cmp	r3, #128	; 0x80
    1370:	d029      	beq.n	13c6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1372:	061b      	lsls	r3, r3, #24
    1374:	2480      	movs	r4, #128	; 0x80
    1376:	0264      	lsls	r4, r4, #9
    1378:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    137a:	7854      	ldrb	r4, [r2, #1]
    137c:	2502      	movs	r5, #2
    137e:	43ac      	bics	r4, r5
    1380:	d106      	bne.n	1390 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1382:	7894      	ldrb	r4, [r2, #2]
    1384:	2c00      	cmp	r4, #0
    1386:	d120      	bne.n	13ca <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1388:	2480      	movs	r4, #128	; 0x80
    138a:	02a4      	lsls	r4, r4, #10
    138c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    138e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1390:	7854      	ldrb	r4, [r2, #1]
    1392:	3c01      	subs	r4, #1
    1394:	2c01      	cmp	r4, #1
    1396:	d91c      	bls.n	13d2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1398:	040d      	lsls	r5, r1, #16
    139a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    139c:	24a0      	movs	r4, #160	; 0xa0
    139e:	05e4      	lsls	r4, r4, #23
    13a0:	432c      	orrs	r4, r5
    13a2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13a4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13a6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13a8:	24d0      	movs	r4, #208	; 0xd0
    13aa:	0624      	lsls	r4, r4, #24
    13ac:	432c      	orrs	r4, r5
    13ae:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13b0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    13b2:	78d4      	ldrb	r4, [r2, #3]
    13b4:	2c00      	cmp	r4, #0
    13b6:	d122      	bne.n	13fe <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    13b8:	035b      	lsls	r3, r3, #13
    13ba:	d51c      	bpl.n	13f6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    13bc:	7893      	ldrb	r3, [r2, #2]
    13be:	2b01      	cmp	r3, #1
    13c0:	d01e      	beq.n	1400 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    13c2:	6141      	str	r1, [r0, #20]
    13c4:	e017      	b.n	13f6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    13c6:	2300      	movs	r3, #0
    13c8:	e7d7      	b.n	137a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13ca:	24c0      	movs	r4, #192	; 0xc0
    13cc:	02e4      	lsls	r4, r4, #11
    13ce:	4323      	orrs	r3, r4
    13d0:	e7dd      	b.n	138e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    13d2:	4c0d      	ldr	r4, [pc, #52]	; (1408 <_system_pinmux_config+0xa4>)
    13d4:	4023      	ands	r3, r4
    13d6:	e7df      	b.n	1398 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    13d8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13da:	040c      	lsls	r4, r1, #16
    13dc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13de:	23a0      	movs	r3, #160	; 0xa0
    13e0:	05db      	lsls	r3, r3, #23
    13e2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13e4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13e6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13e8:	23d0      	movs	r3, #208	; 0xd0
    13ea:	061b      	lsls	r3, r3, #24
    13ec:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13ee:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    13f0:	78d3      	ldrb	r3, [r2, #3]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d103      	bne.n	13fe <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13f6:	7853      	ldrb	r3, [r2, #1]
    13f8:	3b01      	subs	r3, #1
    13fa:	2b01      	cmp	r3, #1
    13fc:	d902      	bls.n	1404 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    13fe:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1400:	6181      	str	r1, [r0, #24]
    1402:	e7f8      	b.n	13f6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1404:	6081      	str	r1, [r0, #8]
}
    1406:	e7fa      	b.n	13fe <_system_pinmux_config+0x9a>
    1408:	fffbffff 	.word	0xfffbffff

0000140c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    140c:	b510      	push	{r4, lr}
    140e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1410:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1412:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1414:	2900      	cmp	r1, #0
    1416:	d104      	bne.n	1422 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1418:	0943      	lsrs	r3, r0, #5
    141a:	01db      	lsls	r3, r3, #7
    141c:	4905      	ldr	r1, [pc, #20]	; (1434 <system_pinmux_pin_set_config+0x28>)
    141e:	468c      	mov	ip, r1
    1420:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1422:	241f      	movs	r4, #31
    1424:	4020      	ands	r0, r4
    1426:	2101      	movs	r1, #1
    1428:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    142a:	0018      	movs	r0, r3
    142c:	4b02      	ldr	r3, [pc, #8]	; (1438 <system_pinmux_pin_set_config+0x2c>)
    142e:	4798      	blx	r3
}
    1430:	bd10      	pop	{r4, pc}
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	41004400 	.word	0x41004400
    1438:	00001365 	.word	0x00001365

0000143c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    143c:	4770      	bx	lr
	...

00001440 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1440:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1442:	4b05      	ldr	r3, [pc, #20]	; (1458 <system_init+0x18>)
    1444:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1446:	4b05      	ldr	r3, [pc, #20]	; (145c <system_init+0x1c>)
    1448:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    144a:	4b05      	ldr	r3, [pc, #20]	; (1460 <system_init+0x20>)
    144c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <system_init+0x24>)
    1450:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <system_init+0x28>)
    1454:	4798      	blx	r3
}
    1456:	bd10      	pop	{r4, pc}
    1458:	00000f7d 	.word	0x00000f7d
    145c:	00000c71 	.word	0x00000c71
    1460:	0000143d 	.word	0x0000143d
    1464:	0000143d 	.word	0x0000143d
    1468:	0000143d 	.word	0x0000143d

0000146c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    146c:	e7fe      	b.n	146c <Dummy_Handler>
	...

00001470 <Reset_Handler>:
{
    1470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1472:	4a2a      	ldr	r2, [pc, #168]	; (151c <Reset_Handler+0xac>)
    1474:	4b2a      	ldr	r3, [pc, #168]	; (1520 <Reset_Handler+0xb0>)
    1476:	429a      	cmp	r2, r3
    1478:	d011      	beq.n	149e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    147a:	001a      	movs	r2, r3
    147c:	4b29      	ldr	r3, [pc, #164]	; (1524 <Reset_Handler+0xb4>)
    147e:	429a      	cmp	r2, r3
    1480:	d20d      	bcs.n	149e <Reset_Handler+0x2e>
    1482:	4a29      	ldr	r2, [pc, #164]	; (1528 <Reset_Handler+0xb8>)
    1484:	3303      	adds	r3, #3
    1486:	1a9b      	subs	r3, r3, r2
    1488:	089b      	lsrs	r3, r3, #2
    148a:	3301      	adds	r3, #1
    148c:	009b      	lsls	r3, r3, #2
    148e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1490:	4823      	ldr	r0, [pc, #140]	; (1520 <Reset_Handler+0xb0>)
    1492:	4922      	ldr	r1, [pc, #136]	; (151c <Reset_Handler+0xac>)
    1494:	588c      	ldr	r4, [r1, r2]
    1496:	5084      	str	r4, [r0, r2]
    1498:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    149a:	429a      	cmp	r2, r3
    149c:	d1fa      	bne.n	1494 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    149e:	4a23      	ldr	r2, [pc, #140]	; (152c <Reset_Handler+0xbc>)
    14a0:	4b23      	ldr	r3, [pc, #140]	; (1530 <Reset_Handler+0xc0>)
    14a2:	429a      	cmp	r2, r3
    14a4:	d20a      	bcs.n	14bc <Reset_Handler+0x4c>
    14a6:	43d3      	mvns	r3, r2
    14a8:	4921      	ldr	r1, [pc, #132]	; (1530 <Reset_Handler+0xc0>)
    14aa:	185b      	adds	r3, r3, r1
    14ac:	2103      	movs	r1, #3
    14ae:	438b      	bics	r3, r1
    14b0:	3304      	adds	r3, #4
    14b2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    14b4:	2100      	movs	r1, #0
    14b6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    14b8:	4293      	cmp	r3, r2
    14ba:	d1fc      	bne.n	14b6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    14bc:	4a1d      	ldr	r2, [pc, #116]	; (1534 <Reset_Handler+0xc4>)
    14be:	21ff      	movs	r1, #255	; 0xff
    14c0:	4b1d      	ldr	r3, [pc, #116]	; (1538 <Reset_Handler+0xc8>)
    14c2:	438b      	bics	r3, r1
    14c4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14c6:	39fd      	subs	r1, #253	; 0xfd
    14c8:	2390      	movs	r3, #144	; 0x90
    14ca:	005b      	lsls	r3, r3, #1
    14cc:	4a1b      	ldr	r2, [pc, #108]	; (153c <Reset_Handler+0xcc>)
    14ce:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14d0:	4a1b      	ldr	r2, [pc, #108]	; (1540 <Reset_Handler+0xd0>)
    14d2:	78d3      	ldrb	r3, [r2, #3]
    14d4:	2503      	movs	r5, #3
    14d6:	43ab      	bics	r3, r5
    14d8:	2402      	movs	r4, #2
    14da:	4323      	orrs	r3, r4
    14dc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14de:	78d3      	ldrb	r3, [r2, #3]
    14e0:	270c      	movs	r7, #12
    14e2:	43bb      	bics	r3, r7
    14e4:	2608      	movs	r6, #8
    14e6:	4333      	orrs	r3, r6
    14e8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    14ea:	4b16      	ldr	r3, [pc, #88]	; (1544 <Reset_Handler+0xd4>)
    14ec:	7b98      	ldrb	r0, [r3, #14]
    14ee:	2230      	movs	r2, #48	; 0x30
    14f0:	4390      	bics	r0, r2
    14f2:	2220      	movs	r2, #32
    14f4:	4310      	orrs	r0, r2
    14f6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    14f8:	7b99      	ldrb	r1, [r3, #14]
    14fa:	43b9      	bics	r1, r7
    14fc:	4331      	orrs	r1, r6
    14fe:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1500:	7b9a      	ldrb	r2, [r3, #14]
    1502:	43aa      	bics	r2, r5
    1504:	4322      	orrs	r2, r4
    1506:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1508:	4a0f      	ldr	r2, [pc, #60]	; (1548 <Reset_Handler+0xd8>)
    150a:	6853      	ldr	r3, [r2, #4]
    150c:	2180      	movs	r1, #128	; 0x80
    150e:	430b      	orrs	r3, r1
    1510:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1512:	4b0e      	ldr	r3, [pc, #56]	; (154c <Reset_Handler+0xdc>)
    1514:	4798      	blx	r3
        main();
    1516:	4b0e      	ldr	r3, [pc, #56]	; (1550 <Reset_Handler+0xe0>)
    1518:	4798      	blx	r3
    151a:	e7fe      	b.n	151a <Reset_Handler+0xaa>
    151c:	00002218 	.word	0x00002218
    1520:	20000000 	.word	0x20000000
    1524:	20000068 	.word	0x20000068
    1528:	20000004 	.word	0x20000004
    152c:	20000068 	.word	0x20000068
    1530:	2000012c 	.word	0x2000012c
    1534:	e000ed00 	.word	0xe000ed00
    1538:	00000000 	.word	0x00000000
    153c:	41007000 	.word	0x41007000
    1540:	41005000 	.word	0x41005000
    1544:	41004800 	.word	0x41004800
    1548:	41004000 	.word	0x41004000
    154c:	00001895 	.word	0x00001895
    1550:	000016bd 	.word	0x000016bd

00001554 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1554:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1556:	4a06      	ldr	r2, [pc, #24]	; (1570 <_sbrk+0x1c>)
    1558:	6812      	ldr	r2, [r2, #0]
    155a:	2a00      	cmp	r2, #0
    155c:	d004      	beq.n	1568 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    155e:	4a04      	ldr	r2, [pc, #16]	; (1570 <_sbrk+0x1c>)
    1560:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1562:	18c3      	adds	r3, r0, r3
    1564:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1566:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1568:	4902      	ldr	r1, [pc, #8]	; (1574 <_sbrk+0x20>)
    156a:	4a01      	ldr	r2, [pc, #4]	; (1570 <_sbrk+0x1c>)
    156c:	6011      	str	r1, [r2, #0]
    156e:	e7f6      	b.n	155e <_sbrk+0xa>
    1570:	200000c0 	.word	0x200000c0
    1574:	20002130 	.word	0x20002130

00001578 <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1578:	2280      	movs	r2, #128	; 0x80
    157a:	0412      	lsls	r2, r2, #16
    157c:	4b01      	ldr	r3, [pc, #4]	; (1584 <usart_write_callback+0xc>)
    157e:	61da      	str	r2, [r3, #28]
	(uint8_t *)buffer, strlen(buffer));
}
void usart_write_callback(struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    1580:	4770      	bx	lr
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	41004400 	.word	0x41004400

00001588 <usart_read_callback>:
{
    1588:	b570      	push	{r4, r5, r6, lr}
	snprintf ( buffer, 6, "%d\r\n", *rx_buffer );
    158a:	4b09      	ldr	r3, [pc, #36]	; (15b0 <usart_read_callback+0x28>)
    158c:	781b      	ldrb	r3, [r3, #0]
    158e:	b2db      	uxtb	r3, r3
    1590:	4c08      	ldr	r4, [pc, #32]	; (15b4 <usart_read_callback+0x2c>)
    1592:	4a09      	ldr	r2, [pc, #36]	; (15b8 <usart_read_callback+0x30>)
    1594:	2106      	movs	r1, #6
    1596:	0020      	movs	r0, r4
    1598:	4d08      	ldr	r5, [pc, #32]	; (15bc <usart_read_callback+0x34>)
    159a:	47a8      	blx	r5
	(uint8_t *)buffer, strlen(buffer));
    159c:	0020      	movs	r0, r4
    159e:	4b08      	ldr	r3, [pc, #32]	; (15c0 <usart_read_callback+0x38>)
    15a0:	4798      	blx	r3
	usart_write_buffer_job(&usart_instance,
    15a2:	b282      	uxth	r2, r0
    15a4:	0021      	movs	r1, r4
    15a6:	4807      	ldr	r0, [pc, #28]	; (15c4 <usart_read_callback+0x3c>)
    15a8:	4b07      	ldr	r3, [pc, #28]	; (15c8 <usart_read_callback+0x40>)
    15aa:	4798      	blx	r3
}
    15ac:	bd70      	pop	{r4, r5, r6, pc}
    15ae:	46c0      	nop			; (mov r8, r8)
    15b0:	20000118 	.word	0x20000118
    15b4:	20000120 	.word	0x20000120
    15b8:	000021bc 	.word	0x000021bc
    15bc:	000018dd 	.word	0x000018dd
    15c0:	00001941 	.word	0x00001941
    15c4:	200000e4 	.word	0x200000e4
    15c8:	0000095d 	.word	0x0000095d

000015cc <configure_usart>:

void configure_usart(void)
{
    15cc:	b530      	push	{r4, r5, lr}
    15ce:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    15d0:	2380      	movs	r3, #128	; 0x80
    15d2:	05db      	lsls	r3, r3, #23
    15d4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    15d6:	2300      	movs	r3, #0
    15d8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    15da:	22ff      	movs	r2, #255	; 0xff
    15dc:	4669      	mov	r1, sp
    15de:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    15e0:	2200      	movs	r2, #0
    15e2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    15e4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    15e6:	2196      	movs	r1, #150	; 0x96
    15e8:	0189      	lsls	r1, r1, #6
    15ea:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    15ec:	2101      	movs	r1, #1
    15ee:	2024      	movs	r0, #36	; 0x24
    15f0:	466c      	mov	r4, sp
    15f2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    15f4:	3001      	adds	r0, #1
    15f6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    15f8:	3125      	adds	r1, #37	; 0x25
    15fa:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    15fc:	3101      	adds	r1, #1
    15fe:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1600:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1602:	3105      	adds	r1, #5
    1604:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1606:	3101      	adds	r1, #1
    1608:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    160a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    160c:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    160e:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1610:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1612:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1614:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1616:	2313      	movs	r3, #19
    1618:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    161a:	7762      	strb	r2, [r4, #29]
		}
	}
	#else
	{
		config_usart.baudrate    = 9600;
		config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    161c:	23c4      	movs	r3, #196	; 0xc4
    161e:	039b      	lsls	r3, r3, #14
    1620:	9303      	str	r3, [sp, #12]
		config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1622:	2301      	movs	r3, #1
    1624:	425b      	negs	r3, r3
    1626:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1628:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    162a:	4b10      	ldr	r3, [pc, #64]	; (166c <configure_usart+0xa0>)
    162c:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    162e:	4b10      	ldr	r3, [pc, #64]	; (1670 <configure_usart+0xa4>)
    1630:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_instance,
    1632:	4d10      	ldr	r5, [pc, #64]	; (1674 <configure_usart+0xa8>)
    1634:	4c10      	ldr	r4, [pc, #64]	; (1678 <configure_usart+0xac>)
    1636:	466a      	mov	r2, sp
    1638:	4910      	ldr	r1, [pc, #64]	; (167c <configure_usart+0xb0>)
    163a:	0028      	movs	r0, r5
    163c:	47a0      	blx	r4
    163e:	2800      	cmp	r0, #0
    1640:	d1f9      	bne.n	1636 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1642:	4d0c      	ldr	r5, [pc, #48]	; (1674 <configure_usart+0xa8>)
    1644:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1646:	0020      	movs	r0, r4
    1648:	4b0d      	ldr	r3, [pc, #52]	; (1680 <configure_usart+0xb4>)
    164a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    164c:	231f      	movs	r3, #31
    164e:	4018      	ands	r0, r3
    1650:	3b1e      	subs	r3, #30
    1652:	4083      	lsls	r3, r0
    1654:	4a0b      	ldr	r2, [pc, #44]	; (1684 <configure_usart+0xb8>)
    1656:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1658:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    165a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    165c:	2b00      	cmp	r3, #0
    165e:	d1fc      	bne.n	165a <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1660:	6823      	ldr	r3, [r4, #0]
    1662:	2202      	movs	r2, #2
    1664:	4313      	orrs	r3, r2
    1666:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
		}
	}
	#endif
	usart_enable(&usart_instance);
}
    1668:	b011      	add	sp, #68	; 0x44
    166a:	bd30      	pop	{r4, r5, pc}
    166c:	002a0003 	.word	0x002a0003
    1670:	002b0003 	.word	0x002b0003
    1674:	200000e4 	.word	0x200000e4
    1678:	00000489 	.word	0x00000489
    167c:	42001800 	.word	0x42001800
    1680:	00000b71 	.word	0x00000b71
    1684:	e000e100 	.word	0xe000e100

00001688 <configure_usart_callbacks>:
void configure_usart_callbacks(void)
{
    1688:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    168a:	4c08      	ldr	r4, [pc, #32]	; (16ac <configure_usart_callbacks+0x24>)
    168c:	2200      	movs	r2, #0
    168e:	4908      	ldr	r1, [pc, #32]	; (16b0 <configure_usart_callbacks+0x28>)
    1690:	0020      	movs	r0, r4
    1692:	4d08      	ldr	r5, [pc, #32]	; (16b4 <configure_usart_callbacks+0x2c>)
    1694:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    1696:	2201      	movs	r2, #1
    1698:	4907      	ldr	r1, [pc, #28]	; (16b8 <configure_usart_callbacks+0x30>)
    169a:	0020      	movs	r0, r4
    169c:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    169e:	2231      	movs	r2, #49	; 0x31
    16a0:	5ca3      	ldrb	r3, [r4, r2]
    16a2:	2103      	movs	r1, #3
    16a4:	430b      	orrs	r3, r1
    16a6:	54a3      	strb	r3, [r4, r2]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    16a8:	bd70      	pop	{r4, r5, r6, pc}
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	200000e4 	.word	0x200000e4
    16b0:	00001579 	.word	0x00001579
    16b4:	00000945 	.word	0x00000945
    16b8:	00001589 	.word	0x00001589

000016bc <main>:

int main (void)
{
    16bc:	b570      	push	{r4, r5, r6, lr}
    16be:	b084      	sub	sp, #16
	system_init();
    16c0:	4b10      	ldr	r3, [pc, #64]	; (1704 <main+0x48>)
    16c2:	4798      	blx	r3
	 configure_usart();
    16c4:	4b10      	ldr	r3, [pc, #64]	; (1708 <main+0x4c>)
    16c6:	4798      	blx	r3
	 configure_usart_callbacks();
    16c8:	4b10      	ldr	r3, [pc, #64]	; (170c <main+0x50>)
    16ca:	4798      	blx	r3
	cpu_irq_enable();
    16cc:	2201      	movs	r2, #1
    16ce:	4b10      	ldr	r3, [pc, #64]	; (1710 <main+0x54>)
    16d0:	701a      	strb	r2, [r3, #0]
    16d2:	f3bf 8f5f 	dmb	sy
    16d6:	b662      	cpsie	i

	/* Insert application code here, after the board has been initialized. */


	    system_interrupt_enable_global();
	    uint8_t string[] = "Hello World!\r\n";
    16d8:	4669      	mov	r1, sp
    16da:	4b0e      	ldr	r3, [pc, #56]	; (1714 <main+0x58>)
    16dc:	466a      	mov	r2, sp
    16de:	cb31      	ldmia	r3!, {r0, r4, r5}
    16e0:	c231      	stmia	r2!, {r0, r4, r5}
    16e2:	8818      	ldrh	r0, [r3, #0]
    16e4:	8010      	strh	r0, [r2, #0]
    16e6:	789b      	ldrb	r3, [r3, #2]
    16e8:	7093      	strb	r3, [r2, #2]
	    usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    16ea:	220f      	movs	r2, #15
    16ec:	480a      	ldr	r0, [pc, #40]	; (1718 <main+0x5c>)
    16ee:	4b0b      	ldr	r3, [pc, #44]	; (171c <main+0x60>)
    16f0:	4798      	blx	r3
		
	    while (true) {
		    usart_read_buffer_job(&usart_instance,
    16f2:	4e0b      	ldr	r6, [pc, #44]	; (1720 <main+0x64>)
    16f4:	4d08      	ldr	r5, [pc, #32]	; (1718 <main+0x5c>)
    16f6:	4c0b      	ldr	r4, [pc, #44]	; (1724 <main+0x68>)
    16f8:	2201      	movs	r2, #1
    16fa:	0031      	movs	r1, r6
    16fc:	0028      	movs	r0, r5
    16fe:	47a0      	blx	r4
    1700:	e7fa      	b.n	16f8 <main+0x3c>
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	00001441 	.word	0x00001441
    1708:	000015cd 	.word	0x000015cd
    170c:	00001689 	.word	0x00001689
    1710:	20000000 	.word	0x20000000
    1714:	000021ac 	.word	0x000021ac
    1718:	200000e4 	.word	0x200000e4
    171c:	000007f9 	.word	0x000007f9
    1720:	20000118 	.word	0x20000118
    1724:	0000097d 	.word	0x0000097d

00001728 <__udivsi3>:
    1728:	2200      	movs	r2, #0
    172a:	0843      	lsrs	r3, r0, #1
    172c:	428b      	cmp	r3, r1
    172e:	d374      	bcc.n	181a <__udivsi3+0xf2>
    1730:	0903      	lsrs	r3, r0, #4
    1732:	428b      	cmp	r3, r1
    1734:	d35f      	bcc.n	17f6 <__udivsi3+0xce>
    1736:	0a03      	lsrs	r3, r0, #8
    1738:	428b      	cmp	r3, r1
    173a:	d344      	bcc.n	17c6 <__udivsi3+0x9e>
    173c:	0b03      	lsrs	r3, r0, #12
    173e:	428b      	cmp	r3, r1
    1740:	d328      	bcc.n	1794 <__udivsi3+0x6c>
    1742:	0c03      	lsrs	r3, r0, #16
    1744:	428b      	cmp	r3, r1
    1746:	d30d      	bcc.n	1764 <__udivsi3+0x3c>
    1748:	22ff      	movs	r2, #255	; 0xff
    174a:	0209      	lsls	r1, r1, #8
    174c:	ba12      	rev	r2, r2
    174e:	0c03      	lsrs	r3, r0, #16
    1750:	428b      	cmp	r3, r1
    1752:	d302      	bcc.n	175a <__udivsi3+0x32>
    1754:	1212      	asrs	r2, r2, #8
    1756:	0209      	lsls	r1, r1, #8
    1758:	d065      	beq.n	1826 <__udivsi3+0xfe>
    175a:	0b03      	lsrs	r3, r0, #12
    175c:	428b      	cmp	r3, r1
    175e:	d319      	bcc.n	1794 <__udivsi3+0x6c>
    1760:	e000      	b.n	1764 <__udivsi3+0x3c>
    1762:	0a09      	lsrs	r1, r1, #8
    1764:	0bc3      	lsrs	r3, r0, #15
    1766:	428b      	cmp	r3, r1
    1768:	d301      	bcc.n	176e <__udivsi3+0x46>
    176a:	03cb      	lsls	r3, r1, #15
    176c:	1ac0      	subs	r0, r0, r3
    176e:	4152      	adcs	r2, r2
    1770:	0b83      	lsrs	r3, r0, #14
    1772:	428b      	cmp	r3, r1
    1774:	d301      	bcc.n	177a <__udivsi3+0x52>
    1776:	038b      	lsls	r3, r1, #14
    1778:	1ac0      	subs	r0, r0, r3
    177a:	4152      	adcs	r2, r2
    177c:	0b43      	lsrs	r3, r0, #13
    177e:	428b      	cmp	r3, r1
    1780:	d301      	bcc.n	1786 <__udivsi3+0x5e>
    1782:	034b      	lsls	r3, r1, #13
    1784:	1ac0      	subs	r0, r0, r3
    1786:	4152      	adcs	r2, r2
    1788:	0b03      	lsrs	r3, r0, #12
    178a:	428b      	cmp	r3, r1
    178c:	d301      	bcc.n	1792 <__udivsi3+0x6a>
    178e:	030b      	lsls	r3, r1, #12
    1790:	1ac0      	subs	r0, r0, r3
    1792:	4152      	adcs	r2, r2
    1794:	0ac3      	lsrs	r3, r0, #11
    1796:	428b      	cmp	r3, r1
    1798:	d301      	bcc.n	179e <__udivsi3+0x76>
    179a:	02cb      	lsls	r3, r1, #11
    179c:	1ac0      	subs	r0, r0, r3
    179e:	4152      	adcs	r2, r2
    17a0:	0a83      	lsrs	r3, r0, #10
    17a2:	428b      	cmp	r3, r1
    17a4:	d301      	bcc.n	17aa <__udivsi3+0x82>
    17a6:	028b      	lsls	r3, r1, #10
    17a8:	1ac0      	subs	r0, r0, r3
    17aa:	4152      	adcs	r2, r2
    17ac:	0a43      	lsrs	r3, r0, #9
    17ae:	428b      	cmp	r3, r1
    17b0:	d301      	bcc.n	17b6 <__udivsi3+0x8e>
    17b2:	024b      	lsls	r3, r1, #9
    17b4:	1ac0      	subs	r0, r0, r3
    17b6:	4152      	adcs	r2, r2
    17b8:	0a03      	lsrs	r3, r0, #8
    17ba:	428b      	cmp	r3, r1
    17bc:	d301      	bcc.n	17c2 <__udivsi3+0x9a>
    17be:	020b      	lsls	r3, r1, #8
    17c0:	1ac0      	subs	r0, r0, r3
    17c2:	4152      	adcs	r2, r2
    17c4:	d2cd      	bcs.n	1762 <__udivsi3+0x3a>
    17c6:	09c3      	lsrs	r3, r0, #7
    17c8:	428b      	cmp	r3, r1
    17ca:	d301      	bcc.n	17d0 <__udivsi3+0xa8>
    17cc:	01cb      	lsls	r3, r1, #7
    17ce:	1ac0      	subs	r0, r0, r3
    17d0:	4152      	adcs	r2, r2
    17d2:	0983      	lsrs	r3, r0, #6
    17d4:	428b      	cmp	r3, r1
    17d6:	d301      	bcc.n	17dc <__udivsi3+0xb4>
    17d8:	018b      	lsls	r3, r1, #6
    17da:	1ac0      	subs	r0, r0, r3
    17dc:	4152      	adcs	r2, r2
    17de:	0943      	lsrs	r3, r0, #5
    17e0:	428b      	cmp	r3, r1
    17e2:	d301      	bcc.n	17e8 <__udivsi3+0xc0>
    17e4:	014b      	lsls	r3, r1, #5
    17e6:	1ac0      	subs	r0, r0, r3
    17e8:	4152      	adcs	r2, r2
    17ea:	0903      	lsrs	r3, r0, #4
    17ec:	428b      	cmp	r3, r1
    17ee:	d301      	bcc.n	17f4 <__udivsi3+0xcc>
    17f0:	010b      	lsls	r3, r1, #4
    17f2:	1ac0      	subs	r0, r0, r3
    17f4:	4152      	adcs	r2, r2
    17f6:	08c3      	lsrs	r3, r0, #3
    17f8:	428b      	cmp	r3, r1
    17fa:	d301      	bcc.n	1800 <__udivsi3+0xd8>
    17fc:	00cb      	lsls	r3, r1, #3
    17fe:	1ac0      	subs	r0, r0, r3
    1800:	4152      	adcs	r2, r2
    1802:	0883      	lsrs	r3, r0, #2
    1804:	428b      	cmp	r3, r1
    1806:	d301      	bcc.n	180c <__udivsi3+0xe4>
    1808:	008b      	lsls	r3, r1, #2
    180a:	1ac0      	subs	r0, r0, r3
    180c:	4152      	adcs	r2, r2
    180e:	0843      	lsrs	r3, r0, #1
    1810:	428b      	cmp	r3, r1
    1812:	d301      	bcc.n	1818 <__udivsi3+0xf0>
    1814:	004b      	lsls	r3, r1, #1
    1816:	1ac0      	subs	r0, r0, r3
    1818:	4152      	adcs	r2, r2
    181a:	1a41      	subs	r1, r0, r1
    181c:	d200      	bcs.n	1820 <__udivsi3+0xf8>
    181e:	4601      	mov	r1, r0
    1820:	4152      	adcs	r2, r2
    1822:	4610      	mov	r0, r2
    1824:	4770      	bx	lr
    1826:	e7ff      	b.n	1828 <__udivsi3+0x100>
    1828:	b501      	push	{r0, lr}
    182a:	2000      	movs	r0, #0
    182c:	f000 f806 	bl	183c <__aeabi_idiv0>
    1830:	bd02      	pop	{r1, pc}
    1832:	46c0      	nop			; (mov r8, r8)

00001834 <__aeabi_uidivmod>:
    1834:	2900      	cmp	r1, #0
    1836:	d0f7      	beq.n	1828 <__udivsi3+0x100>
    1838:	e776      	b.n	1728 <__udivsi3>
    183a:	4770      	bx	lr

0000183c <__aeabi_idiv0>:
    183c:	4770      	bx	lr
    183e:	46c0      	nop			; (mov r8, r8)

00001840 <__aeabi_lmul>:
    1840:	b5f0      	push	{r4, r5, r6, r7, lr}
    1842:	46ce      	mov	lr, r9
    1844:	4647      	mov	r7, r8
    1846:	0415      	lsls	r5, r2, #16
    1848:	0c2d      	lsrs	r5, r5, #16
    184a:	002e      	movs	r6, r5
    184c:	b580      	push	{r7, lr}
    184e:	0407      	lsls	r7, r0, #16
    1850:	0c14      	lsrs	r4, r2, #16
    1852:	0c3f      	lsrs	r7, r7, #16
    1854:	4699      	mov	r9, r3
    1856:	0c03      	lsrs	r3, r0, #16
    1858:	437e      	muls	r6, r7
    185a:	435d      	muls	r5, r3
    185c:	4367      	muls	r7, r4
    185e:	4363      	muls	r3, r4
    1860:	197f      	adds	r7, r7, r5
    1862:	0c34      	lsrs	r4, r6, #16
    1864:	19e4      	adds	r4, r4, r7
    1866:	469c      	mov	ip, r3
    1868:	42a5      	cmp	r5, r4
    186a:	d903      	bls.n	1874 <__aeabi_lmul+0x34>
    186c:	2380      	movs	r3, #128	; 0x80
    186e:	025b      	lsls	r3, r3, #9
    1870:	4698      	mov	r8, r3
    1872:	44c4      	add	ip, r8
    1874:	464b      	mov	r3, r9
    1876:	4351      	muls	r1, r2
    1878:	4343      	muls	r3, r0
    187a:	0436      	lsls	r6, r6, #16
    187c:	0c36      	lsrs	r6, r6, #16
    187e:	0c25      	lsrs	r5, r4, #16
    1880:	0424      	lsls	r4, r4, #16
    1882:	4465      	add	r5, ip
    1884:	19a4      	adds	r4, r4, r6
    1886:	1859      	adds	r1, r3, r1
    1888:	1949      	adds	r1, r1, r5
    188a:	0020      	movs	r0, r4
    188c:	bc0c      	pop	{r2, r3}
    188e:	4690      	mov	r8, r2
    1890:	4699      	mov	r9, r3
    1892:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001894 <__libc_init_array>:
    1894:	b570      	push	{r4, r5, r6, lr}
    1896:	2600      	movs	r6, #0
    1898:	4d0c      	ldr	r5, [pc, #48]	; (18cc <__libc_init_array+0x38>)
    189a:	4c0d      	ldr	r4, [pc, #52]	; (18d0 <__libc_init_array+0x3c>)
    189c:	1b64      	subs	r4, r4, r5
    189e:	10a4      	asrs	r4, r4, #2
    18a0:	42a6      	cmp	r6, r4
    18a2:	d109      	bne.n	18b8 <__libc_init_array+0x24>
    18a4:	2600      	movs	r6, #0
    18a6:	f000 fca7 	bl	21f8 <_init>
    18aa:	4d0a      	ldr	r5, [pc, #40]	; (18d4 <__libc_init_array+0x40>)
    18ac:	4c0a      	ldr	r4, [pc, #40]	; (18d8 <__libc_init_array+0x44>)
    18ae:	1b64      	subs	r4, r4, r5
    18b0:	10a4      	asrs	r4, r4, #2
    18b2:	42a6      	cmp	r6, r4
    18b4:	d105      	bne.n	18c2 <__libc_init_array+0x2e>
    18b6:	bd70      	pop	{r4, r5, r6, pc}
    18b8:	00b3      	lsls	r3, r6, #2
    18ba:	58eb      	ldr	r3, [r5, r3]
    18bc:	4798      	blx	r3
    18be:	3601      	adds	r6, #1
    18c0:	e7ee      	b.n	18a0 <__libc_init_array+0xc>
    18c2:	00b3      	lsls	r3, r6, #2
    18c4:	58eb      	ldr	r3, [r5, r3]
    18c6:	4798      	blx	r3
    18c8:	3601      	adds	r6, #1
    18ca:	e7f2      	b.n	18b2 <__libc_init_array+0x1e>
    18cc:	00002204 	.word	0x00002204
    18d0:	00002204 	.word	0x00002204
    18d4:	00002204 	.word	0x00002204
    18d8:	00002208 	.word	0x00002208

000018dc <sniprintf>:
    18dc:	b40c      	push	{r2, r3}
    18de:	b530      	push	{r4, r5, lr}
    18e0:	4b16      	ldr	r3, [pc, #88]	; (193c <sniprintf+0x60>)
    18e2:	b09d      	sub	sp, #116	; 0x74
    18e4:	1e0c      	subs	r4, r1, #0
    18e6:	681d      	ldr	r5, [r3, #0]
    18e8:	da08      	bge.n	18fc <sniprintf+0x20>
    18ea:	238b      	movs	r3, #139	; 0x8b
    18ec:	2001      	movs	r0, #1
    18ee:	602b      	str	r3, [r5, #0]
    18f0:	4240      	negs	r0, r0
    18f2:	b01d      	add	sp, #116	; 0x74
    18f4:	bc30      	pop	{r4, r5}
    18f6:	bc08      	pop	{r3}
    18f8:	b002      	add	sp, #8
    18fa:	4718      	bx	r3
    18fc:	2382      	movs	r3, #130	; 0x82
    18fe:	a902      	add	r1, sp, #8
    1900:	009b      	lsls	r3, r3, #2
    1902:	818b      	strh	r3, [r1, #12]
    1904:	2300      	movs	r3, #0
    1906:	9002      	str	r0, [sp, #8]
    1908:	6108      	str	r0, [r1, #16]
    190a:	429c      	cmp	r4, r3
    190c:	d000      	beq.n	1910 <sniprintf+0x34>
    190e:	1e63      	subs	r3, r4, #1
    1910:	608b      	str	r3, [r1, #8]
    1912:	614b      	str	r3, [r1, #20]
    1914:	2301      	movs	r3, #1
    1916:	425b      	negs	r3, r3
    1918:	81cb      	strh	r3, [r1, #14]
    191a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    191c:	ab21      	add	r3, sp, #132	; 0x84
    191e:	0028      	movs	r0, r5
    1920:	9301      	str	r3, [sp, #4]
    1922:	f000 f877 	bl	1a14 <_svfiprintf_r>
    1926:	1c43      	adds	r3, r0, #1
    1928:	da01      	bge.n	192e <sniprintf+0x52>
    192a:	238b      	movs	r3, #139	; 0x8b
    192c:	602b      	str	r3, [r5, #0]
    192e:	2c00      	cmp	r4, #0
    1930:	d0df      	beq.n	18f2 <sniprintf+0x16>
    1932:	2300      	movs	r3, #0
    1934:	9a02      	ldr	r2, [sp, #8]
    1936:	7013      	strb	r3, [r2, #0]
    1938:	e7db      	b.n	18f2 <sniprintf+0x16>
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	20000004 	.word	0x20000004

00001940 <strlen>:
    1940:	2300      	movs	r3, #0
    1942:	5cc2      	ldrb	r2, [r0, r3]
    1944:	3301      	adds	r3, #1
    1946:	2a00      	cmp	r2, #0
    1948:	d1fb      	bne.n	1942 <strlen+0x2>
    194a:	1e58      	subs	r0, r3, #1
    194c:	4770      	bx	lr
	...

00001950 <__ssputs_r>:
    1950:	b5f0      	push	{r4, r5, r6, r7, lr}
    1952:	688e      	ldr	r6, [r1, #8]
    1954:	b085      	sub	sp, #20
    1956:	0007      	movs	r7, r0
    1958:	000c      	movs	r4, r1
    195a:	9203      	str	r2, [sp, #12]
    195c:	9301      	str	r3, [sp, #4]
    195e:	429e      	cmp	r6, r3
    1960:	d839      	bhi.n	19d6 <__ssputs_r+0x86>
    1962:	2390      	movs	r3, #144	; 0x90
    1964:	898a      	ldrh	r2, [r1, #12]
    1966:	00db      	lsls	r3, r3, #3
    1968:	421a      	tst	r2, r3
    196a:	d034      	beq.n	19d6 <__ssputs_r+0x86>
    196c:	2503      	movs	r5, #3
    196e:	6909      	ldr	r1, [r1, #16]
    1970:	6823      	ldr	r3, [r4, #0]
    1972:	1a5b      	subs	r3, r3, r1
    1974:	9302      	str	r3, [sp, #8]
    1976:	6963      	ldr	r3, [r4, #20]
    1978:	9802      	ldr	r0, [sp, #8]
    197a:	435d      	muls	r5, r3
    197c:	0feb      	lsrs	r3, r5, #31
    197e:	195d      	adds	r5, r3, r5
    1980:	9b01      	ldr	r3, [sp, #4]
    1982:	106d      	asrs	r5, r5, #1
    1984:	3301      	adds	r3, #1
    1986:	181b      	adds	r3, r3, r0
    1988:	42ab      	cmp	r3, r5
    198a:	d900      	bls.n	198e <__ssputs_r+0x3e>
    198c:	001d      	movs	r5, r3
    198e:	0553      	lsls	r3, r2, #21
    1990:	d532      	bpl.n	19f8 <__ssputs_r+0xa8>
    1992:	0029      	movs	r1, r5
    1994:	0038      	movs	r0, r7
    1996:	f000 fb39 	bl	200c <_malloc_r>
    199a:	1e06      	subs	r6, r0, #0
    199c:	d109      	bne.n	19b2 <__ssputs_r+0x62>
    199e:	230c      	movs	r3, #12
    19a0:	603b      	str	r3, [r7, #0]
    19a2:	2340      	movs	r3, #64	; 0x40
    19a4:	2001      	movs	r0, #1
    19a6:	89a2      	ldrh	r2, [r4, #12]
    19a8:	4240      	negs	r0, r0
    19aa:	4313      	orrs	r3, r2
    19ac:	81a3      	strh	r3, [r4, #12]
    19ae:	b005      	add	sp, #20
    19b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19b2:	9a02      	ldr	r2, [sp, #8]
    19b4:	6921      	ldr	r1, [r4, #16]
    19b6:	f000 fac4 	bl	1f42 <memcpy>
    19ba:	89a3      	ldrh	r3, [r4, #12]
    19bc:	4a14      	ldr	r2, [pc, #80]	; (1a10 <__ssputs_r+0xc0>)
    19be:	401a      	ands	r2, r3
    19c0:	2380      	movs	r3, #128	; 0x80
    19c2:	4313      	orrs	r3, r2
    19c4:	81a3      	strh	r3, [r4, #12]
    19c6:	9b02      	ldr	r3, [sp, #8]
    19c8:	6126      	str	r6, [r4, #16]
    19ca:	18f6      	adds	r6, r6, r3
    19cc:	6026      	str	r6, [r4, #0]
    19ce:	6165      	str	r5, [r4, #20]
    19d0:	9e01      	ldr	r6, [sp, #4]
    19d2:	1aed      	subs	r5, r5, r3
    19d4:	60a5      	str	r5, [r4, #8]
    19d6:	9b01      	ldr	r3, [sp, #4]
    19d8:	42b3      	cmp	r3, r6
    19da:	d200      	bcs.n	19de <__ssputs_r+0x8e>
    19dc:	001e      	movs	r6, r3
    19de:	0032      	movs	r2, r6
    19e0:	9903      	ldr	r1, [sp, #12]
    19e2:	6820      	ldr	r0, [r4, #0]
    19e4:	f000 fab6 	bl	1f54 <memmove>
    19e8:	68a3      	ldr	r3, [r4, #8]
    19ea:	2000      	movs	r0, #0
    19ec:	1b9b      	subs	r3, r3, r6
    19ee:	60a3      	str	r3, [r4, #8]
    19f0:	6823      	ldr	r3, [r4, #0]
    19f2:	199e      	adds	r6, r3, r6
    19f4:	6026      	str	r6, [r4, #0]
    19f6:	e7da      	b.n	19ae <__ssputs_r+0x5e>
    19f8:	002a      	movs	r2, r5
    19fa:	0038      	movs	r0, r7
    19fc:	f000 fb64 	bl	20c8 <_realloc_r>
    1a00:	1e06      	subs	r6, r0, #0
    1a02:	d1e0      	bne.n	19c6 <__ssputs_r+0x76>
    1a04:	6921      	ldr	r1, [r4, #16]
    1a06:	0038      	movs	r0, r7
    1a08:	f000 fab6 	bl	1f78 <_free_r>
    1a0c:	e7c7      	b.n	199e <__ssputs_r+0x4e>
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	fffffb7f 	.word	0xfffffb7f

00001a14 <_svfiprintf_r>:
    1a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a16:	b09f      	sub	sp, #124	; 0x7c
    1a18:	9002      	str	r0, [sp, #8]
    1a1a:	9305      	str	r3, [sp, #20]
    1a1c:	898b      	ldrh	r3, [r1, #12]
    1a1e:	000f      	movs	r7, r1
    1a20:	0016      	movs	r6, r2
    1a22:	061b      	lsls	r3, r3, #24
    1a24:	d511      	bpl.n	1a4a <_svfiprintf_r+0x36>
    1a26:	690b      	ldr	r3, [r1, #16]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d10e      	bne.n	1a4a <_svfiprintf_r+0x36>
    1a2c:	2140      	movs	r1, #64	; 0x40
    1a2e:	f000 faed 	bl	200c <_malloc_r>
    1a32:	6038      	str	r0, [r7, #0]
    1a34:	6138      	str	r0, [r7, #16]
    1a36:	2800      	cmp	r0, #0
    1a38:	d105      	bne.n	1a46 <_svfiprintf_r+0x32>
    1a3a:	230c      	movs	r3, #12
    1a3c:	9a02      	ldr	r2, [sp, #8]
    1a3e:	3801      	subs	r0, #1
    1a40:	6013      	str	r3, [r2, #0]
    1a42:	b01f      	add	sp, #124	; 0x7c
    1a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a46:	2340      	movs	r3, #64	; 0x40
    1a48:	617b      	str	r3, [r7, #20]
    1a4a:	2300      	movs	r3, #0
    1a4c:	ad06      	add	r5, sp, #24
    1a4e:	616b      	str	r3, [r5, #20]
    1a50:	3320      	adds	r3, #32
    1a52:	766b      	strb	r3, [r5, #25]
    1a54:	3310      	adds	r3, #16
    1a56:	76ab      	strb	r3, [r5, #26]
    1a58:	0034      	movs	r4, r6
    1a5a:	7823      	ldrb	r3, [r4, #0]
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d147      	bne.n	1af0 <_svfiprintf_r+0xdc>
    1a60:	1ba3      	subs	r3, r4, r6
    1a62:	9304      	str	r3, [sp, #16]
    1a64:	d00d      	beq.n	1a82 <_svfiprintf_r+0x6e>
    1a66:	1ba3      	subs	r3, r4, r6
    1a68:	0032      	movs	r2, r6
    1a6a:	0039      	movs	r1, r7
    1a6c:	9802      	ldr	r0, [sp, #8]
    1a6e:	f7ff ff6f 	bl	1950 <__ssputs_r>
    1a72:	1c43      	adds	r3, r0, #1
    1a74:	d100      	bne.n	1a78 <_svfiprintf_r+0x64>
    1a76:	e0b5      	b.n	1be4 <_svfiprintf_r+0x1d0>
    1a78:	696a      	ldr	r2, [r5, #20]
    1a7a:	9b04      	ldr	r3, [sp, #16]
    1a7c:	4694      	mov	ip, r2
    1a7e:	4463      	add	r3, ip
    1a80:	616b      	str	r3, [r5, #20]
    1a82:	7823      	ldrb	r3, [r4, #0]
    1a84:	2b00      	cmp	r3, #0
    1a86:	d100      	bne.n	1a8a <_svfiprintf_r+0x76>
    1a88:	e0ac      	b.n	1be4 <_svfiprintf_r+0x1d0>
    1a8a:	2201      	movs	r2, #1
    1a8c:	2300      	movs	r3, #0
    1a8e:	4252      	negs	r2, r2
    1a90:	606a      	str	r2, [r5, #4]
    1a92:	a902      	add	r1, sp, #8
    1a94:	3254      	adds	r2, #84	; 0x54
    1a96:	1852      	adds	r2, r2, r1
    1a98:	3401      	adds	r4, #1
    1a9a:	602b      	str	r3, [r5, #0]
    1a9c:	60eb      	str	r3, [r5, #12]
    1a9e:	60ab      	str	r3, [r5, #8]
    1aa0:	7013      	strb	r3, [r2, #0]
    1aa2:	65ab      	str	r3, [r5, #88]	; 0x58
    1aa4:	4e58      	ldr	r6, [pc, #352]	; (1c08 <_svfiprintf_r+0x1f4>)
    1aa6:	2205      	movs	r2, #5
    1aa8:	7821      	ldrb	r1, [r4, #0]
    1aaa:	0030      	movs	r0, r6
    1aac:	f000 fa3e 	bl	1f2c <memchr>
    1ab0:	1c62      	adds	r2, r4, #1
    1ab2:	2800      	cmp	r0, #0
    1ab4:	d120      	bne.n	1af8 <_svfiprintf_r+0xe4>
    1ab6:	6829      	ldr	r1, [r5, #0]
    1ab8:	06cb      	lsls	r3, r1, #27
    1aba:	d504      	bpl.n	1ac6 <_svfiprintf_r+0xb2>
    1abc:	2353      	movs	r3, #83	; 0x53
    1abe:	ae02      	add	r6, sp, #8
    1ac0:	3020      	adds	r0, #32
    1ac2:	199b      	adds	r3, r3, r6
    1ac4:	7018      	strb	r0, [r3, #0]
    1ac6:	070b      	lsls	r3, r1, #28
    1ac8:	d504      	bpl.n	1ad4 <_svfiprintf_r+0xc0>
    1aca:	2353      	movs	r3, #83	; 0x53
    1acc:	202b      	movs	r0, #43	; 0x2b
    1ace:	ae02      	add	r6, sp, #8
    1ad0:	199b      	adds	r3, r3, r6
    1ad2:	7018      	strb	r0, [r3, #0]
    1ad4:	7823      	ldrb	r3, [r4, #0]
    1ad6:	2b2a      	cmp	r3, #42	; 0x2a
    1ad8:	d016      	beq.n	1b08 <_svfiprintf_r+0xf4>
    1ada:	2000      	movs	r0, #0
    1adc:	210a      	movs	r1, #10
    1ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ae0:	7822      	ldrb	r2, [r4, #0]
    1ae2:	3a30      	subs	r2, #48	; 0x30
    1ae4:	2a09      	cmp	r2, #9
    1ae6:	d955      	bls.n	1b94 <_svfiprintf_r+0x180>
    1ae8:	2800      	cmp	r0, #0
    1aea:	d015      	beq.n	1b18 <_svfiprintf_r+0x104>
    1aec:	9309      	str	r3, [sp, #36]	; 0x24
    1aee:	e013      	b.n	1b18 <_svfiprintf_r+0x104>
    1af0:	2b25      	cmp	r3, #37	; 0x25
    1af2:	d0b5      	beq.n	1a60 <_svfiprintf_r+0x4c>
    1af4:	3401      	adds	r4, #1
    1af6:	e7b0      	b.n	1a5a <_svfiprintf_r+0x46>
    1af8:	2301      	movs	r3, #1
    1afa:	1b80      	subs	r0, r0, r6
    1afc:	4083      	lsls	r3, r0
    1afe:	6829      	ldr	r1, [r5, #0]
    1b00:	0014      	movs	r4, r2
    1b02:	430b      	orrs	r3, r1
    1b04:	602b      	str	r3, [r5, #0]
    1b06:	e7cd      	b.n	1aa4 <_svfiprintf_r+0x90>
    1b08:	9b05      	ldr	r3, [sp, #20]
    1b0a:	1d18      	adds	r0, r3, #4
    1b0c:	681b      	ldr	r3, [r3, #0]
    1b0e:	9005      	str	r0, [sp, #20]
    1b10:	2b00      	cmp	r3, #0
    1b12:	db39      	blt.n	1b88 <_svfiprintf_r+0x174>
    1b14:	9309      	str	r3, [sp, #36]	; 0x24
    1b16:	0014      	movs	r4, r2
    1b18:	7823      	ldrb	r3, [r4, #0]
    1b1a:	2b2e      	cmp	r3, #46	; 0x2e
    1b1c:	d10b      	bne.n	1b36 <_svfiprintf_r+0x122>
    1b1e:	7863      	ldrb	r3, [r4, #1]
    1b20:	1c62      	adds	r2, r4, #1
    1b22:	2b2a      	cmp	r3, #42	; 0x2a
    1b24:	d13e      	bne.n	1ba4 <_svfiprintf_r+0x190>
    1b26:	9b05      	ldr	r3, [sp, #20]
    1b28:	3402      	adds	r4, #2
    1b2a:	1d1a      	adds	r2, r3, #4
    1b2c:	681b      	ldr	r3, [r3, #0]
    1b2e:	9205      	str	r2, [sp, #20]
    1b30:	2b00      	cmp	r3, #0
    1b32:	db34      	blt.n	1b9e <_svfiprintf_r+0x18a>
    1b34:	9307      	str	r3, [sp, #28]
    1b36:	4e35      	ldr	r6, [pc, #212]	; (1c0c <_svfiprintf_r+0x1f8>)
    1b38:	7821      	ldrb	r1, [r4, #0]
    1b3a:	2203      	movs	r2, #3
    1b3c:	0030      	movs	r0, r6
    1b3e:	f000 f9f5 	bl	1f2c <memchr>
    1b42:	2800      	cmp	r0, #0
    1b44:	d006      	beq.n	1b54 <_svfiprintf_r+0x140>
    1b46:	2340      	movs	r3, #64	; 0x40
    1b48:	1b80      	subs	r0, r0, r6
    1b4a:	4083      	lsls	r3, r0
    1b4c:	682a      	ldr	r2, [r5, #0]
    1b4e:	3401      	adds	r4, #1
    1b50:	4313      	orrs	r3, r2
    1b52:	602b      	str	r3, [r5, #0]
    1b54:	7821      	ldrb	r1, [r4, #0]
    1b56:	2206      	movs	r2, #6
    1b58:	482d      	ldr	r0, [pc, #180]	; (1c10 <_svfiprintf_r+0x1fc>)
    1b5a:	1c66      	adds	r6, r4, #1
    1b5c:	7629      	strb	r1, [r5, #24]
    1b5e:	f000 f9e5 	bl	1f2c <memchr>
    1b62:	2800      	cmp	r0, #0
    1b64:	d046      	beq.n	1bf4 <_svfiprintf_r+0x1e0>
    1b66:	4b2b      	ldr	r3, [pc, #172]	; (1c14 <_svfiprintf_r+0x200>)
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d12f      	bne.n	1bcc <_svfiprintf_r+0x1b8>
    1b6c:	6829      	ldr	r1, [r5, #0]
    1b6e:	9b05      	ldr	r3, [sp, #20]
    1b70:	2207      	movs	r2, #7
    1b72:	05c9      	lsls	r1, r1, #23
    1b74:	d528      	bpl.n	1bc8 <_svfiprintf_r+0x1b4>
    1b76:	189b      	adds	r3, r3, r2
    1b78:	4393      	bics	r3, r2
    1b7a:	3308      	adds	r3, #8
    1b7c:	9305      	str	r3, [sp, #20]
    1b7e:	696b      	ldr	r3, [r5, #20]
    1b80:	9a03      	ldr	r2, [sp, #12]
    1b82:	189b      	adds	r3, r3, r2
    1b84:	616b      	str	r3, [r5, #20]
    1b86:	e767      	b.n	1a58 <_svfiprintf_r+0x44>
    1b88:	425b      	negs	r3, r3
    1b8a:	60eb      	str	r3, [r5, #12]
    1b8c:	2302      	movs	r3, #2
    1b8e:	430b      	orrs	r3, r1
    1b90:	602b      	str	r3, [r5, #0]
    1b92:	e7c0      	b.n	1b16 <_svfiprintf_r+0x102>
    1b94:	434b      	muls	r3, r1
    1b96:	3401      	adds	r4, #1
    1b98:	189b      	adds	r3, r3, r2
    1b9a:	2001      	movs	r0, #1
    1b9c:	e7a0      	b.n	1ae0 <_svfiprintf_r+0xcc>
    1b9e:	2301      	movs	r3, #1
    1ba0:	425b      	negs	r3, r3
    1ba2:	e7c7      	b.n	1b34 <_svfiprintf_r+0x120>
    1ba4:	2300      	movs	r3, #0
    1ba6:	0014      	movs	r4, r2
    1ba8:	200a      	movs	r0, #10
    1baa:	001a      	movs	r2, r3
    1bac:	606b      	str	r3, [r5, #4]
    1bae:	7821      	ldrb	r1, [r4, #0]
    1bb0:	3930      	subs	r1, #48	; 0x30
    1bb2:	2909      	cmp	r1, #9
    1bb4:	d903      	bls.n	1bbe <_svfiprintf_r+0x1aa>
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d0bd      	beq.n	1b36 <_svfiprintf_r+0x122>
    1bba:	9207      	str	r2, [sp, #28]
    1bbc:	e7bb      	b.n	1b36 <_svfiprintf_r+0x122>
    1bbe:	4342      	muls	r2, r0
    1bc0:	3401      	adds	r4, #1
    1bc2:	1852      	adds	r2, r2, r1
    1bc4:	2301      	movs	r3, #1
    1bc6:	e7f2      	b.n	1bae <_svfiprintf_r+0x19a>
    1bc8:	3307      	adds	r3, #7
    1bca:	e7d5      	b.n	1b78 <_svfiprintf_r+0x164>
    1bcc:	ab05      	add	r3, sp, #20
    1bce:	9300      	str	r3, [sp, #0]
    1bd0:	003a      	movs	r2, r7
    1bd2:	4b11      	ldr	r3, [pc, #68]	; (1c18 <_svfiprintf_r+0x204>)
    1bd4:	0029      	movs	r1, r5
    1bd6:	9802      	ldr	r0, [sp, #8]
    1bd8:	e000      	b.n	1bdc <_svfiprintf_r+0x1c8>
    1bda:	bf00      	nop
    1bdc:	9003      	str	r0, [sp, #12]
    1bde:	9b03      	ldr	r3, [sp, #12]
    1be0:	3301      	adds	r3, #1
    1be2:	d1cc      	bne.n	1b7e <_svfiprintf_r+0x16a>
    1be4:	89bb      	ldrh	r3, [r7, #12]
    1be6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1be8:	065b      	lsls	r3, r3, #25
    1bea:	d400      	bmi.n	1bee <_svfiprintf_r+0x1da>
    1bec:	e729      	b.n	1a42 <_svfiprintf_r+0x2e>
    1bee:	2001      	movs	r0, #1
    1bf0:	4240      	negs	r0, r0
    1bf2:	e726      	b.n	1a42 <_svfiprintf_r+0x2e>
    1bf4:	ab05      	add	r3, sp, #20
    1bf6:	9300      	str	r3, [sp, #0]
    1bf8:	003a      	movs	r2, r7
    1bfa:	4b07      	ldr	r3, [pc, #28]	; (1c18 <_svfiprintf_r+0x204>)
    1bfc:	0029      	movs	r1, r5
    1bfe:	9802      	ldr	r0, [sp, #8]
    1c00:	f000 f87a 	bl	1cf8 <_printf_i>
    1c04:	e7ea      	b.n	1bdc <_svfiprintf_r+0x1c8>
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	000021c4 	.word	0x000021c4
    1c0c:	000021ca 	.word	0x000021ca
    1c10:	000021ce 	.word	0x000021ce
    1c14:	00000000 	.word	0x00000000
    1c18:	00001951 	.word	0x00001951

00001c1c <_printf_common>:
    1c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c1e:	0015      	movs	r5, r2
    1c20:	9301      	str	r3, [sp, #4]
    1c22:	688a      	ldr	r2, [r1, #8]
    1c24:	690b      	ldr	r3, [r1, #16]
    1c26:	9000      	str	r0, [sp, #0]
    1c28:	000c      	movs	r4, r1
    1c2a:	4293      	cmp	r3, r2
    1c2c:	da00      	bge.n	1c30 <_printf_common+0x14>
    1c2e:	0013      	movs	r3, r2
    1c30:	0022      	movs	r2, r4
    1c32:	602b      	str	r3, [r5, #0]
    1c34:	3243      	adds	r2, #67	; 0x43
    1c36:	7812      	ldrb	r2, [r2, #0]
    1c38:	2a00      	cmp	r2, #0
    1c3a:	d001      	beq.n	1c40 <_printf_common+0x24>
    1c3c:	3301      	adds	r3, #1
    1c3e:	602b      	str	r3, [r5, #0]
    1c40:	6823      	ldr	r3, [r4, #0]
    1c42:	069b      	lsls	r3, r3, #26
    1c44:	d502      	bpl.n	1c4c <_printf_common+0x30>
    1c46:	682b      	ldr	r3, [r5, #0]
    1c48:	3302      	adds	r3, #2
    1c4a:	602b      	str	r3, [r5, #0]
    1c4c:	2706      	movs	r7, #6
    1c4e:	6823      	ldr	r3, [r4, #0]
    1c50:	401f      	ands	r7, r3
    1c52:	d027      	beq.n	1ca4 <_printf_common+0x88>
    1c54:	0023      	movs	r3, r4
    1c56:	3343      	adds	r3, #67	; 0x43
    1c58:	781b      	ldrb	r3, [r3, #0]
    1c5a:	1e5a      	subs	r2, r3, #1
    1c5c:	4193      	sbcs	r3, r2
    1c5e:	6822      	ldr	r2, [r4, #0]
    1c60:	0692      	lsls	r2, r2, #26
    1c62:	d430      	bmi.n	1cc6 <_printf_common+0xaa>
    1c64:	0022      	movs	r2, r4
    1c66:	9901      	ldr	r1, [sp, #4]
    1c68:	3243      	adds	r2, #67	; 0x43
    1c6a:	9800      	ldr	r0, [sp, #0]
    1c6c:	9e08      	ldr	r6, [sp, #32]
    1c6e:	47b0      	blx	r6
    1c70:	1c43      	adds	r3, r0, #1
    1c72:	d025      	beq.n	1cc0 <_printf_common+0xa4>
    1c74:	2306      	movs	r3, #6
    1c76:	6820      	ldr	r0, [r4, #0]
    1c78:	682a      	ldr	r2, [r5, #0]
    1c7a:	68e1      	ldr	r1, [r4, #12]
    1c7c:	4003      	ands	r3, r0
    1c7e:	2500      	movs	r5, #0
    1c80:	2b04      	cmp	r3, #4
    1c82:	d103      	bne.n	1c8c <_printf_common+0x70>
    1c84:	1a8d      	subs	r5, r1, r2
    1c86:	43eb      	mvns	r3, r5
    1c88:	17db      	asrs	r3, r3, #31
    1c8a:	401d      	ands	r5, r3
    1c8c:	68a3      	ldr	r3, [r4, #8]
    1c8e:	6922      	ldr	r2, [r4, #16]
    1c90:	4293      	cmp	r3, r2
    1c92:	dd01      	ble.n	1c98 <_printf_common+0x7c>
    1c94:	1a9b      	subs	r3, r3, r2
    1c96:	18ed      	adds	r5, r5, r3
    1c98:	2700      	movs	r7, #0
    1c9a:	42bd      	cmp	r5, r7
    1c9c:	d120      	bne.n	1ce0 <_printf_common+0xc4>
    1c9e:	2000      	movs	r0, #0
    1ca0:	e010      	b.n	1cc4 <_printf_common+0xa8>
    1ca2:	3701      	adds	r7, #1
    1ca4:	68e3      	ldr	r3, [r4, #12]
    1ca6:	682a      	ldr	r2, [r5, #0]
    1ca8:	1a9b      	subs	r3, r3, r2
    1caa:	429f      	cmp	r7, r3
    1cac:	dad2      	bge.n	1c54 <_printf_common+0x38>
    1cae:	0022      	movs	r2, r4
    1cb0:	2301      	movs	r3, #1
    1cb2:	3219      	adds	r2, #25
    1cb4:	9901      	ldr	r1, [sp, #4]
    1cb6:	9800      	ldr	r0, [sp, #0]
    1cb8:	9e08      	ldr	r6, [sp, #32]
    1cba:	47b0      	blx	r6
    1cbc:	1c43      	adds	r3, r0, #1
    1cbe:	d1f0      	bne.n	1ca2 <_printf_common+0x86>
    1cc0:	2001      	movs	r0, #1
    1cc2:	4240      	negs	r0, r0
    1cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1cc6:	2030      	movs	r0, #48	; 0x30
    1cc8:	18e1      	adds	r1, r4, r3
    1cca:	3143      	adds	r1, #67	; 0x43
    1ccc:	7008      	strb	r0, [r1, #0]
    1cce:	0021      	movs	r1, r4
    1cd0:	1c5a      	adds	r2, r3, #1
    1cd2:	3145      	adds	r1, #69	; 0x45
    1cd4:	7809      	ldrb	r1, [r1, #0]
    1cd6:	18a2      	adds	r2, r4, r2
    1cd8:	3243      	adds	r2, #67	; 0x43
    1cda:	3302      	adds	r3, #2
    1cdc:	7011      	strb	r1, [r2, #0]
    1cde:	e7c1      	b.n	1c64 <_printf_common+0x48>
    1ce0:	0022      	movs	r2, r4
    1ce2:	2301      	movs	r3, #1
    1ce4:	321a      	adds	r2, #26
    1ce6:	9901      	ldr	r1, [sp, #4]
    1ce8:	9800      	ldr	r0, [sp, #0]
    1cea:	9e08      	ldr	r6, [sp, #32]
    1cec:	47b0      	blx	r6
    1cee:	1c43      	adds	r3, r0, #1
    1cf0:	d0e6      	beq.n	1cc0 <_printf_common+0xa4>
    1cf2:	3701      	adds	r7, #1
    1cf4:	e7d1      	b.n	1c9a <_printf_common+0x7e>
	...

00001cf8 <_printf_i>:
    1cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfa:	b08b      	sub	sp, #44	; 0x2c
    1cfc:	9206      	str	r2, [sp, #24]
    1cfe:	000a      	movs	r2, r1
    1d00:	3243      	adds	r2, #67	; 0x43
    1d02:	9307      	str	r3, [sp, #28]
    1d04:	9005      	str	r0, [sp, #20]
    1d06:	9204      	str	r2, [sp, #16]
    1d08:	7e0a      	ldrb	r2, [r1, #24]
    1d0a:	000c      	movs	r4, r1
    1d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1d0e:	2a6e      	cmp	r2, #110	; 0x6e
    1d10:	d100      	bne.n	1d14 <_printf_i+0x1c>
    1d12:	e08f      	b.n	1e34 <_printf_i+0x13c>
    1d14:	d817      	bhi.n	1d46 <_printf_i+0x4e>
    1d16:	2a63      	cmp	r2, #99	; 0x63
    1d18:	d02c      	beq.n	1d74 <_printf_i+0x7c>
    1d1a:	d808      	bhi.n	1d2e <_printf_i+0x36>
    1d1c:	2a00      	cmp	r2, #0
    1d1e:	d100      	bne.n	1d22 <_printf_i+0x2a>
    1d20:	e099      	b.n	1e56 <_printf_i+0x15e>
    1d22:	2a58      	cmp	r2, #88	; 0x58
    1d24:	d054      	beq.n	1dd0 <_printf_i+0xd8>
    1d26:	0026      	movs	r6, r4
    1d28:	3642      	adds	r6, #66	; 0x42
    1d2a:	7032      	strb	r2, [r6, #0]
    1d2c:	e029      	b.n	1d82 <_printf_i+0x8a>
    1d2e:	2a64      	cmp	r2, #100	; 0x64
    1d30:	d001      	beq.n	1d36 <_printf_i+0x3e>
    1d32:	2a69      	cmp	r2, #105	; 0x69
    1d34:	d1f7      	bne.n	1d26 <_printf_i+0x2e>
    1d36:	6821      	ldr	r1, [r4, #0]
    1d38:	681a      	ldr	r2, [r3, #0]
    1d3a:	0608      	lsls	r0, r1, #24
    1d3c:	d523      	bpl.n	1d86 <_printf_i+0x8e>
    1d3e:	1d11      	adds	r1, r2, #4
    1d40:	6019      	str	r1, [r3, #0]
    1d42:	6815      	ldr	r5, [r2, #0]
    1d44:	e025      	b.n	1d92 <_printf_i+0x9a>
    1d46:	2a73      	cmp	r2, #115	; 0x73
    1d48:	d100      	bne.n	1d4c <_printf_i+0x54>
    1d4a:	e088      	b.n	1e5e <_printf_i+0x166>
    1d4c:	d808      	bhi.n	1d60 <_printf_i+0x68>
    1d4e:	2a6f      	cmp	r2, #111	; 0x6f
    1d50:	d029      	beq.n	1da6 <_printf_i+0xae>
    1d52:	2a70      	cmp	r2, #112	; 0x70
    1d54:	d1e7      	bne.n	1d26 <_printf_i+0x2e>
    1d56:	2220      	movs	r2, #32
    1d58:	6809      	ldr	r1, [r1, #0]
    1d5a:	430a      	orrs	r2, r1
    1d5c:	6022      	str	r2, [r4, #0]
    1d5e:	e003      	b.n	1d68 <_printf_i+0x70>
    1d60:	2a75      	cmp	r2, #117	; 0x75
    1d62:	d020      	beq.n	1da6 <_printf_i+0xae>
    1d64:	2a78      	cmp	r2, #120	; 0x78
    1d66:	d1de      	bne.n	1d26 <_printf_i+0x2e>
    1d68:	0022      	movs	r2, r4
    1d6a:	2178      	movs	r1, #120	; 0x78
    1d6c:	3245      	adds	r2, #69	; 0x45
    1d6e:	7011      	strb	r1, [r2, #0]
    1d70:	4a6c      	ldr	r2, [pc, #432]	; (1f24 <_printf_i+0x22c>)
    1d72:	e030      	b.n	1dd6 <_printf_i+0xde>
    1d74:	000e      	movs	r6, r1
    1d76:	681a      	ldr	r2, [r3, #0]
    1d78:	3642      	adds	r6, #66	; 0x42
    1d7a:	1d11      	adds	r1, r2, #4
    1d7c:	6019      	str	r1, [r3, #0]
    1d7e:	6813      	ldr	r3, [r2, #0]
    1d80:	7033      	strb	r3, [r6, #0]
    1d82:	2301      	movs	r3, #1
    1d84:	e079      	b.n	1e7a <_printf_i+0x182>
    1d86:	0649      	lsls	r1, r1, #25
    1d88:	d5d9      	bpl.n	1d3e <_printf_i+0x46>
    1d8a:	1d11      	adds	r1, r2, #4
    1d8c:	6019      	str	r1, [r3, #0]
    1d8e:	2300      	movs	r3, #0
    1d90:	5ed5      	ldrsh	r5, [r2, r3]
    1d92:	2d00      	cmp	r5, #0
    1d94:	da03      	bge.n	1d9e <_printf_i+0xa6>
    1d96:	232d      	movs	r3, #45	; 0x2d
    1d98:	9a04      	ldr	r2, [sp, #16]
    1d9a:	426d      	negs	r5, r5
    1d9c:	7013      	strb	r3, [r2, #0]
    1d9e:	4b62      	ldr	r3, [pc, #392]	; (1f28 <_printf_i+0x230>)
    1da0:	270a      	movs	r7, #10
    1da2:	9303      	str	r3, [sp, #12]
    1da4:	e02f      	b.n	1e06 <_printf_i+0x10e>
    1da6:	6820      	ldr	r0, [r4, #0]
    1da8:	6819      	ldr	r1, [r3, #0]
    1daa:	0605      	lsls	r5, r0, #24
    1dac:	d503      	bpl.n	1db6 <_printf_i+0xbe>
    1dae:	1d08      	adds	r0, r1, #4
    1db0:	6018      	str	r0, [r3, #0]
    1db2:	680d      	ldr	r5, [r1, #0]
    1db4:	e005      	b.n	1dc2 <_printf_i+0xca>
    1db6:	0640      	lsls	r0, r0, #25
    1db8:	d5f9      	bpl.n	1dae <_printf_i+0xb6>
    1dba:	680d      	ldr	r5, [r1, #0]
    1dbc:	1d08      	adds	r0, r1, #4
    1dbe:	6018      	str	r0, [r3, #0]
    1dc0:	b2ad      	uxth	r5, r5
    1dc2:	4b59      	ldr	r3, [pc, #356]	; (1f28 <_printf_i+0x230>)
    1dc4:	2708      	movs	r7, #8
    1dc6:	9303      	str	r3, [sp, #12]
    1dc8:	2a6f      	cmp	r2, #111	; 0x6f
    1dca:	d018      	beq.n	1dfe <_printf_i+0x106>
    1dcc:	270a      	movs	r7, #10
    1dce:	e016      	b.n	1dfe <_printf_i+0x106>
    1dd0:	3145      	adds	r1, #69	; 0x45
    1dd2:	700a      	strb	r2, [r1, #0]
    1dd4:	4a54      	ldr	r2, [pc, #336]	; (1f28 <_printf_i+0x230>)
    1dd6:	9203      	str	r2, [sp, #12]
    1dd8:	681a      	ldr	r2, [r3, #0]
    1dda:	6821      	ldr	r1, [r4, #0]
    1ddc:	1d10      	adds	r0, r2, #4
    1dde:	6018      	str	r0, [r3, #0]
    1de0:	6815      	ldr	r5, [r2, #0]
    1de2:	0608      	lsls	r0, r1, #24
    1de4:	d522      	bpl.n	1e2c <_printf_i+0x134>
    1de6:	07cb      	lsls	r3, r1, #31
    1de8:	d502      	bpl.n	1df0 <_printf_i+0xf8>
    1dea:	2320      	movs	r3, #32
    1dec:	4319      	orrs	r1, r3
    1dee:	6021      	str	r1, [r4, #0]
    1df0:	2710      	movs	r7, #16
    1df2:	2d00      	cmp	r5, #0
    1df4:	d103      	bne.n	1dfe <_printf_i+0x106>
    1df6:	2320      	movs	r3, #32
    1df8:	6822      	ldr	r2, [r4, #0]
    1dfa:	439a      	bics	r2, r3
    1dfc:	6022      	str	r2, [r4, #0]
    1dfe:	0023      	movs	r3, r4
    1e00:	2200      	movs	r2, #0
    1e02:	3343      	adds	r3, #67	; 0x43
    1e04:	701a      	strb	r2, [r3, #0]
    1e06:	6863      	ldr	r3, [r4, #4]
    1e08:	60a3      	str	r3, [r4, #8]
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	db5c      	blt.n	1ec8 <_printf_i+0x1d0>
    1e0e:	2204      	movs	r2, #4
    1e10:	6821      	ldr	r1, [r4, #0]
    1e12:	4391      	bics	r1, r2
    1e14:	6021      	str	r1, [r4, #0]
    1e16:	2d00      	cmp	r5, #0
    1e18:	d158      	bne.n	1ecc <_printf_i+0x1d4>
    1e1a:	9e04      	ldr	r6, [sp, #16]
    1e1c:	2b00      	cmp	r3, #0
    1e1e:	d064      	beq.n	1eea <_printf_i+0x1f2>
    1e20:	0026      	movs	r6, r4
    1e22:	9b03      	ldr	r3, [sp, #12]
    1e24:	3642      	adds	r6, #66	; 0x42
    1e26:	781b      	ldrb	r3, [r3, #0]
    1e28:	7033      	strb	r3, [r6, #0]
    1e2a:	e05e      	b.n	1eea <_printf_i+0x1f2>
    1e2c:	0648      	lsls	r0, r1, #25
    1e2e:	d5da      	bpl.n	1de6 <_printf_i+0xee>
    1e30:	b2ad      	uxth	r5, r5
    1e32:	e7d8      	b.n	1de6 <_printf_i+0xee>
    1e34:	6809      	ldr	r1, [r1, #0]
    1e36:	681a      	ldr	r2, [r3, #0]
    1e38:	0608      	lsls	r0, r1, #24
    1e3a:	d505      	bpl.n	1e48 <_printf_i+0x150>
    1e3c:	1d11      	adds	r1, r2, #4
    1e3e:	6019      	str	r1, [r3, #0]
    1e40:	6813      	ldr	r3, [r2, #0]
    1e42:	6962      	ldr	r2, [r4, #20]
    1e44:	601a      	str	r2, [r3, #0]
    1e46:	e006      	b.n	1e56 <_printf_i+0x15e>
    1e48:	0649      	lsls	r1, r1, #25
    1e4a:	d5f7      	bpl.n	1e3c <_printf_i+0x144>
    1e4c:	1d11      	adds	r1, r2, #4
    1e4e:	6019      	str	r1, [r3, #0]
    1e50:	6813      	ldr	r3, [r2, #0]
    1e52:	8aa2      	ldrh	r2, [r4, #20]
    1e54:	801a      	strh	r2, [r3, #0]
    1e56:	2300      	movs	r3, #0
    1e58:	9e04      	ldr	r6, [sp, #16]
    1e5a:	6123      	str	r3, [r4, #16]
    1e5c:	e054      	b.n	1f08 <_printf_i+0x210>
    1e5e:	681a      	ldr	r2, [r3, #0]
    1e60:	1d11      	adds	r1, r2, #4
    1e62:	6019      	str	r1, [r3, #0]
    1e64:	6816      	ldr	r6, [r2, #0]
    1e66:	2100      	movs	r1, #0
    1e68:	6862      	ldr	r2, [r4, #4]
    1e6a:	0030      	movs	r0, r6
    1e6c:	f000 f85e 	bl	1f2c <memchr>
    1e70:	2800      	cmp	r0, #0
    1e72:	d001      	beq.n	1e78 <_printf_i+0x180>
    1e74:	1b80      	subs	r0, r0, r6
    1e76:	6060      	str	r0, [r4, #4]
    1e78:	6863      	ldr	r3, [r4, #4]
    1e7a:	6123      	str	r3, [r4, #16]
    1e7c:	2300      	movs	r3, #0
    1e7e:	9a04      	ldr	r2, [sp, #16]
    1e80:	7013      	strb	r3, [r2, #0]
    1e82:	e041      	b.n	1f08 <_printf_i+0x210>
    1e84:	6923      	ldr	r3, [r4, #16]
    1e86:	0032      	movs	r2, r6
    1e88:	9906      	ldr	r1, [sp, #24]
    1e8a:	9805      	ldr	r0, [sp, #20]
    1e8c:	9d07      	ldr	r5, [sp, #28]
    1e8e:	47a8      	blx	r5
    1e90:	1c43      	adds	r3, r0, #1
    1e92:	d043      	beq.n	1f1c <_printf_i+0x224>
    1e94:	6823      	ldr	r3, [r4, #0]
    1e96:	2500      	movs	r5, #0
    1e98:	079b      	lsls	r3, r3, #30
    1e9a:	d40f      	bmi.n	1ebc <_printf_i+0x1c4>
    1e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e9e:	68e0      	ldr	r0, [r4, #12]
    1ea0:	4298      	cmp	r0, r3
    1ea2:	da3d      	bge.n	1f20 <_printf_i+0x228>
    1ea4:	0018      	movs	r0, r3
    1ea6:	e03b      	b.n	1f20 <_printf_i+0x228>
    1ea8:	0022      	movs	r2, r4
    1eaa:	2301      	movs	r3, #1
    1eac:	3219      	adds	r2, #25
    1eae:	9906      	ldr	r1, [sp, #24]
    1eb0:	9805      	ldr	r0, [sp, #20]
    1eb2:	9e07      	ldr	r6, [sp, #28]
    1eb4:	47b0      	blx	r6
    1eb6:	1c43      	adds	r3, r0, #1
    1eb8:	d030      	beq.n	1f1c <_printf_i+0x224>
    1eba:	3501      	adds	r5, #1
    1ebc:	68e3      	ldr	r3, [r4, #12]
    1ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1ec0:	1a9b      	subs	r3, r3, r2
    1ec2:	429d      	cmp	r5, r3
    1ec4:	dbf0      	blt.n	1ea8 <_printf_i+0x1b0>
    1ec6:	e7e9      	b.n	1e9c <_printf_i+0x1a4>
    1ec8:	2d00      	cmp	r5, #0
    1eca:	d0a9      	beq.n	1e20 <_printf_i+0x128>
    1ecc:	9e04      	ldr	r6, [sp, #16]
    1ece:	0028      	movs	r0, r5
    1ed0:	0039      	movs	r1, r7
    1ed2:	f7ff fcaf 	bl	1834 <__aeabi_uidivmod>
    1ed6:	9b03      	ldr	r3, [sp, #12]
    1ed8:	3e01      	subs	r6, #1
    1eda:	5c5b      	ldrb	r3, [r3, r1]
    1edc:	0028      	movs	r0, r5
    1ede:	7033      	strb	r3, [r6, #0]
    1ee0:	0039      	movs	r1, r7
    1ee2:	f7ff fc21 	bl	1728 <__udivsi3>
    1ee6:	1e05      	subs	r5, r0, #0
    1ee8:	d1f1      	bne.n	1ece <_printf_i+0x1d6>
    1eea:	2f08      	cmp	r7, #8
    1eec:	d109      	bne.n	1f02 <_printf_i+0x20a>
    1eee:	6823      	ldr	r3, [r4, #0]
    1ef0:	07db      	lsls	r3, r3, #31
    1ef2:	d506      	bpl.n	1f02 <_printf_i+0x20a>
    1ef4:	6863      	ldr	r3, [r4, #4]
    1ef6:	6922      	ldr	r2, [r4, #16]
    1ef8:	4293      	cmp	r3, r2
    1efa:	dc02      	bgt.n	1f02 <_printf_i+0x20a>
    1efc:	2330      	movs	r3, #48	; 0x30
    1efe:	3e01      	subs	r6, #1
    1f00:	7033      	strb	r3, [r6, #0]
    1f02:	9b04      	ldr	r3, [sp, #16]
    1f04:	1b9b      	subs	r3, r3, r6
    1f06:	6123      	str	r3, [r4, #16]
    1f08:	9b07      	ldr	r3, [sp, #28]
    1f0a:	aa09      	add	r2, sp, #36	; 0x24
    1f0c:	9300      	str	r3, [sp, #0]
    1f0e:	0021      	movs	r1, r4
    1f10:	9b06      	ldr	r3, [sp, #24]
    1f12:	9805      	ldr	r0, [sp, #20]
    1f14:	f7ff fe82 	bl	1c1c <_printf_common>
    1f18:	1c43      	adds	r3, r0, #1
    1f1a:	d1b3      	bne.n	1e84 <_printf_i+0x18c>
    1f1c:	2001      	movs	r0, #1
    1f1e:	4240      	negs	r0, r0
    1f20:	b00b      	add	sp, #44	; 0x2c
    1f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f24:	000021e6 	.word	0x000021e6
    1f28:	000021d5 	.word	0x000021d5

00001f2c <memchr>:
    1f2c:	b2c9      	uxtb	r1, r1
    1f2e:	1882      	adds	r2, r0, r2
    1f30:	4290      	cmp	r0, r2
    1f32:	d101      	bne.n	1f38 <memchr+0xc>
    1f34:	2000      	movs	r0, #0
    1f36:	4770      	bx	lr
    1f38:	7803      	ldrb	r3, [r0, #0]
    1f3a:	428b      	cmp	r3, r1
    1f3c:	d0fb      	beq.n	1f36 <memchr+0xa>
    1f3e:	3001      	adds	r0, #1
    1f40:	e7f6      	b.n	1f30 <memchr+0x4>

00001f42 <memcpy>:
    1f42:	2300      	movs	r3, #0
    1f44:	b510      	push	{r4, lr}
    1f46:	429a      	cmp	r2, r3
    1f48:	d100      	bne.n	1f4c <memcpy+0xa>
    1f4a:	bd10      	pop	{r4, pc}
    1f4c:	5ccc      	ldrb	r4, [r1, r3]
    1f4e:	54c4      	strb	r4, [r0, r3]
    1f50:	3301      	adds	r3, #1
    1f52:	e7f8      	b.n	1f46 <memcpy+0x4>

00001f54 <memmove>:
    1f54:	b510      	push	{r4, lr}
    1f56:	4288      	cmp	r0, r1
    1f58:	d902      	bls.n	1f60 <memmove+0xc>
    1f5a:	188b      	adds	r3, r1, r2
    1f5c:	4298      	cmp	r0, r3
    1f5e:	d308      	bcc.n	1f72 <memmove+0x1e>
    1f60:	2300      	movs	r3, #0
    1f62:	429a      	cmp	r2, r3
    1f64:	d007      	beq.n	1f76 <memmove+0x22>
    1f66:	5ccc      	ldrb	r4, [r1, r3]
    1f68:	54c4      	strb	r4, [r0, r3]
    1f6a:	3301      	adds	r3, #1
    1f6c:	e7f9      	b.n	1f62 <memmove+0xe>
    1f6e:	5c8b      	ldrb	r3, [r1, r2]
    1f70:	5483      	strb	r3, [r0, r2]
    1f72:	3a01      	subs	r2, #1
    1f74:	d2fb      	bcs.n	1f6e <memmove+0x1a>
    1f76:	bd10      	pop	{r4, pc}

00001f78 <_free_r>:
    1f78:	b570      	push	{r4, r5, r6, lr}
    1f7a:	0005      	movs	r5, r0
    1f7c:	2900      	cmp	r1, #0
    1f7e:	d010      	beq.n	1fa2 <_free_r+0x2a>
    1f80:	1f0c      	subs	r4, r1, #4
    1f82:	6823      	ldr	r3, [r4, #0]
    1f84:	2b00      	cmp	r3, #0
    1f86:	da00      	bge.n	1f8a <_free_r+0x12>
    1f88:	18e4      	adds	r4, r4, r3
    1f8a:	0028      	movs	r0, r5
    1f8c:	f000 f8d4 	bl	2138 <__malloc_lock>
    1f90:	4a1d      	ldr	r2, [pc, #116]	; (2008 <STACK_SIZE+0x8>)
    1f92:	6813      	ldr	r3, [r2, #0]
    1f94:	2b00      	cmp	r3, #0
    1f96:	d105      	bne.n	1fa4 <_free_r+0x2c>
    1f98:	6063      	str	r3, [r4, #4]
    1f9a:	6014      	str	r4, [r2, #0]
    1f9c:	0028      	movs	r0, r5
    1f9e:	f000 f8cc 	bl	213a <__malloc_unlock>
    1fa2:	bd70      	pop	{r4, r5, r6, pc}
    1fa4:	42a3      	cmp	r3, r4
    1fa6:	d909      	bls.n	1fbc <_free_r+0x44>
    1fa8:	6821      	ldr	r1, [r4, #0]
    1faa:	1860      	adds	r0, r4, r1
    1fac:	4283      	cmp	r3, r0
    1fae:	d1f3      	bne.n	1f98 <_free_r+0x20>
    1fb0:	6818      	ldr	r0, [r3, #0]
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	1841      	adds	r1, r0, r1
    1fb6:	6021      	str	r1, [r4, #0]
    1fb8:	e7ee      	b.n	1f98 <_free_r+0x20>
    1fba:	0013      	movs	r3, r2
    1fbc:	685a      	ldr	r2, [r3, #4]
    1fbe:	2a00      	cmp	r2, #0
    1fc0:	d001      	beq.n	1fc6 <_free_r+0x4e>
    1fc2:	42a2      	cmp	r2, r4
    1fc4:	d9f9      	bls.n	1fba <_free_r+0x42>
    1fc6:	6819      	ldr	r1, [r3, #0]
    1fc8:	1858      	adds	r0, r3, r1
    1fca:	42a0      	cmp	r0, r4
    1fcc:	d10b      	bne.n	1fe6 <_free_r+0x6e>
    1fce:	6820      	ldr	r0, [r4, #0]
    1fd0:	1809      	adds	r1, r1, r0
    1fd2:	1858      	adds	r0, r3, r1
    1fd4:	6019      	str	r1, [r3, #0]
    1fd6:	4282      	cmp	r2, r0
    1fd8:	d1e0      	bne.n	1f9c <_free_r+0x24>
    1fda:	6810      	ldr	r0, [r2, #0]
    1fdc:	6852      	ldr	r2, [r2, #4]
    1fde:	1841      	adds	r1, r0, r1
    1fe0:	6019      	str	r1, [r3, #0]
    1fe2:	605a      	str	r2, [r3, #4]
    1fe4:	e7da      	b.n	1f9c <_free_r+0x24>
    1fe6:	42a0      	cmp	r0, r4
    1fe8:	d902      	bls.n	1ff0 <_free_r+0x78>
    1fea:	230c      	movs	r3, #12
    1fec:	602b      	str	r3, [r5, #0]
    1fee:	e7d5      	b.n	1f9c <_free_r+0x24>
    1ff0:	6821      	ldr	r1, [r4, #0]
    1ff2:	1860      	adds	r0, r4, r1
    1ff4:	4282      	cmp	r2, r0
    1ff6:	d103      	bne.n	2000 <STACK_SIZE>
    1ff8:	6810      	ldr	r0, [r2, #0]
    1ffa:	6852      	ldr	r2, [r2, #4]
    1ffc:	1841      	adds	r1, r0, r1
    1ffe:	6021      	str	r1, [r4, #0]
    2000:	6062      	str	r2, [r4, #4]
    2002:	605c      	str	r4, [r3, #4]
    2004:	e7ca      	b.n	1f9c <_free_r+0x24>
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	200000c4 	.word	0x200000c4

0000200c <_malloc_r>:
    200c:	2303      	movs	r3, #3
    200e:	b570      	push	{r4, r5, r6, lr}
    2010:	1ccd      	adds	r5, r1, #3
    2012:	439d      	bics	r5, r3
    2014:	3508      	adds	r5, #8
    2016:	0006      	movs	r6, r0
    2018:	2d0c      	cmp	r5, #12
    201a:	d21e      	bcs.n	205a <_malloc_r+0x4e>
    201c:	250c      	movs	r5, #12
    201e:	42a9      	cmp	r1, r5
    2020:	d81d      	bhi.n	205e <_malloc_r+0x52>
    2022:	0030      	movs	r0, r6
    2024:	f000 f888 	bl	2138 <__malloc_lock>
    2028:	4a25      	ldr	r2, [pc, #148]	; (20c0 <_malloc_r+0xb4>)
    202a:	6814      	ldr	r4, [r2, #0]
    202c:	0021      	movs	r1, r4
    202e:	2900      	cmp	r1, #0
    2030:	d119      	bne.n	2066 <_malloc_r+0x5a>
    2032:	4c24      	ldr	r4, [pc, #144]	; (20c4 <_malloc_r+0xb8>)
    2034:	6823      	ldr	r3, [r4, #0]
    2036:	2b00      	cmp	r3, #0
    2038:	d103      	bne.n	2042 <_malloc_r+0x36>
    203a:	0030      	movs	r0, r6
    203c:	f000 f86a 	bl	2114 <_sbrk_r>
    2040:	6020      	str	r0, [r4, #0]
    2042:	0029      	movs	r1, r5
    2044:	0030      	movs	r0, r6
    2046:	f000 f865 	bl	2114 <_sbrk_r>
    204a:	1c43      	adds	r3, r0, #1
    204c:	d12c      	bne.n	20a8 <_malloc_r+0x9c>
    204e:	230c      	movs	r3, #12
    2050:	0030      	movs	r0, r6
    2052:	6033      	str	r3, [r6, #0]
    2054:	f000 f871 	bl	213a <__malloc_unlock>
    2058:	e003      	b.n	2062 <_malloc_r+0x56>
    205a:	2d00      	cmp	r5, #0
    205c:	dadf      	bge.n	201e <_malloc_r+0x12>
    205e:	230c      	movs	r3, #12
    2060:	6033      	str	r3, [r6, #0]
    2062:	2000      	movs	r0, #0
    2064:	bd70      	pop	{r4, r5, r6, pc}
    2066:	680b      	ldr	r3, [r1, #0]
    2068:	1b5b      	subs	r3, r3, r5
    206a:	d41a      	bmi.n	20a2 <_malloc_r+0x96>
    206c:	2b0b      	cmp	r3, #11
    206e:	d903      	bls.n	2078 <_malloc_r+0x6c>
    2070:	600b      	str	r3, [r1, #0]
    2072:	18cc      	adds	r4, r1, r3
    2074:	6025      	str	r5, [r4, #0]
    2076:	e003      	b.n	2080 <_malloc_r+0x74>
    2078:	428c      	cmp	r4, r1
    207a:	d10e      	bne.n	209a <_malloc_r+0x8e>
    207c:	6863      	ldr	r3, [r4, #4]
    207e:	6013      	str	r3, [r2, #0]
    2080:	0030      	movs	r0, r6
    2082:	f000 f85a 	bl	213a <__malloc_unlock>
    2086:	0020      	movs	r0, r4
    2088:	2207      	movs	r2, #7
    208a:	300b      	adds	r0, #11
    208c:	1d23      	adds	r3, r4, #4
    208e:	4390      	bics	r0, r2
    2090:	1ac3      	subs	r3, r0, r3
    2092:	d0e7      	beq.n	2064 <_malloc_r+0x58>
    2094:	425a      	negs	r2, r3
    2096:	50e2      	str	r2, [r4, r3]
    2098:	e7e4      	b.n	2064 <_malloc_r+0x58>
    209a:	684b      	ldr	r3, [r1, #4]
    209c:	6063      	str	r3, [r4, #4]
    209e:	000c      	movs	r4, r1
    20a0:	e7ee      	b.n	2080 <_malloc_r+0x74>
    20a2:	000c      	movs	r4, r1
    20a4:	6849      	ldr	r1, [r1, #4]
    20a6:	e7c2      	b.n	202e <_malloc_r+0x22>
    20a8:	2303      	movs	r3, #3
    20aa:	1cc4      	adds	r4, r0, #3
    20ac:	439c      	bics	r4, r3
    20ae:	42a0      	cmp	r0, r4
    20b0:	d0e0      	beq.n	2074 <_malloc_r+0x68>
    20b2:	1a21      	subs	r1, r4, r0
    20b4:	0030      	movs	r0, r6
    20b6:	f000 f82d 	bl	2114 <_sbrk_r>
    20ba:	1c43      	adds	r3, r0, #1
    20bc:	d1da      	bne.n	2074 <_malloc_r+0x68>
    20be:	e7c6      	b.n	204e <_malloc_r+0x42>
    20c0:	200000c4 	.word	0x200000c4
    20c4:	200000c8 	.word	0x200000c8

000020c8 <_realloc_r>:
    20c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ca:	0007      	movs	r7, r0
    20cc:	000d      	movs	r5, r1
    20ce:	0016      	movs	r6, r2
    20d0:	2900      	cmp	r1, #0
    20d2:	d105      	bne.n	20e0 <_realloc_r+0x18>
    20d4:	0011      	movs	r1, r2
    20d6:	f7ff ff99 	bl	200c <_malloc_r>
    20da:	0004      	movs	r4, r0
    20dc:	0020      	movs	r0, r4
    20de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20e0:	2a00      	cmp	r2, #0
    20e2:	d103      	bne.n	20ec <_realloc_r+0x24>
    20e4:	f7ff ff48 	bl	1f78 <_free_r>
    20e8:	0034      	movs	r4, r6
    20ea:	e7f7      	b.n	20dc <_realloc_r+0x14>
    20ec:	f000 f826 	bl	213c <_malloc_usable_size_r>
    20f0:	002c      	movs	r4, r5
    20f2:	4286      	cmp	r6, r0
    20f4:	d9f2      	bls.n	20dc <_realloc_r+0x14>
    20f6:	0031      	movs	r1, r6
    20f8:	0038      	movs	r0, r7
    20fa:	f7ff ff87 	bl	200c <_malloc_r>
    20fe:	1e04      	subs	r4, r0, #0
    2100:	d0ec      	beq.n	20dc <_realloc_r+0x14>
    2102:	0029      	movs	r1, r5
    2104:	0032      	movs	r2, r6
    2106:	f7ff ff1c 	bl	1f42 <memcpy>
    210a:	0029      	movs	r1, r5
    210c:	0038      	movs	r0, r7
    210e:	f7ff ff33 	bl	1f78 <_free_r>
    2112:	e7e3      	b.n	20dc <_realloc_r+0x14>

00002114 <_sbrk_r>:
    2114:	2300      	movs	r3, #0
    2116:	b570      	push	{r4, r5, r6, lr}
    2118:	4c06      	ldr	r4, [pc, #24]	; (2134 <_sbrk_r+0x20>)
    211a:	0005      	movs	r5, r0
    211c:	0008      	movs	r0, r1
    211e:	6023      	str	r3, [r4, #0]
    2120:	f7ff fa18 	bl	1554 <_sbrk>
    2124:	1c43      	adds	r3, r0, #1
    2126:	d103      	bne.n	2130 <_sbrk_r+0x1c>
    2128:	6823      	ldr	r3, [r4, #0]
    212a:	2b00      	cmp	r3, #0
    212c:	d000      	beq.n	2130 <_sbrk_r+0x1c>
    212e:	602b      	str	r3, [r5, #0]
    2130:	bd70      	pop	{r4, r5, r6, pc}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	20000128 	.word	0x20000128

00002138 <__malloc_lock>:
    2138:	4770      	bx	lr

0000213a <__malloc_unlock>:
    213a:	4770      	bx	lr

0000213c <_malloc_usable_size_r>:
    213c:	1f0b      	subs	r3, r1, #4
    213e:	681b      	ldr	r3, [r3, #0]
    2140:	1f18      	subs	r0, r3, #4
    2142:	2b00      	cmp	r3, #0
    2144:	da01      	bge.n	214a <_malloc_usable_size_r+0xe>
    2146:	580b      	ldr	r3, [r1, r0]
    2148:	18c0      	adds	r0, r0, r3
    214a:	4770      	bx	lr
    214c:	42000800 	.word	0x42000800
    2150:	42000c00 	.word	0x42000c00
    2154:	42001000 	.word	0x42001000
    2158:	42001400 	.word	0x42001400
    215c:	42001800 	.word	0x42001800
    2160:	42001c00 	.word	0x42001c00
    2164:	00000cde 	.word	0x00000cde
    2168:	00000cda 	.word	0x00000cda
    216c:	00000cda 	.word	0x00000cda
    2170:	00000d40 	.word	0x00000d40
    2174:	00000d40 	.word	0x00000d40
    2178:	00000cf2 	.word	0x00000cf2
    217c:	00000ce4 	.word	0x00000ce4
    2180:	00000cf8 	.word	0x00000cf8
    2184:	00000d2e 	.word	0x00000d2e
    2188:	00000f00 	.word	0x00000f00
    218c:	00000ee0 	.word	0x00000ee0
    2190:	00000ee0 	.word	0x00000ee0
    2194:	00000f6c 	.word	0x00000f6c
    2198:	00000ef2 	.word	0x00000ef2
    219c:	00000f0e 	.word	0x00000f0e
    21a0:	00000ee4 	.word	0x00000ee4
    21a4:	00000f1c 	.word	0x00000f1c
    21a8:	00000f5c 	.word	0x00000f5c
    21ac:	6c6c6548 	.word	0x6c6c6548
    21b0:	6f57206f 	.word	0x6f57206f
    21b4:	21646c72 	.word	0x21646c72
    21b8:	00000a0d 	.word	0x00000a0d
    21bc:	0a0d6425 	.word	0x0a0d6425
    21c0:	00000000 	.word	0x00000000
    21c4:	2b302d23 	.word	0x2b302d23
    21c8:	6c680020 	.word	0x6c680020
    21cc:	6665004c 	.word	0x6665004c
    21d0:	47464567 	.word	0x47464567
    21d4:	00          	.byte	0x00
    21d5:	30          	.byte	0x30
    21d6:	3231      	.short	0x3231
    21d8:	36353433 	.word	0x36353433
    21dc:	41393837 	.word	0x41393837
    21e0:	45444342 	.word	0x45444342
    21e4:	31300046 	.word	0x31300046
    21e8:	35343332 	.word	0x35343332
    21ec:	39383736 	.word	0x39383736
    21f0:	64636261 	.word	0x64636261
    21f4:	00006665 	.word	0x00006665

000021f8 <_init>:
    21f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21fe:	bc08      	pop	{r3}
    2200:	469e      	mov	lr, r3
    2202:	4770      	bx	lr

00002204 <__init_array_start>:
    2204:	000000dd 	.word	0x000000dd

00002208 <_fini>:
    2208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    220e:	bc08      	pop	{r3}
    2210:	469e      	mov	lr, r3
    2212:	4770      	bx	lr

00002214 <__fini_array_start>:
    2214:	000000b5 	.word	0x000000b5
